{"version":3,"sources":["webpack:///./src/services/escola-lms/enums.ts","webpack:///./src/components/CourseStatistics/ExportStatsButton.tsx","webpack:///./src/components/CourseStatistics/userProgress.tsx","webpack:///./node_modules/@ant-design/pro-table/es/components/EditableTable/index.js","webpack:///./node_modules/@ant-design/plots/es/components/column/index.js","webpack:///./node_modules/@ant-design/icons-svg/es/asn/LineChartOutlined.js","webpack:///./node_modules/@ant-design/icons/es/icons/LineChartOutlined.js","webpack:///./src/services/escola-lms/exams.ts","webpack:///./src/pages/TeacherSubjects/components/ConvertGradesModal.tsx","webpack:///./src/pages/TeacherSubjects/components/ExamForm.tsx","webpack:///./src/pages/TeacherSubjects/components/ExamResults.tsx","webpack:///./src/pages/TeacherSubjects/components/Exams.tsx","webpack:///./src/services/escola-lms/chats.ts","webpack:///./src/pages/TeacherSubjects/components/CreateTeamsChatButton.tsx","webpack:///./src/pages/TeacherSubjects/components/Students.tsx","webpack:///./src/services/escola-lms/attendances.ts","webpack:///./src/components/AttendanceCheckbox/utils.ts","webpack:///./src/components/AttendanceCheckbox/index.tsx","webpack:///./src/pages/TeacherSubjects/components/Attendances.tsx","webpack:///./src/services/escola-lms/grades.ts","webpack:///./src/pages/TeacherSubjects/components/GradesScale.tsx","webpack:///./src/services/escola-lms/schedules.ts","webpack:///./src/pages/TeacherSubjects/components/Schedule.tsx","webpack:///./src/pages/TeacherSubjects/components/FinalGradesDetails/utils.ts","webpack:///./src/pages/TeacherSubjects/components/FinalGradesDetails/hooks.ts","webpack:///./src/pages/TeacherSubjects/components/FinalGradesDetails/index.tsx","webpack:///./src/pages/TeacherSubjects/components/FinalGradesList.tsx","webpack:///./src/pages/TeacherSubjects/components/FileExportsHistory.tsx","webpack:///./src/pages/TeacherSubjects/components/FinalGradeSelect.tsx","webpack:///./src/pages/TeacherSubjects/components/ExamGradeInput.tsx","webpack:///./src/pages/TeacherSubjects/components/ClassRegister/utils.tsx","webpack:///./src/pages/TeacherSubjects/components/ClassRegister/index.tsx","webpack:///./src/pages/TeacherSubjects/form.tsx","webpack:///./src/components/ProgramForm/Context/index.tsx","webpack:///./src/services/escola-lms/reports.ts"],"names":["TopicType","EventTypes","CourseStatus","TemplateChannelValue","TemplateEvents","VouchersTypes","QuestionType","AttendanceValue","ExamGradeType","CompetencyChallengeType","ExportStatsButton","course_id","stat","useState","loading","setLoading","onClickFactory","useCallback","courseId","exportStatForCourse","response","Blob","downloadLink","document","createElement","href","window","URL","createObjectURL","download","body","appendChild","click","removeChild","console","error","findH5PType","topic","topicable","content","contents","Object","values","library","UserProgress","topics","stats","showSeconds","setShowSeconds","columns","useMemo","title","dataIndex","render","id","map","type","topicable_type","split","pop","row","result","minutes","started_at","finished_at","seconds","toFixed","dataSource","userStat","reduce","acc","find","userStatTopic","Number","email","v","x","UserCourseFinish","UserCourseAttempts","choosenUserEmail","setChoosenUserEmail","choosenAttempt","setChoosenAttempt","intl","useIntl","flatMap","userStats","attempts","dates","attempt","datesValue","date","seconds_total","config","xField","yField","seriesField","isStack","xAxis","label","autoHide","autoRotate","slider","start","end","position","layout","newValue","Set","filter","overflow","minHeight","width","formatMessage","formatter","datum","Math","floor","name","value","isInteger","_excluded","_excluded2","EditableTableActionContext","React","createContext","undefined","props","children","record","newRecordType","parentKey","actionRef","useContext","cloneElement","_objectSpread","onClick","_onClick","_asyncToGenerator","_regeneratorRuntime","mark","e","_children$props$onCli","_children$props","_actionRef$current","isOk","wrap","_context","prev","next","call","sent","abrupt","current","addEditRecord","stop","_callee","_x","apply","arguments","_props$editable2","_props$editable4","onTableChange","maxLength","formItemProps","recordCreatorProps","rowKey","controlled","defaultValue","onChange","editableFormRef","rest","_objectWithoutProperties","preData","usePrevious","useRef","formRef","useImperativeHandle","_useMergedState","useMergedState","_useMergedState2","_slicedToArray","setValue","getRowKey","index","coverRowKey","finlayRowKey","length","rowData","rowIndex","findIndex","item","_getRowKey","toString","getRowData","_finlayRowKey$toStrin","_formRef$current","Error","rowKeyName","flat","Boolean","getFieldValue","getRowsData","_formRef$current3","Array","isArray","_formRef$current2","getFieldsValue","keys","key","setRowData","data","_finlayRowKey$toStrin2","_formRef$current4","_formRef$current4$get","_formRef$current5","oldTableDate","updateValues","set","setFieldsValue","useEffect","forEach","_formRef$current6","_defineProperty","_props$editable","editable","form","_ref","creatorButtonText","style","restButtonProps","isTop","creatorButtonDom","_jsx","RecordCreator","runFunction","_Button","display","margin","icon","PlusOutlined","getMessage","buttonRenderProps","components","header","wrapper","_ref2","_rest$columns","className","_jsxs","colSpan","visibility","left","tableViewRender","_","dom","_props$tableViewRende","_props$tableViewRende2","_Fragment","editableProps","newOnValueChange","useRefFunction","r","_props$editable3","_props$editable3$onVa","_props$onValuesChange","onValuesChange","_props$onChange","Provider","ProTable","search","options","pagination","revalidateOnFocus","tableLayout","formProps","onDataSourceChange","_formRef$current7","ProFormDependency","changeValue","_props$editable5","_props$editable5$onVa","list","get","changeItem","isDeepEqualReact","ProForm","useFormInstance","_Form","Item","maxWidth","EditableTable","FieldEditableTable","__rest","s","t","p","prototype","hasOwnProperty","indexOf","getOwnPropertySymbols","i","propertyIsEnumerable","ColumnChart","forwardRef","ref","chartRef","_a","height","loadingTemplate","errorTemplate","_b","useChart","G2plotColumn","chart","container","getChart","ErrorBoundary","ChartLoading","theme","params","request","method","useCache","headers","exam_id","user_id","FileExamGradeType","onDataConverted","groupSelectDisabled","useTeacherSubject","semester_subject_id","teacherSubjectData","selectedGroup","setSelectedGroup","groupOptions","groups","reqData","group_id","onUploadFile","success","exam_results","results","info","fileList","ManualExamGradeType","groupUsers","onSelectedGroupChange","currGroup","byId","users","first_name","last_name","academic_teacher_id","FILE_TYPES","TeamsLecture","TestPortal","TeamsForms","ConvertGradesModal","open","closeModal","onSuccess","fetchGroupUsers","convertedData","setConvertedData","Manual","disabled","includes","SelectTypeButtonsGroup","onSelect","staticColumns","valueType","rules","required","message","min","max","ExamForm","useForm","selectedType","setSelectedType","fetching","setFetching","getGroupById","editableKeys","numExamId","resetFields","isNaN","getExam","then","res","weight","passed_at","finally","resetState","formData","areExamResultsValid","every","createExam","updateExam","history","push","bodyStyle","paddingInline","hideInSearch","ExamResults","setTitle","total","sorter","format","Date","DAY_FORMAT","created_at","semester","year","Exams","location","useLocation","query","sort","pageSize","sortArr","entries","getExams","per_page","page","order_by","order","meta","deleteExam","reload","CreateTeamsChatButton","student_id","createTeamsChat","web_url","TableColumns","getGroupsOptions","subjectGroups","getTableData","studentUserGroups","curr","userTable","innerAcc","currentUser","group_name","Students","fetchAllStudentsAndGroups","parent_id","tableData","toLowerCase","hideInTable","filterMultiple","fieldProps","mode","_n","attendances","attendance","attendanceMapped","ABSENT","attendanceMap","PRESENT","ch1","ch2","PRESENT_NOT_EXERCISING","EXCUSED_ABSENCE","statusStr","statusMap","true_false","true_true","false_false","false_true","AttendanceCheckbox","groupAttendanceScheduleId","studentId","parseToStatus","status","setStatus","firstMount","handleChangeAttendance","changeStudentAttendance","parseToAttendanceValue","onCh1Change","target","checked","onCh2Change","Attendances","dynamicCols","setDynamicCols","selectedGroupName","setSelectedGroupName","allowClear","fixed","defaultMessage","full_name","Promise","all","fetchStudentUserGroup","fetchGroupAttendanceSchedule","studentUserGroupRes","groupAttendanceScheduleRes","String","date_from","align","studentFullName","studentAttendances","groupAttendanceSchedule","studentAttendance","a","b","localeCompare","tutor_id","s_subject_scale_form_id","final_grade_id","GradeScaleTable","subjectTutorGradeScale","onFormSubmit","setEditableKeys","gradeScaleWithIds","scale","setFieldValue","_p","submit","padding","startEditable","saveText","actionRender","_r","_c","save","GradesScale","useModel","initialState","tutors","subjectTutorGrades","setSubjectTutorGrades","selectedTutor","setSelectedTutor","tutorViewing","tutorsSelectOptions","refreshSubjectTutorGrades","getSubjectTutorGrades","onFormSubmitFactory","subjectTutorGradeScales","grade_scale","tutorGradeScale","table","grade","grade_value","createSubjectTutorGrades","textAlign","Schedule","selectedEvent","setSelectedEvent","eventData","setEventData","now","moment","events","event","group","term_status","toDate","date_to","tutor_name","tutor","tutor_email","subject","ms_teams_join_url","fetchEvents","fetchAllSchedules","date_form","handleEventClick","handleModalClose","checkDate","isSame","isAfter","dateCellRender","filteredEvents","handlePanelChange","startOf","subtract","endOf","add","initialStartDate","initialEndDate","DAYTIME_FORMAT","getStudentExamsFromExams","exams","exam","examResult","getProposedGrade","studentExams","tutorGradeScales","sum","weightsSum","weightedAverage","sortedGradeScales","isWeightedAverageGreater","at","firstFalseIndex","getScalesBySubjectScaleFormId","tutorGrades","finalGrades","setFinalGrades","getUserFinalGrades","gradeTerms","setGradeTerms","getGradeTerms","subjectGradeScales","setSubjectGradeScales","getSubjectGradeScales","setTutorGradeScales","userAttendanceSchedules","setUserAttendanceSchedules","fetchUserAttendanceSchedules","filteredSchedules","attendanceItem","setStudentExams","userCourses","setUserCourses","userCoursesStats","setUserCoursesStats","userCoursesTopics","setUserCoursesTopics","course","program","responses","getFlatTopics","lessons","getCourseStats","finishedTopics","attendanceList","tutorGradeScalesColumns","userAttendanceColumns","studentExamsColumns","finalGradesColumns","grade_date","grade_name","TABLE_PAGE_SIZE","FinalGradesDetails","useStudentExams","useFinalGrades","useGradeTerms","useSubjectGradeScales","useTutorGradeScales","useUserAttendanceSchedules","useUserCoursesStats","gradeTermsSelectOptions","gradesSelectOptions","proposedGrade","onFinalGradeSubmit","grade_scale_id","grade_term_id","existingFinalGrade","grades","grade_term","updateFinalGrade","createFinalGrade","lesson_group_user_id","finalGradesTableData","term","areStatisticsLoading","isStatisticDataPresent","fontSize","fontWeight","user","flexDirection","paddingTop","flex","gap","FinalGradesList","group_ids","allGroups","getGroupFinalGrades","DownloadButton","url","DATETIME_FORMAT","renderFormItem","defaultRender","stateType","created_by","exported_at","exported_by","FileExportsHistory","getPCGExportsHistory","getGradeScaleId","gradeScales","FinalGradeSelect","defaultFinalGrade","createdGrade","setCreatedGrade","recentGrade","ExamGradeInput","debounce","createExamResult","getAttendanceCols","getStudentAttendances","groupAttendanceSchedules","getExamsCols","getStudentExamResults","getFinalGradesCols","final_grades","getStudentFinalGrades","finalGradeItem","getFinalGrades","studentFinalGrade","ClassRegister","fetchGroupFinalGrades","finalGradesRes","fetchExams","fetchSubjectTutorGrades","fetchGradeTerms","fetchSubjectGradeScales","examsRes","tutorGradesRes","gradeTermsRes","subjectGradeScalesRes","attendanceCols","examsCols","finalGradeCols","studentFinalGrades","tutorScales","proposed_grade","studentExamResults","groupName","TeacherSubjectsFormContent","tab","setInitialState","currentUserHasPermissions","isUserHavePermissions","showGradeScale","PERMISSIONS","TeacherListGradeScale","breadcrumb","routes","path","breadcrumbName","activeKey","useParams","subjectId","Context","getRandomId","round","random","getFlatLessons","recursiveAddTopicToLessons","lessonId","lesson","recursiveAddLessonToLessons","newLesson","recursiveEditLesson","updatedLesson","appendParentIdToLessons","lessonParentId","recursiveDeleteLesson","recursiveDeleteTopic","topicId","recursiveTopicUploaded","prevTopicId","lesson_id","file","AppContext","state","setState","flatTopics","flatLessons","h5ps","setH5ps","l","getLessons","getLessonIdByTopicId","topic_id","lesson_item","currentEditMode","addNewLesson","parentId","isNew","active","prevState","updateLesson","apiCreateLesson","apiUpdateLesson","deleteLesson","apiRemoveLesson","updateTopic","topic_item","apiCreateTopic","apiUpdateTopic","Video","setTimeout","deleteTopic","apiRemoveTopic","addNewTopic","newTopic","onTopicUploaded","cloneTopic","apiCloneTopic","cloneLesson","apiCloneLesson","responseType","accept"],"mappings":"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","file":"p__TeacherSubjects__form.858d058d.async.js","sourcesContent":["export enum TopicType {\n  Unselected = '',\n  RichText = 'EscolaLms\\\\TopicTypes\\\\Models\\\\TopicContent\\\\RichText',\n  OEmbed = 'EscolaLms\\\\TopicTypes\\\\Models\\\\TopicContent\\\\OEmbed',\n  Audio = 'EscolaLms\\\\TopicTypes\\\\Models\\\\TopicContent\\\\Audio',\n  Video = 'EscolaLms\\\\TopicTypes\\\\Models\\\\TopicContent\\\\Video',\n  H5P = 'EscolaLms\\\\TopicTypes\\\\Models\\\\TopicContent\\\\H5P',\n  Image = 'EscolaLms\\\\TopicTypes\\\\Models\\\\TopicContent\\\\Image',\n  PDF = 'EscolaLms\\\\TopicTypes\\\\Models\\\\TopicContent\\\\PDF',\n  SCORM = 'EscolaLms\\\\TopicTypes\\\\Models\\\\TopicContent\\\\ScormSco',\n  Project = 'EscolaLms\\\\TopicTypeProject\\\\Models\\\\Project',\n  GiftQuiz = 'EscolaLms\\\\TopicTypeGift\\\\Models\\\\GiftQuiz',\n}\n\nexport enum EventTypes {\n  OrderPaid = 'EscolaLms\\\\Cart\\\\Events\\\\OrderPaid',\n  UserLogged = 'EscolaLms\\\\Auth\\\\Events\\\\UserLogged',\n}\n\nexport enum CourseStatus {\n  draft = 'draft',\n  published = 'published',\n  archived = 'archived',\n}\n\nexport enum TemplateChannelValue {\n  email = 'EscolaLms\\\\TemplatesEmail\\\\Core\\\\EmailChannel',\n  pdf = 'EscolaLms\\\\TemplatesPdf\\\\Core\\\\PdfChannel',\n  sms = 'EscolaLms\\\\TemplatesSms\\\\Core\\\\SmsChannel',\n}\n\nexport enum TemplateEvents {\n  ManuallyTriggeredEvent = 'EscolaLms\\\\Templates\\\\Events\\\\ManuallyTriggeredEvent',\n}\n\nexport enum VouchersTypes {\n  cart_fixed = 'cart_fixed',\n  cart_percent = 'cart_percent',\n  product_fixed = 'product_fixed',\n  product_percent = 'product_percent',\n}\n\nexport type BuyableTypes =\n  | 'App\\\\Models\\\\Course'\n  | 'App\\\\Models\\\\Consultation'\n  | 'App\\\\Models\\\\Webinar'\n  | 'App\\\\Models\\\\StationaryEvent'\n  | 'EscolaLms\\\\Courses\\\\Models\\\\Course'\n  | 'EscolaLms\\\\Consultations\\\\Models\\\\Consultation'\n  | 'EscolaLms\\\\Webinars\\\\Models\\\\Webinar'\n  | 'EscolaLms\\\\StationaryEvents\\\\Models\\\\StationaryEvent';\n\nexport enum QuestionType {\n  MULTIPLE_CHOICE = 'multiple_choice',\n  MULTIPLE_CHOICE_WITH_MULTIPLE_RIGHT_ANSWERS = 'multiple_choice_with_multiple_right_answers',\n  TRUE_FALSE = 'true_false',\n  SHORT_ANSWERS = 'short_answers',\n  MATCHING = 'matching',\n  NUMERICAL_QUESTION = 'numerical_question',\n  ESSAY = 'essay',\n  DESCRIPTION = 'description',\n}\n\nexport enum AttendanceValue {\n  PRESENT = 'present',\n  PRESENT_NOT_EXERCISING = 'present_not_exercising',\n  ABSENT = 'absent',\n  EXCUSED_ABSENCE = 'excused_absence',\n}\n\nexport enum ExamGradeType {\n  Manual = 'manual',\n  TeamsForms = 'teams_forms',\n  TeamsLecture = 'teams_lecture',\n  TestPortal = 'test_portal',\n}\n\nexport enum CompetencyChallengeType {\n  Simple = 'simple',\n  Complex = 'complex',\n}\n","import React, { useCallback, useState } from 'react';\nimport { FormattedMessage } from 'umi';\nimport { Button } from 'antd';\nimport { ExportOutlined } from '@ant-design/icons';\n\nimport { exportStatForCourse } from '@/services/escola-lms/reports';\n\ninterface Props {\n  course_id: number;\n  stat?: API.ExportStatForCourseStat;\n}\n\nexport const ExportStatsButton: React.FC<Props> = ({\n  course_id,\n  stat = 'EscolaLms\\\\Reports\\\\Stats\\\\Course\\\\FinishedTopics',\n}) => {\n  const [loading, setLoading] = useState(false);\n\n  const onClickFactory = useCallback(\n    (courseId: number) => async () => {\n      setLoading(true);\n      try {\n        const response = await exportStatForCourse(courseId, {\n          stat,\n        });\n\n        if (response instanceof Blob) {\n          const downloadLink = document.createElement('a');\n          downloadLink.href = window.URL.createObjectURL(response);\n          downloadLink.download = `finished_topics_${course_id}.xlsx`;\n          document.body.appendChild(downloadLink);\n          downloadLink.click();\n          document.body.removeChild(downloadLink);\n        }\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setLoading(false);\n      }\n    },\n    [stat],\n  );\n\n  return (\n    <Button type=\"primary\" loading={loading} onClick={onClickFactory(course_id)}>\n      <ExportOutlined /> <FormattedMessage id=\"export\" />\n    </Button>\n  );\n};\n","import React, { useMemo, useState } from 'react';\nimport { Row, Select, Space, Switch, Table, Tag } from 'antd';\nimport type { ColumnsType } from 'antd/es/table';\nimport ProCard from '@ant-design/pro-card';\nimport { Column } from '@ant-design/plots';\nimport { FormattedMessage, useIntl } from 'umi';\n\nimport TypeButtonDrawer from '../TypeButtonDrawer';\nimport { ExportStatsButton } from './ExportStatsButton';\n\ntype UserStatColumn = Record<string, number | string | API.FinishedTopicsUserStat> & {\n  email: string;\n  id: number;\n};\n\nconst findH5PType = (topic: API.TopicH5P) => {\n  if (topic.topicable.content.contents) {\n    return Object.values(topic.topicable.content.contents)[0].library;\n  }\n  return 'H5P';\n};\n\nexport const UserProgress: React.FC<{\n  course_id: number;\n  topics: API.Topic[];\n  stats: API.FinishedTopicsUserStats[];\n}> = ({ course_id, topics, stats }) => {\n  const [showSeconds, setShowSeconds] = useState(false);\n  const columns: ColumnsType<UserStatColumn> = useMemo(() => {\n    return [\n      {\n        title: <FormattedMessage id=\"user\" />,\n        dataIndex: 'id',\n        render: (id: number) => <TypeButtonDrawer type=\"App\\Models\\User\" type_id={id} />,\n      },\n      {\n        title: <FormattedMessage id=\"email\" />,\n        dataIndex: 'email',\n      },\n      ...topics.map((topic) => {\n        let type: string | undefined = topic.topicable_type?.split('\\\\').pop();\n\n        if (type === 'H5P') {\n          type = findH5PType(topic as API.TopicH5P);\n        }\n\n        return {\n          render: (row: API.FinishedTopicsUserStat | undefined) => {\n            let result = 0;\n            let minutes = 0;\n            if (row) {\n              if (row.started_at && row.finished_at) {\n                result = 1;\n              } else if (row.started_at) {\n                result = 2;\n              }\n              minutes = row.seconds / 60;\n            }\n\n            switch (result) {\n              case 1:\n                return (\n                  <Space>\n                    <Tag color=\"success\">F</Tag>\n                    {showSeconds && <small>{minutes.toFixed(2)}m</small>}\n                  </Space>\n                );\n              case 2:\n                return (\n                  <Space>\n                    <Tag color=\"blue\">S</Tag>\n                    {showSeconds && <small>{minutes.toFixed(2)}m</small>}\n                  </Space>\n                );\n              case 0:\n              default:\n                return (\n                  <React.Fragment>\n                    <Tag color=\"error\">N</Tag>\n                  </React.Fragment>\n                );\n            }\n          },\n\n          title: (\n            <small>\n              <Tag>{type}</Tag> {topic.title}\n            </small>\n          ),\n          dataIndex: topic.id,\n        };\n      }),\n    ];\n  }, [topics, showSeconds]);\n\n  const dataSource: UserStatColumn[] = useMemo(() => {\n    return stats.map((userStat) =>\n      topics.reduce(\n        (acc, topic) => {\n          const result = userStat.topics.find((userStatTopic) => userStatTopic.id === topic.id);\n          return { ...acc, [Number(topic.id)]: result ?? 0 };\n        },\n        { email: userStat.email, id: userStat.id } as UserStatColumn,\n      ),\n    );\n  }, [stats, topics]);\n\n  return (\n    <Table\n      title={() => (\n        <Row justify=\"space-between\" align=\"middle\">\n          <Space>\n            <FormattedMessage id=\"Finished\" defaultMessage=\"Finished:\" />{' '}\n            <Tag color=\"success\">F</Tag>\n            <FormattedMessage id=\"Started\" defaultMessage=\"Started:\" /> <Tag color=\"blue\">S</Tag>\n            <FormattedMessage id=\"NotStarted\" defaultMessage=\"Not Started:\" />{' '}\n            <Tag color=\"error\">N</Tag>\n            <FormattedMessage id=\"ShowMinutes\" defaultMessage=\"Show minutes spent on topic:\" />{' '}\n            <Switch checked={showSeconds} onChange={(v) => setShowSeconds(v)} />\n          </Space>\n          <ExportStatsButton course_id={course_id} />\n        </Row>\n      )}\n      columns={columns}\n      dataSource={dataSource}\n      size=\"small\"\n      scroll={{ x: 1500 }}\n    />\n  );\n};\n\nexport const UserCourseFinish: React.FC<{ stats: API.FinishedCourseUserStats[] }> = ({ stats }) => {\n  const columns: ColumnsType<{ email: string; finished_at: Date | string }> = useMemo(() => {\n    return [\n      {\n        title: 'user',\n        dataIndex: 'id',\n        render: (id: number) => <TypeButtonDrawer type=\"App\\Models\\User\" type_id={id} />,\n      },\n      {\n        title: 'email',\n        dataIndex: 'email',\n      },\n      {\n        title: <FormattedMessage id=\"finished_at\" defaultMessage=\"Finished at\" />,\n        dataIndex: 'finished_at',\n      },\n    ];\n  }, []);\n\n  const dataSource: { email: string; finished_at: Date | string }[] = useMemo(() => {\n    return stats.map(({ id, email, finished_at }) => ({\n      id,\n      email,\n      finished_at,\n    }));\n  }, [stats]);\n\n  return (\n    <Table\n      title={() => (\n        <Space>\n          <FormattedMessage id=\"course.finished\" defaultMessage=\"Finished\" />\n        </Space>\n      )}\n      columns={columns}\n      dataSource={dataSource}\n      size=\"small\"\n      scroll={{ x: 500 }}\n    />\n  );\n};\n\nexport const UserCourseAttempts: React.FC<{ stats: API.CourseAttempts[] }> = ({ stats }) => {\n  const [choosenUserEmail, setChoosenUserEmail] = useState<string | null>(null);\n  const [choosenAttempt, setChoosenAttempt] = useState<number | null>(null);\n  const intl = useIntl();\n\n  const dataSource = useMemo(() => {\n    return stats.flatMap((userStats) =>\n      Object.values(userStats.attempts).flatMap(({ dates, attempt }) => {\n        const datesValue = Object.values(dates).flatMap(({ date, seconds_total }) => {\n          return {\n            date,\n            attempt,\n            seconds_total,\n            email: userStats.email,\n          };\n        });\n\n        return datesValue;\n      }),\n    );\n  }, [stats]);\n\n  const config: any = {\n    xField: 'date',\n    yField: 'seconds_total',\n    seriesField: 'attempt',\n    isStack: true,\n    xAxis: {\n      label: {\n        autoHide: true,\n        autoRotate: false,\n      },\n    },\n    slider: {\n      start: 0,\n      end: 1,\n    },\n    label: {\n      position: 'middle',\n      layout: [\n        {\n          type: 'interval-adjust-position',\n        },\n        {\n          type: 'interval-hide-overlap',\n        },\n        {\n          type: 'adjust-color',\n        },\n      ],\n    },\n  };\n\n  return (\n    <ProCard\n      title={\n        <Space>\n          <FormattedMessage id=\"course.interactions_time_in_days\" />\n          <Select\n            showSearch\n            value={choosenUserEmail}\n            onChange={(newValue) => {\n              setChoosenUserEmail(newValue);\n              setChoosenAttempt(null);\n            }}\n            placeholder={<FormattedMessage id=\"select_person\" defaultMessage=\"Select a person\" />}\n          >\n            {stats.map(({ id, email }) => (\n              <Select.Option key={id} value={email}>\n                {email}\n              </Select.Option>\n            ))}\n          </Select>\n          <Select\n            value={choosenAttempt}\n            onChange={(newValue) => setChoosenAttempt(newValue)}\n            disabled={choosenUserEmail === null}\n            placeholder={<FormattedMessage id=\"select_attempt\" defaultMessage=\"Select attempt\" />}\n          >\n            {[\n              ...new Set(\n                dataSource\n                  .filter(({ email }) => email === choosenUserEmail)\n                  .map(({ attempt }) => attempt),\n              ),\n            ].map((attempt) => (\n              <Select.Option value={attempt} key={attempt}>\n                <FormattedMessage id=\"attempt\" defaultMessage=\"Attempt\" /> {attempt}\n              </Select.Option>\n            ))}\n          </Select>\n        </Space>\n      }\n      colSpan={12}\n      layout=\"center\"\n    >\n      <div style={{ overflow: 'auto', minHeight: '400px', width: '100%' }}>\n        <Column\n          {...config}\n          tooltip={{\n            title: `${intl.formatMessage({ id: 'attempt' })}`,\n            formatter: (datum) => {\n              const minutes = Math.floor(+datum.seconds_total / 60);\n              const seconds = +datum.seconds_total > 60 ? +datum.seconds_total - minutes * 60 : 0;\n\n              return {\n                name: datum.attempt,\n                value: `${minutes}m ${seconds}s`,\n              };\n            },\n          }}\n          data={dataSource\n            .filter(({ email }) => email === choosenUserEmail)\n            .filter(({ attempt }) =>\n              Number.isInteger(choosenAttempt) ? attempt === choosenAttempt : true,\n            )}\n        />\n      </div>\n    </ProCard>\n  );\n};\n","import \"antd/es/form/style\";\nimport _Form from \"antd/es/form\";\nimport \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _regeneratorRuntime from \"@babel/runtime/helpers/esm/regeneratorRuntime\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nvar _excluded = [\"onTableChange\", \"maxLength\", \"formItemProps\", \"recordCreatorProps\", \"rowKey\", \"controlled\", \"defaultValue\", \"onChange\", \"editableFormRef\"],\n    _excluded2 = [\"record\", \"position\", \"creatorButtonText\", \"newRecordType\", \"parentKey\", \"style\"];\nimport { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { PlusOutlined } from '@ant-design/icons';\nimport ProForm, { ProFormDependency } from '@ant-design/pro-form';\nimport { useIntl } from '@ant-design/pro-provider';\nimport { isDeepEqualReact, runFunction, usePrevious, useRefFunction } from '@ant-design/pro-utils';\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport get from \"rc-util/es/utils/get\";\nimport set from \"rc-util/es/utils/set\";\nimport React, { useContext, useEffect, useImperativeHandle, useMemo, useRef } from 'react';\nimport ProTable from '../../Table';\nvar EditableTableActionContext = /*#__PURE__*/React.createContext(undefined);\n/** 可编辑表格的按钮 */\n\nfunction RecordCreator(props) {\n  var children = props.children,\n      record = props.record,\n      position = props.position,\n      newRecordType = props.newRecordType,\n      parentKey = props.parentKey;\n  var actionRef = useContext(EditableTableActionContext);\n  return /*#__PURE__*/React.cloneElement(children, _objectSpread(_objectSpread({}, children.props), {}, {\n    onClick: function () {\n      var _onClick = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(e) {\n        var _children$props$onCli, _children$props, _actionRef$current;\n\n        var isOk;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (_children$props$onCli = (_children$props = children.props).onClick) === null || _children$props$onCli === void 0 ? void 0 : _children$props$onCli.call(_children$props, e);\n\n              case 2:\n                isOk = _context.sent;\n\n                if (!(isOk === false)) {\n                  _context.next = 5;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 5:\n                actionRef === null || actionRef === void 0 ? void 0 : (_actionRef$current = actionRef.current) === null || _actionRef$current === void 0 ? void 0 : _actionRef$current.addEditRecord(record, {\n                  position: position,\n                  newRecordType: newRecordType,\n                  parentKey: parentKey\n                });\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function onClick(_x) {\n        return _onClick.apply(this, arguments);\n      }\n\n      return onClick;\n    }()\n  }));\n}\n/**\n * 可以直接放到 Form 中的可编辑表格\n *\n * @param props\n */\n\n\nfunction EditableTable(props) {\n  var _props$editable2, _props$editable4;\n\n  var intl = useIntl();\n\n  var onTableChange = props.onTableChange,\n      maxLength = props.maxLength,\n      formItemProps = props.formItemProps,\n      recordCreatorProps = props.recordCreatorProps,\n      rowKey = props.rowKey,\n      controlled = props.controlled,\n      defaultValue = props.defaultValue,\n      onChange = props.onChange,\n      editableFormRef = props.editableFormRef,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var preData = usePrevious(props.value);\n  var actionRef = useRef();\n  var formRef = useRef(); // 设置 ref\n\n  useImperativeHandle(rest.actionRef, function () {\n    return actionRef.current;\n  });\n\n  var _useMergedState = useMergedState(function () {\n    return props.value || defaultValue || [];\n  }, {\n    value: props.value,\n    onChange: props.onChange\n  }),\n      _useMergedState2 = _slicedToArray(_useMergedState, 2),\n      value = _useMergedState2[0],\n      setValue = _useMergedState2[1];\n\n  var getRowKey = React.useMemo(function () {\n    if (typeof rowKey === 'function') {\n      return rowKey;\n    }\n\n    return function (record, index) {\n      return record[rowKey] || index;\n    };\n  }, [rowKey]);\n  /**\n   * 根据不同的情况返回不同的 rowKey\n   * @param finlayRowKey\n   * @returns string | number\n   */\n\n  var coverRowKey = function coverRowKey(finlayRowKey) {\n    /**\n     * 如果是 prop.name 的模式，就需要把行号转化成具体的rowKey。\n     */\n    if (typeof finlayRowKey === 'number' && !props.name) {\n      if (finlayRowKey >= value.length) return finlayRowKey;\n      var rowData = value && value[finlayRowKey];\n      return getRowKey === null || getRowKey === void 0 ? void 0 : getRowKey(rowData, finlayRowKey);\n    }\n    /**\n     * 如果是 prop.name 的模式，就直接返回行号\n     */\n\n\n    if ((typeof finlayRowKey === 'string' || finlayRowKey >= value.length) && props.name) {\n      var rowIndex = value.findIndex(function (item, index) {\n        var _getRowKey;\n\n        return (getRowKey === null || getRowKey === void 0 ? void 0 : (_getRowKey = getRowKey(item, index)) === null || _getRowKey === void 0 ? void 0 : _getRowKey.toString()) === (finlayRowKey === null || finlayRowKey === void 0 ? void 0 : finlayRowKey.toString());\n      });\n      return rowIndex;\n    }\n\n    return finlayRowKey;\n  }; // 设置 editableFormRef\n\n\n  useImperativeHandle(editableFormRef, function () {\n    /**\n     * 获取一行数据的\n     * @param rowIndex\n     * @returns T | undefined\n     */\n    var getRowData = function getRowData(rowIndex) {\n      var _finlayRowKey$toStrin, _formRef$current;\n\n      if (rowIndex == undefined) {\n        throw new Error('rowIndex is required');\n      }\n\n      var finlayRowKey = coverRowKey(rowIndex);\n      var rowKeyName = [props.name, (_finlayRowKey$toStrin = finlayRowKey === null || finlayRowKey === void 0 ? void 0 : finlayRowKey.toString()) !== null && _finlayRowKey$toStrin !== void 0 ? _finlayRowKey$toStrin : ''].flat(1).filter(Boolean);\n      return (_formRef$current = formRef.current) === null || _formRef$current === void 0 ? void 0 : _formRef$current.getFieldValue(rowKeyName);\n    };\n    /**\n     * 获取整个 table 的数据\n     * @returns T[] | undefined\n     */\n\n\n    var getRowsData = function getRowsData() {\n      var _formRef$current3;\n\n      var rowKeyName = [props.name].flat(1).filter(Boolean);\n\n      if (Array.isArray(rowKeyName) && rowKeyName.length === 0) {\n        var _formRef$current2;\n\n        var rowData = (_formRef$current2 = formRef.current) === null || _formRef$current2 === void 0 ? void 0 : _formRef$current2.getFieldsValue();\n        if (Array.isArray(rowData)) return rowData;\n        return Object.keys(rowData).map(function (key) {\n          return rowData[key];\n        });\n      }\n\n      return (_formRef$current3 = formRef.current) === null || _formRef$current3 === void 0 ? void 0 : _formRef$current3.getFieldValue(rowKeyName);\n    };\n\n    return _objectSpread(_objectSpread({}, formRef.current), {}, {\n      getRowData: getRowData,\n      getRowsData: getRowsData,\n\n      /**\n       * 设置一行的数据，会将数据进行简单的 merge\n       * @param rowIndex\n       * @param data\n       * @returns void\n       */\n      setRowData: function setRowData(rowIndex, data) {\n        var _finlayRowKey$toStrin2, _formRef$current4, _formRef$current4$get, _formRef$current5;\n\n        if (rowIndex == undefined) {\n          throw new Error('rowIndex is required');\n        }\n\n        var finlayRowKey = coverRowKey(rowIndex);\n        var rowKeyName = [props.name, (_finlayRowKey$toStrin2 = finlayRowKey === null || finlayRowKey === void 0 ? void 0 : finlayRowKey.toString()) !== null && _finlayRowKey$toStrin2 !== void 0 ? _finlayRowKey$toStrin2 : ''].flat(1).filter(Boolean);\n        var oldTableDate = ((_formRef$current4 = formRef.current) === null || _formRef$current4 === void 0 ? void 0 : (_formRef$current4$get = _formRef$current4.getFieldsValue) === null || _formRef$current4$get === void 0 ? void 0 : _formRef$current4$get.call(_formRef$current4)) || {};\n        var updateValues = set(oldTableDate, rowKeyName, _objectSpread(_objectSpread({}, getRowData(rowIndex)), data || {}));\n        return (_formRef$current5 = formRef.current) === null || _formRef$current5 === void 0 ? void 0 : _formRef$current5.setFieldsValue(updateValues);\n      }\n    });\n  });\n  useEffect(function () {\n    if (!props.controlled) return;\n    value.forEach(function (current, index) {\n      var _formRef$current6;\n\n      (_formRef$current6 = formRef.current) === null || _formRef$current6 === void 0 ? void 0 : _formRef$current6.setFieldsValue(_defineProperty({}, getRowKey(current, index), current));\n    }, {}); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [value, props.controlled]);\n  useEffect(function () {\n    if (props.name) {\n      var _props$editable;\n\n      formRef.current = props === null || props === void 0 ? void 0 : (_props$editable = props.editable) === null || _props$editable === void 0 ? void 0 : _props$editable.form;\n    }\n  }, [(_props$editable2 = props.editable) === null || _props$editable2 === void 0 ? void 0 : _props$editable2.form, props.name]);\n\n  var _ref = recordCreatorProps || {},\n      record = _ref.record,\n      position = _ref.position,\n      creatorButtonText = _ref.creatorButtonText,\n      newRecordType = _ref.newRecordType,\n      parentKey = _ref.parentKey,\n      style = _ref.style,\n      restButtonProps = _objectWithoutProperties(_ref, _excluded2);\n\n  var isTop = position === 'top';\n  var creatorButtonDom = useMemo(function () {\n    if (maxLength && maxLength <= (value === null || value === void 0 ? void 0 : value.length)) {\n      return false;\n    }\n\n    return recordCreatorProps !== false && _jsx(RecordCreator, {\n      record: runFunction(record, value === null || value === void 0 ? void 0 : value.length, value) || {},\n      position: position,\n      parentKey: runFunction(parentKey, value === null || value === void 0 ? void 0 : value.length, value),\n      newRecordType: newRecordType,\n      children: _jsx(_Button, _objectSpread(_objectSpread({\n        type: \"dashed\",\n        style: _objectSpread({\n          display: 'block',\n          margin: '10px 0',\n          width: '100%'\n        }, style),\n        icon: _jsx(PlusOutlined, {})\n      }, restButtonProps), {}, {\n        children: creatorButtonText || intl.getMessage('editableTable.action.add', '添加一行数据')\n      }))\n    }); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [recordCreatorProps, maxLength, value === null || value === void 0 ? void 0 : value.length]);\n  var buttonRenderProps = useMemo(function () {\n    if (!creatorButtonDom) {\n      return {};\n    }\n\n    if (isTop) {\n      return {\n        components: {\n          header: {\n            wrapper: function wrapper(_ref2) {\n              var _rest$columns;\n\n              var className = _ref2.className,\n                  children = _ref2.children;\n              return _jsxs(\"thead\", {\n                className: className,\n                children: [children, _jsxs(\"tr\", {\n                  style: {\n                    position: 'relative'\n                  },\n                  children: [_jsx(\"td\", {\n                    colSpan: 0,\n                    style: {\n                      visibility: 'hidden'\n                    },\n                    children: creatorButtonDom\n                  }), _jsx(\"td\", {\n                    style: {\n                      position: 'absolute',\n                      left: 0,\n                      width: '100%'\n                    },\n                    colSpan: (_rest$columns = rest.columns) === null || _rest$columns === void 0 ? void 0 : _rest$columns.length,\n                    children: creatorButtonDom\n                  })]\n                })]\n              });\n            }\n          }\n        }\n      };\n    }\n\n    return {\n      tableViewRender: function tableViewRender(_, dom) {\n        var _props$tableViewRende, _props$tableViewRende2;\n\n        return _jsxs(_Fragment, {\n          children: [(_props$tableViewRende = (_props$tableViewRende2 = props.tableViewRender) === null || _props$tableViewRende2 === void 0 ? void 0 : _props$tableViewRende2.call(props, _, dom)) !== null && _props$tableViewRende !== void 0 ? _props$tableViewRende : dom, creatorButtonDom]\n        });\n      }\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isTop, creatorButtonDom]);\n\n  var editableProps = _objectSpread({}, props.editable);\n  /**\n   * 防止闭包的onchange\n   *\n   * >>>>>>为了性能好辛苦\n   */\n\n\n  var newOnValueChange = useRefFunction(function (r, dataSource) {\n    var _props$editable3, _props$editable3$onVa, _props$onValuesChange;\n\n    (_props$editable3 = props.editable) === null || _props$editable3 === void 0 ? void 0 : (_props$editable3$onVa = _props$editable3.onValuesChange) === null || _props$editable3$onVa === void 0 ? void 0 : _props$editable3$onVa.call(_props$editable3, r, dataSource);\n    (_props$onValuesChange = props.onValuesChange) === null || _props$onValuesChange === void 0 ? void 0 : _props$onValuesChange.call(props, dataSource, r);\n\n    if (props.controlled) {\n      var _props$onChange;\n\n      props === null || props === void 0 ? void 0 : (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props, dataSource);\n    }\n  });\n\n  if ((props === null || props === void 0 ? void 0 : props.onValuesChange) || ((_props$editable4 = props.editable) === null || _props$editable4 === void 0 ? void 0 : _props$editable4.onValuesChange) || // 受控模式需要触发 onchange\n  props.controlled && (props === null || props === void 0 ? void 0 : props.onChange)) {\n    editableProps.onValuesChange = newOnValueChange;\n  }\n\n  return _jsxs(_Fragment, {\n    children: [_jsx(EditableTableActionContext.Provider, {\n      value: actionRef,\n      children: _jsx(ProTable, _objectSpread(_objectSpread(_objectSpread({\n        search: false,\n        options: false,\n        pagination: false,\n        rowKey: rowKey,\n        revalidateOnFocus: false\n      }, rest), buttonRenderProps), {}, {\n        tableLayout: \"fixed\",\n        actionRef: actionRef,\n        onChange: onTableChange,\n        editable: _objectSpread(_objectSpread({}, editableProps), {}, {\n          formProps: _objectSpread({\n            formRef: formRef\n          }, editableProps.formProps)\n        }),\n        dataSource: value,\n        onDataSourceChange: function onDataSourceChange(dataSource) {\n          setValue(dataSource);\n          /**\n           * 如果是top，需要重新设置一下 form，不然会导致 id 相同数据混淆\n           */\n\n          if (props.name && position === 'top') {\n            var _formRef$current7;\n\n            var newValue = set({}, [props.name].flat(1).filter(Boolean), dataSource);\n            (_formRef$current7 = formRef.current) === null || _formRef$current7 === void 0 ? void 0 : _formRef$current7.setFieldsValue(newValue);\n          }\n        }\n      }))\n    }), props.name ? _jsx(ProFormDependency, {\n      name: [props.name],\n      children: function children(changeValue) {\n        var _props$editable5, _props$editable5$onVa;\n\n        var list = get(changeValue, [props.name].flat(1));\n        var changeItem = list === null || list === void 0 ? void 0 : list.find(function (item, index) {\n          return !isDeepEqualReact(item, preData === null || preData === void 0 ? void 0 : preData[index]);\n        });\n        if (!changeItem) return null; // 如果不存在 preData 说明是初始化，此时不需要触发 onValuesChange\n\n        if (preData) props === null || props === void 0 ? void 0 : (_props$editable5 = props.editable) === null || _props$editable5 === void 0 ? void 0 : (_props$editable5$onVa = _props$editable5.onValuesChange) === null || _props$editable5$onVa === void 0 ? void 0 : _props$editable5$onVa.call(_props$editable5, changeItem, list);\n        return null;\n      }\n    }) : null]\n  });\n}\n\nfunction FieldEditableTable(props) {\n  var form = ProForm.useFormInstance();\n  if (!props.name) return _jsx(EditableTable, _objectSpread({}, props));\n  return _jsx(_Form.Item, _objectSpread(_objectSpread({\n    style: {\n      maxWidth: '100%'\n    }\n  }, props === null || props === void 0 ? void 0 : props.formItemProps), {}, {\n    name: props.name,\n    children: _jsx(EditableTable, _objectSpread(_objectSpread({}, props), {}, {\n      editable: _objectSpread(_objectSpread({}, props.editable), {}, {\n        form: form\n      })\n    }))\n  }));\n}\n\nFieldEditableTable.RecordCreator = RecordCreator;\nexport default FieldEditableTable;","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { useEffect, useImperativeHandle, forwardRef } from 'react';\nimport { Column as G2plotColumn } from '@antv/g2plot';\nimport useChart from '../../hooks/useChart';\nimport { getChart } from '../../utils';\nimport ErrorBoundary from '../../errorBoundary';\nimport ChartLoading from '../../utils/createLoading';\nvar ColumnChart = forwardRef(function (props, ref) {\n    var chartRef = props.chartRef, _a = props.style, style = _a === void 0 ? {\n        height: 'inherit',\n    } : _a, className = props.className, loading = props.loading, loadingTemplate = props.loadingTemplate, errorTemplate = props.errorTemplate, rest = __rest(props, [\"chartRef\", \"style\", \"className\", \"loading\", \"loadingTemplate\", \"errorTemplate\"]);\n    var _b = useChart(G2plotColumn, rest), chart = _b.chart, container = _b.container;\n    useEffect(function () {\n        getChart(chartRef, chart.current);\n    }, [chart.current]);\n    useImperativeHandle(ref, function () { return ({\n        getChart: function () { return chart.current; },\n    }); });\n    return (React.createElement(ErrorBoundary, { errorTemplate: errorTemplate },\n        loading && React.createElement(ChartLoading, { loadingTemplate: loadingTemplate, theme: props.theme }),\n        React.createElement(\"div\", { className: className, style: style, ref: container })));\n});\nexport default ColumnChart;\n","// This icon file is generated automatically.\nvar LineChartOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M888 792H200V168c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v688c0 4.4 3.6 8 8 8h752c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8zM305.8 637.7c3.1 3.1 8.1 3.1 11.3 0l138.3-137.6L583 628.5c3.1 3.1 8.2 3.1 11.3 0l275.4-275.3c3.1-3.1 3.1-8.2 0-11.3l-39.6-39.6a8.03 8.03 0 00-11.3 0l-230 229.9L461.4 404a8.03 8.03 0 00-11.3 0L266.3 586.7a8.03 8.03 0 000 11.3l39.5 39.7z\" } }] }, \"name\": \"line-chart\", \"theme\": \"outlined\" };\nexport default LineChartOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport LineChartOutlinedSvg from \"@ant-design/icons-svg/es/asn/LineChartOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar LineChartOutlined = function LineChartOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: LineChartOutlinedSvg\n  }));\n};\nLineChartOutlined.displayName = 'LineChartOutlined';\nexport default /*#__PURE__*/React.forwardRef(LineChartOutlined);","import { request } from 'umi';\nimport type { RequestOptionsInit } from 'umi-request';\n\n/**  GET /api/admin/exams */\nexport async function getExams(params?: API.ExamsParams, options?: RequestOptionsInit) {\n  return request<API.DefaultMetaResponse<API.Exam>>(`/api/admin/exams`, {\n    method: 'GET',\n    /* useCache: true */ useCache: false,\n    params,\n    ...(options || {}),\n  });\n}\n\n/**  POST /api/admin/exams */\nexport async function createExam(body?: API.CreateExamRequest, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.Exam>>(`/api/admin/exams`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    data: body,\n    ...(options || {}),\n  });\n}\n\n/**  PUT /api/admin/exams/:id */\nexport async function updateExam(\n  id: number,\n  body: API.CreateExamRequest,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.Exam>>(`/api/admin/exams/${id}`, {\n    method: 'PUT',\n    data: body,\n    /* useCache: true */ useCache: false,\n    ...(options || {}),\n  });\n}\n\n/**  GET /api/admin/exams/:id */\nexport async function getExam(id: number, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.Exam>>(`/api/admin/exams/${id}`, {\n    method: 'GET',\n    /* useCache: true */ useCache: false,\n    ...(options || {}),\n  });\n}\n\n/**  DELETE /api/admin/exams/:id */\nexport async function deleteExam(id: number, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<undefined>>(`/api/admin/exams/${id}`, {\n    method: 'DELETE',\n    ...(options || {}),\n  });\n}\n\n/**  POST /api/admin/exams/:id/users/:user_id */\nexport async function createExamResult(\n  exam_id: number,\n  user_id: number,\n  body: API.CreateExamResultRequest,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.Exam>>(`/api/admin/exams/${exam_id}/users/${user_id}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    data: body,\n    ...(options || {}),\n  });\n}\n\n/**  DELETE /api/admin/exams/:id/users/:user_id */\nexport async function deleteExamResult(\n  exam_id: number,\n  user_id: number,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<undefined>>(`/api/admin/exams/${exam_id}/users/${user_id}`, {\n    method: 'DELETE',\n    ...(options || {}),\n  });\n}\n","import ProForm from '@ant-design/pro-form';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { FormattedMessage } from 'umi';\nimport { Modal, Select } from 'antd';\nimport type { DefaultOptionType } from 'antd/lib/select';\n\nimport SecureUpload from '@/components/SecureUpload';\nimport { ExamGradeType } from '@/services/escola-lms/enums';\nimport { useTeacherSubject } from '../context';\nconst FileExamGradeType: React.FC<{\n  type: ExamGradeType;\n  groupSelectDisabled: boolean;\n  onDataConverted: (data: ConvertedData | undefined) => void;\n}> = ({ type, onDataConverted, groupSelectDisabled }) => {\n  const { semester_subject_id, teacherSubjectData } = useTeacherSubject();\n  const [selectedGroup, setSelectedGroup] = useState<number | null>(null);\n\n  const groupOptions: DefaultOptionType[] = useMemo(\n    () =>\n      (teacherSubjectData?.groups ?? []).map(({ id, name }) => ({\n        label: name,\n        value: id,\n      })),\n\n    [],\n  );\n  const reqData: API.ParseExamFileRequest = {\n    type,\n    group_id: selectedGroup!,\n    semester_subject_id: semester_subject_id!,\n  };\n\n  const onUploadFile = useCallback((response: API.DefaultResponse<API.Exam>) => {\n    if (response.success) {\n      // TODO error handling\n      // filter out users that are not in selected group\n      const exam_results = response.data.results.filter(({ user_id }) => user_id !== null);\n      if (!exam_results.length) return;\n\n      onDataConverted({ exam_results, group_id: response.data.group_id });\n    }\n  }, []);\n\n  return (\n    <>\n      <ProForm.Item label={<FormattedMessage id=\"group\" />}>\n        <Select\n          disabled={groupSelectDisabled}\n          value={selectedGroup}\n          onChange={(v) => setSelectedGroup(v)}\n          options={groupOptions}\n          placeholder={<FormattedMessage id=\"select_group\" />}\n          style={{ width: '100%' }}\n        />\n      </ProForm.Item>\n      <SecureUpload\n        name=\"file\"\n        url=\"/api/admin/exams/parse\"\n        onUpload={onUploadFile}\n        onChange={(info) => !info.fileList.length && onDataConverted(undefined)}\n        maxFiles={1}\n        data={reqData}\n        disabled={!selectedGroup}\n      />\n    </>\n  );\n};\n\nconst ManualExamGradeType: React.FC<{\n  onDataConverted: (convertedData: ConvertedData) => void;\n}> = ({ onDataConverted }) => {\n  const { teacherSubjectData, groupUsers } = useTeacherSubject();\n  const [selectedGroup, setSelectedGroup] = useState<number | null>(null);\n\n  const groupOptions: DefaultOptionType[] = useMemo(\n    () =>\n      (teacherSubjectData?.groups ?? []).map(({ id, name }) => ({\n        label: name,\n        value: id,\n      })),\n\n    [],\n  );\n\n  const onSelectedGroupChange = useCallback(\n    (group_id: number) => {\n      setSelectedGroup(group_id);\n      const currGroup = groupUsers.byId?.[group_id];\n      if (!currGroup) return;\n\n      const exam_results = currGroup.users.reduce<API.ExamResult[]>(\n        (acc, { id, email, first_name, last_name, academic_teacher_id }) => {\n          // filter out tutors\n          if (academic_teacher_id !== null) return acc;\n\n          return [\n            ...acc,\n            {\n              email,\n              first_name,\n              last_name,\n              user_id: id,\n              result: 0,\n            },\n          ];\n        },\n        [],\n      );\n\n      onDataConverted({ group_id, exam_results });\n    },\n    [groupUsers.byId],\n  );\n\n  return (\n    <Select\n      value={selectedGroup}\n      onChange={onSelectedGroupChange}\n      options={groupOptions}\n      placeholder={<FormattedMessage id=\"select_group\" />}\n      style={{ width: '100%' }}\n    />\n  );\n};\n\nexport interface ConvertedData {\n  group_id: number;\n  exam_results: API.ExamResult[];\n}\n\ninterface Props {\n  open: boolean;\n  closeModal: () => void;\n  onSuccess: (convertedData: ConvertedData) => void;\n  type: ExamGradeType;\n}\n\nconst FILE_TYPES = [ExamGradeType.TeamsLecture, ExamGradeType.TestPortal, ExamGradeType.TeamsForms];\n\nexport const ConvertGradesModal: React.FC<Props> = ({ open, closeModal, onSuccess, type }) => {\n  const { teacherSubjectData, fetchGroupUsers } = useTeacherSubject();\n  const [convertedData, setConvertedData] = useState<ConvertedData>();\n\n  useEffect(() => {\n    if (type === ExamGradeType.Manual && open) {\n      teacherSubjectData?.groups?.forEach(({ id }) => fetchGroupUsers(id));\n    }\n  }, [type, open]);\n\n  return (\n    <Modal\n      title={<FormattedMessage id={`TeacherSubjects.Exams.${type}Convert`} />}\n      width=\"40vw\"\n      open={open}\n      onCancel={closeModal}\n      onOk={() => {\n        if (convertedData) {\n          onSuccess(convertedData);\n        }\n      }}\n      okButtonProps={{ disabled: !convertedData }}\n    >\n      {FILE_TYPES.includes(type) && (\n        <FileExamGradeType\n          type={type}\n          onDataConverted={setConvertedData}\n          groupSelectDisabled={!!convertedData}\n        />\n      )}\n      {type === ExamGradeType.Manual && <ManualExamGradeType onDataConverted={setConvertedData} />}\n    </Modal>\n  );\n};\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { FormattedMessage, history } from 'umi';\nimport { Button, Col, InputNumber, Row, Spin } from 'antd';\nimport ProTable, { ProColumns } from '@ant-design/pro-table';\nimport ProForm, { ProFormDatePicker, ProFormText } from '@ant-design/pro-form';\nimport { ExamGradeType } from '@/services/escola-lms/enums';\nimport { createExam, getExam, updateExam } from '@/services/escola-lms/exams';\n\nimport { ConvertGradesModal, type ConvertedData } from './ConvertGradesModal';\nimport { useTeacherSubject } from '../context';\n\nconst SelectTypeButtonsGroup: React.FC<{ onSelect: (type: ExamGradeType) => void }> = ({\n  onSelect,\n}) => (\n  <Row gutter={[16, 16]}>\n    <Col span={12}>\n      <Button type=\"primary\" onClick={() => onSelect(ExamGradeType.TeamsForms)}>\n        <FormattedMessage id=\"uploadFile.MsTeamsForms\" defaultMessage=\"uploadFile.MsTeamsForms\" />\n      </Button>\n    </Col>\n    <Col span={12}>\n      <Button type=\"primary\" onClick={() => onSelect(ExamGradeType.TestPortal)}>\n        <FormattedMessage id=\"uploadFile.TestPortal\" defaultMessage=\"uploadFile.TestPortal\" />\n      </Button>\n    </Col>\n    <Col span={12}>\n      <Button type=\"primary\" onClick={() => onSelect(ExamGradeType.TeamsLecture)}>\n        <FormattedMessage id=\"uploadFile.MsTeams\" defaultMessage=\"uploadFile.MsTeams\" />\n      </Button>\n    </Col>\n    <Col span={12}>\n      <Button type=\"primary\" onClick={() => onSelect(ExamGradeType.Manual)}>\n        <FormattedMessage id=\"uploadGradesManually\" defaultMessage=\"uploadGradesManually\" />\n      </Button>\n    </Col>\n  </Row>\n);\n\nconst staticColumns: ProColumns<API.ExamResult>[] = [\n  { title: <FormattedMessage id=\"first_name\" />, dataIndex: 'first_name', editable: false },\n  { title: <FormattedMessage id=\"last_name\" />, dataIndex: 'last_name', editable: false },\n  {\n    title: <FormattedMessage id=\"examResult\" />,\n    dataIndex: 'result',\n    valueType: 'percent',\n    formItemProps: {\n      rules: [\n        {\n          required: true,\n          message: <FormattedMessage id=\"field_required\" />,\n        },\n        {\n          type: 'number',\n          min: 0,\n          max: 100,\n          message: <FormattedMessage id=\"number_between\" values={{ min: 0, max: 100 }} />,\n        },\n      ],\n    },\n  },\n];\n\ninterface ExamFormValues {\n  title: string;\n  weight: number;\n  passed_at: Date | string;\n}\n\ninterface Props {\n  exam_id: string;\n}\nexport const ExamForm: React.FC<Props> = ({ exam_id }) => {\n  const [form] = ProForm.useForm<ExamFormValues>();\n  const [selectedType, setSelectedType] = useState<ExamGradeType>();\n  const [convertedData, setConvertedData] = useState<ConvertedData>();\n  const [fetching, setFetching] = useState(false);\n  const { semester_subject_id, getGroupById } = useTeacherSubject();\n\n  const editableKeys = useMemo(\n    () => (convertedData?.exam_results ?? []).map(({ user_id }) => user_id),\n    [convertedData?.exam_results],\n  );\n\n  useEffect(() => {\n    const numExamId = Number(exam_id);\n\n    if (exam_id === 'new') {\n      setSelectedType(undefined);\n      setConvertedData(undefined);\n      form.resetFields();\n    }\n\n    if (exam_id !== 'new' && !Number.isNaN(numExamId)) {\n      setFetching(true);\n      getExam(numExamId)\n        .then((res) => {\n          if (res.success) {\n            const { type, results, title, weight, passed_at, group_id } = res.data;\n            setSelectedType(type);\n            setConvertedData({ group_id, exam_results: results });\n            form.setFieldsValue({ title, weight, passed_at });\n          }\n        })\n        .finally(() => setFetching(false));\n    }\n  }, [exam_id]);\n\n  const resetState = useCallback(() => {\n    setSelectedType(undefined);\n    setConvertedData(undefined);\n  }, []);\n\n  if (fetching) {\n    return <Spin />;\n  }\n\n  return (\n    <>\n      {selectedType && (\n        <ConvertGradesModal\n          open={Boolean(selectedType && !convertedData)}\n          type={selectedType}\n          closeModal={resetState}\n          onSuccess={setConvertedData}\n        />\n      )}\n      <ProForm\n        form={form}\n        submitter={selectedType === undefined || !convertedData ? false : undefined}\n        onFinish={async (formData: ExamFormValues) => {\n          // Validation since table has other form instance\n          const areExamResultsValid = convertedData?.exam_results?.every(\n            ({ result }) => typeof result === 'number' && result >= 0 && result <= 100,\n          );\n\n          if (convertedData && areExamResultsValid && typeof semester_subject_id === 'number') {\n            const { title, passed_at, weight } = formData;\n            const numExamId = Number(exam_id);\n            const { exam_results, group_id } = convertedData;\n\n            const reqData: API.CreateExamRequest = {\n              type: selectedType!,\n              semester_subject_id,\n              title,\n              passed_at,\n              weight,\n              group_id,\n              results: exam_results,\n            };\n\n            const response = Number.isNaN(numExamId)\n              ? await createExam(reqData)\n              : await updateExam(numExamId, reqData);\n            if (response.success) {\n              history.push(`/teacher/subjects/${semester_subject_id}/exams`);\n            }\n          }\n          return true;\n        }}\n        onReset={resetState}\n      >\n        <ProForm.Group>\n          <ProFormText\n            label={<FormattedMessage id=\"examTitle\" defaultMessage=\"examTitle\" />}\n            rules={[\n              {\n                required: true,\n                message: <FormattedMessage id=\"field_required\" />,\n              },\n            ]}\n            width=\"lg\"\n            name=\"title\"\n          />\n          <ProFormDatePicker\n            label={<FormattedMessage id=\"datePassingExam\" defaultMessage=\"datePassingExam\" />}\n            rules={[\n              {\n                required: true,\n                message: <FormattedMessage id=\"field_required\" />,\n              },\n            ]}\n            width=\"lg\"\n            name=\"passed_at\"\n          />\n          <ProForm.Item\n            name=\"weight\"\n            label={<FormattedMessage id=\"examImportance\" defaultMessage=\"examImportance\" />}\n            rules={[\n              { required: true, message: <FormattedMessage id=\"field_required\" /> },\n              {\n                type: 'number',\n                min: 1,\n                max: 100,\n                message: <FormattedMessage id=\"number_between\" values={{ min: 1, max: 100 }} />,\n              },\n            ]}\n          >\n            <InputNumber />\n          </ProForm.Item>\n        </ProForm.Group>\n        {selectedType && convertedData && (\n          <ProTable\n            rowKey=\"user_id\"\n            headerTitle={getGroupById(convertedData.group_id)?.name}\n            editable={{\n              type: 'single',\n              editableKeys,\n              onValuesChange: (record, dataSource) =>\n                setConvertedData({ group_id: convertedData.group_id, exam_results: dataSource }),\n            }}\n            cardProps={{ bodyStyle: { paddingInline: 0 } }}\n            search={false}\n            dataSource={convertedData.exam_results}\n            columns={staticColumns}\n          />\n        )}\n        {!convertedData && <SelectTypeButtonsGroup onSelect={setSelectedType} />}\n      </ProForm>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport type { ProColumns } from '@ant-design/pro-table';\nimport ProTable from '@ant-design/pro-table';\nimport { FormattedMessage } from 'umi';\n\nimport { getExam } from '@/services/escola-lms/exams';\n\ninterface Props {\n  exam_id: number;\n}\n\nconst columns: ProColumns<API.ExamResult>[] = [\n  { title: <FormattedMessage id=\"first_name\" />, dataIndex: 'first_name' },\n  { title: <FormattedMessage id=\"last_name\" />, dataIndex: 'last_name' },\n  { title: <FormattedMessage id=\"examResult\" />, dataIndex: 'result', hideInSearch: true },\n];\n\nexport const ExamResults: React.FC<Props> = ({ exam_id }) => {\n  const [title, setTitle] = useState('');\n\n  return (\n    <ProTable<API.ExamResult>\n      className=\"table-standalone\"\n      rowKey=\"user_id\"\n      search={false}\n      headerTitle={title}\n      request={async () => {\n        const response = await getExam(exam_id);\n\n        if (response.success) {\n          setTitle(response.data.title);\n\n          return {\n            total: response.data.results.length,\n            success: true,\n            data: response.data.results,\n          };\n        }\n\n        return [];\n      }}\n      columns={columns}\n    />\n  );\n};\n","import React, { useMemo, useRef } from 'react';\nimport { format } from 'date-fns';\nimport type { Location } from 'history';\nimport { FormattedMessage, Link, useLocation } from 'umi';\nimport { Button, Popconfirm, Tooltip } from 'antd';\nimport { DeleteOutlined, EditOutlined, LineChartOutlined } from '@ant-design/icons';\nimport ProTable from '@ant-design/pro-table';\nimport type { ActionType, ProColumns } from '@ant-design/pro-table';\n\nimport { DAY_FORMAT } from '@/consts/dates';\nimport { getExams, deleteExam } from '@/services/escola-lms/exams';\nimport TypeButtonDrawer from '@/components/TypeButtonDrawer';\nimport { ExamForm } from './ExamForm';\nimport { ExamResults } from './ExamResults';\nimport { useTeacherSubject } from '../context';\n\nconst staticColumns: ProColumns<API.Exam>[] = [\n  {\n    title: <FormattedMessage id=\"ID\" defaultMessage=\"ID\" />,\n    dataIndex: 'id',\n    sorter: true,\n    width: '80px',\n  },\n  {\n    title: <FormattedMessage id=\"title\" defaultMessage=\"title\" />,\n    dataIndex: 'title',\n    hideInSearch: true,\n    sorter: true,\n  },\n  {\n    title: <FormattedMessage id=\"type\" defaultMessage=\"type\" />,\n    dataIndex: 'type',\n    sorter: true,\n    render: (_, record) => <FormattedMessage id={`ExamGradeType.${record.type}`} />,\n  },\n  {\n    title: <FormattedMessage id=\"TeacherSubjects.Exams.exam_date\" defaultMessage=\"Exam date\" />,\n    dataIndex: 'passed_at',\n    sorter: true,\n    render: (_, record) => record.passed_at && format(new Date(record.passed_at), DAY_FORMAT),\n  },\n  {\n    title: <FormattedMessage id=\"TeacherSubjects.Exams.grade_weight\" defaultMessage=\"Weight\" />,\n    dataIndex: 'weight',\n    sorter: true,\n    render: (_, record) => record.weight + '%',\n  },\n  {\n    title: <FormattedMessage id=\"created_at\" defaultMessage=\"Created at\" />,\n    dataIndex: 'created_at',\n    sorter: true,\n    render: (_, record) => record.created_at && format(new Date(record.created_at), DAY_FORMAT),\n  },\n  {\n    title: <FormattedMessage id=\"semester\" defaultMessage=\"Semester\" />,\n    dataIndex: 'semester',\n    sorter: true,\n    render: (_, record) => (\n      <FormattedMessage\n        id={`SemesterType.${record.semester.type}`}\n        values={{ year: record.semester.year }}\n      />\n    ),\n  },\n  {\n    title: <FormattedMessage id=\"group\" defaultMessage=\"Group\" />,\n    dataIndex: 'group_id',\n    sorter: true,\n    render: (_, record) => (\n      <TypeButtonDrawer key={record.group_id} type=\"Students\" type_id={record.group_id} />\n    ),\n  },\n];\n\nexport const Exams: React.FC = () => {\n  const actionRef = useRef<ActionType>();\n  const { semester_subject_id } = useTeacherSubject();\n  const location = useLocation() as Location & { query: { exam_id?: string; results?: string } };\n\n  const { exam_id, results } = useMemo(\n    () => ({ exam_id: location.query?.exam_id ?? null, results: location.query?.results }),\n    [location.query?.exam_id, location.query?.results],\n  );\n\n  if (results !== null && !Number.isNaN(Number(results))) {\n    return <ExamResults exam_id={Number(results)} />;\n  }\n\n  if (exam_id !== null) {\n    return <ExamForm exam_id={exam_id} />;\n  }\n\n  return (\n    <ProTable<API.Exam, API.ExamsParams>\n      className=\"table-standalone\"\n      headerTitle={<FormattedMessage id=\"exams\" />}\n      actionRef={actionRef}\n      search={false}\n      rowKey=\"id\"\n      request={async ({ current, pageSize }, sort) => {\n        if (semester_subject_id === null)\n          return {\n            data: [],\n            total: 0,\n            success: false,\n          };\n        const sortArr = sort && Object.entries(sort)[0];\n\n        const response = await getExams({\n          per_page: pageSize,\n          page: current,\n          semester_subject_id: !Number.isNaN(semester_subject_id) ? semester_subject_id : undefined,\n          order_by: sortArr && sortArr[0],\n          order: sortArr && (sortArr[1] === 'ascend' ? 'ASC' : 'DESC'),\n        });\n\n        if (response.success) {\n          return {\n            data: response.data,\n            total: response.meta.total,\n            success: true,\n          };\n        }\n\n        return {\n          data: [],\n          total: 0,\n          success: false,\n        };\n      }}\n      columns={[\n        ...staticColumns,\n        {\n          title: <FormattedMessage id=\"pages.searchTable.titleOption\" />,\n          dataIndex: 'option',\n          valueType: 'option',\n          render: (_, record) => [\n            <Link\n              to={`/teacher/subjects/${record.semester_subject_id}/exams?exam_id=${record.id}`}\n              key=\"edit\"\n            >\n              <Tooltip title={<FormattedMessage id=\"edit\" defaultMessage=\"edit\" />}>\n                <Button type=\"primary\" icon={<EditOutlined />} />\n              </Tooltip>\n            </Link>,\n            <Link\n              to={`/teacher/subjects/${record.semester_subject_id}/exams?results=${record.id}`}\n              key=\"results\"\n            >\n              <Tooltip\n                title={\n                  <FormattedMessage id=\"TeacherSubjects.Exams.results\" defaultMessage=\"results\" />\n                }\n              >\n                <Button icon={<LineChartOutlined />} />\n              </Tooltip>\n            </Link>,\n            <Popconfirm\n              key=\"delete\"\n              title={\n                <FormattedMessage\n                  id=\"deleteQuestion\"\n                  defaultMessage=\"Are you sure to delete this record?\"\n                />\n              }\n              onConfirm={async () => {\n                const response = await deleteExam(record.id);\n\n                if (response.success && actionRef.current) {\n                  actionRef.current.reload();\n                }\n              }}\n              okText={<FormattedMessage id=\"yes\" />}\n              cancelText={<FormattedMessage id=\"no\" />}\n            >\n              <Tooltip title={<FormattedMessage id=\"delete\" defaultMessage=\"delete\" />}>\n                <Button type=\"primary\" icon={<DeleteOutlined />} danger />\n              </Tooltip>\n            </Popconfirm>,\n          ],\n        },\n      ]}\n    />\n  );\n};\n","import { request } from 'umi';\nimport type { RequestOptionsInit } from 'umi-request';\n\n/**  POST /api/admin/chats/ms-teams */\nexport async function createTeamsChat(\n  body: API.CreateTeamsChatRequest,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.TeamsChat>>(`/api/admin/chats/ms-teams`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    data: body,\n    ...(options || {}),\n  });\n}\n","import React, { useCallback, useState } from 'react';\nimport { FormattedMessage } from 'umi';\nimport { Button, message, Tooltip } from 'antd';\nimport { ExportOutlined } from '@ant-design/icons';\n\nimport { createTeamsChat } from '@/services/escola-lms/chats';\n\ninterface Props {\n  student_id: number;\n}\n\nexport const CreateTeamsChatButton: React.FC<Props> = ({ student_id }) => {\n  const [loading, setLoading] = useState(false);\n\n  const onClick = useCallback(async () => {\n    setLoading(true);\n    const response = await createTeamsChat({ user_id: student_id });\n    if (!response.success) {\n      message.error(response.message);\n      setLoading(false);\n      return;\n    }\n\n    window.open(response.data.web_url, '_blank', 'noopener noreferrer');\n    setLoading(false);\n  }, []);\n\n  return (\n    <Tooltip title={<FormattedMessage id=\"msTeams\" defaultMessage=\"teams\" />}>\n      <Button loading={loading} type=\"primary\" icon={<ExportOutlined />} onClick={onClick} />\n    </Tooltip>\n  );\n};\n","import React, { useMemo } from 'react';\nimport { FormattedMessage } from 'umi';\nimport type { DefaultOptionType } from 'antd/lib/select';\nimport ProTable, { type ProColumns } from '@ant-design/pro-table';\n\nimport { allStudentsAndGroups as fetchAllStudentsAndGroups } from '@/services/escola-lms/student_user_groups';\nimport { useTeacherSubject } from '../context';\nimport { CreateTeamsChatButton } from './CreateTeamsChatButton';\n\ninterface TableDataProps {\n  group_id: number;\n  group_name: string;\n  user_id: number;\n  first_name: string;\n  last_name: string;\n  email: string;\n}\n\ninterface TableParams {\n  groups: number[];\n  first_name: string;\n  last_name: string;\n  email: string;\n}\n\nexport const TableColumns: ProColumns<TableDataProps>[] = [\n  {\n    title: <FormattedMessage id=\"ID\" defaultMessage=\"ID\" />,\n    dataIndex: 'user_id',\n    hideInSearch: true,\n    width: '80px',\n  },\n  {\n    title: <FormattedMessage id=\"first_name\" defaultMessage=\"First name\" />,\n    dataIndex: 'first_name',\n  },\n  {\n    title: <FormattedMessage id=\"last_name\" defaultMessage=\"Last name\" />,\n    dataIndex: 'last_name',\n  },\n  {\n    title: <FormattedMessage id=\"email\" defaultMessage=\"email\" />,\n    dataIndex: 'email',\n  },\n  {\n    title: <FormattedMessage id=\"groupName\" defaultMessage=\"Group name\" />,\n    dataIndex: 'group_name',\n    hideInSearch: true,\n  },\n];\n\nconst getGroupsOptions = (subjectGroups: API.SubjectGroups[]): DefaultOptionType[] =>\n  subjectGroups.map(({ id, name }) => ({\n    label: name,\n    value: id,\n  }));\n\nconst getTableData = (studentUserGroups: API.StudentUserGroup[]): TableDataProps[] =>\n  studentUserGroups.reduce<TableDataProps[]>((acc, curr) => {\n    const userTable = curr?.users?.reduce<TableDataProps[]>(\n      (innerAcc, currentUser) =>\n        currentUser.academic_teacher_id !== null\n          ? innerAcc\n          : [\n              ...innerAcc,\n              {\n                group_id: curr.id,\n                group_name: curr.name,\n                user_id: currentUser.id,\n                first_name: currentUser.first_name,\n                last_name: currentUser.last_name,\n                email: currentUser.email,\n              },\n            ],\n      [],\n    );\n\n    return [...acc, ...userTable];\n  }, []);\n\nexport const Students: React.FC = () => {\n  const { teacherSubjectData } = useTeacherSubject();\n\n  const groupOptions = useMemo(\n    () => getGroupsOptions(teacherSubjectData?.groups ?? []),\n    [teacherSubjectData?.groups],\n  );\n\n  return (\n    <ProTable<TableDataProps, TableParams>\n      className=\"table-standalone\"\n      rowKey={(record) => `${record.group_id}-${record.user_id}`}\n      search={{ layout: 'vertical' }}\n      request={async ({ groups, first_name = '', last_name = '', email = '' }) => {\n        const response = await fetchAllStudentsAndGroups({\n          parent_id: teacherSubjectData?.group_id,\n          'id[]': groups,\n        });\n\n        if (!response.success) {\n          return { data: [], total: 0, success: false };\n        }\n\n        const tableData = getTableData(response.data).filter(\n          (record) =>\n            record.first_name.toLowerCase().includes(first_name.toLowerCase()) &&\n            record.last_name.toLowerCase().includes(last_name.toLowerCase()) &&\n            record.email.toLowerCase().includes(email.toLowerCase()),\n        );\n\n        return { data: tableData, total: tableData.length, success: true };\n      }}\n      columns={[\n        {\n          title: <FormattedMessage id=\"groups\" defaultMessage=\"Groups\" />,\n          dataIndex: 'groups',\n          hideInTable: true,\n          filterMultiple: true,\n          valueType: 'select',\n          fieldProps: {\n            options: groupOptions,\n            mode: 'multiple',\n          },\n        },\n        ...TableColumns,\n        {\n          hideInSearch: true,\n          title: <FormattedMessage id=\"msTeams\" />,\n          dataIndex: 'teamsLink',\n          valueType: 'option',\n          render: (_n, record) => [\n            <CreateTeamsChatButton key=\"teamsChat\" student_id={record.user_id} />,\n          ],\n        },\n      ]}\n    />\n  );\n};\n","import type { RequestOptionsInit } from 'umi-request';\nimport type { AttendanceValue } from './enums';\nimport { request } from 'umi';\n\nexport async function groupAttendanceSchedule(group_id: number, options?: RequestOptionsInit) {\n  return request<API.AttendanceScheduleList>(`/api/admin/schedules/groups/${group_id}`, {\n    method: 'GET',\n    /* useCache: true */ useCache: false,\n    ...(options || {}),\n  });\n}\n\nexport async function changeStudentAttendance(\n  id: number,\n  user_id: number,\n  value: AttendanceValue,\n  options?: RequestOptionsInit,\n) {\n  return request<API.ChangeStudentAttendance>(`/api/admin/schedules/${id}/attendances`, {\n    data: {\n      attendances: [\n        {\n          user_id,\n          value,\n        },\n      ],\n    },\n    method: 'POST',\n    ...(options || {}),\n  });\n}\n","import { AttendanceValue } from '@/services/escola-lms/enums';\nimport type { AttendanceMap, Status } from './types';\n\nexport function parseToStatus(attendance: AttendanceValue | null): Status {\n  const attendanceMapped = attendance === null ? AttendanceValue.ABSENT : attendance;\n\n  const attendanceMap: AttendanceMap = {\n    [AttendanceValue.PRESENT]: { ch1: true, ch2: false },\n    [AttendanceValue.PRESENT_NOT_EXERCISING]: { ch1: true, ch2: true },\n    [AttendanceValue.ABSENT]: { ch1: false, ch2: false },\n    [AttendanceValue.EXCUSED_ABSENCE]: { ch1: false, ch2: true },\n  };\n\n  return attendanceMap[attendanceMapped] ?? { ch1: false, ch2: false };\n}\n\nexport function parseToAttendanceValue({ ch1, ch2 }: Status): AttendanceValue {\n  const statusStr = `${ch1}_${ch2}`;\n\n  const statusMap = {\n    true_false: AttendanceValue.PRESENT,\n    true_true: AttendanceValue.PRESENT_NOT_EXERCISING,\n    false_false: AttendanceValue.ABSENT,\n    false_true: AttendanceValue.EXCUSED_ABSENCE,\n  };\n\n  return statusMap[statusStr] ?? AttendanceValue.ABSENT;\n}\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { FormattedMessage } from 'umi';\nimport { Checkbox, Space, Tooltip } from 'antd';\nimport type { CheckboxChangeEvent } from 'antd/es/checkbox';\nimport { changeStudentAttendance } from '@/services/escola-lms/attendances';\n\nimport type { Status } from './types';\nimport { parseToAttendanceValue, parseToStatus } from './utils';\n\ninterface AttendanceCheckboxProps {\n  groupAttendanceScheduleId: number;\n  studentId: number;\n  attendance: API.AttendanceValue | null;\n  onSuccess?: () => void;\n}\n\nconst AttendanceCheckbox: React.FC<AttendanceCheckboxProps> = ({\n  groupAttendanceScheduleId,\n  studentId,\n  attendance,\n  onSuccess,\n}) => {\n  const [status, setStatus] = useState<Status>(parseToStatus(attendance));\n\n  const [loading, setLoading] = useState(false);\n  const firstMount = useRef(true);\n\n  const handleChangeAttendance = useCallback((stat: Status) => {\n    setLoading(true);\n    changeStudentAttendance(groupAttendanceScheduleId, studentId, parseToAttendanceValue(stat))\n      .then((res) => {\n        if (res.success) {\n          onSuccess?.();\n        }\n      })\n      .finally(() => setLoading(false));\n  }, []);\n\n  const onCh1Change = useCallback(\n    (e: CheckboxChangeEvent) =>\n      setStatus(e.target.checked ? { ch1: true, ch2: false } : { ch1: false, ch2: false }),\n    [],\n  );\n\n  const onCh2Change = useCallback(\n    (e: CheckboxChangeEvent) => setStatus((prev) => ({ ...prev, ch2: e.target.checked })),\n    [],\n  );\n\n  useEffect(() => {\n    if (firstMount.current) {\n      firstMount.current = false;\n      return;\n    }\n\n    handleChangeAttendance(status);\n  }, [status, handleChangeAttendance]);\n\n  return (\n    <Space>\n      <Tooltip title={<FormattedMessage id=\"present\" />}>\n        <Checkbox disabled={loading} checked={status.ch1} onChange={onCh1Change} />\n      </Tooltip>\n      <Tooltip title={<FormattedMessage id={status.ch1 ? 'not_exercising' : 'excused_absence'} />}>\n        <Checkbox disabled={loading} checked={status.ch2} onChange={onCh2Change} />\n      </Tooltip>\n    </Space>\n  );\n};\n\nexport default AttendanceCheckbox;\n","import React, { useMemo, useRef, useState } from 'react';\nimport { format } from 'date-fns';\nimport { FormattedMessage, useIntl } from 'umi';\nimport { message } from 'antd';\nimport ProTable from '@ant-design/pro-table';\nimport type { ProColumns, ActionType } from '@ant-design/pro-table';\n\nimport { DAY_FORMAT } from '@/consts/dates';\nimport { groupAttendanceSchedule as fetchGroupAttendanceSchedule } from '@/services/escola-lms/attendances';\nimport { studentUserGroup as fetchStudentUserGroup } from '@/services/escola-lms/student_user_groups';\nimport AttendanceCheckbox from '@/components/AttendanceCheckbox';\nimport { useTeacherSubject } from '../context';\n\ntype AttendanceTableItem = { id: number; full_name: string } & Record<string, API.AttendanceValue>;\n\ninterface AttendanceTableFilters {\n  full_name?: string;\n  group_id?: number;\n}\n\nexport const Attendances: React.FC = () => {\n  const { teacherSubjectData } = useTeacherSubject();\n  const [dynamicCols, setDynamicCols] = useState<ProColumns<AttendanceTableItem>[]>([]);\n  const [selectedGroupName, setSelectedGroupName] = useState('');\n  const intl = useIntl();\n\n  const actionRef = useRef<ActionType>();\n\n  const groupOptions = useMemo(\n    () => (teacherSubjectData?.groups ?? []).map(({ id, name }) => ({ value: id, label: name })),\n    [teacherSubjectData?.groups],\n  );\n\n  const columns: ProColumns<AttendanceTableItem>[] = useMemo(\n    () => [\n      {\n        title: <FormattedMessage id=\"group\" />,\n        dataIndex: 'group_id',\n        hideInTable: true,\n        valueType: 'select',\n        fieldProps: {\n          options: groupOptions,\n          defaultValue: groupOptions?.[0]?.value,\n          allowClear: false,\n        },\n      },\n      {\n        title: <FormattedMessage id=\"nameAndSurname\" defaultMessage=\"Name and surname\" />,\n        dataIndex: 'full_name',\n        fixed: 'left',\n      },\n      ...dynamicCols,\n    ],\n    [groupOptions, dynamicCols],\n  );\n\n  return (\n    <ProTable<AttendanceTableItem, AttendanceTableFilters>\n      className=\"table-standalone\"\n      headerTitle={`${intl.formatMessage({\n        id: 'attendances',\n        defaultMessage: 'Attendances',\n      })} (${selectedGroupName})`}\n      request={async ({ group_id = groupOptions?.[0]?.value, full_name = '' }) => {\n        const [studentUserGroupRes, groupAttendanceScheduleRes] = await Promise.all([\n          fetchStudentUserGroup(group_id),\n          fetchGroupAttendanceSchedule(group_id),\n        ]);\n        const selectedGroup = groupOptions.find(({ value }) => value === group_id);\n\n        if (!studentUserGroupRes.success || !groupAttendanceScheduleRes.success || !selectedGroup)\n          return { data: [], total: 0, success: false };\n\n        if (!groupAttendanceScheduleRes.data.length) {\n          message.error(\n            intl.formatMessage({\n              id: 'noAttendanceSchedule',\n              defaultMessage: 'No attendance schedule for this group...',\n            }),\n          );\n\n          return { data: [], total: 0, success: false };\n        }\n\n        setSelectedGroupName(selectedGroup.label);\n        setDynamicCols(\n          groupAttendanceScheduleRes.data.reduce<ProColumns<AttendanceTableItem>[]>(\n            (acc, curr) => [\n              ...acc,\n              {\n                title: String(format(new Date(curr.date_from), DAY_FORMAT)),\n                dataIndex: String(curr.date_from),\n                hideInSearch: true,\n                width: 100,\n                align: 'center',\n                render: (_, record) => (\n                  <AttendanceCheckbox\n                    groupAttendanceScheduleId={curr.id}\n                    attendance={record[`${curr?.date_from}`]}\n                    studentId={record.id}\n                  />\n                ),\n              },\n            ],\n            [],\n          ),\n        );\n\n        const data = studentUserGroupRes.data.users\n          .reduce<AttendanceTableItem[]>(\n            (acc, { id, academic_teacher_id, first_name, last_name }) => {\n              const studentFullName = `${last_name} ${first_name}`;\n              // filter out tutor & first name and second name filter\n              if (\n                academic_teacher_id !== null ||\n                !studentFullName.toLowerCase().includes(full_name.toLowerCase())\n              )\n                return acc;\n\n              const studentAttendances = groupAttendanceScheduleRes.data.reduce<\n                Record<string, API.AttendanceValue>\n              >((innerAcc, groupAttendanceSchedule) => {\n                const studentAttendance = groupAttendanceSchedule.attendances.find(\n                  (attendance) => attendance.user_id === id,\n                );\n                if (!studentAttendance) return innerAcc;\n\n                return {\n                  ...innerAcc,\n                  [`${groupAttendanceSchedule.date_from}`]: studentAttendance.value,\n                };\n              }, {});\n\n              return [...acc, { id, full_name: studentFullName, ...studentAttendances }];\n            },\n            [],\n          )\n          .sort((a, b) => a.full_name.localeCompare(b.full_name));\n\n        return { data, total: data.length, success: true };\n      }}\n      columns={columns}\n      search={{ layout: 'vertical' }}\n      pagination={{ onChange: () => actionRef.current?.reload() }}\n      scroll={{ x: 1500 }}\n      actionRef={actionRef}\n      rowKey=\"id\"\n    />\n  );\n};\n","import { request } from 'umi';\nimport type { RequestOptionsInit } from 'umi-request';\n\n/**  GET /api/admin/semester-subjects/:semester_subject_id/tutors/:tutor_id/grades */\nexport async function getSubjectTutorGrades(\n  semester_subject_id: number,\n  tutor_id: number,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.SubjectTutorGrades>>(\n    `/api/admin/semester-subjects/${semester_subject_id}/tutors/${tutor_id}/grades`,\n    {\n      method: 'GET',\n      /* useCache: true */ useCache: false,\n      ...(options || {}),\n    },\n  );\n}\n\n/**  POST /api/admin/semester-subjects/:semester_subject_id/tutors/:tutor_id/grades */\nexport async function createSubjectTutorGrades(\n  semester_subject_id: number,\n  tutor_id: number,\n  body: API.CreateSubjectTutorGradesRequest,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.GradeScale[]>>(\n    `/api/admin/semester-subjects/${semester_subject_id}/tutors/${tutor_id}/grades`,\n    {\n      method: 'POST',\n      data: body,\n      ...(options || {}),\n    },\n  );\n}\n\n/**  GET /api/admin/lesson-group-users */\nexport async function getGroupFinalGrades(\n  group_id: number | number[],\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.FinalGradeItem[]>>(`/api/admin/lesson-group-users`, {\n    method: 'GET',\n    params: { 'groups[]': group_id },\n    /* useCache: true */ useCache: false,\n    ...(options || {}),\n  });\n}\n\n/**  GET /api/admin/lesson-group-users/groups/:group_id/users/:user_id */\nexport async function getUserFinalGrades(\n  group_id: number,\n  user_id: number,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.FinalGradeItem>>(\n    `/api/admin/lesson-group-users/groups/${group_id}/users/${user_id}`,\n    {\n      method: 'GET',\n      /* useCache: true */ useCache: false,\n      ...(options || {}),\n    },\n  );\n}\n\n/** GET /api/admin/grade-terms */\nexport async function getGradeTerms(options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.GradeTerm[]>>(`/api/admin/grade-terms`, {\n    method: 'GET',\n    /* useCache: true */ useCache: false,\n    ...(options || {}),\n  });\n}\n\n/** GET /api/admin/grade-scales/:s_subject_scale_form_id */\nexport async function getSubjectGradeScales(\n  s_subject_scale_form_id: number,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.SubjectGradeScale[]>>(\n    `/api/admin/grade-scales/${s_subject_scale_form_id}`,\n    {\n      method: 'GET',\n      /* useCache: true */ useCache: false,\n      ...(options || {}),\n    },\n  );\n}\n\n/** POST /api/admin/final-grades */\nexport async function createFinalGrade(\n  body: API.CreateFinalGradeRequest,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.FinalGradeItem>>(`/api/admin/final-grades`, {\n    method: 'POST',\n    data: body,\n    ...(options || {}),\n  });\n}\n\n/** PATCH /api/admin/final-grades/:id */\nexport async function updateFinalGrade(\n  final_grade_id: number,\n  body: API.UpdateFinalGradeRequest,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.FinalGradeItem>>(\n    `/api/admin/final-grades/${final_grade_id}`,\n    {\n      method: 'PATCH',\n      data: body,\n      ...(options || {}),\n    },\n  );\n}\n","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { FormattedMessage, useModel } from 'umi';\nimport { Button, Divider, Select, Spin, Typography } from 'antd';\nimport ProForm from '@ant-design/pro-form';\nimport { EditableProTable } from '@ant-design/pro-table';\nimport type { ProColumns, ActionType } from '@ant-design/pro-table';\nimport { CheckOutlined, EditOutlined } from '@ant-design/icons';\n\nimport { createSubjectTutorGrades, getSubjectTutorGrades } from '@/services/escola-lms/grades';\nimport { useTeacherSubject } from '../context';\n\ntype TableGradeScale = API.GradeScale & { id: string };\n\ninterface FormData {\n  table: TableGradeScale[];\n}\n\nconst staticColumns: ProColumns<TableGradeScale>[] = [\n  {\n    title: <FormattedMessage id=\"grade\" />,\n    dataIndex: 'grade',\n    editable: false,\n  },\n  {\n    title: <FormattedMessage id=\"degree\" />,\n    dataIndex: 'name',\n    editable: false,\n  },\n  {\n    title: <FormattedMessage id=\"min_percent\" />,\n    dataIndex: 'grade_value',\n    valueType: 'percent',\n    formItemProps: {\n      rules: [\n        {\n          required: true,\n          message: <FormattedMessage id=\"field_required\" />,\n        },\n        {\n          type: 'number',\n          min: 0,\n          max: 100,\n          message: <FormattedMessage id=\"number_between\" values={{ min: 0, max: 100 }} />,\n        },\n      ],\n    },\n  },\n];\n\ninterface GradeScaleTableProps {\n  subjectTutorGradeScale: API.SubjectTutorGradeScale;\n  onFormSubmit: (formData: FormData) => Promise<void>;\n}\n\nconst GradeScaleTable: React.FC<GradeScaleTableProps> = ({\n  subjectTutorGradeScale,\n  onFormSubmit,\n}) => {\n  const [editableKeys, setEditableKeys] = useState<React.Key[]>([]);\n  const actionRef = useRef<ActionType>();\n\n  const [form] = ProForm.useForm<FormData>();\n\n  useEffect(() => {\n    const gradeScaleWithIds = (subjectTutorGradeScale.scale ?? []).map((values, i) => ({\n      ...values,\n      id: String((i + 1) * 100),\n    }));\n\n    form.setFieldValue('table', gradeScaleWithIds);\n  }, []);\n\n  return (\n    <ProForm<FormData>\n      form={form}\n      onFinish={onFormSubmit}\n      submitter={{ render: (_p, [, submit]) => [submit] }}\n    >\n      <EditableProTable<TableGradeScale>\n        name=\"table\"\n        rowKey=\"id\"\n        actionRef={actionRef}\n        formItemProps={{ label: <FormattedMessage id=\"grades-scale\" /> }}\n        cardProps={{ bodyStyle: { padding: 0 } }}\n        recordCreatorProps={false}\n        columns={[\n          ...staticColumns,\n          {\n            title: <FormattedMessage id=\"options\" />,\n            valueType: 'option',\n            render: (_n, row) => (\n              <Button\n                type=\"primary\"\n                onClick={() => actionRef.current?.startEditable(row.id)}\n                icon={<EditOutlined />}\n              />\n            ),\n          },\n        ]}\n        editable={{\n          form,\n          type: 'multiple',\n          editableKeys,\n          saveText: <Button type=\"primary\" icon={<CheckOutlined />} />,\n          onChange: setEditableKeys,\n          actionRender: (_r, _c, dom) => [dom.save],\n        }}\n      />\n    </ProForm>\n  );\n};\n\nexport const GradesScale: React.FC = () => {\n  const { initialState } = useModel('@@initialState');\n  const { semester_subject_id, tutors } = useTeacherSubject();\n\n  const [subjectTutorGrades, setSubjectTutorGrades] = useState<API.SubjectTutorGrades>();\n  const [loading, setLoading] = useState(false);\n  const [selectedTutor, setSelectedTutor] = useState<number | null>(null);\n\n  const tutorViewing = useMemo(\n    () => !!tutors.data.find(({ id }) => id === initialState?.currentUser?.id),\n    [tutors.data, initialState?.currentUser?.id],\n  );\n  const tutorsSelectOptions = useMemo(\n    () =>\n      tutors.data.map(({ id, first_name, last_name }) => ({\n        label: `${first_name} ${last_name}`,\n        value: id,\n      })),\n    [tutors.data],\n  );\n\n  const refreshSubjectTutorGrades = useCallback(() => {\n    if (semester_subject_id === null || selectedTutor === null) return;\n\n    setLoading(true);\n    setSubjectTutorGrades(undefined);\n    getSubjectTutorGrades(semester_subject_id, selectedTutor)\n      .then((response) => {\n        if (response.success) {\n          setSubjectTutorGrades(response.data);\n        }\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, [semester_subject_id, selectedTutor]);\n\n  const onFormSubmitFactory = useCallback(\n    (subjectTutorGradeScales: API.SubjectTutorGradeScale[], s_subject_scale_form_id: number) =>\n      async (formData: FormData) => {\n        if (semester_subject_id === null || selectedTutor === null) return;\n\n        const grade_scale = subjectTutorGradeScales.reduce<API.SubjectTutorGradeScale[]>(\n          (acc, tutorGradeScale) =>\n            tutorGradeScale.s_subject_scale_form_id === s_subject_scale_form_id\n              ? [\n                  ...acc,\n                  {\n                    s_subject_scale_form_id,\n                    scale: formData.table.map(({ name, grade, grade_value }) => ({\n                      name,\n                      grade,\n                      grade_value,\n                    })),\n                  },\n                ]\n              : [...acc, tutorGradeScale],\n          [],\n        );\n\n        const res = await createSubjectTutorGrades(semester_subject_id, selectedTutor, {\n          grade_scale,\n        });\n\n        if (res.success) {\n          refreshSubjectTutorGrades();\n        }\n      },\n    [selectedTutor, semester_subject_id],\n  );\n\n  useEffect(() => {\n    if (!tutorViewing || !initialState?.currentUser?.id) {\n      if (tutors.data?.[0]) {\n        setSelectedTutor(tutors.data?.[0].id);\n      }\n      return;\n    }\n\n    setSelectedTutor(initialState?.currentUser?.id);\n  }, [initialState?.currentUser?.id, tutorViewing]);\n\n  useEffect(() => {\n    refreshSubjectTutorGrades();\n  }, [refreshSubjectTutorGrades]);\n\n  if (tutors.loading) {\n    return <Spin />;\n  }\n\n  return (\n    <>\n      <ProForm.Item label={<FormattedMessage id=\"menu.Teacher\" />}>\n        <Select\n          disabled={tutorViewing}\n          placeholder={<FormattedMessage id=\"select\" />}\n          options={tutorsSelectOptions}\n          value={selectedTutor}\n          onChange={(v) => setSelectedTutor(v)}\n        />\n      </ProForm.Item>\n      <Divider />\n      {loading && !subjectTutorGrades && <Spin />}\n      {subjectTutorGrades?.grade_scale ? (\n        subjectTutorGrades.grade_scale.map((subjectTutorGradeScale, i) => (\n          <React.Fragment key={subjectTutorGradeScale.s_subject_scale_form_id}>\n            {i > 0 && <Divider />}\n            <GradeScaleTable\n              subjectTutorGradeScale={subjectTutorGradeScale}\n              onFormSubmit={onFormSubmitFactory(\n                subjectTutorGrades.grade_scale ?? [],\n                subjectTutorGradeScale.s_subject_scale_form_id,\n              )}\n            />\n          </React.Fragment>\n        ))\n      ) : (\n        <Typography.Paragraph style={{ textAlign: 'center' }}>\n          <FormattedMessage id=\"gradesScalesMissing\" />\n        </Typography.Paragraph>\n      )}\n    </>\n  );\n};\n","import type { RequestOptionsInit } from 'umi-request';\nimport { request } from 'umi';\n\nexport async function allSchedules(\n  params: API.PageParams &\n    API.PaginationParams & {\n      // query\n      semester_subject_id?: number | null;\n      date_form?: Date;\n      date_to?: Date;\n      group_id?: number;\n      term_status_id?: number;\n    },\n  options?: RequestOptionsInit,\n) {\n  return request<API.ScheduleList>(`/api/admin/schedules`, {\n    params,\n    method: 'GET',\n    /* useCache: true */ useCache: false,\n    ...(options || {}),\n  });\n}\n","import React, { useCallback, useEffect, useState, useMemo } from 'react';\nimport moment from 'moment';\nimport { FormattedMessage } from 'umi';\nimport { Badge, Button, Modal, Typography, Calendar } from 'antd';\nimport type { CalendarMode } from 'antd/lib/calendar/generateCalendar';\n\nimport { DAYTIME_FORMAT } from '@/consts/dates';\nimport { allSchedules as fetchAllSchedules } from '@/services/escola-lms/schedules';\nimport { useTeacherSubject } from '../context';\nimport './index.css';\n\ninterface EventCalendarProps {\n  id: number;\n  title: string;\n  start: Date | string;\n  end: Date | string;\n  tutor_name: string;\n  tutor_email: string;\n  group: string;\n  semester: string;\n  subject: string;\n  ms_teams_join_url: string | null;\n}\n\nexport const Schedule: React.FC = () => {\n  const [selectedEvent, setSelectedEvent] = useState<EventCalendarProps | null>(null);\n  const [eventData, setEventData] = useState<API.ScheduleData[]>([]);\n  const { semester_subject_id } = useTeacherSubject();\n  const now = moment();\n\n  const events: EventCalendarProps[] = useMemo(\n    () =>\n      eventData.map((event) => ({\n        id: event.id,\n        title: `${event.group.name} (${event.term_status.name})`,\n        start: moment(event.date_from).toDate(),\n        end: moment(event.date_to).toDate(),\n        tutor_name: `${event.tutor.first_name} ${event.tutor.last_name}`,\n        tutor_email: event.tutor.email,\n        semester: event.semester.name,\n        group: event.group.name,\n        subject: event.subject.name,\n        ms_teams_join_url: event.ms_teams_join_url,\n      })),\n    [eventData],\n  );\n\n  const fetchEvents = useCallback(\n    (start: moment.Moment, end: moment.Moment) => {\n      fetchAllSchedules({\n        semester_subject_id: semester_subject_id,\n        date_form: start.toDate(),\n        date_to: end.toDate(),\n      }).then((response) => {\n        if (response.success) {\n          setEventData(response.data);\n        }\n      });\n    },\n    [semester_subject_id],\n  );\n\n  const handleEventClick = useCallback((event: EventCalendarProps) => {\n    setSelectedEvent(event);\n  }, []);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedEvent(null);\n  }, []);\n\n  const checkDate = useCallback((date: moment.Moment) => {\n    if (date.isSame(now, 'day')) {\n      return 'warning';\n    }\n    return date.isAfter(now, 'day') ? 'success' : 'error';\n  }, []);\n\n  const dateCellRender = useCallback(\n    (date: moment.Moment) => {\n      const filteredEvents = events.filter((event) => moment(event.start).isSame(date, 'day'));\n\n      return (\n        <ul className=\"events\">\n          {filteredEvents.map((event) => (\n            <li key={event.id} onClick={() => handleEventClick(event)}>\n              <Badge status={checkDate(moment(event.start))} text={event.title} />\n            </li>\n          ))}\n        </ul>\n      );\n    },\n    [eventData],\n  );\n\n  const handlePanelChange = useCallback((date: moment.Moment, mode: CalendarMode) => {\n    const start = moment(date).startOf(mode).subtract(1, 'month');\n    const end = moment(date).endOf(mode).add(1, 'month');\n    fetchEvents(start, end);\n  }, []);\n\n  useEffect(() => {\n    const initialStartDate = moment().startOf('month');\n    const initialEndDate = moment().endOf('month');\n    fetchEvents(initialStartDate, initialEndDate);\n  }, []);\n  return (\n    <>\n      <Typography.Title level={4}>\n        <FormattedMessage id=\"schedule\" defaultMessage=\"Schedule\" />\n      </Typography.Title>\n\n      <Calendar dateCellRender={dateCellRender} onPanelChange={handlePanelChange} />\n\n      <Modal\n        open={selectedEvent !== null}\n        title={`${selectedEvent?.subject}: ${selectedEvent?.title}`}\n        onCancel={handleModalClose}\n        footer={null}\n      >\n        <Typography.Paragraph>\n          <FormattedMessage id=\"tutorName\" defaultMessage=\"Tutor\" />: {selectedEvent?.tutor_name}\n        </Typography.Paragraph>\n        <Typography.Paragraph>\n          <FormattedMessage id=\"email\" defaultMessage=\"Email\" />: {selectedEvent?.tutor_email}\n        </Typography.Paragraph>\n        <Typography.Paragraph>\n          <FormattedMessage id=\"group\" defaultMessage=\"Group\" />: {selectedEvent?.group}\n        </Typography.Paragraph>\n        <Typography.Paragraph>\n          <FormattedMessage id=\"semester\" defaultMessage=\"Semester\" />: {selectedEvent?.semester}\n        </Typography.Paragraph>\n        <Typography.Paragraph>\n          <FormattedMessage id=\"started_at\" defaultMessage=\"Start date\" />:\n          {selectedEvent && moment(selectedEvent.start).format(DAYTIME_FORMAT)}\n        </Typography.Paragraph>\n        <Typography.Paragraph>\n          <FormattedMessage id=\"end_at\" defaultMessage=\"End date\" />:\n          {selectedEvent && moment(selectedEvent.end).format(DAYTIME_FORMAT)}\n        </Typography.Paragraph>\n        {selectedEvent?.ms_teams_join_url && (\n          <Typography.Paragraph>\n            <a\n              href={selectedEvent.ms_teams_join_url}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              key=\"teamsLink\"\n            >\n              <Button type=\"primary\">\n                <FormattedMessage id=\"msTeams\" />\n              </Button>\n            </a>\n          </Typography.Paragraph>\n        )}\n      </Modal>\n    </>\n  );\n};\n","import type { StudentExam } from './types';\n\nexport const getStudentExamsFromExams = (exams: API.Exam[], student_id: number): StudentExam[] =>\n  exams.reduce<StudentExam[]>((acc, { results, ...exam }) => {\n    const result = results.find((examResult) => examResult.user_id === student_id);\n    if (!result) return acc;\n\n    return [...acc, { ...exam, result }];\n  }, []);\n\nexport const getProposedGrade = (\n  studentExams: StudentExam[],\n  tutorGradeScales: API.GradeScale[],\n): string => {\n  const [sum, weightsSum] = studentExams.reduce<[number, number]>(\n    (acc, { result, weight }) => [acc[0] + result.result * weight, acc[1] + weight],\n    [0, 0],\n  );\n  const weightedAverage = Number.isNaN(sum / weightsSum) ? 0 : sum / weightsSum;\n\n  const sortedGradeScales = tutorGradeScales\n    .sort((a, b) => a.grade_value - b.grade_value)\n    .reduce<(API.GradeScale & { isWeightedAverageGreater: boolean })[]>(\n      (acc, curr) => [\n        ...acc,\n        {\n          ...curr,\n          isWeightedAverageGreater: weightedAverage >= curr.grade_value,\n        },\n      ],\n      [],\n    );\n\n  if (sortedGradeScales.every(({ isWeightedAverageGreater }) => isWeightedAverageGreater)) {\n    return sortedGradeScales.at(-1)?.name ?? '';\n  }\n\n  const firstFalseIndex = sortedGradeScales.findIndex(\n    ({ isWeightedAverageGreater }) => !isWeightedAverageGreater,\n  );\n  if (firstFalseIndex < 0) return '';\n\n  return sortedGradeScales[firstFalseIndex - 1]?.name;\n};\n\nexport const getScalesBySubjectScaleFormId = (\n  s_subject_scale_form_id: number,\n  tutorGrades: API.SubjectTutorGradeScale[],\n): API.GradeScale[] | undefined =>\n  tutorGrades.find(\n    (subjectTutorGradeScale) =>\n      subjectTutorGradeScale.s_subject_scale_form_id === s_subject_scale_form_id,\n  )?.scale;\n","import { useCallback, useEffect, useState } from 'react';\nimport { groupAttendanceSchedule } from '@/services/escola-lms/attendances';\nimport {\n  getGradeTerms,\n  getUserFinalGrades,\n  getSubjectGradeScales,\n  getSubjectTutorGrades,\n} from '@/services/escola-lms/grades';\nimport { getExams } from '@/services/escola-lms/exams';\nimport { course, getCourseStats, program } from '@/services/escola-lms/course';\nimport { getFlatTopics } from '@/components/ProgramForm/Context';\nimport { getScalesBySubjectScaleFormId, getStudentExamsFromExams } from './utils';\nimport type { FetchedData, StudentExam } from './types';\n\nexport function useFinalGrades(group_id: number, user_id: number) {\n  const [finalGrades, setFinalGrades] = useState<FetchedData<API.FinalGradeItem>>({\n    loading: false,\n  });\n\n  useEffect(() => {\n    setFinalGrades((prev) => ({ ...prev, loading: true }));\n    getUserFinalGrades(group_id, user_id)\n      .then((response) => {\n        if (response.success) {\n          setFinalGrades((prev) => ({ ...prev, data: response.data }));\n        }\n      })\n      .finally(() => {\n        setFinalGrades((prev) => ({ ...prev, loading: false }));\n      });\n  }, [user_id, group_id]);\n\n  return { finalGrades };\n}\n\nexport function useGradeTerms() {\n  const [gradeTerms, setGradeTerms] = useState<FetchedData<API.GradeTerm[]>>({ loading: false });\n\n  useEffect(() => {\n    setGradeTerms((prev) => ({ ...prev, loading: true }));\n    getGradeTerms()\n      .then((response) => {\n        if (response.success) {\n          setGradeTerms((prev) => ({ ...prev, data: response.data }));\n        }\n      })\n      .finally(() => {\n        setGradeTerms((prev) => ({ ...prev, loading: false }));\n      });\n  }, []);\n\n  return { gradeTerms };\n}\n\nexport function useSubjectGradeScales(s_subject_scale_form_id: number | undefined) {\n  const [subjectGradeScales, setSubjectGradeScales] = useState<\n    FetchedData<API.SubjectGradeScale[]>\n  >({\n    loading: false,\n  });\n\n  useEffect(() => {\n    if (s_subject_scale_form_id === undefined) return;\n\n    setSubjectGradeScales((prev) => ({ ...prev, loading: true }));\n    getSubjectGradeScales(s_subject_scale_form_id)\n      .then((response) => {\n        if (response.success) {\n          setSubjectGradeScales((prev) => ({ ...prev, data: response.data }));\n        }\n      })\n      .finally(() => {\n        setSubjectGradeScales((prev) => ({ ...prev, loading: false }));\n      });\n  }, [s_subject_scale_form_id]);\n\n  return { subjectGradeScales };\n}\n\nexport function useTutorGradeScales(\n  semester_subject_id: number | undefined | null,\n  tutor_id: number | undefined | null,\n  s_subject_scale_form_id: number | undefined | null,\n) {\n  const [tutorGradeScales, setTutorGradeScales] = useState<FetchedData<API.GradeScale[]>>({\n    loading: false,\n  });\n\n  useEffect(() => {\n    if (\n      typeof semester_subject_id !== 'number' ||\n      typeof tutor_id !== 'number' ||\n      typeof s_subject_scale_form_id !== 'number'\n    )\n      return;\n\n    setTutorGradeScales((prev) => ({ ...prev, loading: true }));\n    getSubjectTutorGrades(semester_subject_id, tutor_id)\n      .then((response) => {\n        if (response.success) {\n          setTutorGradeScales((prev) => ({\n            ...prev,\n            data: getScalesBySubjectScaleFormId(\n              s_subject_scale_form_id,\n              response.data.grade_scale ?? [],\n            )?.map((v, i) => ({ ...v, id: i })),\n          }));\n        }\n      })\n      .finally(() => {\n        setTutorGradeScales((prev) => ({ ...prev, loading: false }));\n      });\n  }, [semester_subject_id, tutor_id]);\n\n  return { tutorGradeScales };\n}\n\nexport function useUserAttendanceSchedules(group_id: number, user_id: number) {\n  const [userAttendanceSchedules, setUserAttendanceSchedules] = useState<\n    FetchedData<API.UserAttendanceSchedule[]>\n  >({ loading: false });\n\n  const fetchUserAttendanceSchedules = useCallback(() => {\n    setUserAttendanceSchedules((prev) => ({ ...prev, loading: true }));\n    groupAttendanceSchedule(group_id)\n      .then((response) => {\n        if (response.success) {\n          const filteredSchedules = response.data.reduce<API.UserAttendanceSchedule[]>(\n            (acc, { attendances, ...rest }) => {\n              const attendance = attendances.find(\n                (attendanceItem) => attendanceItem.user_id === user_id,\n              );\n\n              if (!attendance) return acc;\n\n              return [...acc, { ...rest, attendance }];\n            },\n            [],\n          );\n\n          setUserAttendanceSchedules((prev) => ({ ...prev, data: filteredSchedules }));\n        }\n      })\n      .finally(() => {\n        setUserAttendanceSchedules((prev) => ({ ...prev, loading: false }));\n      });\n  }, [group_id, user_id]);\n\n  useEffect(() => {\n    fetchUserAttendanceSchedules();\n  }, [fetchUserAttendanceSchedules]);\n\n  return { userAttendanceSchedules, fetchUserAttendanceSchedules };\n}\n\nexport function useStudentExams(student_id: number, semester_subject_id: number | null) {\n  const [studentExams, setStudentExams] = useState<FetchedData<StudentExam[]>>({ loading: false });\n\n  useEffect(() => {\n    if (!semester_subject_id) return;\n    setStudentExams((prev) => ({ ...prev, loading: true }));\n    getExams({ student_id, semester_subject_id })\n      .then((response) => {\n        if (response.success) {\n          const data = getStudentExamsFromExams(response.data, student_id);\n\n          setStudentExams((prev) => ({ ...prev, data }));\n        }\n      })\n      .finally(() => {\n        setStudentExams((prev) => ({ ...prev, loading: false }));\n      });\n  }, [student_id, semester_subject_id]);\n\n  return { studentExams };\n}\n\nexport function useUserCoursesStats(group_id: number, user_id: number) {\n  const [userCourses, setUserCourses] = useState<FetchedData<API.Course[]>>({\n    loading: false,\n  });\n  const [userCoursesStats, setUserCoursesStats] = useState<\n    FetchedData<\n      Record<\n        string,\n        { finishedTopics: API.FinishedTopicsUserStats[]; attendanceList: API.CourseAttempts[] }\n      >\n    >\n  >({ loading: false });\n  const [userCoursesTopics, setUserCoursesTopics] = useState<\n    FetchedData<Record<string, API.Topic[]>>\n  >({ loading: false });\n\n  useEffect(() => {\n    setUserCourses((prev) => ({ ...prev, loading: true }));\n    course({ group_id })\n      .then((response) => {\n        if (response.success) {\n          setUserCourses((prev) => ({ ...prev, data: response.data }));\n        }\n      })\n      .finally(() => {\n        setUserCourses((prev) => ({ ...prev, loading: false }));\n      });\n  }, [group_id]);\n\n  useEffect(() => {\n    if (!userCourses.data) return;\n\n    setUserCoursesTopics((prev) => ({ ...prev, loading: true }));\n    Promise.all(userCourses.data.map(({ id }) => program(Number(id))))\n      .then((responses) => {\n        responses.forEach((response) => {\n          if (response.success) {\n            setUserCoursesTopics((prev) => ({\n              ...prev,\n              data: {\n                ...prev.data,\n                [Number(response.data.id)]: getFlatTopics(response.data.lessons),\n              },\n            }));\n          }\n        });\n      })\n      .finally(() => {\n        setUserCoursesTopics((prev) => ({ ...prev, loading: false }));\n      });\n\n    setUserCoursesStats((prev) => ({ ...prev, loading: true }));\n    Promise.all(\n      userCourses.data.map(({ id }) =>\n        getCourseStats(Number(id), [\n          'EscolaLms\\\\Reports\\\\Stats\\\\Course\\\\FinishedTopics',\n          'EscolaLms\\\\Reports\\\\Stats\\\\Course\\\\AttendanceList',\n        ]).then((response) => {\n          if (response.success) {\n            const finishedTopics = (\n              response.data['EscolaLms\\\\Reports\\\\Stats\\\\Course\\\\FinishedTopics'] ?? []\n            ).filter((userStat) => userStat.id === user_id);\n\n            const attendanceList =\n              response.data['EscolaLms\\\\Reports\\\\Stats\\\\Course\\\\AttendanceList'] ?? [];\n\n            setUserCoursesStats((prev) => ({\n              ...prev,\n              data: {\n                ...prev.data,\n                [Number(id)]: { finishedTopics, attendanceList },\n              },\n            }));\n          }\n        }),\n      ),\n    ).finally(() => setUserCoursesStats((prev) => ({ ...prev, loading: false })));\n  }, [userCourses.data, user_id]);\n\n  return { userCourses, userCoursesStats, userCoursesTopics };\n}\n","import React, { useCallback, useMemo } from 'react';\nimport { FormattedMessage, history } from 'umi';\nimport { format } from 'date-fns';\nimport { Col, Divider, message, Row, Spin, Typography } from 'antd';\nimport ProForm, { ProFormSelect } from '@ant-design/pro-form';\nimport ProTable from '@ant-design/pro-table';\nimport type { ProColumns } from '@ant-design/pro-table';\n\nimport { DAY_FORMAT } from '@/consts/dates';\nimport { createFinalGrade, updateFinalGrade } from '@/services/escola-lms/grades';\nimport AttendanceCheckbox from '@/components/AttendanceCheckbox';\nimport { UserCourseAttempts, UserProgress } from '@/components/CourseStatistics/userProgress';\nimport { useTeacherSubject } from '../../context';\nimport {\n  useFinalGrades,\n  useSubjectGradeScales,\n  useGradeTerms,\n  useUserAttendanceSchedules,\n  useStudentExams,\n  useTutorGradeScales,\n  useUserCoursesStats,\n} from './hooks';\nimport type { StudentExam } from './types';\nimport { getProposedGrade } from './utils';\n\ninterface Props {\n  user_id: number;\n  group_id: number;\n}\n\ninterface FormData {\n  grade_term_id: number;\n  grade_scale_id: number;\n}\n\ntype FinalGradeTableItem = API.GradeTerm & { grade?: API.FinalGradeItemGrade };\n\nconst tutorGradeScalesColumns: ProColumns<API.GradeScale>[] = [\n  {\n    title: <FormattedMessage id=\"grade\" />,\n    dataIndex: 'grade',\n  },\n  {\n    title: <FormattedMessage id=\"degree\" />,\n    dataIndex: 'name',\n  },\n  {\n    title: <FormattedMessage id=\"min_percent\" />,\n    dataIndex: 'grade_value',\n    valueType: 'percent',\n  },\n];\n\nconst userAttendanceColumns: ProColumns<API.UserAttendanceSchedule>[] = [\n  {\n    title: <FormattedMessage id=\"date\" />,\n    dataIndex: 'date_from',\n    render: (_n, row) => format(new Date(row.date_from), DAY_FORMAT),\n  },\n];\n\nconst studentExamsColumns: ProColumns<StudentExam>[] = [\n  {\n    title: <FormattedMessage id=\"name\" />,\n    dataIndex: 'title',\n  },\n  {\n    title: <FormattedMessage id=\"TeacherSubjects.Exams.grade_weight\" defaultMessage=\"Weight\" />,\n    dataIndex: 'weight',\n    valueType: 'percent',\n  },\n  {\n    title: <FormattedMessage id=\"created_at\" defaultMessage=\"Created at\" />,\n    dataIndex: 'created_at',\n    render: (_n, row) => format(new Date(row.created_at), DAY_FORMAT),\n  },\n  {\n    title: <FormattedMessage id=\"grade\" />,\n    dataIndex: 'result',\n    render: (_n, row) => `${row.result.result}%`,\n  },\n];\n\nconst finalGradesColumns: ProColumns<FinalGradeTableItem>[] = [\n  {\n    title: <FormattedMessage id=\"name\" />,\n    dataIndex: 'name',\n  },\n  {\n    title: <FormattedMessage id=\"issued_at\" />,\n    dataIndex: 'grade',\n    render: (_n, row) =>\n      row.grade?.grade_date ? format(new Date(row.grade?.grade_date), DAY_FORMAT) : '-',\n  },\n  {\n    title: <FormattedMessage id=\"grade\" />,\n    dataIndex: 'grade',\n    render: (_n, row) => row.grade?.grade_name ?? '-',\n  },\n];\n\nconst TABLE_PAGE_SIZE = 6;\n\nexport const FinalGradesDetails: React.FC<Props> = ({ user_id, group_id }) => {\n  const { semester_subject_id } = useTeacherSubject();\n  const { studentExams } = useStudentExams(user_id, semester_subject_id);\n  const { finalGrades } = useFinalGrades(group_id, user_id);\n  const { gradeTerms } = useGradeTerms();\n  const { subjectGradeScales } = useSubjectGradeScales(finalGrades.data?.s_subject_scale_form_id);\n  const { tutorGradeScales } = useTutorGradeScales(\n    semester_subject_id,\n    finalGrades.data?.tutor_id,\n    finalGrades.data?.s_subject_scale_form_id,\n  );\n  const { userAttendanceSchedules, fetchUserAttendanceSchedules } = useUserAttendanceSchedules(\n    group_id,\n    user_id,\n  );\n  const { userCourses, userCoursesStats, userCoursesTopics } = useUserCoursesStats(\n    group_id,\n    user_id,\n  );\n\n  const [form] = ProForm.useForm<FormData>();\n\n  const gradeTermsSelectOptions = useMemo(\n    () => (gradeTerms.data ?? []).map(({ id, name }) => ({ label: name, value: id })),\n    [gradeTerms.data],\n  );\n\n  const gradesSelectOptions = useMemo(\n    () =>\n      (subjectGradeScales.data ?? []).map(({ name, id }) => ({\n        label: name,\n        value: id,\n      })),\n    [subjectGradeScales.data],\n  );\n\n  const proposedGrade = useMemo(\n    () => getProposedGrade(studentExams.data ?? [], tutorGradeScales.data ?? []),\n    [studentExams.data, tutorGradeScales.data],\n  );\n\n  const onFinalGradeSubmit = useCallback(\n    async ({ grade_scale_id, grade_term_id }: FormData) => {\n      if (finalGrades.data?.id === undefined) return;\n\n      const existingFinalGrade = finalGrades.data?.grades.find(\n        ({ grade_term }) => grade_term.id === grade_term_id,\n      );\n\n      if (existingFinalGrade) {\n        const response = await updateFinalGrade(existingFinalGrade.id, { grade_scale_id });\n\n        message[response.success ? 'success' : 'error'](response.message);\n        if (response.success) {\n          history.push(`/teacher/subjects/${semester_subject_id}/final-grades`);\n        }\n        return;\n      }\n\n      const response = await createFinalGrade({\n        grade_scale_id,\n        grade_term_id,\n        lesson_group_user_id: finalGrades.data.id,\n      });\n\n      message[response.success ? 'success' : 'error'](response.message);\n\n      if (response.success) {\n        history.push(`/teacher/subjects/${semester_subject_id}/final-grades`);\n      }\n    },\n    [finalGrades.data, semester_subject_id],\n  );\n\n  const finalGradesTableData: FinalGradeTableItem[] = useMemo(\n    () =>\n      (gradeTerms.data ?? []).map((term) => ({\n        ...term,\n        grade: finalGrades.data?.grades.find(({ grade_term }) => grade_term.id === term.id),\n      })),\n    [finalGrades.data, gradeTerms.data],\n  );\n\n  const areStatisticsLoading =\n    (userCourses.loading && !userCourses.data) ||\n    (userCoursesStats.loading && !userCoursesStats.data) ||\n    (userCoursesTopics.loading && !userCoursesTopics.data);\n\n  const isStatisticDataPresent = Boolean(\n    userCourses.data && userCoursesStats.data && userCoursesTopics.data,\n  );\n\n  if (finalGrades.loading) {\n    return <Spin />;\n  }\n\n  return (\n    <>\n      {finalGrades.data && (\n        <>\n          <Typography.Text style={{ fontSize: '16px', fontWeight: 500 }}>\n            <FormattedMessage\n              id=\"TeacherSubjects.FinalGrades.Student\"\n              values={finalGrades.data.user}\n            />\n          </Typography.Text>\n          <Divider />\n        </>\n      )}\n      <Row gutter={[48, 48]} justify=\"space-between\">\n        <Col span={12}>\n          <ProTable\n            rowKey=\"id\"\n            headerTitle={<FormattedMessage id=\"TeacherSubjects.FinalGrades.StudentPartialGrades\" />}\n            search={false}\n            pagination={{ pageSize: TABLE_PAGE_SIZE }}\n            dataSource={studentExams.data}\n            loading={studentExams.loading}\n            columns={studentExamsColumns}\n            options={false}\n            cardProps={{ bodyStyle: { padding: 0 } }}\n          />\n        </Col>\n        <Col span={12}>\n          <ProTable\n            rowKey=\"id\"\n            headerTitle={<FormattedMessage id=\"TeacherSubjects.FinalGrades.FinalGrades\" />}\n            search={false}\n            pagination={{ pageSize: TABLE_PAGE_SIZE }}\n            dataSource={finalGradesTableData}\n            loading={finalGrades.loading || gradeTerms.loading}\n            columns={finalGradesColumns}\n            options={false}\n            cardProps={{ bodyStyle: { padding: 0 } }}\n          />\n        </Col>\n        <Col span={12}>\n          <ProTable<API.UserAttendanceSchedule>\n            rowKey=\"id\"\n            headerTitle={<FormattedMessage id=\"TeacherSubjects.FinalGrades.Attendances\" />}\n            search={false}\n            options={false}\n            pagination={{ pageSize: TABLE_PAGE_SIZE }}\n            cardProps={{ bodyStyle: { padding: 0 } }}\n            dataSource={userAttendanceSchedules.data}\n            loading={userAttendanceSchedules.loading}\n            columns={[\n              ...userAttendanceColumns,\n              {\n                title: <FormattedMessage id=\"TeacherSubjects.FinalGrades.Attendance\" />,\n                dataIndex: 'attendance',\n                render: (_n, row) => (\n                  <AttendanceCheckbox\n                    groupAttendanceScheduleId={row.id}\n                    studentId={user_id}\n                    attendance={row.attendance.value}\n                    onSuccess={fetchUserAttendanceSchedules}\n                  />\n                ),\n              },\n            ]}\n          />\n        </Col>\n        <Col span={12}>\n          <ProTable<API.GradeScale>\n            rowKey=\"id\"\n            headerTitle={<FormattedMessage id=\"TeacherSubjects.FinalGrades.GradesScale\" />}\n            search={false}\n            options={false}\n            pagination={{ pageSize: TABLE_PAGE_SIZE }}\n            cardProps={{ bodyStyle: { padding: 0 } }}\n            dataSource={tutorGradeScales.data}\n            loading={tutorGradeScales.loading}\n            columns={tutorGradeScalesColumns}\n          />\n        </Col>\n        {areStatisticsLoading && <Spin />}\n        {isStatisticDataPresent &&\n          userCourses.data?.map(({ id, title }) => (\n            <Col key={id} span={24}>\n              <Typography.Text style={{ fontSize: '16px', fontWeight: 500 }}>\n                {title}\n              </Typography.Text>\n              <UserProgress\n                course_id={Number(id)}\n                topics={userCoursesTopics.data?.[Number(id)] ?? []}\n                stats={userCoursesStats.data?.[Number(id)]?.finishedTopics ?? []}\n              />\n              <UserCourseAttempts\n                stats={userCoursesStats.data?.[Number(id)]?.attendanceList ?? []}\n              />\n            </Col>\n          ))}\n      </Row>\n      <ProForm<FormData> form={form} onFinish={onFinalGradeSubmit}>\n        <ProForm.Group\n          style={{ display: 'flex', flexDirection: 'column', paddingTop: '48px' }}\n          title={<FormattedMessage id=\"TeacherSubjects.FinalGrades.IssueAssessment\" />}\n          titleStyle={{ flex: 'unset' }}\n          align=\"center\"\n        >\n          <ProFormSelect\n            name=\"grade_term_id\"\n            rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n            label={<FormattedMessage id=\"TeacherSubjects.FinalGrades.GradeTerm\" />}\n            options={gradeTermsSelectOptions}\n            width=\"sm\"\n            fieldProps={{ loading: gradeTerms.loading }}\n          />\n          <ProFormSelect\n            name=\"grade_scale_id\"\n            rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n            label={<FormattedMessage id=\"TeacherSubjects.FinalGrades.FinalGrade\" />}\n            options={gradesSelectOptions}\n            fieldProps={{ loading: finalGrades.loading || subjectGradeScales.loading }}\n          />\n          <ProForm.Item>\n            <FormattedMessage\n              id=\"TeacherSubjects.FinalGrades.ProposedGrade\"\n              values={{ grade: proposedGrade }}\n            />\n          </ProForm.Item>\n        </ProForm.Group>\n      </ProForm>\n    </>\n  );\n};\n","import React, { useMemo } from 'react';\nimport type { Location } from 'history';\nimport { FormattedMessage, Link, useLocation } from 'umi';\nimport { Button, Tooltip, Typography } from 'antd';\nimport ProTable from '@ant-design/pro-table';\nimport type { ProColumns } from '@ant-design/pro-table';\nimport { EditOutlined } from '@ant-design/icons';\n\nimport TypeButtonDrawer from '@/components/TypeButtonDrawer';\nimport { getGroupFinalGrades } from '@/services/escola-lms/grades';\nimport { FinalGradesDetails } from './FinalGradesDetails';\nimport { useTeacherSubject } from '../context';\n\ninterface TableParams {\n  group_id?: number[];\n  first_name?: string;\n  last_name?: string;\n}\n\nconst staticColumns: ProColumns<API.FinalGradeItem>[] = [\n  {\n    title: <FormattedMessage id=\"first_name\" />,\n    dataIndex: 'first_name',\n    render: (_n, row) => row.user.first_name,\n  },\n  {\n    title: <FormattedMessage id=\"last_name\" />,\n    dataIndex: 'last_name',\n    render: (_n, row) => row.user.last_name,\n  },\n  {\n    title: <FormattedMessage id=\"grade\" />,\n    hideInSearch: true,\n    dataIndex: 'grades',\n    render: (_n, row) => (\n      <div style={{ display: 'flex', flexDirection: 'column', gap: '4px' }}>\n        {row.grades.length\n          ? row.grades.map(({ grade_name, grade_term, id }) => (\n              <Typography.Text key={id}>\n                {grade_term.name}: {grade_name}\n              </Typography.Text>\n            ))\n          : '-'}\n      </div>\n    ),\n  },\n];\n\nexport const FinalGradesList: React.FC = () => {\n  const location = useLocation() as Location & { query: { user_id?: string; group_id?: string } };\n  const { user_id, group_id } = useMemo(\n    () => ({\n      user_id: Number.isNaN(Number(location.query?.user_id))\n        ? null\n        : Number(location.query?.user_id),\n      group_id: Number.isNaN(Number(location.query?.group_id))\n        ? null\n        : Number(location.query?.group_id),\n    }),\n\n    [location.query?.user_id, location.query?.group_id],\n  );\n\n  const { teacherSubjectData, semester_subject_id } = useTeacherSubject();\n\n  const groupOptions = useMemo(\n    () => (teacherSubjectData?.groups ?? []).map(({ id, name }) => ({ label: name, value: id })),\n    [teacherSubjectData?.groups],\n  );\n\n  if (user_id !== null && group_id !== null) {\n    return <FinalGradesDetails user_id={user_id} group_id={group_id} />;\n  }\n\n  return (\n    <ProTable<API.FinalGradeItem, TableParams>\n      className=\"table-standalone\"\n      rowKey=\"id\"\n      search={{ layout: 'vertical' }}\n      request={async ({ group_id: group_ids = [], first_name = '', last_name = '' }) => {\n        const allGroups = (teacherSubjectData?.groups ?? []).map(({ id }) => id);\n\n        const response = await getGroupFinalGrades(group_ids.length === 0 ? allGroups : group_ids);\n\n        if (!response.success) {\n          return { success: false, total: 0, data: [] };\n        }\n\n        // TODO backend filter\n        const data = response.data.filter(\n          ({ user }) =>\n            user.first_name.toLowerCase().includes(first_name.toLowerCase()) &&\n            user.last_name.toLowerCase().includes(last_name.toLowerCase()),\n        );\n\n        return { success: true, total: data.length, data };\n      }}\n      columns={[\n        {\n          title: <FormattedMessage id=\"group\" />,\n          dataIndex: 'group_id',\n          valueType: 'select',\n          fieldProps: {\n            options: groupOptions,\n            mode: 'multiple',\n          },\n          render: (_n, row) => (\n            <TypeButtonDrawer key={row.group_id} type=\"Students\" type_id={row.group_id} />\n          ),\n        },\n        ...staticColumns,\n        {\n          title: <FormattedMessage id=\"options\" />,\n          hideInSearch: true,\n          render: (_n, row) => [\n            <Link\n              key=\"edit\"\n              to={`/teacher/subjects/${semester_subject_id}/final-grades?user_id=${row.user.id}&group_id=${row.group_id}`}\n            >\n              <Tooltip title={<FormattedMessage id=\"edit\" />}>\n                <Button type=\"primary\" icon={<EditOutlined />} />\n              </Tooltip>\n            </Link>,\n          ],\n        },\n      ]}\n    />\n  );\n};\n","import React, { useMemo } from 'react';\nimport { format } from 'date-fns';\nimport { FormattedMessage } from 'umi';\nimport { Button, Tooltip } from 'antd';\nimport type { ProColumns } from '@ant-design/pro-table';\nimport ProTable from '@ant-design/pro-table';\nimport { DownloadOutlined } from '@ant-design/icons';\n\nimport { DATETIME_FORMAT } from '@/consts/dates';\nimport { getPCGExportsHistory } from '@/services/escola-lms/pcg-export';\nimport TypeButtonDrawer from '@/components/TypeButtonDrawer';\nimport UserSelect from '@/components/UserSelect';\nimport { useTeacherSubject } from '../context';\n\nconst DownloadButton: React.FC<{ url: string }> = ({ url }) => (\n  <Tooltip title={<FormattedMessage id=\"download\" />}>\n    <Button\n      type=\"primary\"\n      onClick={() => {\n        window.open(url, '_blank', 'noopener noreferrer');\n      }}\n      icon={<DownloadOutlined />}\n    />\n  </Tooltip>\n);\n\nconst staticColumns: ProColumns<API.PCGFileExportsHistoryItem>[] = [\n  {\n    title: <FormattedMessage id=\"ID\" />,\n    dataIndex: 'id',\n    hideInSearch: true,\n  },\n  {\n    title: <FormattedMessage id=\"created_at\" />,\n    dataIndex: 'created_at',\n    hideInSearch: true,\n    render: (_n, record) => format(new Date(record.created_at), DATETIME_FORMAT),\n  },\n  {\n    title: <FormattedMessage id=\"created_by\" />,\n    dataIndex: 'created_by',\n    renderFormItem: (item, { type, defaultRender, ...rest }, form) => {\n      if (type === 'form') {\n        return null;\n      }\n      const stateType = form.getFieldValue('state');\n      return (\n        <UserSelect\n          {...rest}\n          state={{\n            type: stateType,\n          }}\n        />\n      );\n    },\n    render: (_n, record) => (\n      <TypeButtonDrawer\n        key={record.created_by.id}\n        type=\"EscolaLms\\Core\\Models\\User\"\n        type_id={record.created_by.id}\n      />\n    ),\n  },\n  {\n    title: <FormattedMessage id=\"exported_at\" />,\n    dataIndex: 'exported_at',\n    hideInSearch: true,\n    render: (_n, record) => format(new Date(record.exported_at), DATETIME_FORMAT),\n  },\n  {\n    title: <FormattedMessage id=\"exported_by\" />,\n    dataIndex: 'exported_by',\n    renderFormItem: (item, { type, defaultRender, ...rest }, form) => {\n      if (type === 'form') {\n        return null;\n      }\n      const stateType = form.getFieldValue('state');\n      return (\n        <UserSelect\n          {...rest}\n          state={{\n            type: stateType,\n          }}\n        />\n      );\n    },\n    render: (_n, record) => (\n      <TypeButtonDrawer\n        key={record.exported_by.id}\n        type=\"EscolaLms\\Core\\Models\\User\"\n        type_id={record.exported_by.id}\n      />\n    ),\n  },\n  {\n    title: <FormattedMessage id=\"version\" />,\n    dataIndex: 'version',\n    hideInSearch: true,\n  },\n  {\n    title: <FormattedMessage id=\"options\" />,\n    valueType: 'option',\n    render: (_n, record) => [<DownloadButton key=\"download\" url={record.url} />],\n  },\n];\n\nexport const FileExportsHistory: React.FC = () => {\n  const { teacherSubjectData } = useTeacherSubject();\n\n  const groupOptions = useMemo(\n    () => (teacherSubjectData?.groups ?? []).map(({ id, name }) => ({ value: id, label: name })),\n    [teacherSubjectData?.groups],\n  );\n\n  const columns: ProColumns<API.PCGFileExportsHistoryItem>[] = useMemo(\n    () => [\n      {\n        title: <FormattedMessage id=\"group\" />,\n        dataIndex: 'group_id',\n        hideInTable: true,\n        valueType: 'select',\n        fieldProps: {\n          options: groupOptions,\n          defaultValue: teacherSubjectData?.groups?.[0]?.id,\n          allowClear: false,\n        },\n      },\n      ...staticColumns,\n    ],\n    [teacherSubjectData?.groups?.[0]?.id, groupOptions],\n  );\n\n  return (\n    <ProTable<API.PCGFileExportsHistoryItem, API.PCGFileExportsHistoryParams>\n      className=\"table-standalone\"\n      request={async ({\n        group_id = teacherSubjectData?.groups?.[0]?.id,\n        created_by,\n        exported_by,\n      }) => {\n        const response = await getPCGExportsHistory({ group_id, created_by, exported_by });\n\n        if (!response.success) {\n          return { success: false, data: [], total: 0 };\n        }\n\n        return { success: true, data: response.data, total: response.data.length };\n      }}\n      columns={columns}\n      search={{ layout: 'vertical' }}\n      scroll={{ x: 1500 }}\n    />\n  );\n};\n","import React, { useCallback, useMemo, useState } from 'react';\nimport { FormattedMessage } from 'umi';\nimport { Select } from 'antd';\n\nimport { createFinalGrade, updateFinalGrade } from '@/services/escola-lms/grades';\n\ninterface Props {\n  term: API.GradeTerm;\n  gradeScales: API.SubjectGradeScale[];\n  defaultFinalGrade?: API.FinalGradeItemGrade;\n  finalGrades?: API.FinalGradeItem;\n}\n\nconst getGradeScaleId = (\n  gradeScales: API.SubjectGradeScale[],\n  name: string | undefined,\n): number | undefined => gradeScales.find((scale) => scale.name === name)?.id;\n\nexport const FinalGradeSelect: React.FC<Props> = ({\n  term,\n  gradeScales,\n  defaultFinalGrade,\n  finalGrades,\n}) => {\n  const [createdGrade, setCreatedGrade] = useState(defaultFinalGrade);\n\n  const [loading, setLoading] = useState(false);\n\n  const options = useMemo(\n    () => gradeScales.map(({ name, id }) => ({ value: id, label: name })),\n    [gradeScales],\n  );\n\n  const onChange = useCallback(\n    (grade_scale_id: number) => {\n      if (!finalGrades?.id) return;\n\n      if (createdGrade) {\n        setLoading(true);\n        updateFinalGrade(createdGrade.id, {\n          grade_scale_id,\n        }).finally(() => setLoading(false));\n        return;\n      }\n\n      setLoading(true);\n      createFinalGrade({\n        grade_term_id: term.id,\n        grade_scale_id,\n        lesson_group_user_id: finalGrades.id,\n      })\n        .then((res) => {\n          if (res.success) {\n            const recentGrade = res.data.grades.find((grade) => grade.grade_term.id === term.id);\n            setCreatedGrade(recentGrade);\n          }\n        })\n        .finally(() => setLoading(false));\n    },\n    [createdGrade, term.id, finalGrades?.id],\n  );\n\n  if (!finalGrades) return null;\n\n  return (\n    <Select\n      loading={loading}\n      disabled={loading}\n      placeholder={<FormattedMessage id=\"select_final_grade\" />}\n      style={{ width: '100%' }}\n      onChange={onChange}\n      options={options}\n      defaultValue={getGradeScaleId(gradeScales, defaultFinalGrade?.grade_name)}\n    />\n  );\n};\n","import React, { useCallback } from 'react';\nimport { InputNumber } from 'antd';\nimport { debounce } from 'lodash';\n\nimport { createExamResult } from '@/services/escola-lms/exams';\n\ninterface Props {\n  exam_id: number;\n  result: number;\n  student_id: number;\n  onSuccess?: (exam: API.Exam) => void;\n}\n\nexport const ExamGradeInput: React.FC<Props> = ({ exam_id, result, student_id, onSuccess }) => {\n  const onChange = useCallback(\n    debounce((value: number | null) => {\n      createExamResult(exam_id, student_id, { result: value ?? 0 }).then((res) => {\n        if (res.success) {\n          onSuccess?.(res.data);\n        }\n      });\n    }, 300),\n    [exam_id, result, student_id],\n  );\n\n  return <InputNumber type=\"number\" min={0} max={100} onChange={onChange} defaultValue={result} />;\n};\n","import { FormattedMessage } from 'umi';\nimport { format } from 'date-fns';\nimport type { ProColumns } from '@ant-design/pro-table';\n\nimport { DAY_FORMAT } from '@/consts/dates';\nimport AttendanceCheckbox from '@/components/AttendanceCheckbox';\n\nimport type { StudentExam } from '../FinalGradesDetails/types';\nimport { FinalGradeSelect } from '../FinalGradeSelect';\nimport { ExamGradeInput } from '../ExamGradeInput';\nimport type {\n  ClassRegisterTableItemAttendance,\n  ClassRegisterTableItemFinalGrade,\n  ClassRegisterTableItem,\n  ClassRegisterTableItemExamResult,\n} from './types';\n\n/* Attendance */\nexport const getAttendanceCols = (\n  groupAttendanceSchedule: API.GroupAttendanceSchedule[],\n): ProColumns<ClassRegisterTableItem> => {\n  const dynamicCols = groupAttendanceSchedule.reduce<ProColumns<ClassRegisterTableItem>[]>(\n    (acc, curr) => [\n      ...acc,\n      {\n        title: format(new Date(curr.date_from), DAY_FORMAT),\n        dataIndex: `attendance-${curr.date_from}`,\n        hideInSearch: true,\n        width: 100,\n        align: 'center',\n        render: (_, record) => (\n          <AttendanceCheckbox\n            groupAttendanceScheduleId={curr.id}\n            attendance={record[`attendance-${curr?.date_from}`]}\n            studentId={record.id}\n          />\n        ),\n      },\n    ],\n    [],\n  );\n\n  if (!dynamicCols.length)\n    return { title: <FormattedMessage id=\"attendance\" />, hideInSearch: true, hideInTable: true };\n\n  return {\n    title: <FormattedMessage id=\"attendance\" />,\n    hideInSearch: true,\n    children: dynamicCols,\n  };\n};\n\nexport const getStudentAttendances = (\n  groupAttendanceSchedules: API.GroupAttendanceSchedule[],\n  student_id: number,\n): ClassRegisterTableItemAttendance =>\n  groupAttendanceSchedules.reduce((innerAcc, groupAttendanceSchedule) => {\n    const studentAttendance = groupAttendanceSchedule.attendances.find(\n      (attendance) => attendance.user_id === student_id,\n    );\n    if (!studentAttendance) return innerAcc;\n\n    return {\n      ...innerAcc,\n      [`attendance-${groupAttendanceSchedule.date_from}`]: studentAttendance.value,\n    };\n  }, {});\n\n/* Exams */\nexport const getExamsCols = (exams: API.Exam[]): ProColumns<ClassRegisterTableItem> => {\n  const dynamicCols = exams.reduce<ProColumns<ClassRegisterTableItem>[]>(\n    (acc, exam) => [\n      ...acc,\n      {\n        dataIndex: `exam-${exam.id}`,\n        title: <FormattedMessage id=\"examTitleWithWeight\" values={exam} />,\n        hideInSearch: true,\n        width: 100,\n        render: (_n, record) =>\n          record?.[`exam-${exam.id}`]?.result !== undefined ? (\n            <ExamGradeInput\n              result={record?.[`exam-${exam.id}`].result}\n              exam_id={exam.id}\n              student_id={record.id}\n            />\n          ) : (\n            '-'\n          ),\n      },\n    ],\n    [],\n  );\n\n  if (!dynamicCols.length)\n    return { title: <FormattedMessage id=\"exams\" />, hideInSearch: true, hideInTable: true };\n\n  return { title: <FormattedMessage id=\"exams\" />, hideInSearch: true, children: dynamicCols };\n};\n\nexport const getStudentExamResults = (\n  studentExams: StudentExam[],\n): ClassRegisterTableItemExamResult =>\n  studentExams.reduce(\n    (innerAcc, { result, id: exam_id }) => ({\n      ...innerAcc,\n      [`exam-${exam_id}`]: result,\n    }),\n    {},\n  );\n\n/* Final grades */\nexport const getFinalGradesCols = (\n  gradeTerms: API.GradeTerm[],\n  subjectGradeScales: API.SubjectGradeScale[],\n): ProColumns<ClassRegisterTableItem> => ({\n  title: <FormattedMessage id=\"final-grades\" />,\n  hideInSearch: true,\n  children: gradeTerms.map((term) => ({\n    title: term.name,\n    hideInSearch: true,\n    width: 100,\n    align: 'center',\n    render: (_n, record) => (\n      <FinalGradeSelect\n        defaultFinalGrade={record[`final-grade-${term.id}`]}\n        finalGrades={record.final_grades}\n        term={term}\n        gradeScales={subjectGradeScales}\n      />\n    ),\n  })),\n});\n\nexport const getStudentFinalGrades = (\n  finalGrades: API.FinalGradeItem[],\n  student_id: number,\n): API.FinalGradeItem | undefined =>\n  finalGrades.find((finalGradeItem) => finalGradeItem.user.id === student_id);\n\nexport const getFinalGrades = (\n  studentFinalGrade?: API.FinalGradeItem,\n): ClassRegisterTableItemFinalGrade =>\n  (studentFinalGrade?.grades ?? []).reduce(\n    (acc, grade) => ({ ...acc, [`final-grade-${grade.grade_term.id}`]: grade }),\n    {},\n  );\n","import React, { useMemo, useRef, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'umi';\nimport { message } from 'antd';\nimport ProTable from '@ant-design/pro-table';\nimport type { ProColumns, ActionType } from '@ant-design/pro-table';\n\nimport { groupAttendanceSchedule as fetchGroupAttendanceSchedule } from '@/services/escola-lms/attendances';\nimport { studentUserGroup as fetchStudentUserGroup } from '@/services/escola-lms/student_user_groups';\nimport {\n  getSubjectTutorGrades as fetchSubjectTutorGrades,\n  getGroupFinalGrades as fetchGroupFinalGrades,\n  getGradeTerms as fetchGradeTerms,\n  getSubjectGradeScales as fetchSubjectGradeScales,\n} from '@/services/escola-lms/grades';\nimport { getExams as fetchExams } from '@/services/escola-lms/exams';\nimport { useTeacherSubject } from '../../context';\nimport {\n  getProposedGrade,\n  getScalesBySubjectScaleFormId,\n  getStudentExamsFromExams,\n} from '../FinalGradesDetails/utils';\nimport {\n  getAttendanceCols,\n  getExamsCols,\n  getFinalGrades,\n  getFinalGradesCols,\n  getStudentAttendances,\n  getStudentExamResults,\n  getStudentFinalGrades,\n} from './utils';\nimport type { ClassRegisterTableItem } from './types';\n\nexport const ClassRegister: React.FC = () => {\n  const { teacherSubjectData, semester_subject_id } = useTeacherSubject();\n  const [dynamicCols, setDynamicCols] = useState<ProColumns<ClassRegisterTableItem>[]>([]);\n  const [selectedGroupName, setSelectedGroupName] = useState(teacherSubjectData?.groups?.[0]?.name);\n  const intl = useIntl();\n\n  const groupOptions = useMemo(\n    () => (teacherSubjectData?.groups ?? []).map(({ id, name }) => ({ value: id, label: name })),\n    [teacherSubjectData?.groups],\n  );\n\n  const actionRef = useRef<ActionType>();\n\n  const columns: ProColumns[] = useMemo(\n    () => [\n      {\n        title: <FormattedMessage id=\"group\" />,\n        dataIndex: 'group_id',\n        hideInTable: true,\n        valueType: 'select',\n        fieldProps: {\n          options: groupOptions,\n          defaultValue: groupOptions?.[0]?.value,\n          allowClear: false,\n        },\n      },\n      {\n        title: <FormattedMessage id=\"nameAndSurname\" defaultMessage=\"Name and surname\" />,\n        dataIndex: 'full_name',\n        fixed: 'left',\n      },\n      ...dynamicCols,\n    ],\n    [groupOptions, dynamicCols],\n  );\n\n  return (\n    <ProTable<ClassRegisterTableItem>\n      className=\"table-standalone\"\n      request={async ({ group_id = groupOptions[0]?.value, full_name = '' }) => {\n        const finalGradesRes = await fetchGroupFinalGrades(group_id);\n        const selectedGroup = groupOptions.find(({ value }) => value === group_id);\n        if (\n          !finalGradesRes.success ||\n          finalGradesRes.data[0] === undefined ||\n          semester_subject_id === null\n        ) {\n          message.error(\n            intl.formatMessage({ id: 'groupDataMissing' }, { group_name: selectedGroup?.label }),\n          );\n\n          return { data: [], total: 0, success: false };\n        }\n\n        const [\n          studentUserGroupRes,\n          groupAttendanceScheduleRes,\n          examsRes,\n          tutorGradesRes,\n          gradeTermsRes,\n          subjectGradeScalesRes,\n        ] = await Promise.all([\n          fetchStudentUserGroup(group_id),\n          fetchGroupAttendanceSchedule(group_id),\n          fetchExams({ group_id, per_page: -1 }),\n          fetchSubjectTutorGrades(semester_subject_id, finalGradesRes.data?.[0]?.tutor_id),\n          fetchGradeTerms(),\n          fetchSubjectGradeScales(finalGradesRes.data?.[0]?.s_subject_scale_form_id),\n        ]);\n\n        if (\n          !studentUserGroupRes.success ||\n          !groupAttendanceScheduleRes.success ||\n          !examsRes.success ||\n          !tutorGradesRes.success ||\n          !gradeTermsRes.success ||\n          !subjectGradeScalesRes.success ||\n          !selectedGroup\n        ) {\n          message.error(\n            intl.formatMessage({ id: 'groupDataMissing' }, { group_name: selectedGroup?.label }),\n          );\n\n          return { data: [], total: 0, success: false };\n        }\n        setSelectedGroupName(selectedGroup.label);\n\n        /* COLS */\n        const attendanceCols = getAttendanceCols(groupAttendanceScheduleRes.data);\n        const examsCols = getExamsCols(examsRes.data);\n        const finalGradeCols = getFinalGradesCols(gradeTermsRes.data, subjectGradeScalesRes.data);\n\n        setDynamicCols([\n          attendanceCols,\n          examsCols,\n          finalGradeCols,\n          {\n            title: <FormattedMessage id=\"proposed_grade\" />,\n            hideInSearch: true,\n            dataIndex: 'proposed_grade',\n            align: 'center',\n            width: 100,\n          },\n        ]);\n\n        const data = studentUserGroupRes.data.users\n          .reduce<ClassRegisterTableItem[]>(\n            (acc, { id, academic_teacher_id, first_name, last_name }) => {\n              const studentFullName = `${last_name} ${first_name}`;\n              // filter out tutor & first name and second name filter\n              if (\n                academic_teacher_id !== null ||\n                !studentFullName.toLowerCase().includes(full_name.toLowerCase())\n              )\n                return acc;\n\n              const studentAttendances = getStudentAttendances(groupAttendanceScheduleRes.data, id);\n\n              const studentExams = getStudentExamsFromExams(examsRes.data, id);\n\n              const studentFinalGrades = getStudentFinalGrades(finalGradesRes.data, id);\n\n              const tutorScales =\n                getScalesBySubjectScaleFormId(\n                  studentFinalGrades?.s_subject_scale_form_id ?? 0,\n                  tutorGradesRes.data.grade_scale ?? [],\n                ) ?? [];\n\n              const proposed_grade = getProposedGrade(studentExams, tutorScales);\n\n              const studentExamResults = getStudentExamResults(studentExams);\n\n              const finalGrades = getFinalGrades(studentFinalGrades);\n\n              return [\n                ...acc,\n                {\n                  id,\n                  full_name: studentFullName,\n                  ...studentAttendances,\n                  ...studentExamResults,\n                  ...finalGrades,\n                  proposed_grade,\n                  final_grades: studentFinalGrades,\n                },\n              ];\n            },\n            [],\n          )\n          // sort alphabetically\n          .sort((a, b) => a.full_name.localeCompare(b.full_name));\n\n        return { data, total: data.length, success: true };\n      }}\n      columns={columns}\n      headerTitle={\n        <FormattedMessage\n          id=\"classRegisterTitleWithGroupName\"\n          values={{ groupName: selectedGroupName }}\n        />\n      }\n      search={{ layout: 'vertical' }}\n      scroll={{ x: 1500 }}\n      actionRef={actionRef}\n      pagination={{ onChange: () => actionRef.current?.reload() }}\n      rowKey=\"id\"\n    />\n  );\n};\n","import React, { useCallback, useMemo } from 'react';\nimport { useParams, history, useIntl, FormattedMessage, useModel, Link } from 'umi';\nimport { Spin, Button } from 'antd';\nimport ProCard from '@ant-design/pro-card';\nimport { PageContainer } from '@ant-design/pro-layout';\n\nimport PERMISSIONS from '@/consts/permissions';\nimport { isUserHavePermissions } from '@/services/escola-lms/permissions';\nimport { TeacherSubjectContextProvider, useTeacherSubject } from './context';\nimport { Groups } from './components/Groups';\nimport { Exams } from './components/Exams';\nimport { Students } from './components/Students';\nimport { Attendances } from './components/Attendances';\nimport { GradesScale } from './components/GradesScale';\nimport { Schedule } from './components/Schedule';\nimport { FinalGradesList } from './components/FinalGradesList';\nimport { FileExportsHistory } from './components/FileExportsHistory';\nimport { ClassRegister } from './components/ClassRegister';\n\nconst TeacherSubjectsFormContent: React.FC<{ tab: string }> = ({ tab }) => {\n  const intl = useIntl();\n  const { setInitialState, initialState } = useModel('@@initialState');\n  const { teacherSubjectData, semester_subject_id, tutors } = useTeacherSubject();\n\n  const currentUserHasPermissions = useCallback(\n    isUserHavePermissions(initialState?.currentUser as API.UserItem),\n    [initialState?.currentUser],\n  );\n\n  const showGradeScale = useMemo(\n    () =>\n      !!tutors.data.find(({ id }) => id === initialState?.currentUser?.id) ||\n      currentUserHasPermissions(PERMISSIONS.TeacherListGradeScale),\n    [],\n  );\n\n  if (!teacherSubjectData) {\n    return <Spin />;\n  }\n\n  return (\n    <PageContainer\n      title={\n        <>\n          <FormattedMessage id={teacherSubjectData?.subject?.name} />\n          {', '}\n          <FormattedMessage id={tab} />\n        </>\n      }\n      tabBarExtraContent={\n        <div style={{ display: 'flex', padding: '12px', gap: '12px' }}>\n          <Link to={`/teacher/subjects/${semester_subject_id}/exams?exam_id=new`}>\n            <Button type=\"primary\">\n              <FormattedMessage id=\"uploadGrades\" defaultMessage=\"uploadGrades\" />\n            </Button>\n          </Link>\n        </div>\n      }\n      header={{\n        breadcrumb: {\n          routes: [\n            {\n              path: 'teacher',\n              breadcrumbName: intl.formatMessage({\n                id: 'Teacher',\n              }),\n            },\n            {\n              path: 'subjects',\n              breadcrumbName: intl.formatMessage({\n                id: 'Subjects',\n              }),\n            },\n            {\n              path: String(semester_subject_id),\n              breadcrumbName: String(teacherSubjectData.subject?.name),\n            },\n            {\n              path: String(tab),\n              breadcrumbName: intl.formatMessage({ id: tab, defaultMessage: String(tab) }),\n            },\n          ],\n        },\n      }}\n    >\n      <ProCard\n        bodyStyle={{ padding: '24px' }}\n        tabs={{\n          type: 'card',\n          activeKey: tab,\n          onChange: (key) => {\n            setInitialState({\n              ...initialState,\n            });\n\n            history.push(`/teacher/subjects/${semester_subject_id}/${key}`);\n          },\n        }}\n      >\n        <ProCard.TabPane key=\"groups\" tab={<FormattedMessage id=\"groups\" />}>\n          <Groups />\n        </ProCard.TabPane>\n        <ProCard.TabPane key=\"students\" tab={<FormattedMessage id=\"students\" />}>\n          <Students />\n        </ProCard.TabPane>\n        <ProCard.TabPane key=\"exams\" tab={<FormattedMessage id=\"exams\" />}>\n          <Exams />\n        </ProCard.TabPane>\n        <ProCard.TabPane key=\"schedule\" tab={<FormattedMessage id=\"schedule\" />}>\n          <Schedule />\n        </ProCard.TabPane>\n        <ProCard.TabPane key=\"class-register\" tab={<FormattedMessage id=\"class-register\" />}>\n          <ClassRegister />\n        </ProCard.TabPane>\n        <ProCard.TabPane key=\"attendance\" tab={<FormattedMessage id=\"attendance\" />}>\n          <Attendances />\n        </ProCard.TabPane>\n        {showGradeScale && (\n          <ProCard.TabPane key=\"grades-scale\" tab={<FormattedMessage id=\"grades-scale\" />}>\n            <GradesScale />\n          </ProCard.TabPane>\n        )}\n        <ProCard.TabPane key=\"final-grades\" tab={<FormattedMessage id=\"final-grades\" />}>\n          <FinalGradesList />\n        </ProCard.TabPane>\n        <ProCard.TabPane\n          key=\"file-exports-history\"\n          tab={<FormattedMessage id=\"file-exports-history\" />}\n        >\n          <FileExportsHistory />\n        </ProCard.TabPane>\n      </ProCard>\n    </PageContainer>\n  );\n};\n\nexport default () => {\n  const params = useParams<{ subjectId?: string; tab?: string }>();\n  const { subjectId, tab = 'groups' } = params;\n\n  return (\n    <TeacherSubjectContextProvider semester_subject_id={Number(subjectId)}>\n      <TeacherSubjectsFormContent tab={tab} />\n    </TeacherSubjectContextProvider>\n  );\n};\n","import React, { useCallback, useEffect, useState, useMemo } from 'react';\nimport { message } from 'antd';\nimport { useIntl, useLocation } from 'umi';\nimport { history } from 'umi';\nimport type { Location } from 'history';\n\nimport {\n  program,\n  createLesson as apiCreateLesson,\n  updateLesson as apiUpdateLesson,\n  createTopic as apiCreateTopic,\n  updateTopic as apiUpdateTopic,\n  removeLesson as apiRemoveLesson,\n  removeTopic as apiRemoveTopic,\n  cloneLesson as apiCloneLesson,\n  cloneTopic as apiCloneTopic,\n} from '@/services/escola-lms/course';\n\nimport type { UploadChangeParam } from 'antd/lib/upload';\nimport { TopicType } from '@/services/escola-lms/enums';\n\ntype CurrentEditMode =\n  | { mode: 'lesson'; id: number; value?: API.Lesson | null }\n  | { mode: 'topic'; id: number; value?: API.Topic | null }\n  | { mode: 'init' };\n\ntype ProgramContext = {\n  currentEditMode?: CurrentEditMode;\n  state?: API.CourseProgram;\n  h5ps?: any[];\n  // token: credentials.token,\n  id?: number;\n  addNewLesson?: (parentId?: number) => API.Lesson;\n  updateLesson?: (lesson_id: number, data: FormData) => Promise<void | boolean>;\n  updateTopic?: (topic_id: number, data: FormData) => Promise<void>;\n  // addResource,\n  // removeResource,\n  deleteLesson?: (lesson_id: number) => void;\n  // updateH5P,\n  addNewTopic?: (lesson_id: number, type: API.TopicType) => API.Topic;\n  deleteTopic?: (topic_id: number) => void;\n  onTopicUploaded?: (prevTopicId: number, info: UploadChangeParam) => void;\n  cloneTopic?: (topic_id: number) => void;\n  cloneLesson?: (lesson_id: number) => void;\n  getLessons?: () => void;\n};\n\nexport const Context = React.createContext<ProgramContext>({});\n\nconst getRandomId = () => Math.round(Math.random() * 99999);\n\nconst getFlatLessons = (lessons: API.Lesson[]): API.Lesson[] => {\n  return lessons.reduce((acc, curr) => {\n    return [...acc, ...(curr.lessons ? getFlatLessons(curr.lessons) : []), curr];\n  }, [] as API.Lesson[]) as API.Lesson[];\n};\n\nexport const getFlatTopics = (lessons: API.Lesson[]): API.Topic[] => {\n  return lessons.reduce((acc, curr) => {\n    return [...acc, ...(curr.lessons ? getFlatTopics(curr.lessons) : []), ...(curr.topics ?? [])];\n  }, [] as API.Topic[]) as API.Topic[];\n};\n\nconst recursiveAddTopicToLessons = (\n  lessons: API.Lesson[],\n  lessonId: number,\n  topic: API.Topic,\n): API.Lesson[] => {\n  return lessons.map((lesson) => ({\n    ...lesson,\n    lessons: lesson.lessons ? recursiveAddTopicToLessons(lesson.lessons, lessonId, topic) : [],\n    topics: lesson.id === lessonId ? [...(lesson.topics ?? []), topic] : lesson.topics ?? [],\n  }));\n};\n\n// Probably should be removed\n// const recursiveEditTopic = (\n//   lessons: API.Lesson[],\n//   topicId: number,\n//   updatedTopic: API.Topic,\n// ): API.Lesson[] => {\n//   return lessons.map((lesson) => ({\n//     ...lesson,\n//     lessons: recursiveEditTopic(lesson.lessons ?? [], topicId, updatedTopic),\n//     topics: lesson.topics?.map((topic) => (topic.id === topicId ? updatedTopic : topic)) ?? [],\n//   }));\n// };\n\nconst recursiveAddLessonToLessons = (\n  lessons: API.Lesson[],\n  newLesson: API.Lesson,\n  lessonId?: number | null,\n): API.Lesson[] => {\n  if (!lessonId) {\n    return [...lessons, newLesson];\n  }\n  return lessons.map((lesson) => ({\n    ...lesson,\n    lessons: [\n      ...(lesson.lessons ? recursiveAddLessonToLessons(lesson.lessons, newLesson, lessonId) : []),\n      ...(lesson.id === lessonId ? [newLesson] : []),\n    ],\n  }));\n};\n\nconst recursiveEditLesson = (\n  lessons: API.Lesson[],\n  lessonId: number,\n  updatedLesson: API.Lesson,\n): API.Lesson[] => {\n  return lessons.map((lesson) => ({\n    ...(lesson.id === lessonId ? updatedLesson : lesson),\n    lessons: lesson.lessons ? recursiveEditLesson(lesson.lessons, lessonId, updatedLesson) : [],\n  }));\n};\n\nconst appendParentIdToLessons = (lessons: API.Lesson[], lessonParentId?: number): API.Lesson[] => {\n  return lessons.map((lesson) => ({\n    ...lesson,\n    parent_id: lessonParentId,\n    lessons: lesson.lessons ? appendParentIdToLessons(lesson.lessons, lesson.id) : [],\n  }));\n};\n\nconst recursiveDeleteLesson = (lessons: API.Lesson[], lessonId: number): API.Lesson[] => {\n  return lessons\n    .filter((lesson) => lesson.id !== lessonId)\n    .map((lesson) => ({\n      ...lesson,\n      lessons: lesson.lessons ? recursiveDeleteLesson(lesson.lessons, lessonId) : [],\n    }));\n};\n\nconst recursiveDeleteTopic = (lessons: API.Lesson[], topicId: number): API.Lesson[] => {\n  return lessons.map((lesson) => ({\n    ...lesson,\n    lessons: lesson.lessons ? recursiveDeleteTopic(lesson.lessons, topicId) : [],\n    topics: lesson.topics ? lesson.topics.filter((topic) => topic.id !== topicId) : [],\n  }));\n};\n\nconst recursiveTopicUploaded = (\n  prevTopicId: number,\n  info: UploadChangeParam,\n  lesson_id: number | null | undefined,\n  lessons: API.Lesson[],\n): API.Lesson[] => {\n  return lessons?.map((lesson) => {\n    if (lesson.id === lesson_id) {\n      return {\n        ...lesson,\n        topics: lesson.topics?.map((topic) => {\n          if (topic.id === prevTopicId) {\n            return info.file.response.data;\n          }\n          return topic;\n        }),\n      };\n    } else if (lesson.lessons) {\n      return {\n        ...lesson,\n        lessons: recursiveTopicUploaded(prevTopicId, info, lesson_id, lesson.lessons || []),\n      };\n    }\n    return lesson;\n  });\n};\n\nexport const AppContext: React.FC<{ children: React.ReactNode; id: number }> = ({\n  children,\n  id,\n}) => {\n  const [state, setState] = useState<API.CourseProgram>();\n  const intl = useIntl();\n\n  const flatTopics: API.Topic[] = useMemo(() => {\n    return state && state.lessons ? getFlatTopics(state.lessons) : [];\n  }, [state]);\n\n  const flatLessons: API.Lesson[] = useMemo(() => {\n    return state && state.lessons ? getFlatLessons(state.lessons) : [];\n  }, [state]);\n\n  const [h5ps, setH5ps] = useState([]);\n\n  const l = useLocation() as Location & { query: { lesson?: string; topic?: string } };\n\n  useEffect(() => {\n    setH5ps([]);\n  }, []);\n\n  /*\n  useEffect(() => {\n    API(`h5p`, token)\n      .then((response) => response.json())\n      .then((data) => {\n        setH5ps(data);\n      });\n    //.then(() => addNewLesson());\n  }, []);\n  */\n\n  const getLessons = useCallback(() => {\n    program(id).then((data) => {\n      return (\n        data.success &&\n        setState({\n          ...data.data,\n          lessons: appendParentIdToLessons(data.data.lessons),\n        })\n      );\n    });\n  }, [id]);\n\n  useEffect(() => {\n    getLessons();\n  }, [getLessons]);\n\n  const getLessonIdByTopicId = useCallback(\n    (topic_id: number) => {\n      const lesson = flatLessons.find((lesson_item) =>\n        lesson_item?.topics?.find((topic) => topic.id === topic_id),\n      );\n      return lesson ? lesson.id : null;\n    },\n    [flatLessons],\n  );\n\n  const currentEditMode = useMemo<CurrentEditMode>(() => {\n    if (l.query?.lesson) {\n      return {\n        mode: 'lesson',\n        id: Number(l.query.lesson),\n        value: flatLessons.find((lesson) => lesson.id === Number(l.query.lesson)),\n      };\n    }\n    if (l.query?.topic) {\n      return {\n        mode: 'topic',\n        id: Number(l.query.topic),\n        value: flatTopics.find((t) => t.id === Number(l.query.topic)),\n      };\n    }\n    return { mode: 'init' };\n  }, [l.query, state, flatLessons, flatTopics]);\n\n  const addNewLesson = useCallback(\n    (parentId?: number) => {\n      const newLesson: API.Lesson = {\n        course_id: id,\n        topics: [],\n        isNew: true,\n        id: state ? state.lessons.length + 1 : getRandomId(), // New Lesson\n        order: 0,\n        title: intl.formatMessage({ id: 'add_title_here' }),\n        active: true,\n        parent_id: parentId,\n      };\n\n      setState((prevState) => ({\n        ...prevState,\n        lessons: recursiveAddLessonToLessons(prevState?.lessons ?? [], newLesson, parentId),\n        //lessons: [...(prevState ? prevState.lessons : []), newLesson] as API.Lesson[],\n      }));\n\n      return newLesson;\n    },\n    [id, state],\n  );\n\n  const updateLesson = useCallback(\n    (lesson_id: number, formData: FormData) => {\n      const newLesson = flatLessons.find((lesson) => lesson.id === lesson_id);\n      const isNew = newLesson && newLesson.isNew;\n\n      return (isNew ? apiCreateLesson(formData) : apiUpdateLesson(lesson_id, formData)).then(\n        (data) => {\n          message.success(data.message);\n          getLessons();\n          return (\n            data.success &&\n            setState((prevState) => ({\n              ...prevState,\n              lessons: recursiveEditLesson(prevState?.lessons ?? [], lesson_id, {\n                ...data.data,\n                isNew: false,\n              }),\n              /*\n              lessons: prevState?.lessons\n                ? prevState.lessons.map((lesson) => {\n                    if (lesson.id === lesson_id) {\n                      return {\n                        ...lesson,\n                        ...data.data,\n                        isNew: false,\n                      };\n                    }\n                    return lesson;\n                  })\n                : [data.data],\n                */\n            }))\n          );\n        },\n      );\n    },\n    [state],\n  );\n\n  const deleteLesson = useCallback(\n    (lesson_id: number) => {\n      const lesson = flatLessons.find((lesson_item) => lesson_item.id === lesson_id);\n      if (!lesson) {\n        return;\n      }\n      const { isNew } = lesson;\n\n      if (isNew) {\n        setState((prevState) => ({\n          ...prevState,\n          lessons: recursiveDeleteLesson(prevState?.lessons ?? [], lesson_id),\n        }));\n      } else {\n        apiRemoveLesson(lesson_id).then((data) => {\n          if (data.success) {\n            message.success(data.message);\n            setState((prevState) => ({\n              ...prevState,\n              lessons: recursiveDeleteLesson(prevState?.lessons ?? [], lesson_id),\n            }));\n          }\n        });\n      }\n    },\n    [state],\n  );\n\n  const updateTopic = useCallback(\n    (topic_id: number, formData: FormData) => {\n      const lesson_id = getLessonIdByTopicId(topic_id);\n\n      const lesson = flatLessons.find((lesson_item) => lesson_item.id === lesson_id);\n\n      const topic = lesson && lesson.topics?.find((topic_item) => topic_item.id === topic_id);\n\n      const isNew = topic?.isNew;\n\n      return (isNew ? apiCreateTopic(formData) : apiUpdateTopic(topic_id, formData)).then(\n        (data) => {\n          if (data.success) {\n            message.success(data.message);\n            getLessons();\n\n            history.push(`/courses/list/${id}/program/?topic=${data.data.id}`);\n\n            if (topic?.topicable_type === TopicType.Video) {\n              setTimeout(() => {\n                getLessons();\n              }, 5000);\n            }\n          }\n        },\n      );\n    },\n    [getLessonIdByTopicId, state, getLessons],\n  );\n\n  const deleteTopic = useCallback(\n    (topic_id: number) => {\n      const lesson_id = getLessonIdByTopicId(topic_id);\n\n      const lesson = flatLessons.find((lesson_item) => lesson_item.id === lesson_id);\n      if (!lesson) {\n        return;\n      }\n\n      const topic = flatTopics?.find((topic_item) => topic_item.id === topic_id);\n\n      const isNew = topic?.isNew;\n      if (isNew && !topic.topicable) {\n        setState((prevState) => ({\n          ...prevState,\n          lessons: recursiveDeleteTopic(prevState?.lessons ?? [], topic_id),\n        }));\n      } else {\n        apiRemoveTopic(topic_id).then((data) => {\n          if (data.success) {\n            message.success(data.message);\n            setState((prevState) => ({\n              ...prevState,\n              lessons: recursiveDeleteTopic(prevState?.lessons ?? [], topic_id),\n            }));\n          }\n        });\n\n        // TODO call API to delete\n        /**\n         return API(`topic/delete/${id}`, token, 'POST')\n        .then((response) => response.json())\n        .then(() =>\n          setState((prevState) => ({\n            ...prevState,\n            lessons: prevState.lessons.map((lesson) => {\n              if (lesson.id == id) {\n                return {\n                  ...lesson,\n                  topics: lesson.topics.filter((topic) => topic.id !== id),\n                };\n              }\n              return lesson;\n            }),\n          })),\n        );\n         */\n      }\n    },\n    [state, getLessonIdByTopicId],\n  );\n\n  /*\n  const addResource = useCallback(\n    (id, formData) => {\n      const isNew = false;\n\n      const id = getLessonByTopicId(id);\n\n      return API(`topic/resource/save/${id}`, token, 'POST', formData)\n        .then((response) => response.json())\n        .then((data) =>\n          setState((prevState) => ({\n            ...prevState,\n            lessons: prevState.lessons.map((lesson) => {\n              if (lesson.id == id) {\n                return {\n                  ...lesson,\n                  topics: lesson.topics.map((topic) => {\n                    if (topic.id == id) {\n                      return {\n                        ...topic,\n                        resources: [...topic.resources, data],\n                      };\n                    }\n                    return topic;\n                  }),\n                };\n              }\n              return lesson;\n            }),\n          })),\n        );\n    },\n    [state],\n  );\n  */\n\n  /*\n  const removeResource = useCallback(\n    (resource_id) => {\n      // resource/delete/{courseFiles}\n\n      const id = getQuizIdByResourseId(resource_id);\n      const id = getLessonByTopicId(id);\n\n      return API(`topic/resource/delete/${resource_id}`, token, 'DELETE', null)\n        .then((response) => response.json())\n        .then(() =>\n          setState((prevState) => ({\n            ...prevState,\n            lessons: prevState.lessons.map((lesson) => {\n              if (lesson.id == id) {\n                return {\n                  ...lesson,\n                  topics: lesson.topics.map((topic) => {\n                    if (topic.id == id) {\n                      return {\n                        ...topic,\n                        resources: topic.resources.filter(\n                          (resource) => resource.id !== resource_id,\n                        ),\n                      };\n                    }\n                    return topic;\n                  }),\n                };\n              }\n              return lesson;\n            }),\n          })),\n        );\n    },\n    [state],\n  );\n  */\n\n  /*\n  const updateH5P = useCallback(\n    (id, h5p_id) => {\n      const id = getLessonByTopicId(id);\n      return API(`topic/h5p/save/${id}`, token, 'POST', getFormData({ media: h5p_id }))\n        .then((response) => response.json())\n        .then((data) =>\n          setState((prevState) => ({\n            ...prevState,\n            lessons: prevState.lessons.map((lesson) => {\n              if (lesson.id == id) {\n                return {\n                  ...lesson,\n                  topics: lesson.topics.map((topic) => {\n                    if (topic.id == id) {\n                      return {\n                        ...topic,\n                        media: data,\n                      };\n                    }\n                    return topic;\n                  }),\n                };\n              }\n              return lesson;\n            }),\n          })),\n        );\n    },\n    [state],\n  );\n  */\n\n  const addNewTopic = useCallback((lesson_id: number, type: API.TopicType) => {\n    const newTopic: API.Topic = {\n      lesson_id,\n      isNew: true,\n      id: getRandomId(),\n      title: intl.formatMessage({ id: 'add_title_here' }),\n      active: true,\n      topicable_type: type,\n    };\n\n    setState((prevState) => ({\n      ...prevState,\n      lessons: recursiveAddTopicToLessons(prevState?.lessons ?? [], lesson_id, newTopic),\n    }));\n    return newTopic;\n  }, []);\n\n  const onTopicUploaded = (prevTopicId: number, info: UploadChangeParam) => {\n    const lesson_id = getLessonIdByTopicId(prevTopicId);\n    setState((prevState) => ({\n      ...prevState,\n      lessons: prevState\n        ? recursiveTopicUploaded(prevTopicId, info, lesson_id, prevState.lessons || [])\n        : [],\n      // Probably should be removed\n      // lessons: recursiveEditTopic(prevState?.lessons ?? [], prevTopicId, info.file.response.data),\n    }));\n    // Update topic id in params after receiving from server\n    history.push(`/courses/list/${id}/program/?topic=${info.file.response.data.id}`);\n  };\n\n  const cloneTopic = useCallback(\n    (topic_id: number) => {\n      return apiCloneTopic(topic_id).then((response) => {\n        if (response.success) {\n          message.success(response.message);\n          const lesson_id = getLessonIdByTopicId(topic_id);\n\n          setState((prevState) => ({\n            ...prevState,\n            lessons: prevState\n              ? prevState.lessons?.map((lesson) => {\n                  if (lesson.id === lesson_id) {\n                    const topics = lesson.topics || [];\n                    return {\n                      ...lesson,\n                      topics: [...topics, response.data] as API.Topic[],\n                    };\n                  }\n                  return lesson;\n                })\n              : [],\n          }));\n        }\n      });\n    },\n    [state, getLessonIdByTopicId],\n  );\n\n  const cloneLesson = useCallback((lesson_id: number) => {\n    return apiCloneLesson(lesson_id).then((response) => {\n      if (response.success) {\n        message.success(response.message);\n\n        setState((prevState) => ({\n          ...prevState,\n          lessons: prevState ? [...prevState.lessons, response.data] : [],\n        }));\n      }\n    });\n  }, []);\n\n  const value = {\n    state,\n    h5ps,\n    // token: credentials.token,\n    id,\n    addNewLesson,\n    updateLesson,\n    updateTopic,\n    // addResource,\n    // removeResource,\n    deleteLesson,\n    // updateH5P,\n    addNewTopic,\n    deleteTopic,\n    onTopicUploaded,\n    cloneTopic,\n    cloneLesson,\n    currentEditMode,\n    getLessons,\n  };\n\n  return <Context.Provider value={value}>{children}</Context.Provider>;\n};\n","import { request } from 'umi';\nimport type { RequestOptionsInit } from 'umi-request';\n\nexport async function reports(\n  params: {\n    // query\n    metric: API.ReportType;\n    date?: string;\n    limit?: number;\n  },\n  options?: RequestOptionsInit,\n) {\n  return request<API.ReportList>('/api/admin/reports/report', {\n    params,\n    method: 'GET',\n    /* useCache: true */ useCache: false,\n    ...(options || {}),\n  });\n}\n\n/* GET /api/admin/stats/course/:course_id/export */\nexport async function exportStatForCourse(\n  course_id: number,\n  params: API.ExportStatForCourseParams,\n  options?: RequestOptionsInit,\n) {\n  return request<Blob | API.DefaultResponseError>(`/api/admin/stats/course/${course_id}/export`, {\n    params,\n    method: 'GET',\n    /* useCache: true */ useCache: false,\n    responseType: 'blob',\n    headers: {\n      accept: 'application/vnd.ms-excel',\n    },\n    ...(options || {}),\n  });\n}\n"],"sourceRoot":""}