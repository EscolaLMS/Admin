{"version":3,"sources":["webpack:///./src/services/escola-lms/h5p.ts","webpack:///./src/pages/H5P/preview.tsx","webpack:///./src/components/H5P/player.tsx"],"names":["params","options","request","method","id","editorSettings","lang","url","contentSettings","body","headers","data","useParams","intl","useIntl","h5p","useState","title","setTitle","breadcrumb","routes","path","breadcrumbName","formatMessage","contents","Number","Title","Player","onXAPI","onLoaded","settings","setEditorSettings","loading","setLoading","XAPIEvents","setXAPIEvents","error","setError","locale","split","useEffect","then","success","message","catch","err","toString","finally","console","event","prevState","overflow","maxHeight"],"mappings":"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","file":"p__H5P__preview.9d5c2d13.async.js","sourcesContent":["import { request } from 'umi';\nimport type { RequestOptionsInit } from 'umi-request';\n\nexport async function h5p(params: API.H5PListParams, options?: RequestOptionsInit) {\n  return request<API.DefaultMetaResponse<API.H5PContentListItem>>(`/api/admin/hh5p/content`, {\n    method: 'GET',\n    params,\n    ...(options || {}),\n  });\n}\n\nexport async function getH5p(id: number, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.H5PObject>>(`/api/admin/hh5p/content/${id}`, {\n    method: 'GET',\n    ...(options || {}),\n  });\n}\n\nexport const editorSettings = (\n  id?: string | number,\n  lang: string = 'en',\n  options?: RequestOptionsInit,\n) => {\n  let url: string = id ? `/api/admin/hh5p/editor/${id}` : `/api/admin/hh5p/editor`;\n  url = lang ? `${url}?lang=${lang}` : url;\n  return request<API.DefaultResponse<API.H5PObject>>(url, {\n    method: 'GET',\n    ...(options || {}),\n  });\n};\n\nexport const contentSettings = (\n  id?: string | number,\n  lang: string = 'en',\n  options?: RequestOptionsInit,\n) => {\n  let url: string = `/api/admin/hh5p/content/${id}`;\n  url = lang ? `${url}?lang=${lang}` : url;\n  return request<API.DefaultResponse<API.H5PObject>>(url, {\n    method: 'GET',\n    ...(options || {}),\n  });\n};\n\nexport async function updateContent(\n  body: any,\n  id?: number | string | undefined,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<{ id: number }>>(\n    id ? `/api/admin/hh5p/content/${id}` : `/api/admin/hh5p/content`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      data: body,\n      ...(options || {}),\n    },\n  );\n}\n\nexport async function removeH5P(id: number) {\n  return request<API.DefaultResponse<unknown>>(`/api/admin/hh5p/content/${id}`, {\n    method: 'DELETE',\n  });\n}\n\nexport async function allContent(options?: RequestOptionsInit) {\n  return request<API.DefaultMetaResponse<API.H5PContentListItem>>(\n    '/api/admin/hh5p/content?per_page=0',\n    {\n      method: 'GET',\n      ...(options || {}),\n    },\n  );\n}\n","import { useState } from 'react';\nimport { useParams } from 'umi';\nimport { FormattedMessage, useIntl } from 'umi';\n\nimport H5Player from '@/components/H5P/player';\nimport { PageContainer } from '@ant-design/pro-layout';\nimport { Row, Col } from 'antd';\n\nimport ProCard from '@ant-design/pro-card';\n\nexport default () => {\n  const params = useParams<{ h5p?: string }>();\n  const intl = useIntl();\n\n  const { h5p } = params;\n  const [title, setTitle] = useState<string>('');\n  return (\n    <PageContainer\n      title={\n        <>\n          {title ? (\n            <FormattedMessage id=\"H5P_edit_content_title\" />\n          ) : (\n            <FormattedMessage id=\"H5P_new_content_title\" />\n          )}\n\n          {` ${title}`}\n        </>\n      }\n      header={{\n        breadcrumb: {\n          routes: [\n            {\n              path: 'h5ps',\n              breadcrumbName: intl.formatMessage({\n                id: 'H5P',\n              }),\n            },\n            {\n              path: title,\n              breadcrumbName: intl.formatMessage({\n                id: 'form',\n              }),\n            },\n          ],\n        },\n      }}\n    >\n      <ProCard direction=\"column\">\n        <Row>\n          <Col span={24}>\n            <H5Player\n              onLoaded={(data) => {\n                const contents = data.contents && data.contents[`cid-${h5p}`];\n                if (contents && contents.title) {\n                  setTitle(contents.title);\n                }\n              }}\n              id={Number(h5p)}\n            />{' '}\n          </Col>\n        </Row>\n      </ProCard>\n    </PageContainer>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { contentSettings } from '@/services/escola-lms/h5p';\nimport { ContextlessPlayer } from '@escolalms/h5p-react';\nimport type { EditorSettings } from '@escolalms/h5p-react';\nimport { useIntl } from 'umi';\nimport { Col, Row, Spin, Alert } from 'antd';\nimport ReactJson from 'react-json-view';\nimport { Divider, Typography } from 'antd';\nconst { Title } = Typography;\nimport type { XAPIEvent } from '@escolalms/h5p-react';\n\nexport const Player: React.FC<{\n  id: 'new' | number;\n  onXAPI?: (event: XAPIEvent) => void;\n  onLoaded?: (settings: API.H5PObject) => void;\n}> = ({ id, onXAPI, onLoaded }) => {\n  const [settings, setEditorSettings] = useState<EditorSettings>();\n  const [loading, setLoading] = useState<boolean>(false);\n  const [XAPIEvents, setXAPIEvents] = useState<XAPIEvent[]>([]);\n  const [error, setError] = useState<string>();\n\n  const intl = useIntl();\n  const lang = intl.locale.split('-')[0];\n\n  useEffect(() => {\n    if (id) {\n      setLoading(true);\n      contentSettings(id, lang)\n        .then((data) => {\n          if (data.success) {\n            if (onLoaded) {\n              onLoaded(data.data);\n            }\n            setEditorSettings(data.data);\n          } else {\n            setError(data.message);\n          }\n        })\n        .catch((err: any) => err && setError(err.toString()))\n        .finally(() => setLoading(false));\n    }\n  }, [id]);\n\n  if (!settings) {\n    return (\n      <Col>\n        <Row justify=\"center\" align=\"middle\">\n          {error && <Alert message={error} type=\"error\" />}\n          <Spin />\n        </Row>\n      </Col>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      {error && <Alert message={error} type=\"error\" />}\n      <ContextlessPlayer\n        contentId={id}\n        onError={(err: unknown) => console.error(err)}\n        state={settings}\n        allowSameOrigin\n        loading={loading}\n        onXAPI={(event: XAPIEvent) => {\n          if (onXAPI) {\n            onXAPI(event);\n          } else {\n            setXAPIEvents((prevState) => [...prevState, event]);\n          }\n        }}\n      />\n\n      {!onXAPI && (\n        <React.Fragment>\n          <Divider />\n          <div style={{ overflow: 'auto', maxHeight: '400px' }}>\n            <Title level={5}>XAPI Events</Title>\n            <ReactJson src={XAPIEvents} />\n          </div>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default Player;\n"],"sourceRoot":""}