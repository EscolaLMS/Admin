{"version":3,"sources":["webpack:///./src/pages/CompetencyChallenges/components/MainForm.tsx","webpack:///./src/pages/CompetencyChallenges/components/Scales.tsx","webpack:///./src/pages/CompetencyChallenges/components/ExportQuizQuestionsByCategoryModal.tsx","webpack:///./src/pages/CompetencyChallenges/components/DiagnosticTest.tsx","webpack:///./src/pages/CompetencyChallenges/form.tsx","webpack:///./src/services/escola-lms/competency-challenges.ts","webpack:///./src/pages/CompetencyChallenges/components/CompetencyChallengeCategoryTree.tsx","webpack:///./src/components/WysiwygMarkdown/index.tsx","webpack:///./src/pages/CompetencyChallenges/context.tsx","webpack:///./src/components/GiftQuizQuestions/ExportQuizQuestionsModal.tsx","webpack:///./src/components/GiftQuizQuestions/editor/question/MultipleChoice.tsx","webpack:///./src/components/GiftQuizQuestions/editor/question/TrueFalse.tsx","webpack:///./src/components/GiftQuizQuestions/editor/question/ShortAnswers.tsx","webpack:///./src/components/GiftQuizQuestions/editor/question/Matching.tsx","webpack:///./src/components/GiftQuizQuestions/editor/question/Numerical.tsx","webpack:///./src/components/GiftQuizQuestions/editor/question/Essay.tsx","webpack:///./src/components/GiftQuizQuestions/editor/question/index.tsx","webpack:///./src/components/GiftQuizQuestions/editor/utils.ts","webpack:///./src/components/GiftQuizQuestions/editor/index.tsx","webpack:///./src/components/GiftQuizQuestions/table.tsx"],"names":["typeOptions","Object","values","CompetencyChallengeType","map","value","label","MainForm","useCompetencyChallengeContext","competencyChallenge","categoryDepths","refreshData","params","useParams","competency_challenge_id","Number","id","intl","useIntl","ProForm","useForm","form","selectedType","useWatch","isNew","isNaN","initialValues","useMemo","data","authors","category","restValues","category_id","addCompetencyChallenge","useCallback","name","type","is_active","is_highlighted","createCompetencyChallenge","res","success","error","message","formatMessage","history","push","changeCompetencyChallenge","formValues","getFieldsValue","image_url","image_path","updateCompetencyChallenge","changedValues","setFieldValue","required","role","width","maxWidth","info","file","response","paths","setFieldsValue","staticColumns","title","dataIndex","editable","render","_n","record","split","state","valueType","formItemProps","rules","min","max","fieldProps","category_name","renderFormItem","_s","_c","disabledNodes","getFieldValue","getDefaultData","scales","scale_min","name_with_breadcrumbs","Scales","useState","editableKeys","setEditableRowKeys","formRef","useRef","editableFormRef","actionRef","defaultData","columns","_i","action","startEditable","idStr","currentData","current","filter","deleteCompetencyChallengeScale","table","r","creatorButtonText","disabled","length","index","onlyOneLineEditorAlertMessage","onSave","_k","createCompetencyChallengeScale","updateCompetencyChallengeScale","deletePopconfirmMessage","actionRender","dom","save","delete","cancel","onChange","ExportQuizQuestionsByCategoryModal","quiz_id","visible","onVisibleChange","onFormSubmit","category_ids","exportQuizQuestions","Blob","downloadLink","document","createElement","href","window","URL","createObjectURL","download","body","appendChild","click","removeChild","console","DiagnosticTest","exportQuestionsByCategoryModal","setExportQuestionsByCategoryModal","loading","setLoading","quizData","setQuizData","openExportQuestionsByCategoryModal","fetchQuiz","undefined","getGiftQuiz","then","finally","onFormFinish","formData","updateGiftQuiz","useEffect","position","paddingBottom","_p","reset","submit","bottom","left","defaultMessage","questions","CompetencyChallengeContent","tab","pageTitle","breadcrumb","routes","path","breadcrumbName","String","padding","cardProps","activeKey","key","CompetencyChallenge","options","request","method","useCache","headers","competency_challenge_scale_id","treeConvert","enabledDepth","depth","subcategories","includes","children","cat","CompetencyChallengeCategoryTree","multiple","categories","setCategories","categoriesToShow","treeData","categoryTree","maxHeight","overflow","EmbedUploaded","attrs","filename","pop","FormWysiwyg","directory","matcher","url","component","upload","result","resizePath","resizedImage","Error","v","scale","question","warn","Context","React","createContext","useContext","CompetencyChallengeContextProvider","setCompetencyChallenge","setCategoryDepths","prev","getCompetencyChallenge","errors","fetchCategoryDepths","getConfig","escolalms_competency_challenge","ExportQuizQuestionsModal","quizQuestions","ids","questionsOptions","giftQuestionArr","parse","stem","text","e","INITIAL_VALUES","QuestionType","MULTIPLE_CHOICE","isCorrect","MULTIPLE_CHOICE_WITH_MULTIPLE_RIGHT_ANSWERS","weight","GiftQuizQuestionMultipleChoiceEditor","field","i","count","ordinalNumber","remove","display","justifyContent","validator","answers","answer","Promise","reject","resolve","MAX_SAFE_INTEGER","addonAfter","GiftQuizQuestionTrueFalseEditor","GiftQuizQuestionShortEditor","tooltipText","_f","_a","deleteButton","firstOfPair","secondOfPair","GiftQuizQuestionMatchingEditor","style","flexWrap","GiftQuizQuestionNumericalEditor","GiftQuizQuestionEssayEditor","GiftQuizQuestion","TRUE_FALSE","SHORT_ANSWERS","MATCHING","NUMERICAL_QUESTION","ESSAY","DESCRIPTION","escapeQuestionSpecialChars","inputString","charsToEscape","escapedString","currentChar","parseMultipleChoice","escapedAnswers","giftString","sign","trim","parseMultipleChoiceWithMultipleRightAnswers","parseTrueFalse","parseShortAnswers","parseMatching","parseNumerical","errorMargin","parseEssay","parseDescription","parseToGIFT","safeFormData","parseMultipleChoiceToFormData","parsedValue","score","isMultipleChoice","choices","every","reduce","acc","parseTrueFalseToFormData","isTrue","parseShortAnswersToFormData","parseMatchingToFormData","matchPairs","subquestion","subanswer","parseNumericalToFormData","Array","isArray","number","range","parseDescriptionEssayToFormData","questionBase","VALUES_NOT_TO_RESET","TYPE_OPTIONS","q","GiftQuizQuestionEditor","onSubmit","competencyChallengeCategoryTreeProps","parseToFormData","onFinish","status","resetFields","fields","fieldsToReset","keys","DragHandle","SortableHandle","cursor","color","SortableItem","SortableElement","props","SortContainer","SortableContainer","className","hideInForm","hideInSearch","hideInSetting","_","row","obj","categoryColumn","Table","onAdded","onRemoved","onEdited","quizId","tableLoading","tableHeader","questionsCategory","customToolbarElements","newQuestion","setNewQuestion","editQuestion","setEditQuestion","exportQuestions","setExportQuestions","debug","setDebug","dataSource","setDataSource","reload","onSortEnd","oldIndex","newIndex","newData","arrayMoveImmutable","slice","Boolean","order","forEach","newRow","updateQuestion","topic_gift_quiz_id","DraggableContainer","DraggableBodyRow","restProps","findIndex","x","onNewQuestionSubmit","createQuestion","log","onEditQuestionSubmit","bodyStyle","settings","deleteQuestion","wrapper","marginTop"],"mappings":"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","file":"p__CompetencyChallenges__form.d7cc02cd.async.js","sourcesContent":["import React, { useCallback, useMemo } from 'react';\nimport { FormattedMessage, history, useIntl, useParams } from 'umi';\nimport { message } from 'antd';\nimport ProForm, {\n  ProFormSelect,\n  ProFormSwitch,\n  ProFormText,\n  ProFormTextArea,\n} from '@ant-design/pro-form';\n\nimport CategoryTree from '@/components/CategoryTree';\nimport UserSelect from '@/components/UserSelect';\nimport ProFormImageUpload from '@/components/ProFormImageUpload';\nimport WysiwygMarkdown from '@/components/WysiwygMarkdown';\nimport {\n  createCompetencyChallenge,\n  updateCompetencyChallenge,\n} from '@/services/escola-lms/competency-challenges';\nimport { CompetencyChallengeType } from '@/services/escola-lms/enums';\nimport { useCompetencyChallengeContext } from '../context';\n\nconst typeOptions = Object.values(CompetencyChallengeType).map((value) => ({\n  value,\n  label: <FormattedMessage id={`CompetencyChallenges.types.${value}`} />,\n}));\n\nexport const MainForm: React.FC = () => {\n  const { competencyChallenge, categoryDepths, refreshData } = useCompetencyChallengeContext();\n  const params = useParams<{ id?: string }>();\n  const competency_challenge_id = Number(params.id);\n\n  const intl = useIntl();\n  const [form] = ProForm.useForm();\n  const selectedType = ProForm.useWatch('type', form);\n\n  const isNew = Number.isNaN(competency_challenge_id);\n\n  const initialValues = useMemo(() => {\n    if (!competencyChallenge?.data) return {};\n    const { authors, category, ...restValues } = competencyChallenge?.data;\n\n    return { ...restValues, authors: authors.map(({ id }) => id), category_id: category?.id };\n  }, [competencyChallenge?.data]);\n\n  const addCompetencyChallenge = useCallback(\n    async ({\n      name,\n      type,\n      is_active = false,\n      is_highlighted = false,\n      category_id,\n    }: API.CreateCompetencyChallenge) => {\n      try {\n        const res = await createCompetencyChallenge({\n          name,\n          is_active,\n          is_highlighted,\n          type,\n          category_id,\n        });\n\n        if (!res.success) {\n          message.error(res.message);\n          return;\n        }\n\n        message.success(intl.formatMessage({ id: res.message }));\n        history.push(`/competency-challenges/${res.data.id}/main`);\n        await refreshData();\n      } catch {\n        message.error(intl.formatMessage({ id: 'error' }));\n      }\n    },\n    [],\n  );\n\n  const changeCompetencyChallenge = useCallback(\n    async (formValues: API.UpdateCompetencyChallenge) => {\n      try {\n        // those values don't have inputs, so we have to do it manually\n        const { image_url, image_path }: { image_url: string; image_path: string } =\n          form.getFieldsValue(['image_url', 'image_path']);\n\n        const res = await updateCompetencyChallenge(competency_challenge_id, {\n          ...formValues,\n          image_url,\n          image_path,\n        });\n\n        if (!res.success) {\n          message.error(res.message);\n          return;\n        }\n\n        message.success(intl.formatMessage({ id: res.message }));\n        await refreshData();\n      } catch {\n        message.error(intl.formatMessage({ id: 'error' }));\n      }\n    },\n    [competency_challenge_id],\n  );\n\n  return (\n    <ProForm\n      form={form}\n      initialValues={initialValues}\n      onFinish={isNew ? addCompetencyChallenge : changeCompetencyChallenge}\n      onValuesChange={(changedValues) => {\n        if (changedValues?.type === 'complex') {\n          form.setFieldValue('category', null);\n        }\n      }}\n    >\n      <ProForm.Group title={<FormattedMessage id=\"CompetencyChallenges.base\" />}>\n        <ProFormText\n          width=\"md\"\n          name=\"name\"\n          label={<FormattedMessage id=\"name\" />}\n          placeholder={intl.formatMessage({ id: 'name' })}\n          required\n          rules={[{ required: true, message: intl.formatMessage({ id: 'field_required' }) }]}\n        />\n        <ProFormSelect\n          width=\"md\"\n          name=\"type\"\n          label={<FormattedMessage id=\"type\" />}\n          options={typeOptions}\n          required\n          rules={[{ required: true, message: intl.formatMessage({ id: 'field_required' }) }]}\n        />\n        {selectedType === 'simple' && (\n          <ProForm.Item\n            name=\"category_id\"\n            required\n            label={<FormattedMessage id=\"category\" />}\n            rules={[{ required: true, message: intl.formatMessage({ id: 'field_required' }) }]}\n          >\n            <CategoryTree enabledDepth={categoryDepths.role} />\n          </ProForm.Item>\n        )}\n        <ProFormSwitch name=\"is_active\" label={<FormattedMessage id=\"is_active\" />} />\n        <ProFormSwitch\n          name=\"is_highlighted\"\n          label={<FormattedMessage id=\"is_highlighted\" />}\n          tooltip={<FormattedMessage id=\"CompetencyChallenges.highlighted\" />}\n        />\n      </ProForm.Group>\n      {!isNew && (\n        <>\n          <ProForm.Group title={<FormattedMessage id=\"CompetencyChallenges.additional\" />}>\n            <ProForm.Item\n              name=\"description\"\n              label={<FormattedMessage id=\"description\" />}\n              valuePropName=\"value\"\n              style={{\n                width: 440,\n              }}\n            >\n              <WysiwygMarkdown directory={`competency-challenges/${competency_challenge_id}`} />\n            </ProForm.Item>\n            <ProFormTextArea width=\"lg\" name=\"summary\" label={<FormattedMessage id=\"summary\" />} />\n            <ProForm.Item\n              name=\"authors\"\n              label={<FormattedMessage id=\"author\" />}\n              style={{ width: '100%', maxWidth: 440 }}\n            >\n              <UserSelect multiple />\n            </ProForm.Item>\n          </ProForm.Group>\n          <ProFormImageUpload\n            wrapInForm={false}\n            folder={`/competency-challenges/${competency_challenge_id}`}\n            title=\"image\"\n            action={`/api/admin/competency-challenges/${competency_challenge_id}?_method=PATCH`}\n            src_name=\"image_url\"\n            form_name=\"image\"\n            getUploadedSrcField={(info) => info.file.response.data.image_url}\n            setPath={(paths) => form.setFieldsValue(paths)}\n          />\n        </>\n      )}\n    </ProForm>\n  );\n};\n","import React, { useMemo, useRef, useState } from 'react';\nimport { FormattedMessage, useIntl, useParams } from 'umi';\nimport { Button, Popconfirm, Tooltip } from 'antd';\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons';\nimport ProForm, { type ProFormInstance } from '@ant-design/pro-form';\nimport { EditableProTable } from '@ant-design/pro-table';\nimport type { ActionType, EditableFormInstance, ProColumns } from '@ant-design/pro-table';\n\nimport {\n  createCompetencyChallengeScale,\n  deleteCompetencyChallengeScale,\n  updateCompetencyChallengeScale,\n} from '@/services/escola-lms/competency-challenges';\nimport { CompetencyChallengeCategoryTree } from './CompetencyChallengeCategoryTree';\nimport { useCompetencyChallengeContext } from '../context';\n\ntype DataSourceType = {\n  id: React.Key;\n  scale_min: number;\n  category_id: number;\n  category_name: string;\n};\n\nconst staticColumns: ProColumns<DataSourceType>[] = [\n  {\n    title: <FormattedMessage id=\"ID\" />,\n    dataIndex: 'id',\n    editable: false,\n    render: (_n, record) => {\n      if (typeof record.id !== 'string') return '-';\n      const [state, id] = record.id.split('-');\n\n      if (state === 'new') return '-';\n\n      return id;\n    },\n  },\n  {\n    title: <FormattedMessage id=\"min_points\" />,\n    dataIndex: 'scale_min',\n    valueType: 'digit',\n    formItemProps: {\n      rules: [\n        {\n          required: true,\n          message: <FormattedMessage id=\"field_required\" />,\n        },\n        {\n          type: 'number',\n          min: 0,\n          max: 100,\n          message: <FormattedMessage id=\"number_between\" values={{ min: 0 }} />,\n        },\n      ],\n    },\n    fieldProps: {\n      min: 0,\n    },\n  },\n  {\n    title: <FormattedMessage id=\"category\" />,\n    dataIndex: 'category_id',\n    render: (_n, record) => record.category_name,\n    formItemProps: {\n      rules: [\n        {\n          required: true,\n          message: <FormattedMessage id=\"field_required\" />,\n        },\n      ],\n    },\n    renderFormItem: (_s, _c, form) => {\n      const disabledNodes: number[] = (form.getFieldValue('table') ?? []).map(\n        (record: DataSourceType) => record.category_id,\n      );\n\n      return <CompetencyChallengeCategoryTree disabledNodes={disabledNodes} />;\n    },\n  },\n];\n\nconst getDefaultData = (scales: API.CompetencyChallengeScale[]): DataSourceType[] =>\n  scales.map(({ id, scale_min, category }) => ({\n    // due to key errors\n    id: `old-${id}`,\n    scale_min,\n    category_id: category.id,\n    category_name: category.name_with_breadcrumbs,\n  }));\n\nexport const Scales: React.FC = () => {\n  const { competencyChallenge, refreshData } = useCompetencyChallengeContext();\n  const params = useParams<{ id?: string }>();\n  const competency_challenge_id = Number(params.id);\n  const scales = competencyChallenge?.data?.scales ?? [];\n\n  const [editableKeys, setEditableRowKeys] = useState<React.Key[]>([]);\n\n  const intl = useIntl();\n  const formRef = useRef<ProFormInstance>();\n  const editableFormRef = useRef<EditableFormInstance>();\n  const actionRef = useRef<ActionType>();\n\n  const defaultData = useMemo(() => getDefaultData(scales), [scales]);\n\n  const columns: ProColumns<DataSourceType>[] = useMemo(() => {\n    return [\n      ...staticColumns,\n\n      {\n        valueType: 'option',\n        title: <FormattedMessage id=\"options\" />,\n        render: (_n, record, _i, action) => [\n          <Tooltip key=\"edit\" title={<FormattedMessage id=\"edit\" defaultMessage=\"edit\" />}>\n            <Button\n              type=\"primary\"\n              icon={<EditOutlined />}\n              onClick={() => action?.startEditable(record.id)}\n            />\n          </Tooltip>,\n          <Popconfirm\n            key=\"delete\"\n            title={\n              <FormattedMessage\n                id=\"deleteQuestion\"\n                defaultMessage=\"Are you sure to delete this record?\"\n              />\n            }\n            onConfirm={async () => {\n              if (typeof record.id !== 'string') return;\n              const [state, idStr] = record.id.split('-');\n\n              if (state === 'new') {\n                const currentData: DataSourceType[] = formRef.current?.getFieldValue('table');\n\n                formRef.current?.setFieldValue(\n                  'table',\n                  currentData.filter(({ id }) => id !== record.id),\n                );\n                return;\n              }\n\n              const response = await deleteCompetencyChallengeScale(+idStr);\n              if (response.success) {\n                await refreshData();\n              }\n            }}\n            okText={<FormattedMessage id=\"ok\" />}\n            cancelText={<FormattedMessage id=\"cancel\" />}\n          >\n            <Tooltip title={<FormattedMessage id=\"delete\" defaultMessage=\"delete\" />}>\n              <Button type=\"primary\" icon={<DeleteOutlined />} danger />\n            </Tooltip>\n          </Popconfirm>,\n        ],\n      },\n    ];\n  }, []);\n\n  return (\n    <ProForm<{\n      table: DataSourceType[];\n    }>\n      formRef={formRef}\n      initialValues={{\n        table: defaultData,\n      }}\n      submitter={false}\n    >\n      <EditableProTable<DataSourceType>\n        rowKey={(r) => r.id}\n        editableFormRef={editableFormRef}\n        controlled\n        actionRef={actionRef}\n        name=\"table\"\n        columns={columns}\n        recordCreatorProps={{\n          creatorButtonText: <FormattedMessage id=\"CompetencyChallenges.addNewRow\" />,\n          disabled: editableKeys.length > 0,\n          record: (index) => ({ id: `new-${index}` } as DataSourceType),\n        }}\n        editable={{\n          onlyOneLineEditorAlertMessage: intl.formatMessage({\n            id: 'CompetencyChallenges.onlyOneRowIsEditable',\n          }),\n          onSave: async (_k, { scale_min, category_id, ...record }) => {\n            if (typeof record.id !== 'string') return;\n\n            const [state, idStr] = record.id.split('-');\n            if (state === 'new') {\n              const res = await createCompetencyChallengeScale({\n                scale_min,\n                category_id,\n                competency_challenge_id,\n              });\n\n              if (res.success) {\n                await refreshData();\n              }\n\n              return;\n            }\n\n            const res = await updateCompetencyChallengeScale(+idStr, {\n              scale_min,\n              category_id,\n              competency_challenge_id,\n            });\n            if (res.success) {\n              await refreshData();\n            }\n            return;\n          },\n          deletePopconfirmMessage: <FormattedMessage id=\"deleteQuestion\" />,\n          actionRender: (record, _c, dom) => {\n            if (typeof record.id !== 'string') return [];\n\n            const [state] = record.id.split('-');\n            if (state === 'new') return [dom.save, dom.delete];\n\n            return [dom.save, dom.cancel];\n          },\n          type: 'single',\n          editableKeys,\n          onChange: setEditableRowKeys,\n        }}\n      />\n    </ProForm>\n  );\n};\n","import React, { useCallback } from 'react';\nimport { FormattedMessage } from 'umi';\nimport ProForm, { ModalForm } from '@ant-design/pro-form';\n\nimport { exportQuizQuestions } from '@/services/escola-lms/gift_quiz';\nimport { CompetencyChallengeCategoryTree } from './CompetencyChallengeCategoryTree';\n\ninterface FormData {\n  category_ids: number[];\n}\ninterface Props {\n  quiz_id: number;\n  visible: boolean;\n  onVisibleChange: (visible: boolean) => void;\n}\n\nexport const ExportQuizQuestionsByCategoryModal: React.FC<Props> = ({\n  quiz_id,\n  visible,\n  onVisibleChange,\n}) => {\n  const [form] = ProForm.useForm<FormData>();\n\n  const onFormSubmit = useCallback(\n    async ({ category_ids }: FormData) => {\n      try {\n        const response = await exportQuizQuestions({ quiz_id, category_ids });\n        if (response instanceof Blob) {\n          const downloadLink = document.createElement('a');\n\n          downloadLink.href = window.URL.createObjectURL(response);\n          downloadLink.download = `quiz_${quiz_id}_questions_by_category_id.xlsx`;\n          document.body.appendChild(downloadLink);\n          downloadLink.click();\n          document.body.removeChild(downloadLink);\n        }\n      } catch (e) {\n        console.error(e);\n      } finally {\n        onVisibleChange(false);\n      }\n    },\n    [quiz_id],\n  );\n\n  return (\n    <ModalForm\n      title={<FormattedMessage id=\"exportQuestions\" />}\n      form={form}\n      visible={visible}\n      onVisibleChange={onVisibleChange}\n      onFinish={onFormSubmit}\n    >\n      <ProForm.Item\n        name=\"category_ids\"\n        label={<FormattedMessage id=\"categories\" />}\n        required\n        rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n      >\n        <CompetencyChallengeCategoryTree multiple type=\"question\" />\n      </ProForm.Item>\n    </ModalForm>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { useIntl, FormattedMessage } from 'umi';\nimport { Button, Divider, Space, Spin } from 'antd';\nimport ProForm, { ProFormDigit, ProFormGroup } from '@ant-design/pro-form';\nimport { ExportOutlined } from '@ant-design/icons';\n\nimport { Table } from '@/components/GiftQuizQuestions/table';\nimport { getGiftQuiz, updateGiftQuiz } from '@/services/escola-lms/gift_quiz';\nimport { useCompetencyChallengeContext } from '../context';\nimport { ExportQuizQuestionsByCategoryModal } from './ExportQuizQuestionsByCategoryModal';\n\ninterface FormData {\n  max_attempts: number;\n  max_execution_time: number;\n}\n\nexport const DiagnosticTest: React.FC = () => {\n  const {\n    competencyChallenge: { data },\n  } = useCompetencyChallengeContext();\n\n  const [exportQuestionsByCategoryModal, setExportQuestionsByCategoryModal] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [quizData, setQuizData] = useState<API.GiftQuiz>();\n  const intl = useIntl();\n\n  const openExportQuestionsByCategoryModal = useCallback(\n    () => setExportQuestionsByCategoryModal(true),\n    [],\n  );\n\n  const fetchQuiz = useCallback(() => {\n    if (data?.quiz_id === undefined) return;\n\n    setLoading(true);\n    getGiftQuiz(data?.quiz_id)\n      .then((res) => {\n        if (res.success) {\n          setQuizData(res.data);\n        }\n      })\n      .finally(() => setLoading(false));\n  }, [data?.quiz_id]);\n\n  const onFormFinish = useCallback(async (formData: FormData) => {\n    if (data?.quiz_id === undefined) return;\n\n    setLoading(true);\n    updateGiftQuiz(data?.quiz_id, { ...formData, value: 'diagnostic-test' })\n      .then((res) => {\n        if (res.success) {\n          setQuizData(res.data);\n        }\n      })\n      .finally(() => setLoading(false));\n  }, []);\n\n  useEffect(() => {\n    fetchQuiz();\n  }, [fetchQuiz]);\n\n  if (!quizData) return <Spin />;\n\n  return (\n    <>\n      <ExportQuizQuestionsByCategoryModal\n        visible={exportQuestionsByCategoryModal}\n        onVisibleChange={setExportQuestionsByCategoryModal}\n        quiz_id={quizData.id}\n      />\n      <div style={{ position: 'relative', paddingBottom: '64px' }}>\n        <ProForm<FormData>\n          submitter={{\n            render: (_p, [reset, submit]) => (\n              <Space style={{ position: 'absolute', bottom: 0, left: 0 }}>\n                {reset}\n                {submit}\n              </Space>\n            ),\n          }}\n          initialValues={quizData}\n          onFinish={onFormFinish}\n        >\n          <ProFormGroup>\n            <ProFormDigit\n              name=\"max_attempts\"\n              label={<FormattedMessage id=\"max_attempts\" />}\n              tooltip={<FormattedMessage id=\"max_attempts\" />}\n              placeholder={intl.formatMessage({\n                id: 'max_attempts',\n                defaultMessage: 'max_attempts',\n              })}\n            />\n            <ProFormDigit\n              name=\"max_execution_time\"\n              label={<FormattedMessage id=\"max_execution_time\" />}\n              tooltip={<FormattedMessage id=\"max_execution_time\" />}\n              placeholder={intl.formatMessage({\n                id: 'max_execution_time',\n                defaultMessage: 'max_execution_time',\n              })}\n            />\n          </ProFormGroup>\n        </ProForm>\n        <Divider />\n        <Table\n          questions={quizData.questions}\n          quizId={quizData.id}\n          onAdded={fetchQuiz}\n          onEdited={fetchQuiz}\n          onRemoved={fetchQuiz}\n          tableHeader={<FormattedMessage id=\"questions\" />}\n          tableLoading={loading}\n          questionsCategory={{ type: 'question' }}\n          customToolbarElements={[\n            <Button\n              key=\"export_by_category\"\n              type=\"primary\"\n              icon={<ExportOutlined />}\n              onClick={openExportQuestionsByCategoryModal}\n            >\n              {' '}\n              <FormattedMessage id=\"exportQuestionsByCategory\" />\n            </Button>,\n          ]}\n        />\n      </div>\n    </>\n  );\n};\n","import React, { useMemo } from 'react';\nimport { history, FormattedMessage, useIntl, useParams } from 'umi';\nimport { Spin } from 'antd';\nimport { PageContainer } from '@ant-design/pro-layout';\nimport ProCard from '@ant-design/pro-card';\n\nimport { CompetencyChallengeContextProvider, useCompetencyChallengeContext } from './context';\nimport { MainForm } from './components/MainForm';\nimport { Scales } from './components/Scales';\nimport { DiagnosticTest } from './components/DiagnosticTest';\n\nconst CompetencyChallengeContent: React.FC = () => {\n  const { competencyChallenge } = useCompetencyChallengeContext();\n  const intl = useIntl();\n  const { id, tab = 'main' } = useParams<{ id?: string; tab?: string }>();\n  const isNew = id === 'new';\n\n  const pageTitle = useMemo(() => {\n    if (isNew) return intl.formatMessage({ id: 'CompetencyChallenges.new_challenge' });\n    if (competencyChallenge.data?.name) return competencyChallenge.data.name;\n\n    return intl.formatMessage({ id: 'menu.Competency challenges' });\n  }, [intl, competencyChallenge.data?.name]);\n\n  return (\n    <PageContainer\n      title={pageTitle}\n      header={{\n        breadcrumb: {\n          routes: [\n            {\n              path: 'competency-challenges',\n              breadcrumbName: intl.formatMessage({\n                id: 'menu.Competency challenges',\n              }),\n            },\n            {\n              path: String(id),\n              breadcrumbName: pageTitle,\n            },\n            {\n              path: tab,\n              breadcrumbName: intl.formatMessage({ id: `CompetencyChallenges.${tab}` }),\n            },\n          ],\n        },\n      }}\n    >\n      <ProCard\n        bodyStyle={{ padding: '24px' }}\n        tabs={{\n          type: 'card',\n          cardProps: { loading: competencyChallenge.loading && <Spin /> },\n          activeKey: tab,\n          onChange: (key) => {\n            history.push(`/competency-challenges/${id}/${key}`);\n          },\n        }}\n      >\n        <ProCard.TabPane key=\"main\" tab={<FormattedMessage id=\"CompetencyChallenges.main\" />}>\n          <MainForm />\n        </ProCard.TabPane>\n        <ProCard.TabPane\n          key=\"scales\"\n          tab={<FormattedMessage id=\"CompetencyChallenges.scales\" />}\n          disabled={isNew}\n        >\n          <Scales />\n        </ProCard.TabPane>\n        <ProCard.TabPane\n          key=\"diagnostic-test\"\n          tab={<FormattedMessage id=\"CompetencyChallenges.diagnostic-test\" />}\n          disabled={isNew}\n        >\n          <DiagnosticTest />\n        </ProCard.TabPane>\n      </ProCard>\n    </PageContainer>\n  );\n};\n\nconst CompetencyChallenge: React.FC = () => (\n  <CompetencyChallengeContextProvider>\n    <CompetencyChallengeContent />\n  </CompetencyChallengeContextProvider>\n);\n\nexport default CompetencyChallenge;\n","import { request } from 'umi';\nimport type { RequestOptionsInit } from 'umi-request';\n\n/**  GET /api/admin/competency-challenges */\nexport async function getCompetencyChallenges(\n  params?: API.CompetencyChallengesParams,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultMetaResponse<API.CompetencyChallenge>>(\n    `/api/admin/competency-challenges`,\n    {\n      method: 'GET',\n      /* useCache: true */ useCache: false,\n      params,\n      ...(options || {}),\n    },\n  );\n}\n\n/** GET /api/admin/competency-challenges/:competency_challenge_id */\nexport async function getCompetencyChallenge(\n  competency_challenge_id: number,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.CompetencyChallenge>>(\n    `/api/admin/competency-challenges/${competency_challenge_id}`,\n    {\n      method: 'GET',\n      /* useCache: true */ useCache: false,\n      ...(options || {}),\n    },\n  );\n}\n\n/** POST /api/admin/competency-challenges */\nexport async function createCompetencyChallenge(\n  body: API.CreateCompetencyChallenge,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.CompetencyChallenge>>(`/api/admin/competency-challenges`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    data: body,\n    ...(options || {}),\n  });\n}\n\n/** PUT /api/admin/competency-challenges/:competency_challenge_id */\nexport async function updateCompetencyChallenge(\n  competency_challenge_id: number,\n  body: API.UpdateCompetencyChallenge,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.CompetencyChallenge>>(\n    `/api/admin/competency-challenges/${competency_challenge_id}`,\n    {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      data: body,\n      ...(options || {}),\n    },\n  );\n}\n\n/**  DELETE /api/admin/competency-challenges/:competency_challenge_id */\nexport async function deleteCompetencyChallenge(\n  competency_challenge_id: number,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DeleteResponse>(\n    `/api/admin/competency-challenges/${competency_challenge_id}`,\n    {\n      method: 'DELETE',\n      ...(options || {}),\n    },\n  );\n}\n\n/** POST /api/admin/competency-challenges/scales */\nexport async function createCompetencyChallengeScale(\n  body: API.CreateCompetencyChallengeScale,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.CompetencyChallengeScale>>(\n    `/api/admin/competency-challenges/scales`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      data: body,\n      ...(options || {}),\n    },\n  );\n}\n\n/** PATCH /api/admin/competency-challenges/scales/:competency_challenge_scale_id */\nexport async function updateCompetencyChallengeScale(\n  competency_challenge_scale_id: number,\n  body: API.CreateCompetencyChallengeScale,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.CompetencyChallengeScale>>(\n    `/api/admin/competency-challenges/scales/${competency_challenge_scale_id}`,\n    {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      data: body,\n      ...(options || {}),\n    },\n  );\n}\n\n/**  DELETE /api/admin/competency-challenges/scales/:competency_challenge_scale_id */\nexport async function deleteCompetencyChallengeScale(\n  competency_challenge_scale_id: number,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DeleteResponse>(\n    `/api/admin/competency-challenges/scales/${competency_challenge_scale_id}`,\n    {\n      method: 'DELETE',\n      ...(options || {}),\n    },\n  );\n}\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { FormattedMessage } from 'umi';\nimport { TreeSelect } from 'antd';\n\nimport { categoryTree } from '@/services/escola-lms/category';\nimport { useCompetencyChallengeContext } from '../context';\n\ntype TreeNodeType = {\n  title: string;\n  value: number;\n  disabled?: boolean;\n  children?: TreeNodeType[];\n};\n\nconst treeConvert = (\n  category: API.Category,\n  disabledNodes: number[],\n  enabledDepth: number,\n  depth: number = 0,\n): TreeNodeType => {\n  return category.subcategories?.length\n    ? {\n        title: category.name,\n        value: category.id,\n        disabled: depth !== enabledDepth || disabledNodes.includes(category.id),\n        children: category.subcategories.map((cat) =>\n          treeConvert(cat, disabledNodes, enabledDepth, depth + 1),\n        ),\n      }\n    : {\n        title: category.name,\n        value: category.id,\n        disabled: depth !== enabledDepth || disabledNodes.includes(category.id),\n      };\n};\n\nexport interface CompetencyChallengeCategoryTreeProps {\n  value?: string | string[] | number | number[];\n  onChange?: (value: string | string[] | number | number[]) => void;\n  type?: 'scale' | 'question';\n  disabledNodes?: number[]; // categories id arr\n  multiple?: boolean;\n}\n\nexport const CompetencyChallengeCategoryTree: React.FC<CompetencyChallengeCategoryTreeProps> = ({\n  value,\n  onChange,\n  type = 'scale',\n  disabledNodes = [],\n  multiple = false,\n}) => {\n  const [categories, setCategories] = useState<API.Category[]>([]);\n  const { categoryDepths, competencyChallenge } = useCompetencyChallengeContext();\n\n  const categoriesToShow = useMemo(\n    () =>\n      competencyChallenge.data?.type === 'simple'\n        ? categories.filter((category) => category.id === competencyChallenge.data?.category?.id)\n        : categories,\n    [categories, competencyChallenge.data?.type, competencyChallenge.data?.category?.id],\n  );\n\n  const treeData = useMemo(\n    () => categoriesToShow.map((cat) => treeConvert(cat, disabledNodes, categoryDepths[type])),\n    [categoriesToShow, disabledNodes, type],\n  );\n\n  useEffect(() => {\n    categoryTree().then((response) => {\n      if (response.success) {\n        setCategories(response.data);\n      }\n    });\n  }, []);\n\n  return (\n    <TreeSelect<string | string[] | number | number[]>\n      loading={categories.length === 0}\n      showSearch\n      multiple={multiple}\n      value={value}\n      dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n      placeholder={<FormattedMessage id=\"select\" defaultMessage=\"Please select\" />}\n      allowClear\n      treeDefaultExpandAll\n      onChange={onChange}\n      treeData={treeData}\n      disabled={categories.length === 0}\n    />\n  );\n};\n","import React from 'react';\nimport RichMarkdownEditor2 from 'traverse-markdown-editor';\nimport { upload, resizedImage } from '@/services/escola-lms/files';\nimport './index.css';\nimport { useIntl } from 'umi';\n\ninterface FormWysiwygProps {\n  value?: string;\n  defaultValue?: string;\n  onChange?: (value: string) => void;\n  directory?: string;\n}\n\nexport const EmbedUploaded: React.FC<{ attrs: { href: string } }> = ({ attrs }) => {\n  const href = attrs.href;\n  const filename = href.split('/').pop();\n  return (\n    <p>\n      <a rel=\"noreferrer\" href={href} target=\"_blank\">\n        {filename}\n      </a>\n    </p>\n  );\n};\n\nexport const FormWysiwyg: React.FC<FormWysiwygProps> = ({\n  value,\n  onChange,\n  directory = '/wysiwyg',\n}) => {\n  const intl = useIntl();\n\n  return (\n    <div className=\"form-wysiwyg-markdown\">\n      <RichMarkdownEditor2\n        excludeBlockMenuItems={['Sketch']}\n        embeds={[\n          {\n            matcher: (url) => {\n              return true;\n            },\n            component: EmbedUploaded,\n          },\n        ]}\n        uploadImage={async (file) => {\n          const result = await upload(file, directory);\n\n          if (result.success) {\n            if (file.type.includes('image/')) {\n              const resizePath = result.data[0].name.includes('/')\n                ? result.data[0].name\n                : `${directory}${result.data[0].name}`;\n              return resizedImage(resizePath, 1000);\n            }\n            return result.data[0].url;\n          }\n          throw new Error('Error while uploading');\n        }}\n        defaultValue={value || ''}\n        onChange={(v) => onChange && onChange(v())}\n        placeholder={intl.formatMessage({\n          id: 'wysiwyg_placeholder',\n        })}\n      />\n    </div>\n  );\n};\n\nexport default FormWysiwyg;\n","import React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { useParams } from 'umi';\n\nimport { getCompetencyChallenge } from '@/services/escola-lms/competency-challenges';\nimport { configs as getConfig } from '@/services/escola-lms/settings';\n\ninterface CategoryDepths {\n  role: number;\n  scale: number;\n  question: number;\n}\n\ninterface CompetencyChallengeContextData {\n  data: API.CompetencyChallenge | null;\n  loading: boolean;\n  error?: unknown;\n}\n\nexport interface CompetencyChallengeContext {\n  categoryDepths: CategoryDepths;\n  competencyChallenge: CompetencyChallengeContextData;\n  refreshData: () => Promise<void>;\n}\n\nconst initialValues: CompetencyChallengeContext = {\n  categoryDepths: { scale: 2, question: 1, role: 0 },\n  competencyChallenge: { data: null, loading: false },\n  refreshData: async () => console.warn('CONTEXT INIT'),\n};\n\nconst Context = React.createContext<CompetencyChallengeContext>(initialValues);\n\nexport const useCompetencyChallengeContext = () => useContext(Context);\n\nexport const CompetencyChallengeContextProvider: React.FC<React.PropsWithChildren> = ({\n  children,\n}) => {\n  const [competencyChallenge, setCompetencyChallenge] = useState<CompetencyChallengeContextData>(\n    initialValues.competencyChallenge,\n  );\n  const [categoryDepths, setCategoryDepths] = useState<CategoryDepths>(\n    initialValues.categoryDepths,\n  );\n\n  const { id } = useParams<{ id?: string }>();\n  const competency_challenge_id = Number(id);\n\n  const refreshData = useCallback(async () => {\n    if (Number.isNaN(competency_challenge_id)) return;\n\n    try {\n      setCompetencyChallenge((prev) => ({ ...prev, loading: true }));\n      const res = await getCompetencyChallenge(competency_challenge_id);\n\n      if (!res.success) {\n        setCompetencyChallenge((prev) => ({ ...prev, error: res.errors }));\n        return;\n      }\n\n      setCompetencyChallenge((prev) => ({ ...prev, data: res.data }));\n    } catch (error) {\n      setCompetencyChallenge((prev) => ({ ...prev, error }));\n    } finally {\n      setCompetencyChallenge((prev) => ({ ...prev, loading: false }));\n    }\n  }, [competency_challenge_id]);\n\n  const fetchCategoryDepths = useCallback(async () => {\n    try {\n      const res = await getConfig();\n      if (!res.success) return;\n\n      const scale = Number(\n        (res.data?.escolalms_competency_challenge as any)?.category?.scale?.depth?.value,\n      );\n      const question = Number(\n        (res.data?.escolalms_competency_challenge as any)?.category?.question?.depth?.value,\n      );\n      const role = Number(\n        (res.data?.escolalms_competency_challenge as any)?.category?.role?.depth?.value,\n      );\n\n      setCategoryDepths({\n        scale: Number.isNaN(scale) ? 2 : scale,\n        question: Number.isNaN(question) ? 1 : question,\n        role: Number.isNaN(role) ? 0 : role,\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  }, []);\n\n  useEffect(() => {\n    refreshData();\n    fetchCategoryDepths();\n  }, [refreshData, fetchCategoryDepths]);\n\n  return (\n    <Context.Provider value={{ categoryDepths, competencyChallenge, refreshData }}>\n      {children}\n    </Context.Provider>\n  );\n};\n","import React, { useCallback, useMemo } from 'react';\nimport { parse } from '@escolalms/gift-pegjs';\nimport { FormattedMessage, useIntl } from 'umi';\nimport ProForm, { ModalForm, ProFormSelect } from '@ant-design/pro-form';\n\nimport { exportQuizQuestions } from '@/services/escola-lms/gift_quiz';\n\ninterface FormData {\n  ids: number[];\n}\ninterface Props {\n  quiz_id: number;\n  quizQuestions: API.QuizQuestion[];\n  visible: boolean;\n  onVisibleChange: (visible: boolean) => void;\n}\n\nexport const ExportQuizQuestionsModal: React.FC<Props> = ({\n  quiz_id,\n  quizQuestions,\n  visible,\n  onVisibleChange,\n}) => {\n  const [form] = ProForm.useForm<FormData>();\n  const intl = useIntl();\n\n  const onFormSubmit = useCallback(\n    async ({ ids }: FormData) => {\n      try {\n        const response = await exportQuizQuestions({ quiz_id, ids });\n        if (response instanceof Blob) {\n          const downloadLink = document.createElement('a');\n\n          downloadLink.href = window.URL.createObjectURL(response);\n          downloadLink.download = `quiz_questions_${quiz_id}.xlsx`;\n          document.body.appendChild(downloadLink);\n          downloadLink.click();\n          document.body.removeChild(downloadLink);\n        }\n      } catch (e) {\n        console.error(e);\n      } finally {\n        onVisibleChange(false);\n      }\n    },\n    [quiz_id],\n  );\n\n  const questionsOptions = useMemo(\n    () =>\n      quizQuestions.map(({ id, value }) => {\n        try {\n          const giftQuestionArr = parse(value);\n\n          if (!giftQuestionArr?.[0] || !('stem' in giftQuestionArr[0])) {\n            return {\n              value: id,\n              label: intl.formatMessage({ id: 'ExportQuestions.questionTitle' }, { id }),\n            };\n          }\n\n          const label = giftQuestionArr[0].stem.text;\n          return { value: id, label };\n        } catch (e) {\n          console.error(e);\n          return {\n            value: id,\n            label: intl.formatMessage({ id: 'ExportQuestions.questionTitle' }, { id }),\n          };\n        }\n      }),\n    [quizQuestions],\n  );\n\n  return (\n    <ModalForm\n      title={<FormattedMessage id=\"exportQuestions\" />}\n      form={form}\n      visible={visible}\n      onVisibleChange={onVisibleChange}\n      onFinish={onFormSubmit}\n    >\n      <ProFormSelect\n        mode=\"multiple\"\n        options={questionsOptions}\n        name=\"ids\"\n        label={<FormattedMessage id=\"questions\" />}\n        required\n        rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n      />\n    </ModalForm>\n  );\n};\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'umi';\nimport { Button, Tooltip } from 'antd';\nimport ProForm, {\n  ProFormCheckbox,\n  ProFormDigit,\n  ProFormList,\n  ProFormText,\n} from '@ant-design/pro-form';\nimport { DeleteOutlined } from '@ant-design/icons';\n\nimport { QuestionType } from '@/services/escola-lms/enums';\n\nconst INITIAL_VALUES = {\n  [QuestionType.MULTIPLE_CHOICE]: [\n    { isCorrect: false, value: '' },\n    { isCorrect: false, value: '' },\n  ],\n  [QuestionType.MULTIPLE_CHOICE_WITH_MULTIPLE_RIGHT_ANSWERS]: [\n    { value: '', weight: '' },\n    { value: '', weight: '' },\n  ],\n};\n\ninterface Props {\n  type: QuestionType.MULTIPLE_CHOICE | QuestionType.MULTIPLE_CHOICE_WITH_MULTIPLE_RIGHT_ANSWERS;\n}\n\nexport const GiftQuizQuestionMultipleChoiceEditor: React.FC<Props> = ({ type }) => {\n  const intl = useIntl();\n\n  return (\n    <>\n      <ProFormText\n        name=\"question\"\n        label={<FormattedMessage id=\"question\" />}\n        rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n        required\n      />\n      <ProFormList\n        name=\"answers\"\n        creatorButtonProps={{\n          creatorButtonText: intl.formatMessage({ id: 'Questions.addAnswer' }),\n        }}\n        actionRender={() => []}\n        initialValue={INITIAL_VALUES[type] ?? []}\n      >\n        {(field, i, action, count) => (\n          <ProForm.Group\n            title={\n              <>\n                <FormattedMessage id=\"Questions.answer\" values={{ ordinalNumber: i + 1 }} />\n                {count > 2 && (\n                  <Tooltip title={intl.formatMessage({ id: 'Questions.deleteAnswer' })}>\n                    <Button\n                      type=\"text\"\n                      icon={<DeleteOutlined />}\n                      onClick={() => action.remove(field.name)}\n                    />\n                  </Tooltip>\n                )}\n              </>\n            }\n            titleStyle={{ width: '100%', display: 'flex', justifyContent: 'space-between' }}\n          >\n            {type === QuestionType.MULTIPLE_CHOICE && (\n              <ProFormCheckbox\n                name=\"isCorrect\"\n                label={\n                  <FormattedMessage\n                    id=\"Questions.correctAnswer\"\n                    defaultMessage=\"Is Correct Answer?\"\n                  />\n                }\n                rules={[\n                  ({ getFieldValue }) => ({\n                    validator: () => {\n                      const answers = getFieldValue('answers') ?? [];\n                      if (\n                        answers.filter((answer: { isCorrect: boolean }) => answer?.isCorrect)\n                          .length > 1\n                      ) {\n                        return Promise.reject('Only one answer can be correct');\n                      }\n\n                      return Promise.resolve();\n                    },\n                    message: <FormattedMessage id=\"Questions.onlyOneAnswerIsCorrect\" />,\n                  }),\n                ]}\n              />\n            )}\n            <ProFormText\n              name=\"value\"\n              rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n              label={<FormattedMessage id=\"content\" defaultMessage=\"Content\" />}\n            />\n            {type === QuestionType.MULTIPLE_CHOICE_WITH_MULTIPLE_RIGHT_ANSWERS && (\n              <ProFormDigit\n                name=\"weight\"\n                rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n                fieldProps={{ min: -Number.MAX_SAFE_INTEGER, addonAfter: '%' }}\n                label={<FormattedMessage id=\"weight\" defaultMessage=\"Weight\" />}\n              />\n            )}\n          </ProForm.Group>\n        )}\n      </ProFormList>\n    </>\n  );\n};\n","import React from 'react';\nimport { FormattedMessage } from 'umi';\nimport { ProFormCheckbox, ProFormText } from '@ant-design/pro-form';\n\nexport const GiftQuizQuestionTrueFalseEditor: React.FC = () => (\n  <>\n    <ProFormText\n      name=\"question\"\n      label={<FormattedMessage id=\"question\" />}\n      rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n      required\n    />\n    <ProFormCheckbox name=\"isCorrect\" label={<FormattedMessage id=\"Questions.correctAnswer\" />} />\n  </>\n);\n","import React from 'react';\nimport { useIntl, FormattedMessage } from 'umi';\nimport { ProFormList, ProFormText } from '@ant-design/pro-form';\n\nconst INITIAL_VALUES = [{ value: '' }];\n\nexport const GiftQuizQuestionShortEditor: React.FC = () => {\n  const intl = useIntl();\n\n  return (\n    <>\n      <ProFormText\n        name=\"question\"\n        label={<FormattedMessage id=\"question\" />}\n        rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n        required\n      />\n      <ProFormList\n        name=\"answers\"\n        creatorButtonProps={{\n          creatorButtonText: intl.formatMessage({ id: 'Questions.addAnswer' }),\n        }}\n        deleteIconProps={{ tooltipText: intl.formatMessage({ id: 'Questions.deleteAnswer' }) }}\n        actionRender={(_f, _a, [, deleteButton]) => [deleteButton]}\n        min={1}\n        initialValue={INITIAL_VALUES}\n      >\n        {(_f, i) => (\n          <ProFormText\n            name=\"value\"\n            rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n            label={\n              <FormattedMessage\n                id=\"Questions.answer\"\n                values={{ ordinalNumber: i + 1 }}\n                defaultMessage={`Answer ${i + 1}`}\n              />\n            }\n          />\n        )}\n      </ProFormList>\n    </>\n  );\n};\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'umi';\nimport ProForm, { ProFormList, ProFormText } from '@ant-design/pro-form';\n\nconst INITIAL_VALUES = [\n  {\n    firstOfPair: '',\n    secondOfPair: '',\n  },\n];\n\nexport const GiftQuizQuestionMatchingEditor: React.FC = () => {\n  const intl = useIntl();\n\n  return (\n    <>\n      <ProFormText\n        name=\"question\"\n        label={<FormattedMessage id=\"question\" />}\n        rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n        required\n      />\n      <ProFormList\n        name=\"answers\"\n        creatorButtonProps={{\n          creatorButtonText: intl.formatMessage({\n            id: 'Questions.addMatchingPair',\n            defaultMessage: 'Add Matching Pair',\n          }),\n        }}\n        deleteIconProps={{ tooltipText: intl.formatMessage({ id: 'Questions.deletePair' }) }}\n        actionRender={(_f, _a, [, deleteButton]) => [deleteButton]}\n        min={1}\n        initialValue={INITIAL_VALUES}\n      >\n        {(_f, i) => (\n          <ProForm.Group\n            direction=\"horizontal\"\n            align=\"baseline\"\n            size=\"small\"\n            spaceProps={{ style: { flexWrap: 'nowrap' } }}\n            title={\n              <FormattedMessage\n                id=\"Questions.pair\"\n                values={{ ordinalNumber: i + 1 }}\n                defaultMessage={`Pair ${i + 1}`}\n              />\n            }\n          >\n            <ProFormText\n              name=\"firstOfPair\"\n              rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n            />\n            <ProFormText\n              name=\"secondOfPair\"\n              rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n            />\n          </ProForm.Group>\n        )}\n      </ProFormList>\n    </>\n  );\n};\n","import React from 'react';\nimport { FormattedMessage } from 'umi';\nimport { ProFormDigit, ProFormText } from '@ant-design/pro-form';\n\nexport const GiftQuizQuestionNumericalEditor: React.FC = () => (\n  <>\n    <ProFormText\n      name=\"question\"\n      label={<FormattedMessage id=\"question\" />}\n      rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n      required\n    />\n    <ProFormDigit\n      name=\"answer\"\n      label={<FormattedMessage id=\"answer\" />}\n      rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n      required\n    />\n    <ProFormDigit\n      name=\"errorMargin\"\n      fieldProps={{ addonAfter: '+/-' }}\n      label={<FormattedMessage id=\"Questions.errorMargin\" />}\n      rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n      required\n    />\n  </>\n);\n","import React from 'react';\nimport { FormattedMessage } from 'umi';\nimport { ProFormTextArea } from '@ant-design/pro-form';\n\nexport const GiftQuizQuestionEssayEditor: React.FC = () => (\n  <ProFormTextArea\n    name=\"question\"\n    label={<FormattedMessage id=\"question\" />}\n    rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n    required\n  />\n);\n","import React from 'react';\n\nimport { QuestionType } from '@/services/escola-lms/enums';\nimport { GiftQuizQuestionMultipleChoiceEditor } from './MultipleChoice';\nimport { GiftQuizQuestionTrueFalseEditor } from './TrueFalse';\nimport { GiftQuizQuestionShortEditor } from './ShortAnswers';\nimport { GiftQuizQuestionMatchingEditor } from './Matching';\nimport { GiftQuizQuestionNumericalEditor } from './Numerical';\nimport { GiftQuizQuestionEssayEditor } from './Essay';\n\ninterface Props {\n  type: QuestionType | undefined;\n}\n\nexport const GiftQuizQuestion: React.FC<Props> = ({ type }) => {\n  if (!type) return null;\n\n  switch (type) {\n    case QuestionType.MULTIPLE_CHOICE:\n    case QuestionType.MULTIPLE_CHOICE_WITH_MULTIPLE_RIGHT_ANSWERS:\n      return <GiftQuizQuestionMultipleChoiceEditor type={type} />;\n    case QuestionType.TRUE_FALSE:\n      return <GiftQuizQuestionTrueFalseEditor />;\n    case QuestionType.SHORT_ANSWERS:\n      return <GiftQuizQuestionShortEditor />;\n    case QuestionType.MATCHING:\n      return <GiftQuizQuestionMatchingEditor />;\n    case QuestionType.NUMERICAL_QUESTION:\n      return <GiftQuizQuestionNumericalEditor />;\n    case QuestionType.ESSAY:\n    case QuestionType.DESCRIPTION:\n      return <GiftQuizQuestionEssayEditor />;\n  }\n\n  return <pre>Unsupported type {type}</pre>;\n};\n","import { parse } from '@escolalms/gift-pegjs';\nimport type {\n  Description,\n  Essay,\n  Matching,\n  Numerical,\n  ShortAnswer,\n  TrueFalse,\n  MultipleChoice,\n} from '@escolalms/gift-pegjs';\n\nimport { QuestionType } from '@/services/escola-lms/enums';\nimport type {\n  DescriptionFormData,\n  EssayFormData,\n  GiftQuizFormData,\n  MatchingFormData,\n  MultipleChoiceFormData,\n  MultipleChoiceWithMultipleRightAnswersFormData,\n  NumericalFormData,\n  ShortAnswersFormData,\n  TrueFalseFormData,\n} from './types';\n\nconst escapeQuestionSpecialChars = (inputString: string): string => {\n  const charsToEscape = ['~', '=', '#', '{', '}', ':'];\n  let escapedString = '';\n\n  for (let i = 0; i < inputString.length; i++) {\n    const currentChar = inputString[i];\n    if (charsToEscape.includes(currentChar)) {\n      escapedString += `\\\\${currentChar}`;\n    } else {\n      escapedString += currentChar;\n    }\n  }\n\n  return escapedString;\n};\n\nconst parseMultipleChoice = ({ question, answers }: MultipleChoiceFormData): string => {\n  if (answers.length === 0) return `${question}{}`;\n\n  const escapedAnswers = answers.map(({ isCorrect, value }) => ({\n    isCorrect,\n    value: escapeQuestionSpecialChars(value),\n  }));\n  let giftString = `${question}{`;\n\n  for (const { isCorrect, value } of escapedAnswers) {\n    const sign = isCorrect ? '=' : '~';\n\n    giftString += `${sign}${value}`;\n  }\n\n  giftString += '}';\n\n  return giftString.trim();\n};\n\nconst parseMultipleChoiceWithMultipleRightAnswers = ({\n  question,\n  answers,\n}: MultipleChoiceWithMultipleRightAnswersFormData): string => {\n  if (answers.length == 0) return `${question}{}`;\n\n  let giftString = `${question}{`;\n\n  const escapedAnswers = answers.map(({ weight, value }) => ({\n    weight,\n    value: escapeQuestionSpecialChars(value),\n  }));\n\n  for (const { value, weight } of escapedAnswers) {\n    giftString += `~%${weight}%${value}`;\n  }\n\n  giftString += '}';\n\n  return giftString.trim();\n};\n\nconst parseTrueFalse = ({ question, isCorrect }: TrueFalseFormData): string =>\n  `${question}{${isCorrect ? 'T' : 'F'}}`;\n\nconst parseShortAnswers = ({ question, answers }: ShortAnswersFormData): string => {\n  if (answers.length === 0) return `${question}{}`;\n\n  let giftString = `${question}{`;\n\n  const escapedAnswers = answers.map(({ value }) => ({\n    value: escapeQuestionSpecialChars(value),\n  }));\n\n  for (const { value } of escapedAnswers) {\n    giftString += `=${value}`;\n  }\n\n  giftString += '}';\n\n  return giftString.trim();\n};\n\nconst parseMatching = ({ question, answers }: MatchingFormData): string => {\n  if (answers.length === 0) return `${question}{}`;\n\n  let giftString = `${question}{`;\n\n  const escapedAnswers = answers.map(({ firstOfPair, secondOfPair }) => ({\n    firstOfPair: escapeQuestionSpecialChars(firstOfPair),\n    secondOfPair: escapeQuestionSpecialChars(secondOfPair),\n  }));\n\n  for (const { firstOfPair, secondOfPair } of escapedAnswers) {\n    giftString += `=${firstOfPair}->${secondOfPair}`;\n  }\n\n  giftString += '}';\n\n  return giftString.trim();\n};\n\nconst parseNumerical = ({ question, answer, errorMargin }: NumericalFormData): string =>\n  `${question}{#${answer}:${errorMargin}}`;\n\nconst parseEssay = ({ question }: EssayFormData): string => `${question}{}`;\n\nconst parseDescription = ({ question }: DescriptionFormData): string => question;\n\nexport const parseToGIFT = ({ question, ...formData }: GiftQuizFormData): string => {\n  const safeFormData = { question: escapeQuestionSpecialChars(question), ...formData };\n\n  switch (safeFormData.type) {\n    case QuestionType.MULTIPLE_CHOICE:\n      return parseMultipleChoice(safeFormData);\n    case QuestionType.MULTIPLE_CHOICE_WITH_MULTIPLE_RIGHT_ANSWERS:\n      return parseMultipleChoiceWithMultipleRightAnswers(safeFormData);\n    case QuestionType.TRUE_FALSE:\n      return parseTrueFalse(safeFormData);\n    case QuestionType.SHORT_ANSWERS:\n      return parseShortAnswers(safeFormData);\n    case QuestionType.MATCHING:\n      return parseMatching(safeFormData);\n    case QuestionType.NUMERICAL_QUESTION:\n      return parseNumerical(safeFormData);\n    case QuestionType.ESSAY:\n      return parseEssay(safeFormData);\n    case QuestionType.DESCRIPTION:\n      return parseDescription(safeFormData);\n    default:\n      throw new Error(`Unsupported type: ${(safeFormData as GiftQuizFormData).type}`);\n  }\n};\n\nconst parseMultipleChoiceToFormData = (\n  parsedValue: MultipleChoice,\n  { type, score, category_id }: API.QuizQuestion,\n): MultipleChoiceFormData | MultipleChoiceWithMultipleRightAnswersFormData => {\n  const question = parsedValue?.stem.text;\n\n  const isMultipleChoice = parsedValue.choices.every(({ weight }) => weight === null);\n\n  if (isMultipleChoice) {\n    const answers: MultipleChoiceFormData['answers'] = parsedValue.choices.map(\n      ({ isCorrect, text }) => ({\n        isCorrect,\n        value: text.text,\n      }),\n    );\n\n    return { type, score, category_id, question, answers };\n  }\n\n  const answers = parsedValue.choices.reduce<\n    MultipleChoiceWithMultipleRightAnswersFormData['answers']\n  >(\n    (acc, { weight, text }) => (weight !== null ? [...acc, { weight, value: text.text }] : acc),\n    [],\n  );\n\n  return { type, score, category_id, question, answers };\n};\n\nconst parseTrueFalseToFormData = (\n  parsedValue: TrueFalse,\n  { type, score, category_id }: API.QuizQuestion,\n): TrueFalseFormData => {\n  const question = parsedValue?.stem.text;\n  const isCorrect = parsedValue.isTrue;\n\n  return { type, score, category_id, question, isCorrect };\n};\n\nconst parseShortAnswersToFormData = (\n  parsedValue: ShortAnswer,\n  { type, score, category_id }: API.QuizQuestion,\n): ShortAnswersFormData => {\n  const question = parsedValue?.stem.text;\n\n  const answers: ShortAnswersFormData['answers'] = parsedValue.choices.map(({ text }) => ({\n    value: text.text,\n  }));\n\n  return { type, score, category_id, question, answers };\n};\n\nconst parseMatchingToFormData = (\n  parsedValue: Matching,\n  { type, score, category_id }: API.QuizQuestion,\n): MatchingFormData => {\n  const question = parsedValue?.stem.text;\n  const answers: MatchingFormData['answers'] = parsedValue.matchPairs.map(\n    ({ subquestion, subanswer }) => ({ firstOfPair: subquestion.text, secondOfPair: subanswer }),\n  );\n\n  return { type, score, category_id, question, answers };\n};\n\nconst parseNumericalToFormData = (\n  parsedValue: Numerical,\n  { type, score, category_id }: API.QuizQuestion,\n): NumericalFormData => {\n  const question = parsedValue?.stem.text;\n\n  // TODO\n  if (Array.isArray(parsedValue?.choices)) {\n    throw new Error('Unsupported choices type: array');\n  }\n\n  const answer = parsedValue?.choices.number;\n  const errorMargin = parsedValue?.choices.range;\n\n  if (answer === undefined || errorMargin === undefined) {\n    throw new Error(`Value undefined - answer: ${answer} errorMargin: ${errorMargin}`);\n  }\n\n  return { type, score, category_id, question, answer, errorMargin };\n};\n\nconst parseDescriptionEssayToFormData = (\n  parsedValue: Description | Essay,\n  { type, score, category_id }: API.QuizQuestion,\n): DescriptionFormData | EssayFormData => {\n  const question = parsedValue?.stem.text;\n\n  return { type, score, category_id, question };\n};\n\nexport function parseToFormData(\n  questionBase: API.QuizQuestion | undefined,\n): GiftQuizFormData | undefined {\n  if (!questionBase) return;\n\n  try {\n    const [parsedValue] = parse(questionBase.value);\n\n    switch (parsedValue.type) {\n      case 'MC':\n        return parseMultipleChoiceToFormData(parsedValue, questionBase);\n      case 'TF':\n        return parseTrueFalseToFormData(parsedValue, questionBase);\n      case 'Short':\n        return parseShortAnswersToFormData(parsedValue, questionBase);\n      case 'Matching':\n        return parseMatchingToFormData(parsedValue, questionBase);\n      case 'Numerical':\n        return parseNumericalToFormData(parsedValue, questionBase);\n      case 'Description':\n      case 'Essay':\n        return parseDescriptionEssayToFormData(parsedValue, questionBase);\n      default:\n        throw new Error(`Unsupported type: ${parsedValue?.type}`);\n    }\n  } catch (e) {\n    console.error(e);\n    return;\n  }\n}\n","import React, { useCallback, useEffect, useMemo } from 'react';\nimport { FormattedMessage, useIntl } from 'umi';\nimport { Space, Divider } from 'antd';\nimport ProForm, { ProFormDigit, ProFormSelect } from '@ant-design/pro-form';\n\nimport { QuestionType } from '@/services/escola-lms/enums';\nimport {\n  CompetencyChallengeCategoryTree,\n  type CompetencyChallengeCategoryTreeProps,\n} from '@/pages/CompetencyChallenges/components/CompetencyChallengeCategoryTree';\nimport { GiftQuizQuestion } from './question';\nimport type { QuizQuestionSubmitData, GiftQuizFormData } from './types';\nimport { parseToFormData, parseToGIFT } from './utils';\n\nconst VALUES_NOT_TO_RESET = ['type', 'score', 'category'];\n\nconst TYPE_OPTIONS = Object.values(QuestionType).reduce<\n  { value: QuestionType; label: React.ReactNode }[]\n>(\n  (acc, q) => (q ? [...acc, { value: q, label: <FormattedMessage id={`gift_type.${q}`} /> }] : acc),\n  [],\n);\n\ninterface Props {\n  onSubmit: (quizQuestion: QuizQuestionSubmitData) => Promise<boolean>;\n  values?: API.QuizQuestion;\n  competencyChallengeCategoryTreeProps?:\n    | boolean\n    | Omit<CompetencyChallengeCategoryTreeProps, 'value' | 'onChange'>;\n}\n\nexport const GiftQuizQuestionEditor: React.FC<Props> = ({\n  onSubmit,\n  values,\n  competencyChallengeCategoryTreeProps = false,\n}) => {\n  const intl = useIntl();\n\n  const [form] = ProForm.useForm<GiftQuizFormData>();\n  const type: QuestionType | undefined = ProForm.useWatch('type', form);\n\n  const initialValues = useMemo(() => parseToFormData(values), [values]);\n\n  const onFinish = useCallback(async (formData: GiftQuizFormData) => {\n    const value = parseToGIFT(formData);\n\n    const { score, category_id } = formData;\n    const status = await onSubmit({ value, score, category_id });\n\n    if (!status) {\n      return;\n    }\n\n    form.resetFields();\n  }, []);\n\n  useEffect(() => {\n    form.resetFields();\n  }, [initialValues]);\n\n  useEffect(() => {\n    if (type) {\n      const fields = form.getFieldsValue();\n      const fieldsToReset = Object.keys(fields).filter((key) => !VALUES_NOT_TO_RESET.includes(key));\n\n      form.resetFields(fieldsToReset);\n    }\n  }, [type]);\n\n  return (\n    <Space direction=\"vertical\" style={{ display: 'flex' }}>\n      <Divider>\n        <FormattedMessage id={initialValues ? 'Questions.edit' : 'addNewQuestion'} />\n      </Divider>\n      <ProForm layout=\"horizontal\" form={form} onFinish={onFinish} initialValues={initialValues}>\n        <ProFormSelect\n          name=\"type\"\n          placeholder={intl.formatMessage({\n            id: 'selectNewQuestionType',\n            defaultMessage: 'Select new question type',\n          })}\n          label={<FormattedMessage id=\"type\" defaultMessage=\"Type:\" />}\n          options={TYPE_OPTIONS}\n          rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n          required\n        />\n        <GiftQuizQuestion type={type} />\n        <ProFormDigit\n          name=\"score\"\n          label={<FormattedMessage id=\"Questions.score\" defaultMessage=\"Score\" />}\n          rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n        />\n        {competencyChallengeCategoryTreeProps && (\n          <ProForm.Item\n            name=\"category_id\"\n            label={<FormattedMessage id=\"category\" defaultMessage=\"Category\" />}\n            rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n            required\n          >\n            <CompetencyChallengeCategoryTree\n              {...(typeof competencyChallengeCategoryTreeProps === 'object'\n                ? competencyChallengeCategoryTreeProps\n                : {})}\n            />\n          </ProForm.Item>\n        )}\n      </ProForm>\n    </Space>\n  );\n};\n","import React, { useState, useCallback, useRef, useEffect } from 'react';\nimport { FormattedMessage, useIntl } from 'umi';\nimport { SortableContainer, SortableElement, SortableHandle } from 'react-sortable-hoc';\nimport { arrayMoveImmutable } from 'array-move';\nimport { parse } from '@escolalms/gift-pegjs';\nimport { Button, Drawer, Typography, Switch, message } from 'antd';\nimport { ExportOutlined, MenuOutlined, PlusCircleOutlined } from '@ant-design/icons';\nimport { ProTable } from '@ant-design/pro-table';\nimport type { ProColumns, ActionType } from '@ant-design/pro-table';\n\nimport SecureUpload from '@/components/SecureUpload';\nimport TypeButtonDrawer from '@/components/TypeButtonDrawer';\nimport type { CompetencyChallengeCategoryTreeProps } from '@/pages/CompetencyChallenges/components/CompetencyChallengeCategoryTree';\nimport { createQuestion, deleteQuestion, updateQuestion } from '@/services/escola-lms/gift_quiz';\nimport { ExportQuizQuestionsModal } from './ExportQuizQuestionsModal';\nimport { GiftQuizQuestionEditor } from './editor';\nimport type { QuizQuestionSubmitData } from './editor/types';\nimport './index.css';\n\nconst DragHandle = SortableHandle(() => <MenuOutlined style={{ cursor: 'grab', color: '#999' }} />);\nconst SortableItem = SortableElement((props: React.HTMLAttributes<HTMLTableRowElement>) => (\n  <tr {...props} />\n));\nconst SortContainer = SortableContainer((props: React.HTMLAttributes<HTMLTableSectionElement>) => (\n  <tbody {...props} />\n));\n\nconst staticColumns: ProColumns<API.QuizQuestion>[] = [\n  {\n    title: <FormattedMessage id=\"sort\" defaultMessage=\"sort\" />,\n    dataIndex: 'id',\n    width: 60,\n    className: 'drag-visible',\n    render: () => <DragHandle />,\n  },\n  {\n    title: <FormattedMessage id=\"type\" defaultMessage=\"Type\" />,\n    dataIndex: 'type',\n    hideInForm: true,\n    hideInSearch: true,\n    hideInSetting: true,\n    render: (_, row) => <FormattedMessage id={`gift_type.${row.type}`} />,\n  },\n  {\n    title: <FormattedMessage id=\"question\" defaultMessage=\"Question\" />,\n    dataIndex: 'question',\n    hideInForm: true,\n    hideInSearch: true,\n    hideInSetting: true,\n    render: (_, row) => {\n      try {\n        const obj = parse(row.value);\n\n        if (obj?.[0] && 'stem' in obj[0]) {\n          return obj[0].stem.text;\n        }\n        return 'question';\n      } catch (e) {\n        console.error(e);\n        return 'question';\n      }\n    },\n  },\n];\n\nconst categoryColumn: ProColumns<API.QuizQuestion> = {\n  title: <FormattedMessage id=\"category\" defaultMessage=\"Category\" />,\n  dataIndex: 'category_id',\n  hideInForm: true,\n  hideInSearch: true,\n  hideInSetting: true,\n  render: (_, row) =>\n    typeof row.category_id === 'number' ? (\n      <TypeButtonDrawer type=\"Category\" type_id={row.category_id} />\n    ) : (\n      '-'\n    ),\n};\n\ninterface OnSortEndParams {\n  oldIndex: number;\n  newIndex: number;\n}\n\ninterface Props {\n  quizId: number;\n  questions: API.QuizQuestion[];\n  onAdded?: () => void;\n  onRemoved?: () => void;\n  onEdited?: () => void;\n  tableHeader?: React.ReactNode;\n  tableLoading?: boolean;\n  questionsCategory?: boolean | Omit<CompetencyChallengeCategoryTreeProps, 'value' | 'onChange'>;\n  customToolbarElements?: React.ReactNode[];\n}\n\nexport const Table: React.FC<Props> = ({\n  questions,\n  onAdded,\n  onRemoved,\n  onEdited,\n  quizId,\n  tableLoading,\n  tableHeader,\n  questionsCategory,\n  customToolbarElements = [],\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [newQuestion, setNewQuestion] = useState(false);\n  const [editQuestion, setEditQuestion] = useState<API.QuizQuestion>();\n  const [exportQuestions, setExportQuestions] = useState(false);\n\n  const [debug, setDebug] = useState(false);\n\n  const [dataSource, setDataSource] = useState(questions);\n\n  const intl = useIntl();\n  const actionRef = useRef<ActionType>();\n\n  useEffect(() => {\n    actionRef.current?.reload();\n    setDataSource(questions);\n  }, [questions]);\n\n  const onSortEnd = ({ oldIndex, newIndex }: OnSortEndParams) => {\n    if (oldIndex !== newIndex) {\n      const newData = arrayMoveImmutable(dataSource.slice(), oldIndex, newIndex)\n        .filter(Boolean)\n        .map((row, index) => ({ ...row, order: index }));\n\n      newData.forEach((newRow, index) => {\n        if (newRow.id !== dataSource[index].id) {\n          updateQuestion(newRow.id, { ...newRow, order: index + 1, topic_gift_quiz_id: quizId });\n        }\n      });\n\n      setDataSource(newData);\n    }\n  };\n\n  // TODO types & refactor https://react.dev/learn/your-first-component#nesting-and-organizing-components\n  const DraggableContainer = (props: any) => (\n    <SortContainer\n      useDragHandle\n      disableAutoscroll\n      helperClass=\"row-dragging\"\n      onSortEnd={onSortEnd}\n      {...props}\n    />\n  );\n\n  // TODO types & refactor https://react.dev/learn/your-first-component#nesting-and-organizing-components\n  const DraggableBodyRow = (props: any) => {\n    const { className, style, ...restProps } = props;\n    // function findIndex base on Table rowKey props and should always be a right array index\n    const index = dataSource.findIndex((x) => x.id === restProps['data-row-key']);\n    return <SortableItem index={index} {...restProps} />;\n  };\n\n  const onNewQuestionSubmit = useCallback(\n    async (data: QuizQuestionSubmitData) => {\n      try {\n        setLoading(true);\n\n        const response = await createQuestion({ topic_gift_quiz_id: quizId, ...data });\n        setNewQuestion(false);\n        onAdded?.();\n        return response.success;\n      } catch (err) {\n        console.log(err);\n        return false;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [newQuestion, quizId],\n  );\n\n  const onEditQuestionSubmit = useCallback(\n    async (data: QuizQuestionSubmitData) => {\n      if (editQuestion?.id === undefined) return false;\n\n      try {\n        setLoading(true);\n\n        const response = await updateQuestion(editQuestion.id, {\n          topic_gift_quiz_id: quizId,\n          ...data,\n        });\n        setEditQuestion(undefined);\n        onEdited?.();\n        return response.success;\n      } catch (err) {\n        console.log(err);\n        return false;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [editQuestion?.id, quizId],\n  );\n\n  return (\n    <>\n      <Drawer open={newQuestion} onClose={() => setNewQuestion(false)}>\n        <GiftQuizQuestionEditor\n          onSubmit={onNewQuestionSubmit}\n          competencyChallengeCategoryTreeProps={questionsCategory}\n        />\n      </Drawer>\n      <Drawer open={!!editQuestion} onClose={() => setEditQuestion(undefined)}>\n        <GiftQuizQuestionEditor\n          onSubmit={onEditQuestionSubmit}\n          competencyChallengeCategoryTreeProps={questionsCategory}\n          values={editQuestion}\n        />\n      </Drawer>\n      <ExportQuizQuestionsModal\n        quiz_id={quizId}\n        quizQuestions={dataSource}\n        visible={exportQuestions}\n        onVisibleChange={setExportQuestions}\n      />\n      <ProTable\n        search={false}\n        cardProps={{ bodyStyle: { padding: 0 } }}\n        loading={tableLoading}\n        headerTitle={tableHeader}\n        toolbar={{ settings: [] }}\n        toolBarRender={() => [\n          <Button\n            key=\"add\"\n            icon={<PlusCircleOutlined />}\n            type=\"primary\"\n            onClick={() => setNewQuestion(true)}\n          >\n            {' '}\n            <FormattedMessage id=\"addNewQuestion\" defaultMessage=\"Add new question\" />\n          </Button>,\n          <SecureUpload\n            key=\"import\"\n            title={intl.formatMessage({\n              id: 'importQuestions',\n            })}\n            hideLabel\n            showUploadList={false}\n            url=\"/api/admin/gift-questions/import\"\n            name=\"file\"\n            accept=\".xlsx\"\n            data={{\n              topic_gift_quiz_id: quizId,\n            }}\n            onChange={(info) => {\n              if (info.file.status === 'done') {\n                if (info.file.response && info.file.response.success) {\n                  message.success(info.file.response.message);\n                  onAdded?.();\n                }\n              }\n              if (info.file.response && info.file.status === 'error') {\n                message.error(info.file.response.message);\n                console.error(info.file.response);\n              }\n            }}\n          />,\n          <Button\n            key=\"export\"\n            icon={<ExportOutlined />}\n            type=\"primary\"\n            onClick={() => setExportQuestions(true)}\n          >\n            {' '}\n            <FormattedMessage id=\"exportQuestions\" />\n          </Button>,\n          ...customToolbarElements,\n        ]}\n        columns={[\n          ...staticColumns,\n          ...(questionsCategory ? [categoryColumn] : []),\n          {\n            title: <FormattedMessage id=\"actions\" defaultMessage=\"Actions\" />,\n            dataIndex: 'address',\n            valueType: 'option',\n            render: (_, row) => [\n              <Button\n                key=\"edit\"\n                size=\"small\"\n                type=\"primary\"\n                onClick={() => {\n                  setEditQuestion(row);\n                }}\n              >\n                <FormattedMessage id=\"Questions.edit\" defaultMessage=\"Edit Question\" />\n              </Button>,\n              <Button\n                loading={loading}\n                key=\"delete\"\n                size=\"small\"\n                danger\n                onClick={() => {\n                  setLoading(true);\n                  deleteQuestion(row.id)\n                    .then(() => {\n                      if (onRemoved) {\n                        onRemoved();\n                      }\n                    })\n                    .finally(() => {\n                      setLoading(false);\n                    });\n                }}\n              >\n                <FormattedMessage id=\"Questions.delete\" defaultMessage=\"Delete Question\" />\n              </Button>,\n            ],\n          },\n        ]}\n        rowKey={(record) => record.id}\n        pagination={false}\n        dataSource={dataSource}\n        components={{\n          body: {\n            wrapper: DraggableContainer,\n            row: DraggableBodyRow,\n          },\n        }}\n      />\n      <Typography style={{ marginTop: '3em' }}>\n        Debug GIFT: <Switch checked={debug} onChange={(v) => setDebug(v)} />\n      </Typography>\n    </>\n  );\n};\n"],"sourceRoot":""}