{"version":3,"file":"p__Dictionary__form.eb130628.async.js","mappings":"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","sources":["webpack://ant-design-pro/./src/components/SecureUpload/index.tsx","webpack://ant-design-pro/./src/utils/response_map.ts","webpack://ant-design-pro/./src/hooks/useMessage.ts","webpack://ant-design-pro/./src/hooks/usePermissions.ts","webpack://ant-design-pro/./src/pages/Dictionary/components/DictionaryWords/index.tsx","webpack://ant-design-pro/./src/pages/Dictionary/form.tsx"],"sourcesContent":["import { ProFormUploadButton } from '@ant-design/pro-form';\nimport type { FormProps } from 'antd';\nimport { Form } from 'antd';\nimport type { UploadChangeParam } from 'antd/lib/upload';\nimport type { UploadFile } from 'antd/lib/upload/interface';\nimport ConditionalWrap from 'conditional-wrap';\nimport type { PropsWithChildren } from 'react';\nimport { useState } from 'react';\nimport { FormattedMessage, useIntl } from 'umi';\ndeclare const REACT_APP_API_URL: string;\n\nexport type SecureUploadType<T = API.File> = {\n  url: string;\n  name: string;\n  extra?: string;\n  onChange?: (info: UploadChangeParam<UploadFile<API.DefaultResponse<T>>>) => void;\n  onUpload?: (response: API.DefaultResponse<T>) => void;\n  on?: (info: UploadChangeParam<UploadFile<API.DefaultResponse<T>>>) => void;\n  accept?: string;\n  data?: Record<string, any>;\n  wrapInForm?: boolean;\n  title?: string;\n  formProps?: FormProps;\n  maxFiles?: number;\n  clearListAfterUpload?: boolean;\n  hideLabel?: boolean;\n  disabled?: boolean;\n  showUploadList?: boolean;\n};\n\nfunction SecureUpload<Type = API.File>({\n  onChange,\n  onUpload,\n  url,\n  name,\n  extra,\n  accept,\n  data,\n  wrapInForm = true,\n  title,\n  formProps,\n  maxFiles,\n  clearListAfterUpload,\n  hideLabel,\n  disabled,\n  showUploadList,\n}: PropsWithChildren<SecureUploadType<Type>>) {\n  const [infoState, setInfoState] = useState<UploadChangeParam<UploadFile<any>>>();\n  const intl = useIntl();\n\n  if (data && data[name]) {\n    // eslint-disable-next-line no-param-reassign\n    delete data[name];\n  }\n\n  return (\n    <ConditionalWrap\n      condition={wrapInForm}\n      wrap={(children: JSX.Element) => <Form {...formProps}>{children}</Form>}\n    >\n      <ProFormUploadButton\n        title={\n          title\n            ? title\n            : ` ${intl.formatMessage({\n                id: 'upload_click_here',\n              })}`\n        }\n        placeholder={intl.formatMessage({\n          id: 'upload_click_here',\n        })}\n        label={!hideLabel && <FormattedMessage id=\"upload\" />}\n        max={maxFiles ?? 2}\n        fieldProps={{\n          data,\n          accept,\n          name,\n          showUploadList,\n          headers: { Authorization: `Bearer ${localStorage.getItem('TOKEN')}` },\n          onChange: (info) => {\n            setInfoState(info);\n            if (onChange) {\n              onChange(info);\n            }\n            if (info.file.status === 'done') {\n              if (onUpload) {\n                onUpload(info.file.response);\n              }\n              if (clearListAfterUpload) {\n                setInfoState(undefined);\n              }\n            }\n          },\n        }}\n        action={`${window.REACT_APP_API_URL || REACT_APP_API_URL}${url}`}\n        extra={extra}\n        fileList={infoState?.fileList}\n        disabled={disabled}\n      />\n    </ConditionalWrap>\n  );\n}\n\nexport default SecureUpload;\n","const messagePatterns = [\n  {\n    regex: /^(Consultation|Course|Webinar|Questionnaire|Dictionary|Voucher) updated successfully$/,\n    translationKey: 'notifications.updateSuccessfully',\n    extractModel: (message: string) => message.split(' ')[0],\n  },\n  {\n    regex: /^(Consultation|Course|Webinar|Questionnaire|Dictionary|Voucher) saved successfully$/,\n    translationKey: 'notifications.createSuccessfully',\n    extractModel: (message: string) => message.split(' ')[0],\n  },\n  {\n    regex: /^(Consultation|Course|Webinar|Questionnaire|Dictionary|Voucher) created successfully$/,\n    translationKey: 'notifications.createSuccessfully',\n    extractModel: (message: string) => message.split(' ')[0],\n  },\n  {\n    regex: /^(Product|Group) updated$/,\n    translationKey: 'notifications.updated',\n    extractModel: (message: string) => message.split(' ')[0],\n  },\n\n  //TODO:  set other models and messages from backend here\n];\n\nexport const getTranslationKeyAndModel = (message: string) => {\n  for (const pattern of messagePatterns) {\n    if (pattern.regex.test(message)) {\n      return {\n        translationKey: pattern.translationKey,\n        model: pattern.extractModel ? pattern.extractModel(message) : undefined,\n      };\n    }\n  }\n\n  return { translationKey: null, model: null };\n};\n","import { getTranslationKeyAndModel } from '@/utils/response_map';\nimport { message } from 'antd';\nimport { useIntl } from 'umi';\n\ntype NotificationResponse = API.DefaultResponse<any>;\n\nexport const useShowNotification = () => {\n  const intl = useIntl();\n\n  const showNotification = (response: NotificationResponse) => {\n    const { translationKey, model } = getTranslationKeyAndModel(response.message);\n\n    const isSuccess = response.success && !('error' in response);\n\n    if (translationKey) {\n      message[isSuccess ? 'success' : 'error'](\n        intl.formatMessage(\n          {\n            id: translationKey,\n          },\n          {\n            id: model ? intl.formatMessage({ id: model.toLocaleLowerCase() }) : undefined,\n          },\n        ),\n      );\n    } else {\n      message[isSuccess ? 'success' : 'error'](\n        isSuccess\n          ? response.message\n            ? (response.message as string)\n            : intl.formatMessage({\n                id: 'updated_at',\n              })\n          : intl.formatMessage({\n              id: 'notifications.unexpectedError',\n            }),\n      );\n    }\n  };\n\n  return { showNotification };\n};\n","import type PERMISSIONS from '@/consts/permissions';\nimport { useCallback } from 'react';\nimport { useModel } from 'umi';\n\nexport const usePermissions = () => {\n  const { initialState } = useModel('@@initialState');\n  const userPermissions = initialState?.currentUser?.permissions || [];\n\n  const checkPermission = useCallback(\n    (userPermission: PERMISSIONS): boolean => {\n      if (Array.isArray(userPermissions)) {\n        return !!userPermissions?.find((role) => role.includes(userPermission));\n      }\n      return false;\n    },\n    [userPermissions],\n  );\n\n  return {\n    checkPermission,\n  };\n};\n","import SecureUpload from '@/components/SecureUpload';\nimport PERMISSIONS from '@/consts/permissions';\nimport { usePermissions } from '@/hooks/usePermissions';\nimport { DictionaryWordsTabNames } from '@/pages/Dictionary/components/DictionaryWords/form';\nimport { deleteDictionaryWord, dictionaryWords } from '@/services/escola-lms/dictionary';\nimport { createTableOrderObject } from '@/utils/utils';\nimport { DeleteOutlined, EditOutlined, PlusOutlined } from '@ant-design/icons';\nimport type { ActionType, ProColumns } from '@ant-design/pro-table';\nimport ProTable from '@ant-design/pro-table';\nimport { Button, Popconfirm, Tag, Tooltip, message } from 'antd';\nimport React, { useRef } from 'react';\nimport { FormattedMessage, Link, useIntl, useParams } from 'umi';\n\nconst handleRemove = async (id: number) => {\n  return deleteDictionaryWord(id).then((response) => {\n    if (response.success) {\n      message.success(response.message);\n    }\n    return true;\n  });\n};\n\nconst DictionaryWordsTableList: React.FC = () => {\n  const actionRef = useRef<ActionType>();\n  const intl = useIntl();\n  const params = useParams<{ dictionaryId?: string; tab?: string }>();\n  const { dictionaryId, tab } = params;\n  const { checkPermission } = usePermissions();\n\n  const columns: ProColumns<API.DictionaryWords>[] = [\n    {\n      title: <FormattedMessage id=\"ID\" defaultMessage=\"ID\" />,\n      dataIndex: 'id',\n      hideInSearch: true,\n      sorter: true,\n      width: '80px',\n    },\n    {\n      title: <FormattedMessage id=\"word\" defaultMessage=\"word\" />,\n      dataIndex: 'word',\n      sorter: true,\n    },\n    {\n      title: <FormattedMessage id=\"categories\" defaultMessage=\"categories\" />,\n      dataIndex: 'categories',\n      sorter: false,\n      hideInSearch: true,\n      render: (_, record) => (\n        <React.Fragment>\n          {record.categories?.map((category) => (\n            <Tag key={category.name}>{category.name}</Tag>\n          ))}\n        </React.Fragment>\n      ),\n    },\n    {\n      hideInSearch: true,\n      title: <FormattedMessage id=\"pages.searchTable.titleOption\" defaultMessage=\"option\" />,\n      dataIndex: 'option',\n      valueType: 'option',\n      width: 100,\n      render: (_, record) => [\n        <Link\n          to={`/other/dictionary/${dictionaryId}/${tab}/${record.id}/${DictionaryWordsTabNames.FORM}`}\n          key=\"edit\"\n        >\n          <Tooltip title={<FormattedMessage id=\"edit\" defaultMessage=\"edit\" />}>\n            <Button type=\"primary\" icon={<EditOutlined />} />\n          </Tooltip>\n        </Link>,\n        <Popconfirm\n          key=\"delete\"\n          title={\n            <FormattedMessage\n              id=\"deleteQuestion\"\n              defaultMessage=\"Are you sure to delete this record?\"\n            />\n          }\n          onConfirm={async () => {\n            const success = await handleRemove(record.id);\n            if (success) {\n              if (actionRef.current) {\n                actionRef.current.reload();\n              }\n            }\n          }}\n          okText={<FormattedMessage id=\"yes\" />}\n          cancelText={<FormattedMessage id=\"no\" />}\n        >\n          <Tooltip title={<FormattedMessage id=\"delete\" defaultMessage=\"delete\" />}>\n            <Button type=\"primary\" icon={<DeleteOutlined />} danger />\n          </Tooltip>\n        </Popconfirm>,\n      ],\n    },\n  ];\n\n  return (\n    <ProTable<API.DictionaryWords, API.DictionaryWordsParams>\n      headerTitle={intl.formatMessage({\n        id: 'words',\n        defaultMessage: 'Words',\n      })}\n      actionRef={actionRef}\n      rowKey=\"id\"\n      search={{\n        layout: 'vertical',\n      }}\n      toolBarRender={() => [\n        <Link\n          to={`/other/dictionary/${dictionaryId}/${tab}/new/${DictionaryWordsTabNames.FORM}`}\n          key=\"new\"\n        >\n          <Button type=\"primary\" key=\"primary\">\n            <PlusOutlined /> <FormattedMessage id=\"new\" defaultMessage=\"new\" />\n          </Button>\n        </Link>,\n        checkPermission(PERMISSIONS.DictionaryImport) ? (\n          <div className=\"import-dictionary\">\n            <SecureUpload\n              title={intl.formatMessage({\n                id: 'import_dictionary',\n                defaultMessage: 'Import dictionary',\n              })}\n              url=\"/api/admin/dictionary-words/import\"\n              name=\"file\"\n              accept=\".csv, .xlsx\"\n              data={{\n                dictionary_id: Number(dictionaryId),\n              }}\n              onChange={(info) => {\n                if (info.file.status === 'done') {\n                  if (info.file.response && info.file.response.success) {\n                    message.success(info.file.response.message);\n                    actionRef.current?.reload();\n                  }\n                }\n                if (info.file.response && info.file.status === 'error') {\n                  message.error(info.file.response.message);\n                  console.error(info.file.response);\n                }\n              }}\n              hideLabel\n              wrapInForm={false}\n              maxFiles={1}\n              clearListAfterUpload\n            />\n          </div>\n        ) : undefined,\n      ]}\n      request={({ pageSize, current, word }, sort) => {\n        return dictionaryWords({\n          per_page: pageSize,\n          page: current,\n          word,\n          dictionary_id: Number(dictionaryId),\n          ...createTableOrderObject(sort, 'created_at'),\n        }).then((response) => {\n          if (response.success) {\n            return {\n              data: response.data,\n              total: response.meta.total,\n              success: true,\n            };\n          }\n          return [];\n        });\n      }}\n      columns={columns}\n    />\n  );\n};\n\nexport default DictionaryWordsTableList;\n","import { useShowNotification } from '@/hooks/useMessage';\nimport DictionaryWordsTableList from '@/pages/Dictionary/components/DictionaryWords';\nimport {\n  createDictionary,\n  getDictionary,\n  updateDictionary,\n} from '@/services/escola-lms/dictionary';\nimport ProCard from '@ant-design/pro-card';\nimport ProForm, { ProFormDigit, ProFormText } from '@ant-design/pro-form';\nimport { PageContainer } from '@ant-design/pro-layout';\nimport { Col, Row, Spin } from 'antd';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { FormattedMessage, history, useIntl, useParams } from 'umi';\n\ntype FormValues = {\n  name: string;\n  free_views_count: number;\n};\n\nexport enum DictionaryTabNames {\n  FORM = 'form',\n  WORDS = 'words',\n}\n\nexport default () => {\n  const intl = useIntl();\n  const params = useParams<{ dictionaryId?: string; tab?: string }>();\n  const { dictionaryId, tab } = params;\n  const isNew = dictionaryId === 'new';\n  const { showNotification } = useShowNotification();\n  const [data, setData] = useState<Partial<API.Dictionaries>>();\n  const [loading, setLoading] = useState(false);\n  const [form] = ProForm.useForm();\n\n  const fetchData = useCallback(async () => {\n    setLoading(true);\n    const response = await getDictionary(Number(dictionaryId));\n    if (response.success) {\n      setData(response.data);\n    }\n    setLoading(false);\n  }, [dictionaryId]);\n\n  useEffect(() => {\n    if (dictionaryId === 'new') {\n      setData({});\n      return;\n    }\n\n    fetchData();\n  }, [dictionaryId, fetchData]);\n\n  const formProps = useMemo(\n    () => ({\n      onFinish: async (values: FormValues) => {\n        let response: API.DefaultResponse<API.Dictionaries>;\n\n        if (dictionaryId === 'new') {\n          response = await createDictionary(values);\n          if (response.success) {\n            history.push(`/other/dictionary/${response.data.id}/form`);\n          }\n        } else {\n          response = await updateDictionary(Number(dictionaryId), values);\n        }\n\n        showNotification(response);\n      },\n      initialValues: data,\n    }),\n    [data, dictionaryId],\n  );\n\n  if (!data) {\n    return <Spin />;\n  }\n\n  return (\n    <PageContainer\n      title={\n        isNew ? <FormattedMessage id=\"new_dictionary\" /> : <FormattedMessage id=\"edit_dictionary\" />\n      }\n    >\n      <ProCard\n        tabs={{\n          type: 'card',\n          activeKey: tab,\n          onChange: (key) => {\n            history.push(`/other/dictionary/${dictionaryId}/${key}`);\n          },\n        }}\n      >\n        <ProCard.TabPane key={DictionaryTabNames.FORM} tab={<FormattedMessage id=\"attributes\" />}>\n          <ProForm {...formProps} form={form}>\n            <Row gutter={[16, 16]}>\n              <Col xs={{ span: 24 }} md={{ span: 12 }}>\n                <ProFormText\n                  name=\"name\"\n                  label={<FormattedMessage id=\"name\" />}\n                  tooltip={<FormattedMessage id=\"name\" />}\n                  placeholder={intl.formatMessage({\n                    id: 'Name',\n                  })}\n                  required\n                  rules={[\n                    {\n                      validator: async (_, value) => {\n                        if (!value) {\n                          return Promise.reject(\n                            new Error(\n                              intl.formatMessage({\n                                id: 'field_required',\n                                defaultMessage: 'field_required',\n                              }),\n                            ),\n                          );\n                        }\n                        return Promise.resolve();\n                      },\n                    },\n                  ]}\n                />\n              </Col>\n              {!isNew && (\n                <Col xs={{ span: 24 }} md={{ span: 12 }}>\n                  <ProFormText\n                    name=\"slug\"\n                    label={<FormattedMessage id=\"slug\" />}\n                    placeholder={intl.formatMessage({\n                      id: 'slug',\n                    })}\n                    disabled\n                    required\n                  />\n                </Col>\n              )}\n              <Col xs={{ span: 24 }} md={{ span: 12 }}>\n                <ProFormDigit\n                  name=\"free_views_count\"\n                  label={<FormattedMessage id=\"free_views_count\" />}\n                  tooltip={<FormattedMessage id=\"free_views_count_tooltip\" />}\n                  placeholder={intl.formatMessage({\n                    id: 'Free views count',\n                  })}\n                  min={0}\n                />\n              </Col>\n            </Row>\n            {loading && <Spin />}\n          </ProForm>\n        </ProCard.TabPane>\n        <ProCard.TabPane\n          key={DictionaryTabNames.WORDS}\n          tab={<FormattedMessage id=\"words\" />}\n          disabled={isNew}\n        >\n          <DictionaryWordsTableList />\n        </ProCard.TabPane>\n      </ProCard>\n    </PageContainer>\n  );\n};\n"],"names":["SecureUpload","_ref","onChange","onUpload","url","name","extra","accept","data","_ref$wrapInForm","wrapInForm","title","formProps","maxFiles","clearListAfterUpload","hideLabel","disabled","showUploadList","_useState","useState","_useState2","_slicedToArray","infoState","setInfoState","intl","useIntl","_jsx","ConditionalWrap","condition","wrap","children","Form","_objectSpread","ProFormUploadButton","concat","formatMessage","id","placeholder","label","FormattedMessage","max","fieldProps","headers","Authorization","localStorage","getItem","info","file","status","response","undefined","action","window","REACT_APP_API_URL","fileList","messagePatterns","regex","translationKey","extractModel","message","split","getTranslationKeyAndModel","_i","_messagePatterns","length","pattern","test","model","useShowNotification","showNotification","_getTranslationKeyAnd","isSuccess","success","toLocaleLowerCase","usePermissions","_initialState$current","_useModel","useModel","initialState","userPermissions","currentUser","permissions","checkPermission","useCallback","userPermission","Array","isArray","find","role","includes","handleRemove","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_context","prev","next","abrupt","deleteDictionaryWord","then","stop","_x","apply","arguments","DictionaryWordsTableList","actionRef","useRef","params","useParams","dictionaryId","tab","_usePermissions","columns","defaultMessage","dataIndex","hideInSearch","sorter","width","render","_","record","_record$categories","React","categories","map","category","Tag","valueType","Link","to","DictionaryWordsTabNames","FORM","Tooltip","Button","type","icon","EditOutlined","Popconfirm","onConfirm","_callee2","_context2","sent","current","reload","okText","cancelText","DeleteOutlined","danger","ProTable","headerTitle","rowKey","search","layout","toolBarRender","_jsxs","PlusOutlined","PERMISSIONS","DictionaryImport","className","dictionary_id","Number","_actionRef$current","error","console","request","_ref3","sort","pageSize","word","dictionaryWords","per_page","page","createTableOrderObject","total","meta","DictionaryTabNames","isNew","_useShowNotification","setData","_useState3","_useState4","loading","setLoading","_ProForm$useForm","ProForm","useForm","_ProForm$useForm2","form","fetchData","getDictionary","useEffect","useMemo","onFinish","_onFinish","values","createDictionary","history","push","updateDictionary","initialValues","PageContainer","ProCard","tabs","activeKey","key","TabPane","Row","gutter","Col","xs","span","md","ProFormText","tooltip","required","rules","validator","_validator","_callee3","value","_context3","Promise","reject","Error","resolve","_x2","_x3","ProFormDigit","min","Spin","WORDS"],"sourceRoot":""}