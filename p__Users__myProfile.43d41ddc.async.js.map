{"version":3,"sources":["webpack:///./src/services/escola-lms/fields.ts","webpack:///./src/components/ResponsiveImage/index.tsx","webpack:///./src/hooks/useModelFields.ts","webpack:///./src/components/JsonEditor/index.tsx","webpack:///./src/pages/Users/User/components/AdditionalField.tsx","webpack:///./src/pages/Users/User/components/SettingModal.tsx","webpack:///./src/pages/Users/User/settings.tsx","webpack:///./src/pages/Users/myProfile.tsx","webpack:///./node_modules/@ant-design/pro-form/es/components/Checkbox/index.js"],"names":["params","options","request","method","body","data","ResponsiveImage","path","size","srcSizes","alt","props","src","window","REACT_APP_API_URL","srcSet","map","srcSize","join","useModelFields","class_type","useState","state","setState","useEffect","fetchFields","then","success","list","JsonEditor","value","onChange","isModalVisible","setIsModalVisible","hideModal","useCallback","mode","setMode","e","target","newValue","AdditionalField","field","intl","useIntl","getProperField","f","gl","extra","find","item","getLocale","type","name","formatMessage","id","defaultMessage","step","SettingsModalForm","visible","onVisibleChange","onFinish","useForm","form","resetFields","required","TableList","user","isProfile","actionRef","useRef","modalVisible","setModalVisible","setMetod","columns","title","dataIndex","hideInSearch","createEntries","arr","Object","entries","entry","key","getUserSettings","Number","response","isInteger","setUserSettings","current","reload","useParams","tab","additionalFields","setData","fetch","profile","bio","formPropsGeneral","useMemo","values","updateProfile","message","initialValues","formPropsChangePassword","updateProfilePassword","breadcrumb","routes","breadcrumbName","String","activeKey","history","push","path_avatar","_excluded","CheckboxGroup","React","forwardRef","_ref","ref","fieldProps","proFieldProps","valueEnum","rest","_objectWithoutProperties","_jsx","ProFormField","_objectSpread","valueType","runFunction","undefined","lightProps","labelFormatter","filedConfig","customLightMode","ProFormCheckboxComponents","_ref2","children","_Checkbox","ProFormCheckbox","createField","valuePropName","WrappedProFormCheckbox","Group"],"mappings":"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","file":"p__Users__myProfile.43d41ddc.async.js","sourcesContent":["import { request } from 'umi';\nimport type { RequestOptionsInit } from 'umi-request';\n\n/**  GET /api/model-fields */\nexport async function fields(\n  params: API.PageParams &\n    API.PaginationParams & {\n      class_type: string;\n    },\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<EscolaLms.ModelFields.Models.Metadata[]>>(\n    `/api/model-fields`,\n    {\n      method: 'GET',\n      params,\n      ...(options || {}),\n    },\n  );\n}\n\n/**  POST /api/aadmin/model-fields */\nexport async function createOrUpdateField(\n  body: EscolaLms.ModelFields.Http.Requests.MetadataCreateOrUpdateRequest,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<EscolaLms.ModelFields.Models.Metadata>>(\n    `/api/admin/model-fields`,\n    {\n      method: 'POST',\n      data: body,\n      ...(options || {}),\n    },\n  );\n}\n\n/**  DELETE /api/admin/model-fields */\nexport async function deleteField(\n  body: EscolaLms.ModelFields.Http.Requests.MetadataDeleteRequest,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<boolean>>(`/api/admin/model-fields`, {\n    method: 'DELETE',\n    data: body,\n    ...(options || {}),\n  });\n}\n","import React from 'react';\nimport { Image } from 'antd';\nimport type { ImageProps } from 'antd';\ndeclare const REACT_APP_API_URL: string;\n\ninterface ResponsiveImageProps extends ImageProps {\n  path: string;\n  size?: number;\n  srcSizes?: number[];\n  alt?: string;\n}\n\nconst ResponsiveImage: React.FC<ResponsiveImageProps> = ({\n  path,\n  size,\n  srcSizes,\n  alt = 'LMS Image',\n  ...props\n}) => {\n  const src = `${window.REACT_APP_API_URL || REACT_APP_API_URL}/api/images/img?path=${path}&w=${\n    srcSizes ? srcSizes[0] : size\n  }`;\n  const srcSet =\n    srcSizes &&\n    srcSizes.map(\n      (srcSize) =>\n        `${\n          window.REACT_APP_API_URL || REACT_APP_API_URL\n        }/api/images/img?path=${path}&w=${srcSize} ${srcSize}w`,\n    );\n\n  return (\n    <div className=\"escolalms-image\">\n      <Image src={src} srcSet={srcSet && srcSet.join(',')} alt={alt} {...props} />\n    </div>\n  );\n};\n\nexport default ResponsiveImage;\n","import { useState, useEffect } from 'react';\n\nimport { fields as fetchFields } from '@/services/escola-lms/fields';\n\ntype ModelFieldsState =\n  | {\n      state: 'initial';\n    }\n  | {\n      state: 'loading';\n    }\n  | {\n      state: 'loaded';\n      list: EscolaLms.ModelFields.Models.Metadata[];\n    }\n  | {\n      state: 'error';\n      error: string;\n    };\n\nconst useModelFields = (class_type: string): ModelFieldsState => {\n  const [state, setState] = useState<ModelFieldsState>({ state: 'initial' });\n\n  useEffect(() => {\n    setState({ state: 'loading' });\n    fetchFields({ class_type }).then((data) => {\n      if (data.success) {\n        setState({ state: 'loaded', list: data.data });\n      }\n    });\n  }, [class_type]);\n\n  return state;\n};\n\nexport default useModelFields;\n","import React, { useState, useCallback } from 'react';\nimport { Modal, Button, Radio } from 'antd';\nimport { JsonEditor as Editor } from 'jsoneditor-react';\nimport { FormattedMessage } from 'umi';\nimport 'jsoneditor-react/es/editor.min.css';\n\ntype EditorMode = 'tree' | 'view' | 'form' | 'code' | 'text';\n\nexport const JsonEditor: React.FC<{\n  value?: string;\n  onChange?: (value: string) => void;\n}> = ({ value, onChange }) => {\n  const [isModalVisible, setIsModalVisible] = useState(false);\n\n  const hideModal = useCallback(() => {\n    setIsModalVisible(false);\n  }, []);\n\n  const [mode, setMode] = useState<EditorMode>('code');\n\n  return (\n    <div>\n      <Button type=\"primary\" onClick={() => setIsModalVisible(true)} size=\"small\">\n        <FormattedMessage id=\"json_editor\" />\n      </Button>\n      <Modal title=\"JSON\" visible={isModalVisible} onOk={hideModal} onCancel={hideModal}>\n        <Radio.Group onChange={(e) => setMode(e.target.value)} value={mode}>\n          <Radio value={'tree'}>tree</Radio>\n          <Radio value={'view'}>view</Radio>\n          <Radio value={'form'}>form</Radio>\n          <Radio value={'code'}>code</Radio>\n          <Radio value={'text'}>text</Radio>\n        </Radio.Group>\n        <Editor\n          key={mode}\n          mode={mode}\n          value={value}\n          onChange={(newValue: string) => {\n            return onChange && onChange(newValue);\n          }}\n        />\n      </Modal>\n    </div>\n  );\n};\n\nexport default JsonEditor;\n","import JsonEditor from '@/components/JsonEditor';\nimport ProForm, {\n  ProFormCheckbox,\n  ProFormDigit,\n  ProFormText,\n  ProFormTextArea,\n} from '@ant-design/pro-form';\nimport React from 'react';\nimport { FormattedMessage, useIntl } from 'umi';\nimport { getLocale } from 'umi';\n\nconst AdditionalField: React.FC<{\n  field: API.ModelField;\n}> = ({ field }) => {\n  const intl = useIntl();\n  const getProperField = (f: API.ModelField) => {\n    const gl = f && f.extra && f.extra.find((item: Record<string, string>) => item[getLocale()]);\n\n    switch (f.type) {\n      case 'number':\n        return (\n          <ProFormDigit\n            width=\"md\"\n            name={f.name}\n            label={gl ? gl[getLocale()] : <FormattedMessage id={f.name} />}\n            tooltip={<FormattedMessage id={f.name} />}\n            placeholder={intl.formatMessage({\n              id: f.name,\n              defaultMessage: f.name,\n            })}\n            min={1}\n            max={1024}\n            fieldProps={{ step: 1 }}\n          />\n        );\n      case 'boolean':\n        return (\n          <ProFormCheckbox name={f.name}>\n            {gl ? gl[getLocale()] : <FormattedMessage id={f.name} />}\n          </ProFormCheckbox>\n        );\n\n      case 'varchar':\n        return (\n          <ProFormText\n            width=\"md\"\n            name={f.name}\n            label={gl ? gl[getLocale()] : <FormattedMessage id={f.name} />}\n            tooltip={<FormattedMessage id={f.name} />}\n            placeholder={intl.formatMessage({\n              id: f.name,\n            })}\n          />\n        );\n\n      case 'json':\n        return (\n          <ProForm.Item\n            name={f.name}\n            label={gl ? gl[getLocale()] : <FormattedMessage id={f.name} />}\n            tooltip={<FormattedMessage id={f.name} />}\n            valuePropName=\"value\"\n          >\n            <JsonEditor />\n          </ProForm.Item>\n        );\n\n      case 'text':\n      default:\n        return (\n          <ProFormTextArea\n            width=\"md\"\n            name={f.name}\n            label={gl ? gl[getLocale()] : <FormattedMessage id={f.name} />}\n            tooltip={<FormattedMessage id={f.name} />}\n            placeholder={intl.formatMessage({\n              id: f.name,\n            })}\n          />\n        );\n    }\n  };\n  return <>{getProperField(field)}</>;\n};\n\nexport default AdditionalField;\n","import React, { useEffect } from 'react';\nimport { Form } from 'antd';\nimport ProForm, { ProFormText, ModalForm } from '@ant-design/pro-form';\n\nimport { useIntl, FormattedMessage } from 'umi';\n\nexport const SettingsModalForm: React.FC<{\n  id?: number | false;\n  visible: boolean;\n  onVisibleChange: (visible: boolean) => void;\n  onFinish: (formData: API.UserSetting) => Promise<boolean | void>;\n}> = (props) => {\n  const intl = useIntl();\n\n  const { visible, onVisibleChange, onFinish } = props;\n\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    return () => {\n      form.resetFields();\n    };\n  }, []);\n\n  return (\n    <ModalForm\n      form={form}\n      title={intl.formatMessage({\n        id: 'newSetting',\n        defaultMessage: 'newSetting',\n      })}\n      width=\"30vw\"\n      visible={visible}\n      onVisibleChange={onVisibleChange}\n      onFinish={onFinish}\n    >\n      <ProForm.Group>\n        <ProFormText\n          label={<FormattedMessage id=\"key\" defaultMessage=\"key\" />}\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n          width=\"md\"\n          name=\"key\"\n        />\n        <ProFormText\n          label={<FormattedMessage id=\"value\" defaultMessage=\"value\" />}\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n          width=\"md\"\n          name=\"value\"\n        />\n      </ProForm.Group>\n    </ModalForm>\n  );\n};\n\nexport default SettingsModalForm;\n","import React, { useState, useRef, useCallback } from 'react';\nimport { useIntl, FormattedMessage } from 'umi';\nimport type { ProColumns, ActionType } from '@ant-design/pro-table';\nimport ProTable from '@ant-design/pro-table';\nimport { getUserSettings, setUserSettings } from '@/services/escola-lms/user';\nimport { Button } from 'antd';\nimport { PlusOutlined, InteractionOutlined } from '@ant-design/icons';\nimport UserSettingForm from './components/SettingModal';\n\nconst TableList: React.FC<{ user: string; isProfile: boolean }> = ({ user, isProfile = false }) => {\n  const actionRef = useRef<ActionType>();\n  const intl = useIntl();\n  const [modalVisible, setModalVisible] = useState<number | false>(false);\n  const [method, setMetod] = useState('PATCH');\n  const columns: ProColumns<API.UserSetting>[] = [\n    {\n      title: <FormattedMessage id=\"key\" defaultMessage=\"key\" />,\n      dataIndex: 'key',\n      hideInSearch: true,\n    },\n    {\n      title: <FormattedMessage id=\"value\" defaultMessage=\"value\" />,\n      dataIndex: 'value',\n      hideInSearch: true,\n    },\n  ];\n\n  const createEntries = useCallback(\n    (data: API.UserSetting) => {\n      const arr =\n        data &&\n        Object.entries(data).map((entry) => {\n          return {\n            key: entry[0],\n            value: entry[1],\n          };\n        });\n      return arr;\n    },\n    [user],\n  );\n\n  return (\n    <React.Fragment>\n      <ProTable<API.UserSetting, API.PageParams>\n        headerTitle={intl.formatMessage({\n          id: 'menu.settings',\n        })}\n        actionRef={actionRef}\n        rowKey=\"id\"\n        search={false}\n        toolBarRender={\n          isProfile\n            ? () => [\n                <Button\n                  type=\"primary\"\n                  key=\"primary\"\n                  onClick={() => {\n                    setModalVisible(-1);\n                    setMetod('PATCH');\n                  }}\n                >\n                  <PlusOutlined /> <FormattedMessage id=\"pages.searchTable.new\" />\n                </Button>,\n                <Button\n                  color=\"yellow\"\n                  type=\"primary\"\n                  key=\"primary\"\n                  onClick={() => {\n                    setModalVisible(-1);\n                    setMetod('PUT');\n                  }}\n                >\n                  <InteractionOutlined /> <FormattedMessage id=\"user.settings.overwrite\" />\n                </Button>,\n              ]\n            : false\n        }\n        request={() => {\n          return getUserSettings(Number(user)).then((response) => {\n            if (response.success) {\n              return {\n                data: createEntries(response.data),\n              };\n            }\n            return [];\n          });\n        }}\n        columns={columns}\n      />\n      <UserSettingForm\n        id={modalVisible}\n        visible={Number.isInteger(modalVisible)}\n        onVisibleChange={(value) => {\n          return value === false && setModalVisible(false);\n        }}\n        onFinish={async (value) => {\n          const request = await setUserSettings(Number(user), method, value);\n\n          if (request.success) {\n            setModalVisible(false);\n\n            if (actionRef.current) {\n              actionRef.current.reload();\n            }\n          }\n        }}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default TableList;\n","import { useMemo, useState, useEffect } from 'react';\nimport { message, Spin } from 'antd';\nimport ProForm, { ProFormText } from '@ant-design/pro-form';\nimport ProCard from '@ant-design/pro-card';\nimport { profile, updateProfile, updateProfilePassword } from '@/services/escola-lms/user';\nimport useModelFields from '@/hooks/useModelFields';\nimport { PageContainer } from '@ant-design/pro-layout';\nimport ResponsiveImage from '@/components/ResponsiveImage';\nimport { useIntl, useParams, FormattedMessage, history } from 'umi';\nimport UserSettings from './User/settings';\nimport AdditionalField from './User/components/AdditionalField';\nimport SecureUploadBrowser from '@/components/SecureUpload/browser';\n\nexport default () => {\n  const params = useParams<{ tab?: string }>();\n  const intl = useIntl();\n  const { tab = 'general' } = params;\n  const additionalFields = useModelFields('EscolaLms\\\\Auth\\\\Models\\\\User');\n  const [data, setData] = useState<API.UserItem>();\n\n  useEffect(() => {\n    const fetch = async () => {\n      const response = await profile();\n      if (response.success) {\n        setData({\n          ...response.data,\n          bio: response.data.bio || '',\n        });\n      }\n    };\n\n    fetch();\n  }, []);\n\n  const formPropsGeneral = useMemo(\n    () => ({\n      onFinish: async (values: API.UserItem) => {\n        const response: API.DefaultResponse<API.UserItem> = await updateProfile(values);\n        message.success(response.message);\n      },\n      initialValues: data,\n    }),\n    [data],\n  );\n\n  const formPropsChangePassword = useMemo(\n    () => ({\n      onFinish: async (values: API.UserChangePassword) => {\n        const response: API.DefaultResponse<API.UserChangePassword> = await updateProfilePassword(\n          values,\n        );\n        message.success(response.message);\n      },\n      initialValues: data,\n    }),\n    [data],\n  );\n\n  if (!data) {\n    return <Spin />;\n  }\n\n  return (\n    <PageContainer\n      title={<FormattedMessage id=\"my_profile\" />}\n      header={{\n        breadcrumb: {\n          routes: [\n            {\n              path: 'my-profile',\n              breadcrumbName: intl.formatMessage({\n                id: 'my_profile',\n              }),\n            },\n            {\n              path: String(tab),\n              breadcrumbName: intl.formatMessage({\n                id: String(tab),\n              }),\n            },\n          ],\n        },\n      }}\n    >\n      <ProCard\n        tabs={{\n          type: 'card',\n          activeKey: tab,\n          onChange: (key) => history.push(`/my-profile/${key}`),\n        }}\n      >\n        <ProCard.TabPane key=\"general\" tab={<FormattedMessage id=\"general\" />}>\n          <ProForm {...formPropsGeneral}>\n            <ProForm.Group>\n              <ProFormText\n                width=\"md\"\n                name=\"first_name\"\n                label={<FormattedMessage id=\"first_name\" />}\n                tooltip={<FormattedMessage id=\"first_name\" />}\n                placeholder={intl.formatMessage({\n                  id: 'first_name',\n                })}\n                required\n              />\n              <ProFormText\n                width=\"md\"\n                name=\"last_name\"\n                label={<FormattedMessage id=\"last_name\" />}\n                tooltip={<FormattedMessage id=\"last_name\" />}\n                placeholder={intl.formatMessage({\n                  id: 'last_name',\n                })}\n                required\n              />\n            </ProForm.Group>\n            <ProForm.Group>\n              {additionalFields.state === 'loaded' &&\n                additionalFields.list.map((field) => (\n                  <AdditionalField key={field.id} field={field} />\n                ))}\n            </ProForm.Group>\n\n            <ProForm.Group>\n              <ProForm.Item name=\"avatar\" label={<FormattedMessage id=\"avatar\" />}>\n                {data.path_avatar && (\n                  <ResponsiveImage path={data.path_avatar} size={600} width={200} />\n                )}\n\n                <SecureUploadBrowser\n                  folder={`avatars/${data.id}`}\n                  url=\"/api/profile/upload-avatar\"\n                  name=\"avatar\"\n                  accept=\"image/*\"\n                  onUpload={(response) => {\n                    if (response.success) {\n                      // TODO refresh avatar here\n                    }\n                  }}\n                />\n              </ProForm.Item>\n            </ProForm.Group>\n          </ProForm>\n        </ProCard.TabPane>\n        <ProCard.TabPane key=\"change_password\" tab={<FormattedMessage id=\"change_password\" />}>\n          <ProForm {...formPropsChangePassword}>\n            <ProForm.Group>\n              <ProFormText.Password\n                width=\"md\"\n                name=\"current_password\"\n                label={<FormattedMessage id=\"current_password\" />}\n                placeholder={intl.formatMessage({\n                  id: 'current_password',\n                })}\n                required\n              />\n            </ProForm.Group>\n            <ProForm.Group>\n              <ProFormText.Password\n                width=\"md\"\n                name=\"new_password\"\n                label={<FormattedMessage id=\"new_password\" />}\n                placeholder={intl.formatMessage({\n                  id: 'new_password',\n                })}\n                required\n              />\n              <ProFormText.Password\n                width=\"md\"\n                name=\"new_confirm_password\"\n                label={<FormattedMessage id=\"new_confirm_password\" />}\n                placeholder={intl.formatMessage({\n                  id: 'new_confirm_password',\n                })}\n                required\n              />\n            </ProForm.Group>\n          </ProForm>\n        </ProCard.TabPane>\n        <ProCard.TabPane key=\"user_settings\" tab={<FormattedMessage id=\"user.settings\" />}>\n          <UserSettings user={String(data.id)} isProfile />\n        </ProCard.TabPane>\n      </ProCard>\n    </PageContainer>\n  );\n};\n","import \"antd/es/checkbox/style\";\nimport _Checkbox from \"antd/es/checkbox\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"options\", \"fieldProps\", \"proFieldProps\", \"valueEnum\"];\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { runFunction } from '@ant-design/pro-utils';\nimport React from 'react';\nimport { createField } from '../../BaseForm/createField';\nimport ProFormField from '../Field';\nvar CheckboxGroup = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var options = _ref.options,\n      fieldProps = _ref.fieldProps,\n      proFieldProps = _ref.proFieldProps,\n      valueEnum = _ref.valueEnum,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  return _jsx(ProFormField, _objectSpread({\n    ref: ref,\n    valueType: \"checkbox\",\n    valueEnum: runFunction(valueEnum, undefined),\n    fieldProps: _objectSpread({\n      options: options\n    }, fieldProps),\n    lightProps: _objectSpread({\n      labelFormatter: function labelFormatter() {\n        return _jsx(ProFormField, _objectSpread({\n          ref: ref,\n          valueType: \"checkbox\",\n          mode: \"read\",\n          valueEnum: runFunction(valueEnum, undefined),\n          filedConfig: {\n            customLightMode: true\n          },\n          fieldProps: _objectSpread({\n            options: options\n          }, fieldProps),\n          proFieldProps: proFieldProps\n        }, rest));\n      }\n    }, rest.lightProps),\n    proFieldProps: proFieldProps\n  }, rest));\n});\n/**\n * 多选框的\n *\n * @param\n */\n\nvar ProFormCheckboxComponents = /*#__PURE__*/React.forwardRef(function (_ref2, ref) {\n  var fieldProps = _ref2.fieldProps,\n      children = _ref2.children;\n  return _jsx(_Checkbox, _objectSpread(_objectSpread({\n    ref: ref\n  }, fieldProps), {}, {\n    children: children\n  }));\n});\nvar ProFormCheckbox = createField(ProFormCheckboxComponents, {\n  valuePropName: 'checked'\n});\nvar WrappedProFormCheckbox = ProFormCheckbox;\nWrappedProFormCheckbox.Group = CheckboxGroup;\nexport default WrappedProFormCheckbox;"],"sourceRoot":""}