{"version":3,"sources":["webpack:///./src/components/EditValidateModal/index.tsx","webpack:///./node_modules/@umijs/babel-preset-umi/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js","webpack:///./src/components/ConfirmModal/index.tsx","webpack:///./node_modules/@ant-design/pro-form/es/components/Digit/index.js","webpack:///./node_modules/date-fns/esm/isPast/index.js","webpack:///./src/hooks/useValidateFormEdit.tsx","webpack:///./src/components/ProductWidget/index.tsx","webpack:///./src/components/MultipleDatePicker/index.tsx","webpack:///./src/consts/status.ts","webpack:///./src/pages/Consultations/components/Calendar.tsx","webpack:///./src/pages/Consultations/form.tsx"],"names":["EditValidateModal","visible","setManage","showModal","disableEdit","clicked","ConfirmModal","open","onOk","onCancel","title","content","okText","loading","_excluded","ProFormDigit","_ref","ref","fieldProps","min","proFieldProps","max","rest","_objectWithoutProperties","_jsx","ProFormField","_objectSpread","valueType","filedConfig","defaultProps","width","React","forwardRef","dirtyDate","requiredArgs","arguments","toDate","getTime","Date","now","useState","manageCourseEdit","setManageCourseEdit","validateCourseEdit","modelData","status","active_from","isPast","ProductWidget","productable","type","tab","setTab","newTab","getTimestamp","value","local","valueOf","MultipleDatePicker","selectedDate","onChange","format","selectProps","setOpen","onValueChange","useCallback","date","t","index","indexOf","clone","splice","push","dateRender","currentDate","isSelected","position","zIndex","display","height","lineHeight","backgroundColor","color","margin","borderRadius","transition","renderTag","onClose","handleClose","filter","moment","disableMinutes","disabledMinutes","Array","from","length","_","i","minWidth","current","setDate","getDate","visibility","parentNode","ModelStatus","ChangeDate","data","setLoading","changeDate","newDate","changeTermDate","consultation_term_id","then","response","success","message","error","catch","err","toString","finally","currDate","toISOString","consultationStatus","reported","reject","approved","TableColumns","dataIndex","hideInSearch","sorter","render","item","user","first_name","last_name","email","ConsultationCalendar","consultation","appointments","setAppointments","intl","useIntl","fetchAppointments","getSchedule","useEffect","dateCellRender","map","formatMessage","id","defaultMessage","sort","sortArr","Object","entries","newArray","sortArrayByKey","total","record","TabNames","ConsultationForm","params","useParams","isNew","setData","useValidateFormEdit","ProForm","useForm","form","fetchData","getConsultation","Number","author_id","author","categories","categoriesArrToIds","name","formProps","useMemo","onValuesChange","valuesChanged","onFinish","values","postData","image_url","image_path","splitImagePath","logotype_url","logotype_path","createConsultation","history","updateConsultation","showConfirmModal","initialValues","breadcrumb","routes","path","breadcrumbName","String","activeKey","key","ATTRIBUTES","marginBottom","draft","published","archived","required","class_type","class_id","quantity","PRODUCT","info","file","removedPath","prevState","MEDIA","CATEGORIES","BRANDING","USER_SUBMISSION","CALENDAR","submit"],"mappings":"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","file":"p__Consultations__form.0ec66098.async.js","sourcesContent":["import { Modal } from 'antd';\nimport { FormattedMessage } from 'umi';\n\ntype Data = {\n  showModal: boolean;\n  disableEdit: boolean;\n  clicked: boolean;\n};\n\nconst EditValidateModal: React.FC<{\n  visible: boolean;\n  setManage: (data: Data) => void;\n}> = ({ visible, setManage }) => {\n  return (\n    <Modal\n      width={'600px'}\n      title={\n        <FormattedMessage\n          id=\"course.validate_edit.header\"\n          defaultMessage=\"course.validate_edit.header\"\n        />\n      }\n      visible={visible}\n      onOk={() =>\n        setManage({\n          showModal: false,\n          disableEdit: false,\n          clicked: true,\n        })\n      }\n      onCancel={() =>\n        setManage({\n          showModal: false,\n          disableEdit: true,\n          clicked: false,\n        })\n      }\n      okText=\"OK\"\n      cancelText=\"Cancel\"\n    >\n      <p>\n        <FormattedMessage\n          id=\"course.validate_edit.content\"\n          defaultMessage=\"course.validate_edit.content\"\n        />\n      </p>\n    </Modal>\n  );\n};\n\nexport default EditValidateModal;\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}","import { Modal } from 'antd';\nimport { FormattedMessage } from 'umi';\n\nconst ConfirmModal: React.FC<{\n  open: boolean;\n  onOk: () => void;\n  onCancel: () => void;\n  title?: React.ReactNode;\n  content?: React.ReactNode;\n  okText?: React.ReactNode;\n  loading?: boolean;\n}> = ({ open, onOk, onCancel, title, content, okText, loading }) => {\n  return (\n    <Modal\n      width={'600px'}\n      title={title ?? <FormattedMessage id=\"confirmModal.title\" />}\n      open={open}\n      onOk={onOk}\n      onCancel={onCancel}\n      okText={okText ?? <FormattedMessage id=\"save\" />}\n      cancelText={<FormattedMessage id=\"cancel\" />}\n      confirmLoading={loading}\n    >\n      {content ?? (\n        <p>\n          <FormattedMessage id=\"confirmModal.content\" />\n        </p>\n      )}\n    </Modal>\n  );\n};\n\nexport default ConfirmModal;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"fieldProps\", \"min\", \"proFieldProps\", \"max\"];\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from 'react';\nimport ProFormField from '../Field';\n/**\n * 数组选择组件\n *\n * @param\n */\n\nvar ProFormDigit = function ProFormDigit(_ref, ref) {\n  var fieldProps = _ref.fieldProps,\n      min = _ref.min,\n      proFieldProps = _ref.proFieldProps,\n      max = _ref.max,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  return _jsx(ProFormField, _objectSpread({\n    valueType: \"digit\",\n    fieldProps: _objectSpread({\n      min: min,\n      max: max\n    }, fieldProps),\n    ref: ref,\n    filedConfig: {\n      defaultProps: {\n        width: '100%'\n      }\n    },\n    proFieldProps: proFieldProps\n  }, rest));\n};\n\nexport default /*#__PURE__*/React.forwardRef(ProFormDigit);","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isPast\n * @category Common Helpers\n * @summary Is the given date in the past?\n * @pure false\n *\n * @description\n * Is the given date in the past?\n *\n * > ⚠️ Please note that this function is not present in the FP submodule as\n * > it uses `Date.now()` internally hence impure and can't be safely curried.\n *\n * @param {Date|Number} date - the date to check\n * @returns {Boolean} the date is in the past\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // If today is 6 October 2014, is 2 July 2014 in the past?\n * const result = isPast(new Date(2014, 6, 2))\n * //=> true\n */\nexport default function isPast(dirtyDate) {\n  requiredArgs(1, arguments);\n  return toDate(dirtyDate).getTime() < Date.now();\n}","import { useState } from 'react';\nimport { isPast } from 'date-fns';\n\ninterface ManageProps {\n  showModal: boolean;\n  disableEdit: boolean;\n  clicked: boolean;\n  valuesChanged?: boolean;\n  showConfirmModal?: boolean;\n  loading?: boolean;\n}\n\nexport default function useValidateFormEdit() {\n  const [manageCourseEdit, setManageCourseEdit] = useState<ManageProps>({\n    showModal: false,\n    disableEdit: false,\n    clicked: false,\n  });\n\n  const validateCourseEdit = (modelData: API.Course | API.Webinar | API.Consultation) => {\n    if (\n      modelData?.status === 'published' &&\n      modelData?.active_from &&\n      isPast(new Date(modelData?.active_from)) &&\n      !manageCourseEdit.clicked\n    ) {\n      setManageCourseEdit({\n        ...manageCourseEdit,\n        showModal: false,\n        disableEdit: true,\n        clicked: false,\n      });\n    } else {\n      setManageCourseEdit({\n        ...manageCourseEdit,\n        showModal: false,\n        disableEdit: false,\n        clicked: false,\n      });\n    }\n  };\n\n  return { manageCourseEdit, setManageCourseEdit, validateCourseEdit };\n}\n","import ProductsForm from '@/pages/Products/components/form';\nimport React, { useState } from 'react';\n\nexport const ProductWidget: React.FC<{\n  type?: 'line' | 'card';\n  productable?: {\n    name?: string;\n    class_type?: string;\n    class_id?: string | number;\n    quantity?: number;\n  };\n}> = ({ productable, type = 'card' }) => {\n  const [tab, setTab] = useState<string>('attributes');\n  return (\n    <ProductsForm\n      productable={productable}\n      tab={tab}\n      onTabChange={(newTab) => setTab(newTab)}\n      type={type}\n    />\n  );\n};\n\nexport default ProductWidget;\n","import React, { useCallback, useState } from 'react';\nimport { Tag, DatePicker, Select } from 'antd';\nimport moment from 'moment';\n\nimport './index.css';\n\nconst getTimestamp = (value: moment.Moment) => {\n  return value.local().valueOf();\n};\n\nconst MultipleDatePicker: React.FC<{\n  value?: number[];\n  onChange?: any;\n  format?: string;\n  selectProps?: Record<string, any>;\n}> = ({ value: selectedDate = [], onChange, format = 'DD-MM-YYYY HH:mm', selectProps = {} }) => {\n  const [open, setOpen] = useState(false);\n\n  const onValueChange = useCallback(\n    (date: moment.Moment) => {\n      const t = getTimestamp(date);\n\n      const index = selectedDate.indexOf(t);\n      const clone = [...selectedDate];\n\n      if (index > -1) {\n        clone.splice(index, 1);\n      } else {\n        clone.push(t);\n      }\n\n      onChange(clone);\n    },\n    [selectedDate],\n  );\n\n  const dateRender = useCallback(\n    (currentDate: moment.Moment) => {\n      const isSelected = selectedDate.indexOf(getTimestamp(currentDate)) > -1;\n\n      return (\n        <div\n          className={'ant-picker-cell-inner'}\n          style={\n            isSelected\n              ? {\n                  position: 'relative',\n                  zIndex: 2,\n                  display: 'inlineBlock',\n                  width: '24px',\n                  height: '22px',\n                  lineHeight: '22px',\n                  backgroundColor: '#1890ff',\n                  color: '#fff',\n                  margin: 'auto',\n                  borderRadius: '2px',\n                  transition: 'background 0.3s, border 0.3s',\n                }\n              : {}\n          }\n        >\n          {currentDate.date()}\n        </div>\n      );\n    },\n    [selectedDate],\n  );\n\n  const renderTag = useCallback(\n    ({ value, onClose }: { value: number; onClose: () => void }) => {\n      const handleClose = () => {\n        onClose();\n\n        onChange(selectedDate.filter((t) => t !== value));\n      };\n      return (\n        <Tag onClose={handleClose} closable>\n          {moment(value).format(format)}\n        </Tag>\n      );\n    },\n    [selectedDate],\n  );\n  const disableMinutes = () => {\n    return {\n      disabledMinutes: () => Array.from({ length: 59 }, (_, i) => i + 1),\n    };\n  };\n\n  return (\n    <Select\n      {...selectProps}\n      allowClear\n      mode=\"multiple\"\n      value={selectedDate}\n      onClear={() => onChange && onChange([])}\n      tagRender={renderTag}\n      open={open}\n      onFocus={() => setOpen(true)}\n      onBlur={() => setOpen(false)}\n      dropdownMatchSelectWidth={false}\n      dropdownClassName={'multipleDropdownClassName'}\n      dropdownStyle={{ height: '310px', width: '335px', minWidth: '0' }}\n      dropdownRender={() => {\n        return (\n          <DatePicker\n            disabledDate={(current: moment.Moment) => {\n              const date = new Date();\n\n              return current && current.valueOf() <= date.setDate(date.getDate() - 1);\n            }}\n            showTime={{ format: 'HH' }}\n            disabledTime={disableMinutes}\n            onChange={(date: moment.Moment | null) => date && onValueChange(date)}\n            open\n            dateRender={dateRender}\n            style={{ visibility: 'hidden' }}\n            getPopupContainer={({ parentNode }: any) => {\n              return parentNode;\n            }}\n            defaultValue={moment('00:00', 'HH')}\n          />\n        );\n      }}\n    />\n  );\n};\nexport default MultipleDatePicker;\n","export enum ModelStatus {\n  draft = 'draft',\n  published = 'published',\n  archived = 'archived',\n}\n","import { getSchedule } from '@/services/escola-lms/consultations';\nimport { Badge, Calendar, message, Tooltip, Spin, DatePicker } from 'antd';\nimport type { Moment } from 'moment';\nimport moment from 'moment';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useIntl, FormattedMessage } from 'umi';\nimport type { ProColumns } from '@ant-design/pro-table';\nimport { changeTermDate } from '@/services/escola-lms/consultations';\n\nexport const ChangeDate: React.FC<{\n  data: API.ConsultationAppointment;\n  onChange: (date: Moment) => void;\n}> = ({ data, onChange }) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [date, setDate] = useState<Moment>(moment(data.date));\n\n  const changeDate = useCallback(\n    (newDate: string) => {\n      setDate(moment(newDate));\n      setLoading(true);\n      changeTermDate(data.consultation_term_id, newDate)\n        .then((response) => {\n          if (response.success) {\n            message.success(response.message);\n            onChange(date);\n          } else {\n            message.error(response.message);\n          }\n        })\n        .catch((err: any) => message.error(err.toString()))\n        .finally(() => setLoading(false));\n    },\n    [date],\n  );\n\n  return (\n    <React.Fragment>\n      <DatePicker\n        disabledDate={(current: moment.Moment) => {\n          const currDate = new Date();\n\n          return current && current.valueOf() <= currDate.setDate(currDate.getDate() - 1);\n        }}\n        disabled={loading}\n        value={date}\n        showTime={{ format: 'HH' }}\n        onChange={(newDate) => {\n          if (newDate) {\n            changeDate(newDate.toISOString());\n          }\n        }}\n      />\n    </React.Fragment>\n  );\n};\n\nimport ProTable from '@ant-design/pro-table';\nimport { sortArrayByKey } from '@/utils/utils';\n\nconst consultationStatus = {\n  reported: 'warning',\n  reject: 'error',\n  approved: 'success',\n};\n\nexport const TableColumns: ProColumns<API.ConsultationAppointment>[] = [\n  {\n    title: <FormattedMessage id=\"ID\" defaultMessage=\"ID\" />,\n    dataIndex: 'consultation_term_id',\n    hideInSearch: true,\n    sorter: true,\n    width: '80px',\n  },\n  {\n    title: <FormattedMessage id=\"user\" defaultMessage=\"user\" />,\n    dataIndex: 'user',\n    render: (_, item) => `${item.user?.first_name} ${item.user?.last_name} ${item.user?.email}`,\n    sorter: true,\n  },\n  {\n    title: <FormattedMessage id=\"date\" defaultMessage=\"date\" />,\n    dataIndex: 'date',\n    sorter: true,\n    render: (_, item) => moment(item.date).format('yyyy-MM-DD HH:mm'),\n  },\n  {\n    title: <FormattedMessage id=\"status\" defaultMessage=\"status\" />,\n    dataIndex: 'status',\n    sorter: true,\n    render: (_, item) => (\n      <Badge\n        status={consultationStatus[item.status]}\n        text={<FormattedMessage id={item.status} />}\n      />\n    ),\n  },\n];\n\nconst ConsultationCalendar: React.FC<{ consultation: number }> = ({ consultation }) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [appointments, setAppointments] = useState<API.ConsultationAppointment[]>([]);\n  const intl = useIntl();\n\n  const fetchAppointments = useCallback(() => {\n    setLoading(true);\n    getSchedule(consultation)\n      .then((response) => {\n        if (response.success) {\n          setAppointments(response.data);\n        }\n      })\n      .catch(() => {\n        message.error(<FormattedMessage id=\"error\" defaultMessage=\"error\" />);\n      })\n      .finally(() => setLoading(false));\n  }, [consultation]);\n\n  useEffect(() => {\n    fetchAppointments();\n  }, [consultation]);\n\n  const dateCellRender = useCallback(\n    (value: moment.Moment) => {\n      return (\n        <ul className=\"events\">\n          {appointments.map((item: API.ConsultationAppointment) => {\n            if (value.format('yyyy-MM-DD') === moment(item.date).format('yyyy-MM-DD')) {\n              return (\n                <li key={item.consultation_term_id}>\n                  <Badge\n                    status={consultationStatus[item.status]}\n                    text={\n                      <React.Fragment>\n                        <Tooltip\n                          title={`${item.user?.first_name} ${item.user?.last_name} ${item.user?.email}`}\n                        >\n                          <small>{moment(item.date).format('HH:mm')}</small> {item.user?.email}\n                        </Tooltip>\n                      </React.Fragment>\n                    }\n                  />\n                </li>\n              );\n            }\n            return null;\n          })}\n        </ul>\n      );\n    },\n    [appointments],\n  );\n\n  return (\n    <React.Fragment>\n      {loading && <Spin />}\n      <Calendar dateCellRender={dateCellRender} />\n\n      {loading ? (\n        <Spin />\n      ) : (\n        <ProTable<API.ConsultationAppointment>\n          headerTitle={intl.formatMessage({\n            id: 'Consultations',\n            defaultMessage: 'Consultations',\n          })}\n          loading={loading}\n          rowKey=\"consultation_term_id\"\n          search={false}\n          request={async ({}, sort) => {\n            const sortArr = sort && Object.entries(sort)[0];\n            let newArray = appointments;\n            if (sortArr) {\n              newArray = sortArrayByKey<API.ConsultationAppointment>(\n                newArray,\n                sortArr[0],\n                sortArr[1] === 'ascend' ? false : true,\n              );\n            }\n            return {\n              data: newArray,\n              total: newArray.length,\n              success: true,\n            };\n          }}\n          columns={[\n            ...TableColumns,\n            {\n              title: <FormattedMessage id=\"options\" defaultMessage=\"options\" />,\n              dataIndex: 'option',\n              valueType: 'option',\n              width: '20%',\n              render: (_, record) => [\n                <ChangeDate key=\"change_date\" data={record} onChange={() => fetchAppointments()} />,\n              ],\n            },\n          ]}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default ConsultationCalendar;\n","import { useMemo, useState, useEffect } from 'react';\nimport { message, Spin, Row, Col, Alert, Button } from 'antd';\nimport ProForm, { ProFormText, ProFormDatePicker, ProFormSelect } from '@ant-design/pro-form';\nimport ProCard from '@ant-design/pro-card';\n\nimport WysiwygMarkdown from '@/components/WysiwygMarkdown';\nimport { PageContainer } from '@ant-design/pro-layout';\n\nimport { useParams, history, useIntl, FormattedMessage } from 'umi';\nimport { useCallback } from 'react';\nimport UserSelect from '@/components/UserSelect';\nimport CategoryCheckboxTree from '@/components/CategoryCheckboxTree';\nimport {\n  createConsultation,\n  getConsultation,\n  updateConsultation,\n} from '@/services/escola-lms/consultations';\nimport MultipleDatePicker from '@/components/MultipleDatePicker';\nimport { categoriesArrToIds, splitImagePath } from '@/utils/utils';\nimport ProFormImageUpload from '@/components/ProFormImageUpload';\nimport { ModelStatus } from '@/consts/status';\nimport useValidateFormEdit from '@/hooks/useValidateFormEdit';\nimport EditValidateModal from '@/components/EditValidateModal';\nimport ConsultationCalendar from './components/Calendar';\nimport ProductWidget from '@/components/ProductWidget';\nimport UserSubmissions from '@/components/UsersSubmissions';\nimport ConfirmModal from '@/components/ConfirmModal';\nimport './index.css';\n\nenum TabNames {\n  ATTRIBUTES = 'attributes',\n  PRODUCT = 'product',\n  MEDIA = 'media',\n  CATEGORIES = 'categories',\n  BRANDING = 'branding',\n  USER_SUBMISSION = 'user_submission',\n  CALENDAR = 'calendar',\n}\n\nconst ConsultationForm = () => {\n  const intl = useIntl();\n  const params = useParams<{ consultation?: string; tab?: string }>();\n  const { consultation, tab = 'attributes' } = params;\n  const isNew = consultation === 'new';\n  const [data, setData] = useState<Partial<API.Consultation>>();\n  const { manageCourseEdit, setManageCourseEdit, validateCourseEdit } = useValidateFormEdit();\n  const [form] = ProForm.useForm();\n\n  const fetchData = useCallback(async () => {\n    const response = await getConsultation(Number(consultation));\n    if (response.success) {\n      if (tab === 'attributes') {\n        validateCourseEdit(response.data);\n      }\n\n      setData({\n        ...response.data,\n        author_id: response.data.author && response.data.author.id,\n        categories: response.data.categories?.map(categoriesArrToIds),\n      });\n    }\n  }, [consultation]);\n\n  useEffect(() => {\n    if (isNew) {\n      setData({\n        name: 'new',\n      });\n      return;\n    }\n\n    fetchData();\n  }, [consultation]);\n\n  const formProps = useMemo(\n    () => ({\n      onValuesChange: () => {\n        setManageCourseEdit({\n          ...manageCourseEdit,\n          valuesChanged: true,\n        });\n      },\n      onFinish: async (values: Partial<API.Consultation>) => {\n        if (manageCourseEdit.disableEdit) {\n          setManageCourseEdit({\n            showModal: true,\n            disableEdit: true,\n            clicked: false,\n          });\n          return;\n        }\n\n        const postData = {\n          ...values,\n          image_url: data && data.image_url,\n          image_path: data && data.image_url && splitImagePath(data.image_url),\n          logotype_url: data && data.logotype_url,\n          logotype_path: data && data.logotype_path && splitImagePath(data.logotype_path),\n        };\n        let response: API.DefaultResponse<API.Consultation>;\n        if (isNew) {\n          response = await createConsultation(postData);\n          if (response.success) {\n            history.push(`/other/consultations/${response.data.id}`);\n          }\n        } else {\n          response = await updateConsultation(Number(consultation), postData);\n          if (response.success) {\n            validateCourseEdit(response.data);\n            history.push(`/other/consultations/${response.data.id}/${tab}`);\n          }\n        }\n        message.success(response.message);\n        setManageCourseEdit({\n          ...manageCourseEdit,\n          showConfirmModal: false,\n          loading: false,\n          valuesChanged: false,\n        });\n      },\n      initialValues: data,\n    }),\n    [data, consultation, tab, manageCourseEdit],\n  );\n\n  if (!data) {\n    return <Spin />;\n  }\n\n  return (\n    <PageContainer\n      title={\n        isNew ? (\n          <FormattedMessage id=\"consultation\" />\n        ) : (\n          <FormattedMessage id=\"consultations.edit\" />\n        )\n      }\n      header={{\n        breadcrumb: {\n          routes: [\n            {\n              path: 'other/consultations',\n              breadcrumbName: intl.formatMessage({\n                id: 'menu.Other activities.Consultations',\n              }),\n            },\n            {\n              path: String(consultation),\n              breadcrumbName: intl.formatMessage({\n                id: 'form',\n              }),\n            },\n            {\n              path: '/',\n              breadcrumbName: String(data.name),\n            },\n            {\n              path: String(tab),\n              breadcrumbName: String(data.name),\n            },\n          ],\n        },\n      }}\n    >\n      <ProCard\n        tabs={{\n          type: 'card',\n          activeKey: tab,\n          onChange: (key) => {\n            if (key !== TabNames.ATTRIBUTES && manageCourseEdit.valuesChanged) {\n              setManageCourseEdit({\n                ...manageCourseEdit,\n                showConfirmModal: true,\n              });\n            } else {\n              history.push(`/other/consultations/${consultation}/${key}`);\n            }\n          },\n        }}\n      >\n        <ProCard.TabPane key={TabNames.ATTRIBUTES} tab={<FormattedMessage id=\"attributes\" />}>\n          {manageCourseEdit.disableEdit && (\n            <Alert\n              closable\n              style={{ marginBottom: '20px' }}\n              type=\"warning\"\n              message={\n                <FormattedMessage\n                  id=\"course_edit_warning_message\"\n                  defaultMessage=\"course_edit_warning_message\"\n                />\n              }\n              action={\n                <Button\n                  onClick={() =>\n                    setManageCourseEdit({\n                      showModal: true,\n                      disableEdit: true,\n                      clicked: true,\n                    })\n                  }\n                  type=\"primary\"\n                >\n                  <FormattedMessage\n                    id=\"questionnaire.submit\"\n                    defaultMessage=\"questionnaire.submit\"\n                  />\n                </Button>\n              }\n            />\n          )}\n          <EditValidateModal visible={manageCourseEdit.showModal} setManage={setManageCourseEdit} />\n          <ProForm {...formProps} form={form}>\n            <ProForm.Group>\n              <ProFormText\n                width=\"md\"\n                name=\"name\"\n                label={<FormattedMessage id=\"name\" />}\n                tooltip={<FormattedMessage id=\"name\" />}\n                placeholder={intl.formatMessage({\n                  id: 'name',\n                  defaultMessage: 'name',\n                })}\n                required\n                disabled={manageCourseEdit.disableEdit}\n              />\n\n              <ProFormText\n                width=\"sm\"\n                name=\"duration\"\n                label={<FormattedMessage id=\"duration\" />}\n                tooltip={<FormattedMessage id=\"consultations.duration_tooltip\" />}\n                placeholder={intl.formatMessage({\n                  id: 'duration',\n                  defaultMessage: 'duration',\n                })}\n                disabled={manageCourseEdit.disableEdit}\n              />\n              <ProFormSelect\n                name=\"status\"\n                width=\"sm\"\n                label={<FormattedMessage id=\"status\" />}\n                tooltip={<FormattedMessage id=\"status_consultation_tooltip\" />}\n                valueEnum={{\n                  draft: intl.formatMessage({\n                    id: 'draft',\n                    defaultMessage: 'draft',\n                  }),\n                  published: intl.formatMessage({\n                    id: 'published',\n                    defaultMessage: 'published',\n                  }),\n                  archived: intl.formatMessage({\n                    id: 'archived',\n                    defaultMessage: 'archived',\n                  }),\n                }}\n                initialValue={ModelStatus.draft}\n                placeholder={intl.formatMessage({\n                  id: 'status',\n                })}\n                rules={[{ required: true, message: <FormattedMessage id=\"select\" /> }]}\n                disabled={manageCourseEdit.disableEdit}\n              />\n            </ProForm.Group>\n            <ProForm.Group>\n              <ProFormDatePicker\n                width=\"sm\"\n                name=\"active_from\"\n                label={<FormattedMessage id=\"active_from\" />}\n                tooltip={<FormattedMessage id=\"active_from\" />}\n                placeholder={intl.formatMessage({\n                  id: 'active_from',\n                  defaultMessage: 'active_from',\n                })}\n                disabled={manageCourseEdit.disableEdit}\n              />\n              <ProFormDatePicker\n                width=\"sm\"\n                name=\"active_to\"\n                label={<FormattedMessage id=\"active_to\" />}\n                tooltip={<FormattedMessage id=\"active_to\" />}\n                placeholder={intl.formatMessage({\n                  id: 'active_to',\n                  defaultMessage: 'active_to',\n                })}\n                disabled={manageCourseEdit.disableEdit}\n              />\n              <ProForm.Item\n                name=\"author_id\"\n                label={<FormattedMessage id=\"tutor\" />}\n                tooltip={<FormattedMessage id=\"tutor_consultation_tooltip\" />}\n                valuePropName=\"value\"\n                required\n              >\n                <UserSelect />\n              </ProForm.Item>\n            </ProForm.Group>\n            <ProForm.Group>\n              <ProForm.Item\n                name=\"description\"\n                label={<FormattedMessage id=\"description\" />}\n                tooltip={<FormattedMessage id=\"description_tooltip\" />}\n                valuePropName=\"value\"\n                required\n              >\n                <WysiwygMarkdown directory={`consultation/${consultation}/wysiwyg`} />\n              </ProForm.Item>\n            </ProForm.Group>\n            <ProForm.Group>\n              <ProForm.Item\n                valuePropName=\"value\"\n                name=\"proposed_terms\"\n                tooltip={<FormattedMessage id=\"proposed_terms_tooltip\" />}\n                label={<FormattedMessage id=\"consultations.proposed_terms\" />}\n              >\n                <MultipleDatePicker />\n              </ProForm.Item>\n            </ProForm.Group>\n          </ProForm>\n        </ProCard.TabPane>\n        {!isNew && (\n          <ProCard.TabPane\n            key={TabNames.PRODUCT}\n            tab={<FormattedMessage id=\"product\" />}\n            disabled={manageCourseEdit.disableEdit}\n          >\n            {consultation && (\n              <ProductWidget\n                type=\"line\"\n                productable={{\n                  class_type: 'App\\\\Models\\\\Consultation',\n                  class_id: consultation,\n                  name: String(data.name),\n                  quantity: 1,\n                }}\n              />\n            )}\n          </ProCard.TabPane>\n        )}\n        {!isNew && (\n          <ProCard.TabPane\n            key={TabNames.MEDIA}\n            tab={<FormattedMessage id=\"media\" />}\n            disabled={manageCourseEdit.disableEdit}\n          >\n            <ProForm {...formProps}>\n              <ProFormImageUpload\n                folder={`consultation/${consultation}`}\n                title=\"image\"\n                action={`/api/admin/consultations/${consultation}`}\n                src_name=\"image_url\"\n                form_name=\"image\"\n                getUploadedSrcField={(info) => info.file.response.data.image_url}\n                setPath={(removedPath) =>\n                  setData((prevState) => ({\n                    ...prevState,\n                    ...removedPath,\n                  }))\n                }\n              />\n            </ProForm>\n          </ProCard.TabPane>\n        )}\n        {!isNew && (\n          <ProCard.TabPane\n            key={TabNames.CATEGORIES}\n            tab={<FormattedMessage id=\"categories\" />}\n            disabled={manageCourseEdit.disableEdit}\n          >\n            <Row>\n              <Col span={12}>\n                <ProForm {...formProps}>\n                  <ProForm.Item\n                    label={<FormattedMessage id=\"categories\" />}\n                    name=\"categories\"\n                    valuePropName=\"value\"\n                  >\n                    <CategoryCheckboxTree />\n                  </ProForm.Item>\n                </ProForm>\n              </Col>\n            </Row>\n          </ProCard.TabPane>\n        )}{' '}\n        {!isNew && (\n          <ProCard.TabPane\n            key={TabNames.BRANDING}\n            tab={<FormattedMessage id=\"branding\" />}\n            disabled={manageCourseEdit.disableEdit}\n          >\n            <ProForm {...formProps}>\n              <ProFormImageUpload\n                folder={`consultation/${consultation}`}\n                title={intl.formatMessage({ id: 'logotype' })}\n                action={`/api/admin/consultations/${consultation}`}\n                src_name=\"logotype_url\"\n                form_name=\"logotype\"\n                getUploadedSrcField={(info) => info.file.response.data.logotype_url}\n                setPath={(removedPath) =>\n                  setData((prevState) => ({\n                    ...prevState,\n                    ...removedPath,\n                  }))\n                }\n              />\n            </ProForm>\n          </ProCard.TabPane>\n        )}{' '}\n        {!isNew && (\n          <ProCard.TabPane\n            key={TabNames.USER_SUBMISSION}\n            tab={<FormattedMessage id=\"user_submission\" />}\n            disabled={manageCourseEdit.disableEdit}\n          >\n            <Row>\n              <Col span={12}>\n                {consultation && (\n                  <UserSubmissions id={Number(consultation)} type=\"App\\Models\\Consultation\" />\n                )}\n              </Col>\n            </Row>\n          </ProCard.TabPane>\n        )}\n        {!isNew && (\n          <ProCard.TabPane\n            key={TabNames.CALENDAR}\n            tab={<FormattedMessage id=\"consultations.calendar\" />}\n          >\n            <ConsultationCalendar consultation={Number(consultation)} />\n          </ProCard.TabPane>\n        )}\n      </ProCard>\n      {/* CONFIRM MODAL COMPONENT */}\n      <ConfirmModal\n        open={!!manageCourseEdit.showConfirmModal}\n        onOk={() => {\n          setManageCourseEdit({\n            ...manageCourseEdit,\n            loading: true,\n          });\n          form.submit();\n        }}\n        onCancel={() => {\n          setManageCourseEdit({\n            ...manageCourseEdit,\n            showConfirmModal: false,\n          });\n        }}\n        loading={!!manageCourseEdit.loading}\n      />\n    </PageContainer>\n  );\n};\n\nexport default ConsultationForm;\n"],"sourceRoot":""}