{"version":3,"sources":["webpack:///./src/components/CollectionSelect/index.tsx","webpack:///./src/pages/Questionnaire/components/QuestionModalForm.tsx","webpack:///./src/pages/Questionnaire/components/Questions.tsx","webpack:///./src/pages/Questionnaire/components/Answers.tsx","webpack:///./src/pages/Questionnaire/components/QuestionnaireChart.tsx","webpack:///./src/pages/Questionnaire/components/Raports.tsx","webpack:///./src/pages/Questionnaire/form.tsx","webpack:///./node_modules/@ant-design/plots/es/components/column/index.js","webpack:///./node_modules/@ant-design/pro-form/es/components/Select/index.js"],"names":["prepareObj","arr","map","item","id","Number","name","title","CollectionSelect","value","onChange","multiple","defaultValue","modelType","useState","modelCollection","setModelCollection","fetching","setFetching","abortController","useRef","modelCollectionMethod","useCallback","params","getCourses","signal","current","getWebinars","getConsultations","modelSingleMethod","getCourse","getWebinar","getConsultation","fetch","search","abort","AbortController","then","response","success","data","catch","onSearch","useEffect","prevCourses","width","undefined","input","option","children","toString","toLowerCase","indexOf","modelItem","QuestionModalForm","props","intl","useIntl","visible","onVisibleChange","onFinish","questionsList","useForm","form","getQuestion","setFieldsValue","resetFields","questionTypeOptions","Object","values","QuestionnaireQuestionType","label","formatMessage","disabled","Review","findIndex","type","defaultMessage","Rate","step","QuestionForm","questionnaireId","questions","fetchData","modalVisible","setModalVisible","TableColumns","useMemo","dataIndex","hideInSearch","sorter","renderText","_","actionRef","handleUpdate","fields","hide","loading","editQuestion","questionnaire_id","addQuestion","error","handleRemoveQuestion","questionId","deleteQuestion","reload","layout","valueType","render","record","sort","sortArr","entries","Promise","resolve","newArray","filter","includes","sortArrayByKey","total","length","isInteger","QuestionVisibilitySwitch","formProps","onValuesChange","visible_on_front","changeQuestionareVisibility","message","submitter","QuestionAnswers","questionValueType","reduce","a","searchSelect","valueEnum","updated_at","Date","toLocaleString","hideInForm","hideInTable","fieldProps","allowEmpty","note","slice","user_id","user","email","renderFormItem","rest","stateType","getFieldValue","pageSize","question_id","date","getQuestionAnswers","per_page","page","format","DATETIME_FORMAT","order_by","order","config","isGroup","xField","yField","seriesField","marginRatio","QuestionnaireChart","state","height","mode","val","index","count_answers","avg_rate","QuestionnaireRaports","models","selectedRaport","setSelectedRaport","setState","questionnaireReport","split","request","minWidth","v","model","model_type_id","model_id","model_type_title","model_title","Title","ModelTypes","QuestionareForm","useParams","isNew","formQuestionnaire","setData","tab","setTab","listOfModels","setListOfModels","setModels","fetchModels","getQuestionnaireModels","parseData","array","key","result","obj","push","getQuestionnaire","handleModelChange","modelids","selectedModel","prevState","formatData","items","mappedData","keys","createQuestionnaire","history","updateQuestionare","initialValues","breadcrumb","routes","path","breadcrumbName","String","defaultActiveKey","activeKey","required","replace","charAt","toUpperCase","submit","__rest","s","e","t","p","prototype","hasOwnProperty","call","getOwnPropertySymbols","i","propertyIsEnumerable","ColumnChart","forwardRef","ref","chartRef","_a","style","className","loadingTemplate","errorTemplate","_b","useChart","G2plotColumn","chart","container","getChart","useImperativeHandle","React","createElement","ErrorBoundary","ChartLoading","theme","_excluded","_excluded2","ProFormSelectComponents","_ref","proFieldProps","showSearch","options","_objectWithoutProperties","context","useContext","FieldContext","_jsx","ProFormField","_objectSpread","runFunction","filedConfig","customLightMode","getPopupContainer","SearchSelect","_ref2","labelInValue","showArrow","autoClearSearchValue","optionLabelProp","ProFormSelect","ProFormSearchSelect","WrappedProFormSelect","displayName"],"mappings":"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","file":"p__Questionnaire__form.d14463e3.async.js","sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Select, Spin } from 'antd';\n\nimport { course as getCourses, getCourse } from '@/services/escola-lms/course';\nimport { webinars as getWebinars, getWebinar } from '@/services/escola-lms/webinars';\nimport {\n  consultations as getConsultations,\n  getConsultation,\n} from '@/services/escola-lms/consultations';\nimport { FormattedMessage } from 'umi';\nimport type { DefaultOptionType, LabeledValue } from 'antd/lib/select';\n\ntype CollectionModelItem = {\n  id: number;\n  name: string;\n};\n\n// this creates a simple state object with typegurad\nconst prepareObj = (arr: (API.Course | API.Webinar | API.Consultation)[]) =>\n  arr.map((item: API.Course | API.Webinar | API.Consultation) => {\n    if ('name' in item) {\n      return {\n        id: Number(item.id),\n        name: item.name,\n      };\n    }\n\n    return {\n      id: Number(item.id),\n      name: item.title ? item.title : '',\n    };\n  });\n\nexport const CollectionSelect: React.FC<{\n  state?: {\n    type: number;\n  };\n  multiple?: boolean;\n  value?: string;\n  onChange?: (\n    value: string | string[] | number | number[] | LabeledValue | LabeledValue[],\n    option: DefaultOptionType | DefaultOptionType[],\n  ) => void;\n  defaultValue?: string | string[] | number | number[] | LabeledValue | LabeledValue[];\n  modelType?: string;\n}> = ({ value, onChange, multiple = false, defaultValue, modelType = 'COURSE' }) => {\n  const [modelCollection, setModelCollection] = useState<CollectionModelItem[]>([]);\n  const [fetching, setFetching] = useState(false);\n\n  const abortController = useRef<AbortController>();\n\n  const modelCollectionMethod = useCallback(\n    (params: Parameters<typeof getCourses>[0]) => {\n      switch (modelType) {\n        case 'COURSE':\n          return getCourses(params, { signal: abortController?.current?.signal });\n        case 'WEBINAR':\n          return getWebinars(params, { signal: abortController?.current?.signal });\n        case 'CONSULTATIONS':\n          return getConsultations(params, { signal: abortController?.current?.signal });\n        default:\n          return getCourses(params, { signal: abortController?.current?.signal });\n      }\n    },\n    [modelType, abortController],\n  );\n  const modelSingleMethod = useCallback(\n    (id: string | number) => {\n      switch (modelType) {\n        case 'COURSE':\n          return getCourse(Number(id), { signal: abortController.current?.signal });\n        case 'WEBINAR':\n          return getWebinar(Number(id), { signal: abortController.current?.signal });\n        case 'CONSULTATIONS':\n          return getConsultation(Number(id), { signal: abortController.current?.signal });\n        default:\n          return getCourse(Number(id), { signal: abortController.current?.signal });\n      }\n    },\n    [modelType, abortController],\n  );\n\n  const fetch = useCallback(\n    (search?: string) => {\n      setFetching(true);\n      if (abortController.current) {\n        abortController.current.abort();\n      }\n\n      abortController.current = new AbortController();\n\n      modelCollectionMethod(search ? { title: search } : {})\n        .then((response) => {\n          if (response.success) {\n            setModelCollection(prepareObj(response.data));\n          }\n          setFetching(false);\n        })\n        .catch(() => setFetching(false));\n    },\n    [modelType],\n  );\n\n  const onSearch = useCallback(\n    (search: string) => {\n      fetch(search);\n    },\n    [fetch],\n  );\n\n  useEffect(() => {\n    abortController.current = new AbortController();\n\n    if (value) {\n      modelSingleMethod(Number(value)).then((response) => {\n        if (response) {\n          if (response.success) {\n            setModelCollection((prevCourses) => [...prevCourses, ...prepareObj([response.data])]);\n          }\n        }\n      });\n    }\n    return () => {\n      if (abortController.current) {\n        abortController.current.abort();\n      }\n    };\n  }, [value, modelType]);\n\n  return (\n    <Select<string | string[] | number | number[] | LabeledValue | LabeledValue[]>\n      defaultValue={defaultValue}\n      onFocus={() => fetch()}\n      allowClear\n      style={{ width: '100%' }}\n      value={value}\n      onChange={onChange}\n      mode={multiple ? 'multiple' : undefined}\n      showSearch\n      onSearch={onSearch}\n      placeholder={<FormattedMessage id=\"select_content\" defaultMessage=\"select_content\" />}\n      optionFilterProp=\"children\"\n      filterOption={(input, option) => {\n        if (option && option.children) {\n          return option?.children?.toString().toLowerCase().indexOf(input.toLowerCase()) >= 0;\n        }\n        return true;\n      }}\n      notFoundContent={fetching ? <Spin size=\"small\" /> : null}\n      optionLabelProp=\"label\"\n    >\n      {modelCollection.map((modelItem: CollectionModelItem) => (\n        <Select.Option key={modelItem.id} value={modelItem.id} label={modelItem.name}>\n          {modelItem.name}\n        </Select.Option>\n      ))}\n    </Select>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { Form } from 'antd';\nimport {\n  ProFormText,\n  ProFormSwitch,\n  ModalForm,\n  ProFormDigit,\n  ProFormSelect,\n} from '@ant-design/pro-form';\nimport { useIntl, FormattedMessage } from 'umi';\nimport { getQuestion } from '@/services/escola-lms/questionnaire';\nimport type { DefaultOptionType } from 'antd/lib/select';\nimport { QuestionnaireQuestionType } from '@/services/escola-lms/enums';\n\nexport const QuestionModalForm: React.FC<{\n  id?: number | false;\n  visible: boolean;\n  onVisibleChange: (visible: boolean) => void;\n  onFinish: (formData: API.QuestionnaireQuestion) => Promise<boolean | void>;\n  questionsList: API.QuestionnaireQuestion[];\n}> = (props) => {\n  const intl = useIntl();\n\n  const { visible, onVisibleChange, onFinish, id, questionsList } = props;\n\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    if (typeof id === 'number' && id > 0) {\n      getQuestion(id).then((response) => {\n        if (response.success) form.setFieldsValue(response.data);\n      });\n    } else {\n      form.resetFields();\n    }\n  }, [id, form]);\n\n  const questionTypeOptions: DefaultOptionType[] = Object.values(QuestionnaireQuestionType).map(\n    (name) => ({\n      name,\n      label: intl.formatMessage({\n        id: `QuestionType.${name}`,\n      }),\n      value: name,\n      disabled:\n        name === QuestionnaireQuestionType.Review &&\n        questionsList.findIndex(({ type }) => type === QuestionnaireQuestionType.Review) !== -1,\n    }),\n  );\n\n  return (\n    <ModalForm\n      form={form}\n      title={intl.formatMessage({\n        id: typeof id === 'number' && id > 0 ? 'question_edit' : 'question_add',\n        defaultMessage: typeof id === 'number' && id > 0 ? 'question_edit' : 'question_add',\n      })}\n      width=\"400px\"\n      visible={visible}\n      onVisibleChange={onVisibleChange}\n      onFinish={onFinish}\n    >\n      <ProFormSelect\n        name=\"type\"\n        options={questionTypeOptions}\n        label={<FormattedMessage id=\"type\" />}\n        initialValue={QuestionnaireQuestionType.Rate}\n      />\n      <ProFormText\n        width=\"lg\"\n        name=\"title\"\n        label={<FormattedMessage id=\"title\" />}\n        tooltip={<FormattedMessage id=\"title\" />}\n        placeholder={intl.formatMessage({\n          id: 'title',\n        })}\n      />\n      <ProFormText\n        width=\"lg\"\n        name=\"description\"\n        label={<FormattedMessage id=\"description\" />}\n        tooltip={<FormattedMessage id=\"description\" />}\n        placeholder={intl.formatMessage({\n          id: 'description',\n        })}\n      />\n      <ProFormDigit\n        width=\"lg\"\n        name=\"position\"\n        label={<FormattedMessage id=\"position\" />}\n        tooltip={<FormattedMessage id=\"position\" />}\n        placeholder={intl.formatMessage({\n          id: 'position',\n          defaultMessage: 'position',\n        })}\n        min={0}\n        max={9999}\n        fieldProps={{ step: 1 }}\n      />\n      <ProFormSwitch\n        initialValue={true}\n        name=\"active\"\n        label={<FormattedMessage id=\"is_active\" defaultMessage=\"is_active\" />}\n      />\n      <ProFormSwitch\n        initialValue={true}\n        name=\"public_answers\"\n        label={<FormattedMessage id=\"show_hide_on_front\" defaultMessage=\"show_hide_on_front\" />}\n      />\n    </ModalForm>\n  );\n};\n\nexport default QuestionModalForm;\n","import { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useIntl, FormattedMessage } from 'umi';\nimport { message, Button, Tooltip, Popconfirm } from 'antd';\nimport { addQuestion, deleteQuestion, editQuestion } from '@/services/escola-lms/questionnaire';\nimport { DeleteOutlined, EditOutlined, PlusOutlined } from '@ant-design/icons';\nimport ProTable from '@ant-design/pro-table';\nimport type { ActionType, ProColumns } from '@ant-design/pro-table';\nimport QuestionModalForm from './QuestionModalForm';\nimport { sortArrayByKey } from '@/utils/utils';\n\nconst QuestionForm: React.FC<{\n  questionnaireId: number;\n  questions?: API.QuestionnaireQuestion[];\n  fetchData: () => void;\n}> = ({ questionnaireId, questions, fetchData }) => {\n  const intl = useIntl();\n  const [modalVisible, setModalVisible] = useState<number | false>(false);\n\n  const TableColumns: ProColumns<API.QuestionnaireQuestion>[] = useMemo(\n    () => [\n      {\n        title: <FormattedMessage id=\"ID\" defaultMessage=\"ID\" />,\n        dataIndex: 'id',\n        hideInSearch: true,\n        sorter: true,\n        width: '80px',\n      },\n      {\n        title: <FormattedMessage id=\"title\" defaultMessage=\"title\" />,\n        dataIndex: 'title',\n        hideInSearch: false,\n        sorter: true,\n      },\n      {\n        title: <FormattedMessage id=\"type\" defaultMessage=\"type\" />,\n        dataIndex: 'type',\n        hideInSearch: true,\n        sorter: true,\n        renderText: (_, type) =>\n          intl.formatMessage({\n            id: `QuestionType.${type.type}`,\n          }),\n      },\n      {\n        title: <FormattedMessage id=\"description\" defaultMessage=\"description\" />,\n        dataIndex: 'description',\n        hideInSearch: true,\n        sorter: true,\n      },\n      {\n        title: <FormattedMessage id=\"position\" defaultMessage=\"position\" />,\n        dataIndex: 'position',\n        hideInSearch: true,\n        sorter: true,\n      },\n    ],\n    [],\n  );\n\n  const actionRef = useRef<ActionType>();\n\n  const handleUpdate = async (fields: Partial<API.QuestionnaireQuestion>, id?: number) => {\n    const hide = message.loading(\n      intl.formatMessage({\n        id: 'loading',\n      }),\n    );\n    try {\n      await (id && id !== -1\n        ? editQuestion(id, {\n            ...fields,\n            questionnaire_id: questionnaireId,\n          })\n        : addQuestion({\n            ...fields,\n            questionnaire_id: questionnaireId,\n          }));\n      hide();\n      fetchData();\n      message.success(\n        intl.formatMessage({\n          id: 'success',\n        }),\n      );\n      return true;\n    } catch (error) {\n      hide();\n      message.error(\n        intl.formatMessage({\n          id: 'error',\n        }),\n      );\n      return false;\n    }\n  };\n\n  const handleRemoveQuestion = useCallback(\n    async (questionId: number) => {\n      const hide = message.loading(\n        intl.formatMessage({\n          id: 'loading',\n        }),\n      );\n      try {\n        await deleteQuestion(questionId);\n        hide();\n        fetchData();\n        return true;\n      } catch (error) {\n        hide();\n        message.error(<FormattedMessage id=\"error\" defaultMessage=\"error\" />);\n        return false;\n      }\n    },\n    [actionRef, intl],\n  );\n\n  useEffect(() => {\n    actionRef.current?.reload();\n  }, [questions, fetchData]);\n\n  return (\n    <>\n      <ProTable\n        headerTitle={intl.formatMessage({\n          id: 'question_list',\n          defaultMessage: 'question_list',\n        })}\n        actionRef={actionRef}\n        rowKey=\"id\"\n        search={{\n          layout: 'vertical',\n        }}\n        toolBarRender={() => [\n          <Button\n            type=\"primary\"\n            key=\"primary\"\n            onClick={() => {\n              setModalVisible(-1);\n            }}\n          >\n            <PlusOutlined /> <FormattedMessage id=\"pages.searchTable.new\" defaultMessage=\"新建\" />\n          </Button>,\n        ]}\n        columns={[\n          ...TableColumns,\n          {\n            title: <FormattedMessage id=\"options\" defaultMessage=\"options\" />,\n            dataIndex: 'option',\n            valueType: 'option',\n\n            render: (_, record) => [\n              <Tooltip key=\"edit\" title={<FormattedMessage id=\"edit\" defaultMessage=\"edit\" />}>\n                <Button\n                  type=\"primary\"\n                  icon={<EditOutlined />}\n                  onClick={() => record.id && setModalVisible(record.id)}\n                />\n              </Tooltip>,\n              <Popconfirm\n                key=\"delete\"\n                title={\n                  <FormattedMessage\n                    id=\"deleteQuestion\"\n                    defaultMessage=\"Are you sure to delete this record?\"\n                  />\n                }\n                onConfirm={() => record.id && handleRemoveQuestion(record.id)}\n                okText={<FormattedMessage id=\"yes\" />}\n                cancelText={<FormattedMessage id=\"no\" />}\n              >\n                <Tooltip title={<FormattedMessage id=\"delete\" defaultMessage=\"delete\" />}>\n                  <Button type=\"primary\" icon={<DeleteOutlined />} danger />\n                </Tooltip>\n              </Popconfirm>,\n            ],\n          },\n        ]}\n        request={({ title }, sort) => {\n          const sortArr = sort && Object.entries(sort)[0];\n          return new Promise((resolve) => {\n            let newArray = questions ? [...questions] : [];\n            if (title) {\n              newArray = newArray.filter((item) =>\n                item.title.toLowerCase().includes(title.toLowerCase()),\n              );\n            }\n            if (sortArr) {\n              newArray = sortArrayByKey(\n                newArray,\n                sortArr[0],\n                sortArr[1] === 'ascend' ? false : true,\n              );\n            }\n            resolve({\n              data: newArray,\n              success: true,\n              total: newArray.length,\n            });\n          });\n        }}\n      />\n      <QuestionModalForm\n        id={modalVisible}\n        visible={Number.isInteger(modalVisible)}\n        onVisibleChange={(value) => {\n          return value === false && setModalVisible(false);\n        }}\n        questionsList={questions ?? []}\n        onFinish={async (value) => {\n          const success = await handleUpdate(value, Number(modalVisible));\n          if (success) {\n            setModalVisible(false);\n          }\n        }}\n      />\n    </>\n  );\n};\n\nexport default QuestionForm;\n","import TypeButtonDrawer from '@/components/TypeButtonDrawer';\nimport {\n  changeQuestionareVisibility,\n  getQuestionAnswers,\n} from '@/services/escola-lms/questionnaire';\nimport ProForm, { ProFormSwitch } from '@ant-design/pro-form';\nimport type { ProColumns } from '@ant-design/pro-table';\nimport ProTable from '@ant-design/pro-table';\nimport { Form, message } from 'antd';\nimport { useMemo } from 'react';\nimport { FormattedMessage, useIntl } from 'umi';\nimport UserSelect from '@/components/UserSelect';\nimport { format } from 'date-fns';\nimport { DATETIME_FORMAT } from '@/consts/dates';\n\nconst QuestionVisibilitySwitch: React.FC<{\n  record: API.QuestionAnswer;\n}> = ({ record }) => {\n  const [form] = Form.useForm();\n  const intl = useIntl();\n\n  const formProps: Partial<React.ComponentProps<typeof ProForm>> = useMemo(\n    () => ({\n      onValuesChange: (_: any, values) => {\n        const { visible_on_front } = values as { visible_on_front: boolean };\n\n        changeQuestionareVisibility(record.id, {\n          visible_on_front,\n        })\n          .then((response) => {\n            message.success(\n              <FormattedMessage\n                id=\"question_answer_visibility_changed\"\n                defaultMessage={response.message}\n              />,\n            );\n          })\n          .catch(() => message.error(<FormattedMessage id=\"error\" defaultMessage=\"error\" />));\n      },\n      submitter: {\n        render: () => null,\n      },\n    }),\n    [],\n  );\n\n  return (\n    <ProForm form={form} {...formProps}>\n      <ProFormSwitch\n        name=\"visible_on_front\"\n        initialValue={record.visible_on_front}\n        checkedChildren={intl.formatMessage({\n          id: 'visible',\n          defaultMessage: 'visible',\n        })}\n        unCheckedChildren={intl.formatMessage({\n          id: 'hidden',\n          defaultMessage: 'hidden',\n        })}\n      />\n    </ProForm>\n  );\n};\n\nconst QuestionAnswers: React.FC<{\n  questionnaireId: number;\n  questions?: API.QuestionnaireQuestion[];\n}> = ({ questionnaireId, questions }) => {\n  const questionValueType = useMemo(\n    () =>\n      questions &&\n      questions.reduce(\n        (a, value) => ({\n          ...a,\n          [value.id]: value.title,\n        }),\n        {},\n      ),\n    [questions],\n  );\n\n  const searchSelect: ProColumns<API.QuestionAnswer>[] = [\n    {\n      title: <FormattedMessage id=\"questions\" defaultMessage=\"questions\" />,\n      dataIndex: 'question_id',\n      hideInSearch: false,\n      valueEnum: questionValueType,\n      valueType: 'select',\n    },\n  ];\n\n  const intl = useIntl();\n\n  const TableColumns: ProColumns<API.QuestionAnswer>[] = [\n    {\n      title: <FormattedMessage id=\"ID\" defaultMessage=\"ID\" />,\n      dataIndex: 'id',\n      hideInSearch: true,\n      sorter: true,\n      width: '80px',\n    },\n    {\n      title: <FormattedMessage id=\"updated_at\" defaultMessage=\"updated_at\" />,\n      dataIndex: 'updated_at',\n      hideInSearch: true,\n      render: (_, record) =>\n        record.updated_at ? new Date(record.updated_at).toLocaleString() : '-',\n      sorter: true,\n    },\n    {\n      title: <FormattedMessage id=\"updated_at\" defaultMessage=\"updated_at\" />,\n      dataIndex: 'date',\n      hideInSearch: false,\n      hideInForm: true,\n      hideInTable: true,\n      valueType: 'date',\n      fieldProps: {\n        allowEmpty: [true],\n      },\n    },\n    {\n      title: <FormattedMessage id=\"title\" defaultMessage=\"title\" />,\n      dataIndex: 'question_title',\n      hideInSearch: true,\n      sorter: true,\n    },\n    {\n      title: <FormattedMessage id=\"note\" defaultMessage=\"note\" />,\n      dataIndex: 'note',\n      hideInSearch: true,\n      sorter: true,\n      render: (_, record) =>\n        record.note && record.note?.length > 64 ? record.note?.slice(0, 64) + '...' : record.note,\n    },\n    {\n      title: <FormattedMessage id=\"user\" defaultMessage=\"user\" />,\n      dataIndex: 'user_id',\n      hideInSearch: false,\n      render: (_, record) => (\n        <div>\n          <TypeButtonDrawer type={'App\\\\Models\\\\User'} type_id={record.user_id} />\n          <p className=\"list-paragraph\">{record.user?.name}</p>\n          <p className=\"list-paragraph\">{record.user?.email}</p>\n        </div>\n      ),\n      renderFormItem: (item, { type, ...rest }, form) => {\n        if (type === 'form') {\n          return null;\n        }\n        const stateType = form.getFieldValue('state');\n        return (\n          <UserSelect\n            {...rest}\n            state={{\n              type: stateType,\n            }}\n          />\n        );\n      },\n    },\n\n    {\n      title: <FormattedMessage id=\"sum_rate\" defaultMessage=\"sum_rate\" />,\n      dataIndex: 'rate',\n      hideInSearch: true,\n      sorter: true,\n    },\n    {\n      title: <FormattedMessage id=\"show_hide_on_front\" defaultMessage=\"show_hide_on_front\" />,\n      dataIndex: 'visible_on_front',\n      hideInSearch: true,\n      sorter: false,\n      render: (_, record) => <QuestionVisibilitySwitch record={record} />,\n    },\n  ];\n\n  return (\n    <ProTable<\n      API.QuestionAnswer,\n      API.PageParams & { question_id?: number; user_id?: string; date?: string }\n    >\n      headerTitle={intl.formatMessage({\n        id: 'answers',\n        defaultMessage: 'answers',\n      })}\n      search={{\n        layout: 'vertical',\n      }}\n      rowKey=\"id\"\n      request={({ pageSize, current, question_id, user_id, date }, sort) => {\n        const sortArr = sort && Object.entries(sort)[0];\n        return getQuestionAnswers(questionnaireId, {\n          per_page: pageSize,\n          page: current,\n          question_id,\n          user_id,\n          updated_at: date ? format(new Date(date), DATETIME_FORMAT) : undefined,\n          order_by: sortArr && sortArr[0],\n          order: sortArr ? (sortArr[1] === 'ascend' ? 'ASC' : 'DESC') : undefined,\n        }).then((response) => {\n          if (response.success) {\n            return {\n              data: response.data,\n              success: true,\n            };\n          }\n          return [];\n        });\n      }}\n      columns={[...TableColumns, ...searchSelect]}\n    />\n  );\n};\n\nexport default QuestionAnswers;\n","import React from 'react';\nimport { Column } from '@ant-design/plots';\n\nimport { Spin, Alert } from 'antd';\nimport { FormattedMessage, useIntl } from 'umi';\nimport ProCard from '@ant-design/pro-card';\nimport type { QuestionnaireRaportState } from './Raports';\n\nconst config = {\n  isGroup: true,\n  xField: 'label',\n  yField: 'value',\n  seriesField: 'type',\n  marginRatio: 0,\n};\n\nconst QuestionnaireChart: React.FC<{ state: QuestionnaireRaportState }> = ({ state }) => {\n  const intl = useIntl();\n  return (\n    <ProCard headerBordered style={{ height: '500px' }}>\n      {state.mode === 'loading' && <Spin />}\n      {state.mode === 'loaded' && state.value.length > 0 ? (\n        <Column\n          {...config}\n          data={[...state.value, ...state.value].map(\n            (val: Record<string, number | string>, index: number) => ({\n              label: val.title,\n              value: index > state.value.length - 1 ? val.count_answers : Number(val.avg_rate),\n              type:\n                index > state.value.length - 1 ? intl.formatMessage({ id: 'answers' }) : 'Rating',\n            }),\n          )}\n        />\n      ) : (\n        state.mode !== 'loading' && (\n          <p>\n            <FormattedMessage id=\"no_data\" defaultMessage=\"no_data\" />\n          </p>\n        )\n      )}\n      {state.mode === 'error' && <Alert message={state.error.data.message} type=\"error\" />}\n    </ProCard>\n  );\n};\n\nexport default QuestionnaireChart;\n","import ProCard from '@ant-design/pro-card';\nimport QuestionnaireChart from './QuestionnaireChart';\nimport { Select, Typography } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { FormattedMessage } from 'umi';\nimport { questionnaireReport } from '@/services/escola-lms/questionnaire';\n\nexport type QuestionnaireRaportState =\n  | {\n      mode: 'init';\n    }\n  | {\n      mode: 'loading';\n    }\n  | {\n      mode: 'error';\n      error: API.DataResponseSuccess<API.DefaultResponseError>;\n    }\n  | {\n      mode: 'loaded';\n      value: any;\n    };\n\nconst QuestionnaireRaports: React.FC<{\n  questionnaireId: number;\n  models: API.QuestionnaireQuestionModel[];\n}> = ({ questionnaireId, models }) => {\n  const [selectedRaport, setSelectedRaport] = useState('');\n  const [state, setState] = useState<QuestionnaireRaportState>({ mode: 'init' });\n\n  useEffect(() => {\n    setState({ mode: 'loading' });\n\n    const fetch = async () => {\n      try {\n        const request = selectedRaport\n          ? await questionnaireReport(\n              questionnaireId,\n              Number(selectedRaport.split('/')[0]),\n              Number(selectedRaport.split('/')[1]),\n            )\n          : await questionnaireReport(questionnaireId);\n\n        if (request.success) {\n          setState({\n            mode: 'loaded',\n            value: request.data,\n          });\n        }\n      } catch (error) {\n        setState({\n          mode: 'error',\n          error: error as API.DataResponseSuccess<API.DefaultResponseError>,\n        });\n      }\n    };\n    fetch();\n  }, [questionnaireId, models, selectedRaport]);\n\n  return (\n    <>\n      <Typography.Title level={5}>\n        <FormattedMessage\n          id=\"questionnaire.raports.filter\"\n          defaultMessage=\"questionnaire.raports.filter\"\n        />\n      </Typography.Title>\n      <Select allowClear style={{ minWidth: '400px' }} onChange={(v) => setSelectedRaport(v)}>\n        {models.map((model) => (\n          <Select.Option value={`${model.model_type_id}/${model.model_id}`} key={model.id}>\n            <FormattedMessage id={model.model_type_title} defaultMessage={model.model_type_title} />{' '}\n            - {model.model_title}\n          </Select.Option>\n        ))}\n      </Select>\n\n      <ProCard split=\"vertical\">\n        <ProCard colSpan={24} layout=\"center\">\n          <QuestionnaireChart state={state} />\n        </ProCard>\n      </ProCard>\n    </>\n  );\n};\n\nexport default QuestionnaireRaports;\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport { PageContainer } from '@ant-design/pro-layout';\nimport ProCard from '@ant-design/pro-card';\nimport { useParams, history, useIntl, FormattedMessage } from 'umi';\nimport { Typography, message, Spin, Button, Form, Row, Col } from 'antd';\nimport { ProFormText, ProFormSwitch } from '@ant-design/pro-form';\nimport {\n  getQuestionnaire,\n  updateQuestionare,\n  createQuestionnaire,\n  getQuestionnaireModels,\n} from '@/services/escola-lms/questionnaire';\nimport ProForm from '@ant-design/pro-form';\nimport { CollectionSelect } from '@/components/CollectionSelect';\nimport QuestionForm from './components/Questions';\nimport QuestionAnswers from './components/Answers';\nimport QuestionnaireRaports from './components/Raports';\nimport './style.css';\nimport type { LabeledValue } from 'antd/lib/select';\n\nconst { Title } = Typography;\n\nexport enum ModelTypes {\n  COURSE = 1,\n}\n\nexport const QuestionareForm = () => {\n  const params = useParams<{ questionnaireId?: string }>();\n  const { questionnaireId } = params;\n  const intl = useIntl();\n\n  const isNew = questionnaireId === 'new';\n  const [formQuestionnaire] = Form.useForm();\n\n  const [data, setData] = useState<Partial<API.Questionnaire>>();\n  const [tab, setTab] = useState('questionnaire');\n  const [listOfModels, setListOfModels] = useState<API.QuestionnaireModel[]>();\n  const [models, setModels] = useState<Record<number, (string | number | LabeledValue)[]>>({});\n\n  const fetchModels = useCallback(async () => {\n    const response = await getQuestionnaireModels();\n    if (response.success) {\n      setListOfModels(response.data);\n    }\n  }, []);\n\n  const parseData = useCallback((array: API.QuestionnaireQuestionModel[], key: string) => {\n    return array.reduce((result: Record<number, number[]>, obj: API.QuestionnaireQuestionModel) => {\n      (result[obj[key]] = result[obj[key]] || []).push(obj.model_id);\n      return result;\n    }, {});\n  }, []);\n\n  const fetchData = useCallback(async () => {\n    const response = await getQuestionnaire(Number(questionnaireId));\n    if (response.success) {\n      setData({\n        ...response.data,\n      });\n      if (response.data.models) {\n        setModels(parseData(response.data.models, 'model_type_id'));\n      }\n    }\n  }, [questionnaireId, parseData]);\n\n  useEffect(() => {\n    fetchModels();\n\n    if (isNew) {\n      setData({\n        title: 'new',\n      });\n      return;\n    }\n\n    fetchData();\n  }, [questionnaireId, fetchData, fetchModels, isNew]);\n\n  const handleModelChange = useCallback(\n    (modelids: (string | number | LabeledValue)[], selectedModel: ModelTypes) => {\n      setModels((prevState) => ({\n        ...prevState,\n        [selectedModel]: modelids,\n      }));\n    },\n    [],\n  );\n\n  const formatData = useCallback((items: Record<number, (string | number | LabeledValue)[]>) => {\n    const mappedData: Record<string, number>[] = [];\n    Object.keys(items).map((key) => {\n      mappedData.push(\n        ...items[key].map((item: number) => ({ model_id: item, model_type_id: Number(key) })),\n      );\n    });\n    return mappedData;\n  }, []);\n\n  const formProps = useMemo(\n    () => ({\n      onFinish: async (values: API.Questionnaire) => {\n        try {\n          if (isNew) {\n            const request = await createQuestionnaire({ ...values, models: formatData(models) });\n            if (request.success) {\n              history.push(`/other/questionnaire/${request.data.id}`);\n            }\n            message.success(<FormattedMessage id=\"success\" defaultMessage=\"success\" />);\n          } else {\n            const request = await updateQuestionare(Number(data?.id), {\n              ...values,\n              models: formatData(models),\n            });\n            if (request.success) {\n              fetchData();\n            }\n            message.success(<FormattedMessage id=\"success\" defaultMessage=\"success\" />);\n          }\n        } catch (error) {\n          message.error(<FormattedMessage id=\"error\" defaultMessage=\"error\" />);\n        }\n      },\n      initialValues: data,\n    }),\n    [data, models, fetchData, formatData, isNew],\n  );\n\n  if (!data) {\n    return <Spin />;\n  }\n\n  return (\n    <PageContainer\n      title={\n        <>\n          <FormattedMessage id={data?.title ? 'questionnaire' : 'new_questionnaire'} />\n        </>\n      }\n      header={{\n        breadcrumb: {\n          routes: [\n            {\n              path: 'other/questionnaire',\n              breadcrumbName: intl.formatMessage({\n                id: 'menu.Other activities.Questionnaire',\n              }),\n            },\n            {\n              path: String(questionnaireId),\n              breadcrumbName: intl.formatMessage({\n                id: 'form',\n              }),\n            },\n            {\n              path: '/',\n              breadcrumbName: String(data?.title),\n            },\n          ],\n        },\n      }}\n    >\n      <ProCard\n        tabs={{\n          type: 'card',\n          defaultActiveKey: 'questionnaire',\n          activeKey: tab,\n          onChange: (key) => setTab(key),\n        }}\n      >\n        <ProCard.TabPane\n          key=\"questionnaire\"\n          tab={<FormattedMessage id=\"questionnaire\" defaultMessage=\"questionnaire\" />}\n        >\n          <Title level={3}>\n            <FormattedMessage id=\"questionnaire\" defaultMessage=\"questionnaire\" />\n          </Title>{' '}\n          <ProForm {...formProps} form={formQuestionnaire}>\n            <Row>\n              <Col span={6}>\n                <ProFormText\n                  label={<FormattedMessage id=\"title\" defaultMessage=\"title\" />}\n                  rules={[\n                    {\n                      required: true,\n                    },\n                  ]}\n                  width=\"md\"\n                  name=\"title\"\n                />\n              </Col>\n              <Col>\n                <ProFormSwitch\n                  initialValue={true}\n                  name=\"active\"\n                  label={<FormattedMessage id=\"is_active\" defaultMessage=\"is_active\" />}\n                />\n              </Col>\n            </Row>\n          </ProForm>\n        </ProCard.TabPane>\n        <ProCard.TabPane\n          key=\"questions\"\n          tab={<FormattedMessage id=\"questions\" defaultMessage=\"questions\" />}\n          disabled={isNew}\n        >\n          <QuestionForm\n            questionnaireId={Number(questionnaireId)}\n            questions={data.questions || []}\n            fetchData={fetchData}\n          />\n        </ProCard.TabPane>\n        <ProCard.TabPane\n          key=\"answers\"\n          tab={<FormattedMessage id=\"answers\" defaultMessage=\"answers\" />}\n          disabled={isNew}\n        >\n          <QuestionAnswers\n            questionnaireId={Number(questionnaireId)}\n            questions={data.questions || []}\n          />\n        </ProCard.TabPane>\n        {listOfModels &&\n          listOfModels.map((model: API.QuestionnaireModel) => (\n            <ProCard.TabPane\n              key={String(model.id)}\n              tab={`${intl.formatMessage({ id: 'assign' })} ${intl.formatMessage({\n                id: 'to',\n              })} ${intl.formatMessage({\n                id: model.title?.replace(\n                  model.title.charAt(0),\n                  model.title.charAt(0).toUpperCase(),\n                ),\n              })}`}\n              disabled={isNew}\n            >\n              <CollectionSelect\n                defaultValue={\n                  data.models\n                    ?.filter((item) => item.model_type_title === model.title)\n                    .map((item) => ({\n                      value: item.model_id,\n                      label: item.model_title,\n                    })) || []\n                }\n                multiple\n                onChange={(values) =>\n                  handleModelChange(values as (string | number | LabeledValue)[], model.id)\n                }\n                modelType={model.title?.toUpperCase()}\n              />\n              <Button\n                className=\"submit-btn\"\n                type=\"primary\"\n                onClick={() => formQuestionnaire.submit()}\n              >\n                <FormattedMessage id=\"questionnaire.submit\" defaultMessage=\"questionnaire.submit\" />\n              </Button>\n            </ProCard.TabPane>\n          ))}\n        <ProCard.TabPane\n          key=\"raport\"\n          tab={<FormattedMessage id=\"menu.reports\" defaultMessage=\"menu.reports\" />}\n          disabled={isNew || data.models?.length === 0}\n        >\n          {data?.models && data?.models?.length > 0 && (\n            <QuestionnaireRaports questionnaireId={Number(questionnaireId)} models={data.models} />\n          )}\n        </ProCard.TabPane>\n      </ProCard>\n    </PageContainer>\n  );\n};\n\nexport default QuestionareForm;\n","var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport React, { useEffect, useImperativeHandle, forwardRef } from 'react';\nimport { Column as G2plotColumn } from '@antv/g2plot';\nimport useChart from '../../hooks/useChart';\nimport { getChart } from '../../utils';\nimport ErrorBoundary from '../../errorBoundary';\nimport ChartLoading from '../../utils/createLoading';\nvar ColumnChart = forwardRef(function (props, ref) {\n    var chartRef = props.chartRef, _a = props.style, style = _a === void 0 ? {\n        height: 'inherit',\n    } : _a, className = props.className, loading = props.loading, loadingTemplate = props.loadingTemplate, errorTemplate = props.errorTemplate, rest = __rest(props, [\"chartRef\", \"style\", \"className\", \"loading\", \"loadingTemplate\", \"errorTemplate\"]);\n    var _b = useChart(G2plotColumn, rest), chart = _b.chart, container = _b.container;\n    useEffect(function () {\n        getChart(chartRef, chart.current);\n    }, [chart.current]);\n    useImperativeHandle(ref, function () { return ({\n        getChart: function () { return chart.current; },\n    }); });\n    return (React.createElement(ErrorBoundary, { errorTemplate: errorTemplate },\n        loading && React.createElement(ChartLoading, { loadingTemplate: loadingTemplate, theme: props.theme }),\n        React.createElement(\"div\", { className: className, style: style, ref: container })));\n});\nexport default ColumnChart;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"fieldProps\", \"children\", \"params\", \"proFieldProps\", \"mode\", \"valueEnum\", \"request\", \"showSearch\", \"options\"],\n    _excluded2 = [\"fieldProps\", \"children\", \"params\", \"proFieldProps\", \"mode\", \"valueEnum\", \"request\", \"options\"];\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { runFunction } from '@ant-design/pro-utils';\nimport React, { useContext } from 'react';\nimport FieldContext from '../../FieldContext';\nimport ProFormField from '../Field';\n/**\n * 选择框\n *\n * @param\n */\n\nvar ProFormSelectComponents = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var fieldProps = _ref.fieldProps,\n      children = _ref.children,\n      params = _ref.params,\n      proFieldProps = _ref.proFieldProps,\n      mode = _ref.mode,\n      valueEnum = _ref.valueEnum,\n      request = _ref.request,\n      showSearch = _ref.showSearch,\n      options = _ref.options,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  var context = useContext(FieldContext);\n  return _jsx(ProFormField, _objectSpread(_objectSpread({\n    valueEnum: runFunction(valueEnum),\n    request: request,\n    params: params,\n    valueType: \"select\",\n    filedConfig: {\n      customLightMode: true\n    },\n    fieldProps: _objectSpread({\n      options: options,\n      mode: mode,\n      showSearch: showSearch,\n      getPopupContainer: context.getPopupContainer\n    }, fieldProps),\n    ref: ref,\n    proFieldProps: proFieldProps\n  }, rest), {}, {\n    children: children\n  }));\n});\nvar SearchSelect = /*#__PURE__*/React.forwardRef(function (_ref2, ref) {\n  var fieldProps = _ref2.fieldProps,\n      children = _ref2.children,\n      params = _ref2.params,\n      proFieldProps = _ref2.proFieldProps,\n      mode = _ref2.mode,\n      valueEnum = _ref2.valueEnum,\n      request = _ref2.request,\n      options = _ref2.options,\n      rest = _objectWithoutProperties(_ref2, _excluded2);\n\n  var props = _objectSpread({\n    options: options,\n    mode: mode || 'multiple',\n    labelInValue: true,\n    showSearch: true,\n    showArrow: false,\n    autoClearSearchValue: true,\n    optionLabelProp: 'label'\n  }, fieldProps);\n\n  var context = useContext(FieldContext);\n  return _jsx(ProFormField, _objectSpread(_objectSpread({\n    valueEnum: runFunction(valueEnum),\n    request: request,\n    params: params,\n    valueType: \"select\",\n    filedConfig: {\n      customLightMode: true\n    },\n    fieldProps: _objectSpread({\n      getPopupContainer: context.getPopupContainer\n    }, props),\n    ref: ref,\n    proFieldProps: proFieldProps\n  }, rest), {}, {\n    children: children\n  }));\n});\nvar ProFormSelect = ProFormSelectComponents;\nvar ProFormSearchSelect = SearchSelect;\nvar WrappedProFormSelect = ProFormSelect;\nWrappedProFormSelect.SearchSelect = ProFormSearchSelect; // @ts-ignore\n// eslint-disable-next-line no-param-reassign\n\nWrappedProFormSelect.displayName = 'ProFormComponent';\nexport default WrappedProFormSelect;"],"sourceRoot":""}