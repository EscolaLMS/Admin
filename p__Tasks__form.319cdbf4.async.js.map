{"version":3,"sources":["webpack:///./src/components/RelatedCourseTopicLesson/index.tsx","webpack:///./src/components/TaskNotes/index.tsx","webpack:///./src/pages/Tasks/form.tsx","webpack:///./src/services/escola-lms/tasks.ts"],"names":["traverse","lessons","reduce","acc","lesson","value","id","title","label","children","topics","map","topic","Related","onChange","useState","treeData","setTreeData","useEffect","course","page","pageSize","courses","success","Promise","all","data","filter","courseRow","program","programs","tree","programRow","undefined","length","width","maxHeight","overflow","val","TaskNoteItemList","note","onRemoved","onEdited","taskId","setValue","updateTaskNote","task_id","then","deleteTaskNote","user","first_name","last_name","e","target","TaskNotes","notes","onAdded","newNoteValue","setNewNoteValue","loading","setLoading","onNew","useCallback","createTaskNote","catch","err","console","log","finally","item","Number","isInteger","intl","useIntl","params","useParams","task","isNew","setData","ProForm","useForm","form","fetchData","fetchTask","response","formProps","useMemo","onFinish","values","postData","related_id","related","split","related_type","createTask","history","push","updateTask","message","initialValues","user_id","created_by_id","created_by","formatMessage","v","completeTask","incompleteTask","formRef","getFieldValue","setFieldValue","options","request","method","per_page","current","body"],"mappings":"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","file":"p__Tasks__form.319cdbf4.async.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { TreeSelect } from 'antd';\nimport { course, program } from '@/services/escola-lms/course';\nimport type { DefaultOptionType } from 'antd/es/select';\n\ntype TreeData = Omit<DefaultOptionType, 'label'>;\n\nexport type RelatedValue =\n  | `EscolaLms\\\\Courses\\\\Course:${number}`\n  | `EscolaLms\\\\Courses\\\\Lesson:${number}`\n  | `EscolaLms\\\\Courses\\\\Topic:${number}`;\n\nconst traverse = (lessons: API.Lesson[]): TreeData[] => {\n  return lessons.reduce(\n    (acc, lesson) => [\n      ...acc,\n      {\n        value: `EscolaLms\\\\Courses\\\\Lesson:${lesson.id}`,\n        title: lesson.title,\n        label: lesson.title,\n        children: lesson.lessons ? traverse(lesson.lessons) : [],\n      },\n      ...(lesson.topics\n        ? lesson.topics.map((topic) => ({\n            value: `EscolaLms\\\\Courses\\\\Topic:${topic.id}`,\n            title: `Unit: ${topic.title}`,\n            label: topic.title,\n          }))\n        : []),\n    ],\n    [] as TreeData[],\n  );\n};\n\nexport const Related: React.FC<{\n  value?: RelatedValue;\n  onChange?: (value: RelatedValue) => void;\n  state?: {\n    type: number;\n  };\n}> = ({ value, onChange }) => {\n  const [treeData, setTreeData] = useState<TreeData[]>([]);\n\n  useEffect(() => {\n    (async () => {\n      const courses = await course({ page: -1, pageSize: 100 });\n      if (courses.success) {\n        const programs = await Promise.all(\n          courses.data\n            .filter((courseRow) => courseRow.id)\n            .map((courseRow) =>\n              // Listen TS :D there is filter above course is success for sure\n              //@ts-ignore\n              program(courseRow.id),\n            ),\n        );\n\n        const tree = programs\n          .filter((programRow) => programRow.success)\n          .map((programRow) => ({\n            value: `EscolaLms\\\\Courses\\\\Course:${programRow.success && programRow.data.id}`,\n            title: programRow.success ? programRow.data.title : '',\n            label: programRow.success ? programRow.data.title : '',\n            children: programRow.success ? traverse(programRow.data.lessons) : undefined,\n          }));\n\n        setTreeData(tree);\n      }\n    })();\n  }, []);\n\n  return (\n    <TreeSelect\n      loading={treeData.length === 0}\n      treeLine\n      showSearch\n      style={{ width: '100%' }}\n      value={value}\n      dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n      placeholder=\"Please select\"\n      allowClear\n      treeDefaultExpandAll\n      onChange={(val) => onChange && onChange(val)}\n      treeData={treeData}\n    />\n  );\n};\n","import { createTaskNote, updateTaskNote, deleteTaskNote } from '@/services/escola-lms/tasks';\nimport { Fragment, useCallback, useState } from 'react';\nimport { Button, Input, List } from 'antd';\nimport { FormattedMessage } from 'umi';\n\nexport const TaskNoteItemList: React.FC<{\n  taskId: number;\n  note: API.TaskNote;\n  onRemoved: () => void;\n  onEdited: () => void;\n}> = ({ note, onRemoved, onEdited, taskId }) => {\n  const [value, setValue] = useState(note.note);\n  return (\n    <List.Item\n      actions={[\n        <Button\n          key={'update'}\n          size=\"small\"\n          type=\"primary\"\n          onClick={() =>\n            updateTaskNote(note.id, {\n              task_id: taskId,\n              note: value,\n            }).then(() => {\n              if (onEdited) {\n                onEdited();\n              }\n            })\n          }\n        >\n          <FormattedMessage id=\"Notes.edit_note\" defaultMessage=\"Edit Note\" />\n        </Button>,\n        <Button\n          key={'delete'}\n          size=\"small\"\n          danger\n          onClick={() =>\n            deleteTaskNote(note.id).then(() => {\n              if (onRemoved) {\n                onRemoved();\n              }\n            })\n          }\n        >\n          <FormattedMessage id=\"Notes.delete_note\" defaultMessage=\"Delete Note\" />\n        </Button>,\n      ]}\n    >\n      <List.Item.Meta\n        avatar={\n          <Fragment>\n            <FormattedMessage id=\"Notes.created_by\" defaultMessage=\"Created by\" />\n            <br />\n            {note.user?.first_name} {note.user?.last_name}\n          </Fragment>\n        }\n        description={<Input.TextArea value={value} onChange={(e) => setValue(e.target.value)} />}\n      />\n    </List.Item>\n  );\n};\n\nexport const TaskNotes: React.FC<{\n  taskId: number;\n  notes: API.TaskNote[];\n  onAdded?: () => void;\n  onRemoved?: () => void;\n  onEdited?: () => void;\n}> = ({ notes, onAdded, onRemoved, onEdited, taskId }) => {\n  const [newNoteValue, setNewNoteValue] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const onNew = useCallback(() => {\n    setLoading(true);\n    createTaskNote({\n      task_id: taskId,\n      note: newNoteValue,\n    })\n      .catch((err) => console.log('err', err))\n      .then(() => {\n        setNewNoteValue('');\n        if (onAdded) {\n          onAdded();\n        }\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, [newNoteValue, taskId]);\n  return (\n    <div>\n      <List\n        loading={loading}\n        itemLayout=\"horizontal\"\n        dataSource={[...notes, 0]}\n        renderItem={(item) => {\n          if (Number.isInteger(item)) {\n            return (\n              <List.Item\n                actions={[\n                  <Button\n                    key={'new'}\n                    size=\"small\"\n                    type=\"primary\"\n                    onClick={() => {\n                      onNew();\n                    }}\n                  >\n                    <FormattedMessage id=\"Notes.create_note\" defaultMessage=\"Create Note\" />\n                  </Button>,\n                ]}\n              >\n                <List.Item.Meta\n                  avatar={\n                    <Fragment>\n                      <FormattedMessage id=\"Notes.new_note\" defaultMessage=\"New note\" />\n                    </Fragment>\n                  }\n                  description={\n                    <Input.TextArea\n                      value={newNoteValue}\n                      onChange={(e) => setNewNoteValue(e.target.value)}\n                    />\n                  }\n                />\n              </List.Item>\n            );\n          }\n          return (\n            typeof item === 'object' && (\n              <TaskNoteItemList\n                taskId={taskId}\n                note={item}\n                onRemoved={() => onRemoved && onRemoved()}\n                onEdited={() => onEdited && onEdited()}\n              />\n            )\n          );\n        }}\n      />\n    </div>\n  );\n};\n","import { useMemo, useState, useEffect } from 'react';\nimport { message, Spin } from 'antd';\nimport ProForm, { ProFormSwitch, ProFormText, ProFormTextArea } from '@ant-design/pro-form';\nimport ProCard from '@ant-design/pro-card';\n\nimport {\n  getTask as fetchTask,\n  updateTask,\n  createTask,\n  completeTask,\n  incompleteTask,\n} from '@/services/escola-lms/tasks';\nimport UserSelect from '@/components/UserSelect';\n\nimport { PageContainer } from '@ant-design/pro-layout';\n\nimport { useParams, history, useIntl, FormattedMessage } from 'umi';\nimport { useCallback } from 'react';\nimport { Related } from '@/components/RelatedCourseTopicLesson';\nimport { TaskNotes } from '@/components/TaskNotes';\n\nexport default () => {\n  const intl = useIntl();\n  const params = useParams<{ task?: string }>();\n  const { task } = params;\n  const isNew = task === 'new';\n\n  const [data, setData] = useState<Partial<API.Task>>();\n  const [loading, setLoading] = useState(false);\n  const [form] = ProForm.useForm();\n\n  const fetchData = useCallback(async () => {\n    setLoading(true);\n    const response = await fetchTask(Number(task));\n    if (response.success) {\n      setData({\n        ...response.data,\n      });\n    }\n    setLoading(false);\n  }, [task]);\n\n  useEffect(() => {\n    if (task === 'new') {\n      setData({});\n      return;\n    }\n\n    fetchData();\n  }, [task, fetchData]);\n\n  const formProps = useMemo(\n    () => ({\n      // @ts-ignore\n      onFinish: async (values) => {\n        let response: API.DefaultResponse<API.Task>;\n        const postData:\n          | EscolaLms.Tasks.Http.Requests.Admin.AdminCreateTaskRequest\n          | EscolaLms.Tasks.Http.Requests.Admin.AdminUpdateTaskRequest = {\n          ...values,\n          related_id: values.related ? values.related.split(':')[1] : undefined,\n          related_type: values.related ? values.related.split(':')[0] : undefined,\n        };\n\n        if (task === 'new') {\n          response = await createTask(postData);\n          if (response.success) {\n            history.push(`/other/tasks/${response.data.id}`);\n          }\n        } else {\n          response = await updateTask(Number(task), postData);\n        }\n\n        message.success(response.message);\n      },\n      initialValues: {\n        ...data,\n        user_id: data && data.user && data.user.id ? data.user.id : undefined,\n        created_by_id:\n          data && data.created_by && data.created_by.id ? data.created_by.id : undefined,\n        related:\n          data?.related_id && data.related_type\n            ? `${data.related_type}:${data.related_id}`\n            : undefined,\n      },\n    }),\n    [data, task],\n  );\n\n  if (!data) {\n    return <Spin />;\n  }\n\n  return (\n    <PageContainer\n      title={isNew ? <FormattedMessage id=\"new_task\" /> : <FormattedMessage id=\"edit_task\" />}\n    >\n      <ProCard>\n        <ProForm {...formProps} form={form}>\n          <ProForm.Group>\n            <ProFormText\n              width=\"md\"\n              name=\"title\"\n              label={<FormattedMessage id=\"title\" />}\n              tooltip={<FormattedMessage id=\"title\" />}\n              placeholder={intl.formatMessage({\n                id: 'title',\n              })}\n              required\n            />\n            <ProForm.Item\n              name=\"user_id\"\n              label={<FormattedMessage id=\"assignee\" />}\n              tooltip={<FormattedMessage id=\"assignee\" />}\n              valuePropName=\"value\"\n              required\n            >\n              <UserSelect />\n            </ProForm.Item>\n\n            {!isNew && (\n              <ProForm.Item\n                name=\"created_by_id\"\n                label={<FormattedMessage id=\"created_by\" />}\n                tooltip={<FormattedMessage id=\"created_by\" />}\n                valuePropName=\"value\"\n              >\n                <UserSelect disabled />\n              </ProForm.Item>\n            )}\n\n            {!isNew && (\n              <ProFormSwitch\n                name=\"completed_at\"\n                label={<FormattedMessage id=\"completed_at\" defaultMessage=\"Completed\" />}\n                tooltip={<FormattedMessage id=\"completed_at_tooltip\" defaultMessage=\"Completed\" />}\n                fieldProps={{\n                  onChange: (v) => {\n                    (v ? completeTask(Number(task)) : incompleteTask(Number(task))).then(\n                      (response) => {\n                        message.success(response.message);\n                      },\n                    );\n                  },\n                }}\n              />\n            )}\n          </ProForm.Group>\n\n          <ProFormText name={'related'} shouldUpdate hidden />\n\n          <ProForm.Item\n            label={<FormattedMessage id=\"relates_to\" defaultMessage=\"Relates to\" />}\n            tooltip={<FormattedMessage id=\"relates_to_tooltip\" defaultMessage=\"Relates to\" />}\n            shouldUpdate\n          >\n            {(formRef) => {\n              return (\n                <Related\n                  value={formRef.getFieldValue('related')}\n                  onChange={(val) => {\n                    formRef.setFieldValue('related', val);\n                  }}\n                />\n              );\n            }}\n          </ProForm.Item>\n          <ProFormTextArea\n            width=\"md\"\n            name=\"description\"\n            label={<FormattedMessage id=\"description\" />}\n            tooltip={<FormattedMessage id=\"description\" />}\n            placeholder={intl.formatMessage({\n              id: 'description',\n            })}\n          />\n          {!isNew && (\n            <ProCard title=\"notes\" bordered>\n              {data.notes && (\n                <TaskNotes\n                  notes={data.notes}\n                  taskId={Number(task)}\n                  onAdded={() => fetchData()}\n                  onEdited={() => fetchData()}\n                  onRemoved={() => fetchData()}\n                />\n              )}\n            </ProCard>\n          )}\n          {loading && <Spin />}\n        </ProForm>\n      </ProCard>\n    </PageContainer>\n  );\n};\n","import { request } from 'umi';\n\nimport type { RequestOptionsInit } from 'umi-request';\n\n/**  GET /api/admin/tasks */\nexport async function tasks(\n  params: API.TaskListParams & API.PaginationParams,\n  options?: RequestOptionsInit,\n) {\n  return request<API.TaskList>(`/api/admin/tasks`, {\n    method: 'GET',\n    params: {\n      ...params,\n      per_page: params.pageSize,\n      page: params.current,\n    },\n    ...(options || {}),\n  });\n}\n\n/**  DELETE /api/admin/tasks/:id */\nexport async function deleteTask(id: number, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.Task>>(`/api/admin/tasks/${id}`, {\n    method: 'DELETE',\n    ...(options || {}),\n  });\n}\n\n/**  GET /api/admin/tasks/:id */\nexport async function getTask(id: number, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.Task>>(`/api/admin/tasks/${id}`, {\n    method: 'GET',\n    ...(options || {}),\n  });\n}\n\n/** POST /api/admin/task */\nexport async function createTask(body: EscolaLms.Tasks.Http.Requests.Admin.AdminCreateTaskRequest) {\n  return request<API.DefaultResponse<API.Task>>(`/api/admin/tasks`, {\n    method: 'POST',\n    data: body,\n  });\n}\n\n/**  PATCH /api/admin/tasks/:id */\nexport async function updateTask(\n  id: number,\n  body: EscolaLms.Tasks.Http.Requests.Admin.AdminUpdateTaskRequest,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.Task>>(`/api/admin/tasks/${id}`, {\n    method: 'PATCH',\n    data: body,\n    ...(options || {}),\n  });\n}\n\n/**  POST /api/admin/tasks/complete/:id */\nexport async function completeTask(id: number, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.Task>>(`/api/admin/tasks/complete/${id}`, {\n    method: 'POST',\n    ...(options || {}),\n  });\n}\n\n/**  POST /api/admin/tasks/incomplete/:id */\nexport async function incompleteTask(id: number, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.Task>>(`/api/admin/tasks/incomplete/${id}`, {\n    method: 'POST',\n    ...(options || {}),\n  });\n}\n\n/** POST /api/admin/task/notes */\nexport async function createTaskNote(\n  // TODO replace with admin Request\n  body: EscolaLms.Tasks.Http.Requests.CreateTaskNoteRequest,\n) {\n  return request<API.DefaultResponse<API.TaskNote>>(`/api/admin/tasks/notes`, {\n    method: 'POST',\n    data: body,\n  });\n}\n\n/** PATCH /api/admin/task/notes */\nexport async function updateTaskNote(\n  id: number,\n  body: EscolaLms.Tasks.Http.Requests.UpdateTaskNoteRequest,\n) {\n  return request<API.DefaultResponse<API.TaskNote>>(`/api/admin/tasks/notes/${id}`, {\n    method: 'PATCH',\n    data: body,\n  });\n}\n\n/** DELETE /api/admin/task/notes */\nexport async function deleteTaskNote(id: number) {\n  return request<API.DefaultResponse<API.TaskNote>>(`/api/admin/tasks/notes/${id}`, {\n    method: 'DELETE',\n  });\n}\n"],"sourceRoot":""}