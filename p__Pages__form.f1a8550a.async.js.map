{"version":3,"sources":["webpack:///./src/services/escola-lms/pages.ts","webpack:///./src/pages/Pages/form.tsx","webpack:///./src/components/WysiwygMarkdown/index.tsx"],"names":["params","options","request","method","useCache","id","body","headers","data","intl","useIntl","useParams","page","isNew","useState","setData","ProForm","useForm","form","fetchData","useCallback","fetchPage","Number","response","success","content","useEffect","active","formProps","useMemo","onFinish","values","postData","bio","undefined","createPage","history","push","updatePage","message","initialValues","title","setFieldsValue","slug","slugify","formatMessage","EmbedUploaded","attrs","href","filename","split","pop","FormWysiwyg","value","onChange","directory","matcher","component","file","upload","result","type","includes","resizePath","name","resizedImage","url","Error","v"],"mappings":"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","file":"p__Pages__form.f1a8550a.async.js","sourcesContent":["import { request } from 'umi';\nimport type { RequestOptionsInit } from 'umi-request';\n\nexport async function pages(\n  params: API.PageParams &\n    API.PaginationParams & {\n      title?: string;\n      slug?: string;\n    },\n  options?: RequestOptionsInit,\n) {\n  return request<API.PageList>(`/api/admin/pages`, {\n    method: 'GET',\n    /* useCache: true */ useCache: false,\n    params,\n    ...(options || {}),\n  });\n}\n\nexport async function page(id: number, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.Page>>(`/api/admin/pages/${id}`, {\n    method: 'GET',\n    ...(options || {}),\n  });\n}\n\nexport async function createPage(body?: Partial<API.Page>, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.Page>>(`/api/admin/pages`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    data: body,\n    ...(options || {}),\n  });\n}\n\nexport async function updatePage(\n  id: number,\n  body?: Partial<API.Page>,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.Page>>(`/api/admin/pages/${id}`, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    data: body,\n    ...(options || {}),\n  });\n}\n\nexport async function deletePage(id: number, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.Page>>(`/api/admin/pages/${id}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    ...(options || {}),\n  });\n}\n","import { useMemo, useState, useEffect } from 'react';\nimport { message, Spin } from 'antd';\nimport ProForm, { ProFormText, ProFormSwitch } from '@ant-design/pro-form';\nimport ProCard from '@ant-design/pro-card';\nimport { page as fetchPage, updatePage, createPage } from '@/services/escola-lms/pages';\n\nimport WysiwygMarkdown from '@/components/WysiwygMarkdown';\nimport { PageContainer } from '@ant-design/pro-layout';\n\nimport { useParams, history, useIntl, FormattedMessage } from 'umi';\nimport { useCallback } from 'react';\nimport { slugify } from '@/services/escola-lms/slug';\n\nexport default () => {\n  const intl = useIntl();\n  const params = useParams<{ page?: string }>();\n  const { page } = params;\n  const isNew = page === 'new';\n\n  const [data, setData] = useState<Partial<API.Page>>();\n  const [form] = ProForm.useForm();\n\n  const fetchData = useCallback(async () => {\n    const response = await fetchPage(Number(page));\n    if (response.success) {\n      setData({\n        ...response.data,\n        content: response.data.content || '',\n      });\n    }\n  }, [page]);\n\n  useEffect(() => {\n    if (page === 'new') {\n      setData({\n        active: false,\n      });\n      return;\n    }\n\n    fetchData();\n  }, [page, fetchData]);\n\n  const formProps = useMemo(\n    () => ({\n      // @ts-ignore\n      onFinish: async (values) => {\n        let response: API.DefaultResponse<API.Page>;\n        const postData: Partial<API.Page> = {\n          ...values,\n          bio: values.bio ? values.bio : undefined,\n        };\n\n        if (page === 'new') {\n          response = await createPage(postData);\n          if (response.success) {\n            history.push(`/pages/${response.data.id}`);\n          }\n        } else {\n          response = await updatePage(Number(page), postData);\n        }\n\n        message.success(response.message);\n      },\n      initialValues: data,\n    }),\n    [data, page],\n  );\n\n  if (!data) {\n    return <Spin />;\n  }\n\n  return (\n    <PageContainer\n      title={isNew ? <FormattedMessage id=\"new_page\" /> : <FormattedMessage id=\"edit_page\" />}\n    >\n      <ProCard>\n        <ProForm\n          {...formProps}\n          form={form}\n          onValuesChange={(values) => {\n            if (values.title) {\n              form.setFieldsValue({ slug: slugify(values.title) });\n            }\n          }}\n        >\n          <ProForm.Group>\n            <ProFormText\n              width=\"md\"\n              name=\"title\"\n              label={<FormattedMessage id=\"title\" />}\n              tooltip={<FormattedMessage id=\"title\" />}\n              placeholder={intl.formatMessage({\n                id: 'title',\n              })}\n              required\n            />\n            <ProFormText\n              width=\"md\"\n              name=\"slug\"\n              label={<FormattedMessage id=\"slug\" />}\n              tooltip={<FormattedMessage id=\"slug_tooltip\" />}\n              placeholder={intl.formatMessage({\n                id: 'slug',\n              })}\n              disabled\n              required\n            />\n            <ProFormSwitch name=\"active\" label={<FormattedMessage id=\"is_active\" />} />\n          </ProForm.Group>\n\n          <ProForm.Item\n            name=\"content\"\n            label={<FormattedMessage id=\"content\" />}\n            tooltip={<FormattedMessage id=\"content_tooltip\" />}\n            valuePropName=\"value\"\n            required\n          >\n            <WysiwygMarkdown directory={`pages/${page}/wysiwyg`} />\n          </ProForm.Item>\n        </ProForm>\n      </ProCard>\n    </PageContainer>\n  );\n};\n","import React from 'react';\nimport RichMarkdownEditor2 from '@escolalms/markdown-editor';\nimport { upload, resizedImage } from '@/services/escola-lms/files';\nimport './index.css';\nimport { useIntl } from 'umi';\n\ninterface FormWysiwygProps {\n  value?: string;\n  defaultValue?: string;\n  onChange?: (value: string) => void;\n  directory?: string;\n}\n\nexport const EmbedUploaded: React.FC<{ attrs: { href: string } }> = ({ attrs }) => {\n  const href = attrs.href;\n  const filename = href.split('/').pop();\n  return (\n    <p>\n      <a rel=\"noreferrer\" href={href} target=\"_blank\">\n        {filename}\n      </a>\n    </p>\n  );\n};\n\nexport const FormWysiwyg: React.FC<FormWysiwygProps> = ({\n  value,\n  onChange,\n  directory = '/wysiwyg',\n}) => {\n  const intl = useIntl();\n\n  return (\n    <div className=\"form-wysiwyg-markdown\">\n      <RichMarkdownEditor2\n        excludeBlockMenuItems={['Sketch']}\n        embeds={[\n          {\n            matcher: () => {\n              return true;\n            },\n            component: EmbedUploaded,\n          },\n        ]}\n        uploadImage={async (file) => {\n          const result = await upload(file, directory);\n\n          if (result.success) {\n            if (file.type.includes('image/')) {\n              const resizePath = result.data[0].name.includes('/')\n                ? result.data[0].name\n                : `${directory}${result.data[0].name}`;\n              return resizedImage(resizePath, 1000);\n            }\n            return result.data[0].url;\n          }\n          throw new Error('Error while uploading');\n        }}\n        defaultValue={value || ''}\n        onChange={(v) => onChange && onChange(v())}\n        placeholder={intl.formatMessage({\n          id: 'wysiwyg_placeholder',\n        })}\n      />\n    </div>\n  );\n};\n\nexport default FormWysiwyg;\n"],"sourceRoot":""}