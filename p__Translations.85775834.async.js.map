{"version":3,"sources":["webpack:///./src/pages/Translations/components/JsonLangEditor.tsx","webpack:///./src/pages/Translations/components/ModalForm.tsx","webpack:///./src/pages/Translations/index.tsx"],"names":["defaultValue","getAllLocales","reduce","acc","curr","JsonLangEditor","value","onChange","useState","state","setState","useEffect","obj","JSON","parse","Object","assign","stringify","onLangAdd","useCallback","prevState","lang","onRowChange","index","newValue","entries","i","map","entry","includes","e","target","TranslationModalForm","props","intl","useIntl","visible","onVisibleChange","onFinish","id","useForm","form","getTranslation","then","response","success","setFieldsValue","data","resetFields","formatMessage","defaultMessage","values","name","slug","slugify","TableColumns","title","dataIndex","sorter","hideInSearch","width","render","_","record","text","txt","Translations","actionRef","useRef","modalVisible","setModalVisible","loading","setLoading","handleRemove","hide","deleteTranslation","message","current","reload","error","layout","sort","pageSize","group","key","translations","per_page","page","undefined","createTableOrderObject","total","meta","finally","valueType","Number","isInteger","createTranslation","updateTranslation"],"mappings":"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","file":"p__Translations.85775834.async.js","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport { Button, Input, Col, Row } from 'antd';\n\nimport 'jsoneditor-react/es/editor.min.css';\n\nimport { getAllLocales } from 'umi';\nimport { PlusCircleFilled } from '@ant-design/icons';\n\nconst defaultValue = () =>\n  getAllLocales().reduce((acc, curr) => {\n    return { ...acc, [curr]: '' };\n  }, {} as Record<string, string>);\n\nexport const JsonLangEditor: React.FC<{\n  value?: string | object;\n  onChange?: (value: string | object) => void;\n}> = ({ value, onChange }) => {\n  const [state, setState] = useState<Record<string, string>>(defaultValue());\n\n  useEffect(() => {\n    const obj = typeof value === 'object' ? value : JSON.parse(value ?? '{}');\n    setState(Object.assign(defaultValue(), obj));\n  }, [value]);\n\n  useEffect(() => {\n    if (onChange) {\n      if (JSON.stringify(state) !== JSON.stringify(value)) {\n        onChange(state);\n      }\n    }\n  }, [state]);\n\n  const onLangAdd = useCallback(() => {\n    setState((prevState) => ({ ...prevState, lang: '' }));\n  }, []);\n\n  const onRowChange = useCallback((index: number, lang: string, newValue: string) => {\n    setState((prevState) =>\n      Object.entries(prevState).reduce((acc, curr, i) => {\n        if (i === index) {\n          return {\n            ...acc,\n            [lang]: newValue,\n          };\n        }\n        return { ...acc, [curr[0]]: curr[1] };\n      }, {}),\n    );\n  }, []);\n\n  return (\n    <div>\n      {Object.entries(state).map((entry, i) => (\n        <Row key={i}>\n          <Col span={6}>\n            <Input\n              disabled={getAllLocales().includes(entry[0])}\n              value={entry[0]}\n              maxLength={5}\n              onChange={(e) => onRowChange(i, e.target.value, entry[1])}\n            />\n          </Col>\n          <Col span={24 - 6}>\n            <Input value={entry[1]} onChange={(e) => onRowChange(i, entry[0], e.target.value)} />\n          </Col>\n        </Row>\n      ))}\n      <Button onClick={() => onLangAdd()} icon={<PlusCircleFilled />}></Button>\n    </div>\n  );\n};\n\nexport default JsonLangEditor;\n","import React, { useEffect } from 'react';\nimport { Form } from 'antd';\nimport ProForm, { ProFormText, ModalForm } from '@ant-design/pro-form';\nimport { slugify } from '@/services/escola-lms/slug';\nimport { useIntl, FormattedMessage } from 'umi';\nimport { JsonLangEditor } from './JsonLangEditor';\nimport { getTranslation } from '@/services/escola-lms/translations';\n\nexport const TranslationModalForm: React.FC<{\n  id?: number | false;\n  visible: boolean;\n  onVisibleChange: (visible: boolean) => void;\n  onFinish: (formData: API.Translation) => Promise<boolean | void>;\n}> = (props) => {\n  const intl = useIntl();\n\n  const { visible, onVisibleChange, onFinish, id } = props;\n\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    if (typeof id === 'number' && id > 0) {\n      getTranslation(id).then((response) => {\n        if (response.success) form.setFieldsValue(response.data);\n      });\n    } else {\n      form.resetFields();\n    }\n  }, [id, form]);\n\n  return (\n    <ModalForm\n      form={form}\n      title={intl.formatMessage({\n        id: typeof id === 'number' && id > 0 ? 'editTranslation' : 'newTranslation',\n        defaultMessage: typeof id === 'number' && id > 0 ? 'editTranslation' : 'newTranslation',\n      })}\n      width=\"700px\"\n      visible={visible}\n      onVisibleChange={onVisibleChange}\n      onFinish={(values) => onFinish({ ...values })}\n      onValuesChange={(values) => {\n        if (values.name) {\n          form.setFieldsValue({ slug: slugify(values.name) });\n        }\n      }}\n    >\n      <ProFormText\n        label={<FormattedMessage id=\"group\" defaultMessage=\"group\" />}\n        width=\"md\"\n        name=\"group\"\n        initialValue={'*'}\n      />\n      <ProFormText\n        width=\"md\"\n        name=\"key\"\n        label={<FormattedMessage id=\"key\" />}\n        placeholder={intl.formatMessage({\n          id: 'key',\n        })}\n        required\n      />\n      <ProForm.Item\n        name={'text'}\n        label={<FormattedMessage id={'translationJsonText'} />}\n        tooltip={<FormattedMessage id={'translationJsonText_tooltip'} />}\n        valuePropName=\"value\"\n      >\n        <JsonLangEditor />\n      </ProForm.Item>\n    </ModalForm>\n  );\n};\n\nexport default TranslationModalForm;\n","import React, { Fragment, useCallback, useRef, useState } from 'react';\nimport { useIntl, FormattedMessage } from 'umi';\nimport type { ProColumns, ActionType } from '@ant-design/pro-table';\nimport ProTable from '@ant-design/pro-table';\nimport { PageContainer } from '@ant-design/pro-layout';\nimport { Tag, Typography } from 'antd';\n\nimport { PlusOutlined, DeleteOutlined, EditOutlined } from '@ant-design/icons';\nimport { Button, Tooltip, Popconfirm, message } from 'antd';\nimport {\n  createTranslation,\n  deleteTranslation,\n  translations,\n  updateTranslation,\n} from '@/services/escola-lms/translations';\nimport TranslationModalForm from './components/ModalForm';\nimport { createTableOrderObject } from '@/utils/utils';\n\nexport const TableColumns: ProColumns<API.Translation>[] = [\n  {\n    title: <FormattedMessage id=\"ID\" defaultMessage=\"ID\" />,\n    dataIndex: 'id',\n    sorter: true,\n    hideInSearch: true,\n    width: '80px',\n  },\n  {\n    title: <FormattedMessage id=\"group\" defaultMessage=\"group\" />,\n    dataIndex: 'group',\n    sorter: true,\n  },\n  {\n    title: <FormattedMessage id=\"key\" defaultMessage=\"key\" />,\n    dataIndex: 'key',\n    sorter: true,\n  },\n  {\n    title: <FormattedMessage id=\"text\" defaultMessage=\"text\" />,\n    dataIndex: 'text',\n    sorter: true,\n    hideInSearch: true,\n    render: (_, record) => (\n      <Fragment>\n        {Object.entries(record.text).map((txt) => (\n          <Typography.Paragraph key={txt[0]}>\n            <Tag>{txt[0]}</Tag>\n            {txt[1]}\n          </Typography.Paragraph>\n        ))}\n      </Fragment>\n    ),\n  },\n];\n\nconst Translations: React.FC = () => {\n  const actionRef = useRef<ActionType>();\n  const [modalVisible, setModalVisible] = useState<number | false>(false);\n  const [loading, setLoading] = useState(false);\n  const intl = useIntl();\n\n  const handleRemove = useCallback(\n    async (id: number) => {\n      setLoading(true);\n      const hide = message.loading(<FormattedMessage id=\"loading\" defaultMessage=\"loading\" />);\n      try {\n        await deleteTranslation(id).then((response) => {\n          setLoading(false);\n          if (response.success) {\n            message.success(response.message);\n          }\n        });\n        hide();\n        setLoading(false);\n        actionRef.current?.reload();\n        return true;\n      } catch (error) {\n        hide();\n        message.error(<FormattedMessage id=\"error\" defaultMessage=\"error\" />);\n        setLoading(false);\n        return false;\n      }\n    },\n    [actionRef],\n  );\n\n  return (\n    <PageContainer>\n      <ProTable<\n        API.Translation,\n        API.PageParams &\n          API.PaginationParams & {\n            group: string;\n            key: string;\n          }\n      >\n        headerTitle={intl.formatMessage({\n          id: 'menu.Configuration.Translations',\n          defaultMessage: 'Translations',\n        })}\n        search={{\n          layout: 'vertical',\n        }}\n        loading={loading}\n        actionRef={actionRef}\n        rowKey=\"id\"\n        toolBarRender={() => [\n          <Button\n            type=\"primary\"\n            key=\"primary\"\n            onClick={() => {\n              setModalVisible(-1);\n            }}\n          >\n            <PlusOutlined /> <FormattedMessage id=\"pages.searchTable.new\" defaultMessage=\"新建\" />\n          </Button>,\n        ]}\n        request={({ pageSize, current, group, key }, sort) => {\n          setLoading(true);\n          return translations({\n            per_page: pageSize,\n            page: current,\n            group: group || undefined,\n            key: key || undefined,\n            ...createTableOrderObject(sort, 'created_at'),\n          })\n            .then((response) => {\n              setLoading(false);\n              if (response.success) {\n                return {\n                  data: response.data,\n                  total: response.meta.total,\n                  success: true,\n                };\n              }\n              return [];\n            })\n            .finally(() => {\n              setLoading(false);\n            });\n        }}\n        columns={[\n          ...TableColumns,\n          {\n            title: <FormattedMessage id=\"options\" defaultMessage=\"options\" />,\n            dataIndex: 'option',\n            valueType: 'option',\n            width: '10%',\n            render: (_, record) => [\n              <Tooltip key=\"edit\" title={<FormattedMessage id=\"edit\" defaultMessage=\"edit\" />}>\n                <Button\n                  type=\"primary\"\n                  icon={<EditOutlined />}\n                  onClick={() => record.id && setModalVisible(record.id)}\n                />\n              </Tooltip>,\n              <Popconfirm\n                key=\"delete\"\n                title={\n                  <FormattedMessage\n                    id=\"deleteQuestion\"\n                    defaultMessage=\"Are you sure to delete this record?\"\n                  />\n                }\n                onConfirm={() => record.id && handleRemove(record.id)}\n                okText={<FormattedMessage id=\"yes\" defaultMessage=\"Yes\" />}\n                cancelText={<FormattedMessage id=\"no\" defaultMessage=\"No\" />}\n              >\n                <Tooltip title={<FormattedMessage id=\"delete\" defaultMessage=\"delete\" />}>\n                  <Button type=\"primary\" icon={<DeleteOutlined />} danger />\n                </Tooltip>\n              </Popconfirm>,\n            ],\n          },\n        ]}\n      />{' '}\n      <TranslationModalForm\n        id={modalVisible}\n        visible={Number.isInteger(modalVisible)}\n        onVisibleChange={(value) => {\n          return value === false && setModalVisible(false);\n        }}\n        onFinish={async (value) => {\n          if (modalVisible === -1) {\n            const success = await createTranslation(value);\n            if (success) {\n              setModalVisible(false);\n              if (actionRef.current) {\n                actionRef.current.reload();\n              }\n            }\n            return;\n          }\n          const success = await updateTranslation(Number(modalVisible), value);\n          if (success) {\n            setModalVisible(false);\n            if (actionRef.current) {\n              actionRef.current.reload();\n            }\n          }\n        }}\n      />\n    </PageContainer>\n  );\n};\n\nexport default Translations;\n"],"sourceRoot":""}