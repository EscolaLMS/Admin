{"version":3,"sources":["webpack:///./src/services/escola-lms/pdfs.ts","webpack:///./src/components/Pdf/ziplist.tsx","webpack:///./src/components/Pdf/list.tsx","webpack:///./src/pages/Templates/components/PreviewButton.tsx","webpack:///./src/components/AutoCompleteArea/index.tsx","webpack:///./src/components/PdfEditor/index.tsx","webpack:///./src/components/TemplateFields/index.tsx","webpack:///./src/components/TemplateManuallyTrigger/index.tsx","webpack:///./src/components/TemplateManuallyTrigger/product.tsx","webpack:///./src/pages/Templates/form.tsx","webpack:///./src/services/escola-lms/templates.ts"],"names":["params","options","request","method","id","PdfZipList","pdfIds","onProgress","onFinished","filename","useState","blobs","setBlobs","onFinishedLocal","useCallback","allBlobs","zip","JSZip","forEach","blob","i","file","generateAsync","type","then","content","saveAs","useEffect","pdfId","result","fetch","window","REACT_APP_API_URL","headers","Authorization","localStorage","getItem","response","pdfBlob","Blob","prevBlobs","progress","length","PdfList","user_id","template_id","title","state","setState","previewState","setPreviewState","generateAll","setGenerateAll","abortController","AbortController","pdfs","signal","success","list","data","error","message","catch","err","toString","abort","getPdf","pdf","map","item","PreviewButton","disabled","onPreviewData","onClick","previewTemplate","sent","to","url","Item","props","entity","required","name","AutoCompleteArea","requiredVariables","variables","onChange","value","styles","varsObject","v","substring","includes","e","target","fontSize","dataProvider","token","filter","startsWith","component","output","trigger","getMockedValueForVariable","varname","toLocaleLowerCase","obj","Array","isArray","isObject","version","documentProperties","parameters","docElements","addVariablesToTemplate","template","required_variables","maxId","Math","max","apply","p","flat","dict","reduce","acc","curr","tpl","replace","index","arrayItemType","eval","nullable","pattern","expression","showOnlyNameType","testData","Object","assign","values","PdfEditor","onTemplateSaved","reportBroTemplate","field","onTemplateUpdated","ref","useRef","stopPropagation","tagName","nativeEvent","toLowerCase","preventDefault","current","rb","ReportBro","enableSpreadsheet","fonts","defaultFont","reportServerUrl","saveCallback","getReport","cmdExecutedCallback","isReportBroTemplate","load","TemplateFields","renderRequiredVariables","requiredVars","fieldValidator","every","val","Promise","resolve","reject","Error","renderProperFields","readonly","form","getFieldValue","setFieldsValue","getFieldError","width","height","undefined","validator","_","JSON","parse","stringify","submit","TemplateManuallyTrigger","templateId","loading","setLoading","users","setUsers","intl","useIntl","onTrigger","triggerManualEvent","Number","finally","formatMessage","TemplateManuallyTriggerProduct","product","setProduct","triggerManualEventForProduct","newProduct","Panel","createEntries","entries","entry","key","objectFlatten","filterNotAllowedKeys","notAllowedKeys","keys","channels","TemplateChannelValue","useParams","isNew","saved","setSaved","ProForm","useForm","setVariables","tokens","setTokens","previewData","setPreviewData","isManuallyTriggered","setIsManuallyTriggered","fetchVariables","getFieldsValue","defaultValues","sections","section","default_content","handleSetTokens","event","_tokens","TemplateEvents","ManuallyTriggeredEvent","fetchData","fetchTemplate","String","onFormFinish","postData","channel","createTemplate","history","push","updateTemplate","variablesForChannel","defaultMessage","fieldItem","useCache","body","productId"],"mappings":"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","file":"p__Templates__form.a50309b1.async.js","sourcesContent":["import { request } from 'umi';\nimport type { RequestOptionsInit } from 'umi-request';\n\n/**  GET /api/admin/pdfs */\nexport async function pdfs(\n  params: EscolaLms.TemplatesPdf.Http.Requests.PdfListingAdminRequest,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultMetaResponse<EscolaLms.TemplatesPdf.Models.FabricPDF>>(\n    '/api/admin/pdfs',\n    {\n      params: {\n        ...params,\n      },\n      method: 'GET',\n      ...(options || {}),\n    },\n  );\n}\n\n/**  GET /api/pdf/{id} */\n\nexport async function pdf(id: number, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<any>>(`/api/pdfs/${id}`, {\n    method: 'GET',\n    ...(options || {}),\n  });\n}\n\n/**  GET /api/pdf/generate/{id} */\n\nexport async function generatedPdf(id: number, options?: RequestOptionsInit) {\n  return request<Response>(`/api/pdfs/generate/${id}`, {\n    method: 'GET',\n    ...(options || {}),\n  });\n}\n","import React, { useState, useEffect } from 'react';\n\nimport { useCallback } from 'react';\nimport { saveAs } from 'file-saver';\n\nimport JSZip from 'jszip';\n\ndeclare const REACT_APP_API_URL: string;\n\nexport const PdfZipList: React.FC<{\n  pdfIds: number[];\n  onProgress?: (proc: number) => void;\n  onFinished?: () => void;\n  filename?: string;\n}> = ({ pdfIds, onProgress, onFinished, filename = 'package.zip' }) => {\n  const [blobs, setBlobs] = useState<Blob[]>([]);\n\n  const onFinishedLocal = useCallback(\n    (allBlobs: Blob[]) => {\n      const zip = new JSZip();\n\n      allBlobs.forEach((blob, i) => zip.file(`${pdfIds[i]}.pdf`, blob));\n\n      zip.generateAsync({ type: 'blob' }).then(function (content) {\n        saveAs(content, filename);\n        if (onFinished) {\n          onFinished();\n        }\n      });\n    },\n    [blobs, filename],\n  );\n\n  useEffect(() => {\n    pdfIds.forEach((pdfId) => {\n      const result = fetch(\n        `${window.REACT_APP_API_URL || REACT_APP_API_URL}/api/pdfs/generate/${pdfId}`,\n        {\n          headers: { Authorization: `Bearer ${localStorage.getItem('TOKEN')}` },\n        },\n      );\n\n      result\n        .then((response) => response.blob())\n        .then((pdfBlob) => {\n          if (pdfBlob && pdfBlob instanceof Blob) {\n            setBlobs((prevBlobs) => {\n              const progress = (prevBlobs.length + 1) / pdfIds.length;\n              if (onProgress) {\n                onProgress(progress);\n              }\n              if (progress >= 1) {\n                onFinishedLocal([...prevBlobs, pdfBlob]);\n              }\n              return [...prevBlobs, pdfBlob];\n            });\n          }\n        });\n    });\n\n    /*\n\n      const fetch = async () => {\n        const responses = await Promise.all(pdfIds.map((pdfId) => generatedPdf(pdfId)));\n        setState({\n          state: 'start',\n          finishedPdfs: responses\n            .filter((response) => response.success)\n            .map((response) => response.success && response.data),\n        });\n      };\n      fetch();      \n\n      */\n  }, [pdfIds]);\n\n  /*\n\n  useEffect(() => {\n    if (state.state === 'processing') {\n      if (state.finishedPdfs.length === 0) {\n        setState({\n          state: 'finished',\n        });\n      } else {\n        setState({\n          state: 'start',\n          finishedPdfs: state.finishedPdfs,\n        });\n      }\n      if (onProgress) {\n        onProgress(1 - state.finishedPdfs.length / pdfIds.length);\n      }\n    }\n\n    if (state.state === 'finished') {\n      onFinishedLocal();\n    }\n  }, [state, pdfIds]);\n\n  */\n\n  return (\n    <p>\n      Progress {blobs.length} / {pdfIds.length}\n    </p>\n  );\n};\n\nexport default PdfZipList;\n","import React, { useState, useEffect, Fragment } from 'react';\nimport { Spin, List, Alert, Button, Typography, Divider } from 'antd';\n\nimport { FormattedMessage } from 'umi';\nimport { useCallback } from 'react';\n\nimport { pdfs, pdf } from '@/services/escola-lms/pdfs';\nimport PdfZipList from '@/components/Pdf/ziplist';\n\nimport TypeButtonDrawer from '@/components/TypeButtonDrawer';\nimport { DownloadOutlined } from '@ant-design/icons';\nimport AuthenticatedLinkButton from '../AuthenticatedLinkButton';\n\ntype Request = EscolaLms.TemplatesPdf.Http.Requests.PdfListingAdminRequest & {\n  template_id?: number;\n  title?: string;\n};\ntype Model = EscolaLms.TemplatesPdf.Models.FabricPDF;\n\ntype ModelState =\n  | {\n      state: 'initial';\n    }\n  | {\n      state: 'loading';\n    }\n  | {\n      state: 'loaded';\n      list: Model[];\n    }\n  | {\n      state: 'error';\n      error: string;\n    };\n\ntype PreviewState =\n  | {\n      state: 'initial';\n    }\n  | {\n      state: 'loading';\n    }\n  | {\n      state: 'loaded';\n      data: any;\n    };\n\nexport const PdfList: React.FC<Request> = ({ user_id, template_id, title }) => {\n  const [state, setState] = useState<ModelState>({ state: 'initial' });\n\n  const [previewState, setPreviewState] = useState<PreviewState>({ state: 'initial' });\n  const [generateAll, setGenerateAll] = useState<boolean>(false);\n\n  useEffect(() => {\n    setState({ state: 'loading' });\n    const abortController = new AbortController();\n    pdfs({ user_id, template_id }, { signal: abortController.signal })\n      .then((response) => {\n        if (response && response.success) {\n          setState({ state: 'loaded', list: response.data });\n        } else if (response && !response.success) {\n          setState({ state: 'error', error: response.message });\n        }\n      })\n      .catch((err) => setState({ state: 'error', error: err.toString() }));\n\n    return () => {\n      abortController.abort();\n    };\n  }, []);\n\n  const getPdf = useCallback((id: number) => {\n    setPreviewState({ state: 'loading' });\n    pdf(id).then((response) => {\n      if (response.success) {\n        setPreviewState({ state: 'loaded', data: response.data.content });\n      } else {\n        setPreviewState({ state: 'initial' });\n      }\n    });\n  }, []);\n\n  if (state.state === 'error') {\n    return <Alert message=\"Error Text\" type=\"error\" />;\n  }\n\n  if (state.state === 'loading' || state.state === 'initial') {\n    return <Spin />;\n  }\n\n  return (\n    <Fragment>\n      <Divider />\n      {generateAll && (\n        <PdfZipList\n          pdfIds={state.list.map((item) => item.id)}\n          onFinished={() => setGenerateAll(false)}\n        />\n      )}\n      <List\n        size=\"small\"\n        itemLayout=\"horizontal\"\n        dataSource={state.list}\n        header={\n          <div>\n            <FormattedMessage id=\"template\" />{' '}\n            {title && <Typography.Text strong>{title}</Typography.Text>}\n            {'. '}\n            <FormattedMessage id=\"generated_pdfs\" defaultMessage=\"Generated PDFs\" />{' '}\n            <Button\n              loading={generateAll}\n              type=\"primary\"\n              onClick={() => setGenerateAll(true)}\n              icon={<DownloadOutlined />}\n              size=\"small\"\n            >\n              <FormattedMessage id=\"download_all\" defaultMessage=\"Download all PDFs\" />\n            </Button>\n          </div>\n        }\n        renderItem={(item) => (\n          <List.Item\n            actions={[\n              <AuthenticatedLinkButton\n                url={`/api/pdfs/generate/${item.id}`}\n                filename={`generated-${item.id}.pdf`}\n                key=\"download\"\n                size=\"small\"\n                icon={<DownloadOutlined />}\n                type=\"primary\"\n                onClick={() => getPdf(item.id)}\n                loading={previewState.state === 'loading'}\n              >\n                <FormattedMessage id=\"download_pdf\" defaultMessage=\"Download PDFs\" />\n              </AuthenticatedLinkButton>,\n            ]}\n          >\n            {item.title} <TypeButtonDrawer type=\"App\\Models\\User\" type_id={item.user_id} />\n          </List.Item>\n        )}\n      />\n    </Fragment>\n  );\n};\n\nexport default PdfList;\n","import React, { useState } from 'react';\nimport { Alert, Button } from 'antd';\nimport { preview as previewTemplate } from '@/services/escola-lms/templates';\nimport { FormattedMessage } from 'umi';\nimport { useCallback } from 'react';\n\ntype PreviewButtonState =\n  | {\n      state: 'ready';\n    }\n  | {\n      state: 'loading';\n    }\n  | {\n      state: 'loaded';\n      data: Record<string, string>;\n      message: React.ReactNode;\n    }\n  | {\n      state: 'error';\n      error: string;\n    };\n\nconst PreviewButton: React.FC<{\n  type: API.TemplateChannelValue;\n  disabled: boolean;\n  id: number;\n  onPreviewData?: (data: any) => void;\n}> = ({ disabled = false, id, onPreviewData }) => {\n  const [state, setState] = useState<PreviewButtonState>({ state: 'ready' });\n\n  const onClick = useCallback(() => {\n    setState({ state: 'loading' });\n    previewTemplate(id)\n      .then((data) => {\n        if (data.success) {\n          if (onPreviewData) {\n            onPreviewData(data.data);\n          }\n          if (data.data.sent && data.data.to) {\n            setState({\n              state: 'loaded',\n              data: data.data,\n              message: `email sent to ${data.data.to}`,\n            });\n          } else if (data.data.url) {\n            setState({\n              state: 'loaded',\n              data: data.data,\n              message: (\n                <React.Fragment>\n                  <FormattedMessage id=\"download\" />{' '}\n                  <a target=\"_blank\" href={data.data.url} rel=\"noreferrer\">\n                    {data.data.filename}\n                  </a>\n                </React.Fragment>\n              ),\n            });\n          } else {\n            setState({ state: 'loaded', data: data.data, message: data.message });\n          }\n        } else {\n          setState({ state: 'error', error: data.message });\n        }\n      })\n      .catch(() => {\n        setState({ state: 'error', error: 'error' });\n      });\n  }, [id]);\n  return (\n    <React.Fragment>\n      <Button\n        type=\"primary\"\n        loading={state.state === 'loading'}\n        disabled={disabled}\n        onClick={onClick}\n      >\n        <FormattedMessage id=\"preview\" />\n      </Button>\n      {state.state === 'loaded' && (\n        <Alert\n          message={state.message}\n          type=\"success\"\n          closable\n          onClose={() => setState({ state: 'ready' })}\n        />\n      )}\n      {state.state === 'error' && (\n        <Alert\n          message={state.error}\n          type=\"error\"\n          closable\n          onClose={() => setState({ state: 'ready' })}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default PreviewButton;\n","import React from 'react';\nimport ReactTextareaAutocomplete from '@webscopeio/react-textarea-autocomplete';\n// https://github.com/webscopeio/react-textarea-autocomplete\nimport { FormattedMessage } from 'umi';\nimport '@webscopeio/react-textarea-autocomplete/style.css';\nimport './index.css';\n\ntype ItemProps = {\n  selected: boolean;\n  entity: Variable;\n};\n\ntype Variable = {\n  name: string;\n  required: boolean;\n};\n\nconst Item = (props: ItemProps) => {\n  return <div className={`${props.entity.required && 'required'}`}>@{`${props.entity.name}`}</div>;\n};\n\nconst AutoCompleteArea: React.FC<{\n  requiredVariables: string[];\n  variables: string[];\n  onChange: (value: string) => void;\n  value: string;\n  error: string[];\n  styles?: React.CSSProperties;\n}> = ({ requiredVariables, variables, onChange, value, error, styles }) => {\n  const varsObject = variables.map((v: string) => ({\n    name: v.substring(1),\n    required: requiredVariables.includes(v),\n  }));\n\n  return (\n    <React.Fragment>\n      <ReactTextareaAutocomplete\n        style={styles}\n        className={`ant-input pro-field pro-field-lg rta__textarea_wide ${error.length && 'error'}`}\n        onChange={(e) => onChange(e.target.value)}\n        loadingComponent={() => <FormattedMessage id=\"loading\" />}\n        minChar={0}\n        value={value}\n        itemStyle={{ fontSize: '16px' }}\n        trigger={{\n          '@': {\n            dataProvider: (token) => {\n              return varsObject.filter((v) => v.name.startsWith(token));\n            }, // @ts-ignore\n            component: Item,\n            output: (item, trigger) => {\n              // @ts-ignore\n              return `${trigger}${item.name}`;\n            },\n          },\n        }}\n      />\n      <div role=\"alert\" className=\"ant-form-item-explain-error\">\n        {error}\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default AutoCompleteArea;\n","import React, { useEffect, useRef } from 'react';\nimport type { SyntheticEvent } from 'react';\ndeclare const REACT_APP_API_URL: string;\n\n// @ts-ignore\nimport { ReportBro } from 'reportbro-designer';\nimport '../../../node_modules/reportbro-designer/dist/reportbro.css';\nimport './index.css';\n\nimport type { ReportBroTemplate } from './types';\n\nconst getMockedValueForVariable = (varname: string) => {\n  switch (varname.toLocaleLowerCase()) {\n    case 'varusername':\n      return 'John Doe';\n    case 'varcoursetitle':\n      return 'How to be an LMS Expert';\n    case 'varappname':\n      return 'Wellms Headless LMS';\n    default:\n      return 'Lorem Ipsum';\n  }\n};\n\nfunction isObject(obj: unknown): obj is Record<string, unknown> {\n  return typeof obj === 'object' && obj !== null && !Array.isArray(obj);\n}\n\nfunction isReportBroTemplate(obj: unknown | ReportBroTemplate): obj is ReportBroTemplate {\n  return (\n    isObject(obj) &&\n    typeof obj?.version === 'number' &&\n    isObject(obj?.documentProperties) &&\n    Array.isArray(obj?.styles) &&\n    Array.isArray(obj?.parameters) &&\n    Array.isArray(obj?.docElements)\n  );\n}\n\nconst addVariablesToTemplate = (\n  template: ReportBroTemplate,\n  variables: string[],\n  required_variables: string[],\n): ReportBroTemplate => {\n  const maxId =\n    Math.max.apply(\n      null,\n      template.parameters\n        ? [template.parameters.map((p) => p.id), template.docElements.map((p) => p.id)].flat()\n        : [1],\n    ) + 1;\n\n  const dict: Record<string, ReportBroTemplate['parameters'][number]> = template.parameters\n    ? template.parameters.reduce((acc, curr) => {\n        return { ...acc, [curr.name]: curr };\n      }, {})\n    : {};\n\n  const tpl: Record<string, ReportBroTemplate['parameters'][number]> = variables\n    .map((varname) => varname.replace('@', ''))\n\n    .reduce((acc, curr, index) => {\n      if (acc[curr]) {\n        return {\n          ...acc,\n          [curr]: {\n            ...acc[curr],\n            id: maxId + index,\n          },\n        };\n      }\n      return {\n        ...acc,\n        [curr]: {\n          id: maxId + index,\n          name: curr,\n          type: 'string',\n          arrayItemType: 'string',\n          eval: false,\n          nullable: !required_variables.includes(curr),\n          pattern: '',\n          expression: '',\n          showOnlyNameType: false,\n          testData: getMockedValueForVariable(curr),\n        },\n      };\n    }, dict);\n\n  return Object.assign({}, template, { parameters: Object.values(tpl) });\n};\n\nexport const PdfEditor: React.FC<{\n  field: API.TemplateField;\n  variables: string[];\n  onTemplateSaved: (tpl: object) => void;\n  reportBroTemplate?: ReportBroTemplate;\n  onTemplateUpdated?: (tpl: object) => void;\n}> = ({ onTemplateSaved, reportBroTemplate = null, field, variables, onTemplateUpdated }) => {\n  const ref = useRef<HTMLDivElement>(null);\n\n  const stopPropagation = (e: SyntheticEvent) => {\n    const tagName = (e.nativeEvent.target as HTMLElement).tagName.toLowerCase();\n    switch (tagName) {\n      case 'span':\n      case 'button':\n        e.nativeEvent.stopPropagation();\n        e.nativeEvent.preventDefault();\n      default:\n        return;\n    }\n  };\n\n  useEffect(() => {\n    if (ref.current) {\n      const rb = new ReportBro(ref.current, {\n        enableSpreadsheet: false,\n        fonts: [{ name: 'Open Sans', value: 'Open Sans' }],\n        defaultFont: 'Open Sans',\n        // src={`${window.REACT_APP_API_URL || REACT_APP_API_URL}/api/scorm/play/${uuid}`}\n        //reportServerUrl: 'https://reportbro.stage.etd24.pl/reportbro/report/run', // TODO use env vars\n        reportServerUrl: `${\n          window.REACT_APP_API_URL || REACT_APP_API_URL\n        }/api/pdfs/reportbro/report/run`, // TODO use env vars\n        saveCallback: () => {\n          onTemplateSaved(rb.getReport());\n        },\n        cmdExecutedCallback: () => {\n          if (onTemplateUpdated) {\n            onTemplateUpdated(rb.getReport());\n          }\n        },\n      });\n\n      if (reportBroTemplate && isReportBroTemplate(reportBroTemplate)) {\n        rb.load(addVariablesToTemplate(reportBroTemplate, variables, field.required_variables));\n      }\n    }\n  }, [ref]);\n\n  return (\n    <div ref={ref} className=\"pdf-editor\" onClick={stopPropagation}>\n      pdf editor\n    </div>\n  );\n};\n\nexport default PdfEditor;\n","import React, { useCallback } from 'react';\nimport { Space, Typography, Tag } from 'antd';\nimport ProForm, { ProFormText, ProFormTextArea } from '@ant-design/pro-form';\nimport { FormattedMessage } from 'umi';\nimport AutoCompleteArea from '../AutoCompleteArea';\nimport PdfEditor from '../PdfEditor';\nimport './index.css';\n\ninterface FormWysiwygProps {\n  value?: string;\n  onChange?: (value: string) => void;\n  name: string;\n  field: API.TemplateField;\n  variables?: string[];\n}\n\nexport const TemplateFields: React.FC<FormWysiwygProps> = ({ name, field, variables = [] }) => {\n  const renderRequiredVariables = useCallback(\n    (requiredVars: string[]) => {\n      if (!!requiredVars.length) {\n        return (\n          <Space>\n            <Typography>\n              <FormattedMessage id=\"templates.required_variables\" />:{' '}\n              {requiredVars.map((token) => (\n                <Tag color={'red'} key={token}>\n                  {token}\n                </Tag>\n              ))}\n            </Typography>\n          </Space>\n        );\n      } else return;\n    },\n    [field, name],\n  );\n\n  const fieldValidator = useCallback(\n    (value: string, requiredVars: string[]) => {\n      if (value && requiredVars.every((val) => value.includes(val))) {\n        return Promise.resolve();\n      }\n      return Promise.reject(new Error('No required variable used'));\n    },\n    [field, name],\n  );\n\n  const renderProperFields = useCallback(() => {\n    if (field.readonly) {\n      return;\n    }\n    switch (field.type) {\n      case 'text':\n      case 'url':\n        return (\n          <React.Fragment>\n            <label>\n              <FormattedMessage id={name} />\n            </label>\n\n            <ProForm.Item shouldUpdate>\n              {(form) => {\n                return (\n                  <AutoCompleteArea\n                    requiredVariables={field.required_variables}\n                    variables={variables}\n                    value={form.getFieldValue(name)}\n                    onChange={(value: string) => form.setFieldsValue({ [name]: value })}\n                    error={form.getFieldError(name)}\n                    styles={{\n                      width: '100%',\n                      height: '100px',\n                    }}\n                  />\n                );\n              }}\n            </ProForm.Item>\n            <ProFormText\n              name={name}\n              shouldUpdate\n              hidden\n              rules={\n                field.readonly\n                  ? undefined\n                  : [\n                      {\n                        required: field.required,\n                        message: <FormattedMessage id=\"templates.this_required\" />,\n                      },\n                      {\n                        validator: async (_, value) => {\n                          return fieldValidator(value, field.required_variables);\n                        },\n                      },\n                    ]\n              }\n            />\n            {renderRequiredVariables(field.required_variables)}\n          </React.Fragment>\n        );\n      case 'fabric.js':\n        return (\n          <React.Fragment>\n            <ProForm.Item shouldUpdate>\n              {(form) => {\n                return (\n                  <PdfEditor\n                    reportBroTemplate={\n                      form.getFieldValue(name) && JSON.parse(form.getFieldValue(name))\n                    }\n                    variables={variables}\n                    field={field}\n                    onTemplateSaved={(tpl) => {\n                      form.setFieldsValue({ [name]: JSON.stringify(tpl) });\n                      form.submit();\n                    }}\n                    onTemplateUpdated={(tpl) => {\n                      form.setFieldsValue({ [name]: JSON.stringify(tpl) });\n                    }}\n                  />\n                );\n              }}\n            </ProForm.Item>\n            <ProFormTextArea name={name} shouldUpdate width=\"lg\" hidden />\n          </React.Fragment>\n        );\n      case 'html':\n        return (\n          <React.Fragment>\n            <ProFormTextArea\n              readonly={field.readonly}\n              shouldUpdate\n              width=\"lg\"\n              label={<FormattedMessage id={name} />}\n              name={name}\n              tooltip={<FormattedMessage id={'templates.html_tooltip'} />}\n              rules={\n                field.readonly\n                  ? undefined\n                  : [\n                      {\n                        required: field.required,\n                        message: <FormattedMessage id=\"templates.this_required\" />,\n                      },\n                      {\n                        validator: async (_, value) => {\n                          return fieldValidator(value, field.required_variables);\n                        },\n                      },\n                    ]\n              }\n            />\n\n            {renderRequiredVariables(field.required_variables)}\n          </React.Fragment>\n        );\n\n      case 'mjml':\n        return (\n          <React.Fragment>\n            <p>\n              <FormattedMessage id={'templates.to_create_template'} />{' '}\n              <a target=\"_blank\" rel=\"noreferrer\" href=\"https://mjml.io/try-it-live\">\n                https://mjml.io/try-it-live\n              </a>\n            </p>\n            <code>\n              <FormattedMessage id={'code.snippet'} />\n            </code>\n            <ProForm.Item shouldUpdate>\n              {(form) => {\n                return (\n                  <AutoCompleteArea\n                    requiredVariables={field.required_variables}\n                    variables={variables}\n                    value={form.getFieldValue(name)}\n                    onChange={(value: string) => form.setFieldsValue({ [name]: value })}\n                    error={form.getFieldError(name)}\n                    styles={{\n                      width: '100%',\n                      height: '40vh',\n                    }}\n                  />\n                );\n              }}\n            </ProForm.Item>\n            <ProFormTextArea\n              name={name}\n              shouldUpdate\n              hidden\n              rules={\n                field.readonly\n                  ? undefined\n                  : [\n                      {\n                        required: field.required,\n                        message: <FormattedMessage id=\"templates.this_required\" />,\n                      },\n                      {\n                        validator: async (_, value) => {\n                          return fieldValidator(value, field.required_variables);\n                        },\n                      },\n                    ]\n              }\n            />\n\n            {renderRequiredVariables(field.required_variables)}\n          </React.Fragment>\n        );\n      default:\n        return;\n    }\n  }, [field, name, variables]);\n\n  return <React.Fragment>{renderProperFields()}</React.Fragment>;\n};\n\nexport default TemplateFields;\n","import React, { useState, useCallback } from 'react';\nimport { Space, Button, message, Tooltip } from 'antd';\nimport { FormattedMessage } from 'umi';\nimport UserSelect from '../UserSelect';\nimport { triggerManualEvent } from '@/services/escola-lms/templates';\n\nimport { useIntl } from 'umi';\n\nexport const TemplateManuallyTrigger: React.FC<{\n  templateId: number;\n}> = ({ templateId }) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [users, setUsers] = useState<string | number | number[] | string[]>([]);\n  const intl = useIntl();\n\n  const onTrigger = useCallback(() => {\n    setLoading(true);\n    triggerManualEvent(Number(templateId), users as number[])\n      .then((response) => {\n        if (response.success) {\n          message.success(response.message);\n        } else {\n          message.error(response.message);\n        }\n      })\n      .catch((err: any) => message.error(err.toString()))\n      .finally(() => setLoading(false));\n  }, [users, templateId]);\n\n  return (\n    <Space>\n      <UserSelect multiple value={users} onChange={(values) => setUsers(values)} />\n      <Tooltip title={intl.formatMessage({ id: 'generate_pdf_users_tooltip' })}>\n        <Button\n          loading={loading}\n          onClick={() => onTrigger()}\n          disabled={!(users as number[]).length}\n        >\n          <FormattedMessage id=\"generate\" />\n        </Button>\n      </Tooltip>\n    </Space>\n  );\n};\n\nexport default TemplateManuallyTrigger;\n","import React, { useState, useCallback } from 'react';\nimport { Space, Button, message, Tooltip } from 'antd';\nimport { FormattedMessage } from 'umi';\nimport { triggerManualEventForProduct } from '@/services/escola-lms/templates';\nimport ProductsSelect from '../ProductsSelect';\nimport { useIntl } from 'umi';\n\nexport const TemplateManuallyTriggerProduct: React.FC<{\n  templateId: number;\n}> = ({ templateId }) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [product, setProduct] = useState<string | number | string[] | number[]>();\n  const intl = useIntl();\n\n  const onTrigger = useCallback(() => {\n    setLoading(true);\n    if (typeof product === 'number') {\n      triggerManualEventForProduct(Number(templateId), Number(product))\n        .then((response) => {\n          if (response.success) {\n            message.success(response.message);\n          } else {\n            message.error(response.message);\n          }\n        })\n        .catch((err: any) => message.error(err.toString()))\n        .finally(() => setLoading(false));\n    }\n  }, [product, templateId]);\n\n  return (\n    <Space>\n      <ProductsSelect\n        multiple={false}\n        value={product}\n        onChange={(newProduct) => setProduct(newProduct)}\n      />\n      <Tooltip title={intl.formatMessage({ id: 'generate_pdf_products_tooltip' })}>\n        <Button loading={loading} onClick={() => onTrigger()} disabled={!product}>\n          <FormattedMessage id=\"generate\" />\n        </Button>\n      </Tooltip>\n    </Space>\n  );\n};\n\nexport default TemplateManuallyTriggerProduct;\n","import React, { useState, useEffect } from 'react';\nimport { Divider, message, Space, Spin, Tag, Typography } from 'antd';\nimport ProForm, { ProFormText, ProFormSelect, ProFormCheckbox } from '@ant-design/pro-form';\nimport ProCard from '@ant-design/pro-card';\nimport {\n  template as fetchTemplate,\n  updateTemplate,\n  createTemplate,\n} from '@/services/escola-lms/templates';\nimport { PageContainer } from '@ant-design/pro-layout';\nimport PreviewButton from './components/PreviewButton';\nimport { useParams, history, useIntl, FormattedMessage } from 'umi';\nimport { useCallback } from 'react';\nimport TemplateFields from '@/components/TemplateFields';\nimport { variables as fetchVariables } from '@/services/escola-lms/templates';\nimport PdfList from '@/components/Pdf/list';\nimport { TemplateChannelValue, TemplateEvents } from '@/services/escola-lms/enums';\nimport { Collapse } from 'antd';\nimport TemplateManuallyTrigger from '@/components/TemplateManuallyTrigger';\nimport TemplateManuallyTriggerProduct from '@/components/TemplateManuallyTrigger/product';\n\nconst { Panel } = Collapse;\n\n// creates sections collections for post template\nconst createEntries = (data: Record<string, string>): API.TemplateSections[] => {\n  return Object.entries(data).map((entry) => {\n    return {\n      key: entry[0],\n      content: entry[1],\n    };\n  });\n};\n\nconst objectFlatten = (data: Record<string, string>[]): Record<string, string> =>\n  Object.assign({}, ...data);\n\n// helper function that throws away unnecessary keys to create a sections collection\n\nconst filterNotAllowedKeys = (values: Partial<API.Template>) => {\n  const notAllowedKeys = ['name', 'event', 'default'];\n  return Object.keys(values)\n    .filter((key) => !notAllowedKeys.includes(key))\n    .reduce((obj, key) => {\n      obj[key] = values[key];\n      return obj;\n    }, {});\n};\n\ntype Tokens = {\n  assignableClass: string | null;\n  class: string;\n  required_variables: string[];\n  variables: string[];\n  sections: Record<string, API.TemplateField>;\n};\n\nconst channels = TemplateChannelValue;\n\nexport default () => {\n  const intl = useIntl();\n  const params = useParams<{ template: 'email' | 'pdf' | 'sms'; id: string }>();\n\n  const { template, id } = params;\n\n  const isNew = id === 'new';\n\n  const [saved, setSaved] = useState<boolean>(false);\n  const [form] = ProForm.useForm();\n  const [variables, setVariables] = useState<API.TemplateVariables>();\n  const [tokens, setTokens] = useState<Tokens | undefined>(undefined);\n  const [previewData, setPreviewData] = useState<any>();\n  const [isManuallyTriggered, setIsManuallyTriggered] = useState<boolean>(false);\n\n  useEffect(() => {\n    fetchVariables().then((response) => {\n      setVariables(response.success ? response.data : {});\n    });\n  }, []);\n\n  useEffect(() => {\n    const values = form.getFieldsValue();\n\n    const defaultValues =\n      tokens &&\n      Object.keys(tokens.sections).map((section) => {\n        return {\n          [section]: tokens.sections[section].default_content,\n        };\n      });\n\n    if (defaultValues && isNew) {\n      form.setFieldsValue({\n        ...values,\n        ...objectFlatten(defaultValues),\n      });\n    }\n  }, [tokens]);\n\n  const handleSetTokens = useCallback(\n    (event: string) => {\n      if (event && template) {\n        const _tokens = variables && (variables[event][channels[template]] as unknown);\n\n        setTokens(_tokens as Tokens);\n      }\n      setIsManuallyTriggered(event === TemplateEvents.ManuallyTriggeredEvent);\n    },\n    [variables, id],\n  );\n\n  const fetchData = useCallback(async () => {\n    const response = await fetchTemplate(Number(id));\n    if (response.success) {\n      const map =\n        response.data.sections &&\n        response.data.sections.map((item) => {\n          return {\n            [item.key]: item.content,\n          };\n        });\n\n      const obj = map && objectFlatten(map);\n\n      form.setFieldsValue({\n        ...response.data,\n        ...obj,\n      });\n      handleSetTokens(String(response.data.event));\n      setSaved(true);\n    }\n  }, [id, variables]);\n\n  const onFormFinish = useCallback(\n    async (values: Partial<API.Template>) => {\n      let response: API.DefaultResponse<API.Template>;\n\n      const postData: Partial<API.Template> = {\n        ...values,\n        channel: channels[template] as API.Template['channel'],\n        sections: createEntries(filterNotAllowedKeys(values)),\n      };\n\n      if (isNew) {\n        response = await createTemplate(postData);\n        if (response.success) {\n          history.push(`/configuration/templates/${template}/${response.data.id}`);\n        }\n      } else {\n        response = await updateTemplate(Number(id), postData);\n      }\n      setSaved(true);\n      message.success(response.message);\n    },\n    [variables, id],\n  );\n\n  useEffect(() => {\n    if (isNew) {\n      return;\n    }\n\n    fetchData();\n  }, [id, variables]);\n\n  const variablesForChannel = useCallback(\n    (channel: string): Record<string, string> => {\n      return variables\n        ? Object.keys(variables).reduce((acc, curr) => {\n            if (variables[curr][channel]) {\n              return { ...acc, [curr]: intl.formatMessage({ id: curr, defaultMessage: curr }) };\n            }\n            return acc;\n          }, {})\n        : {};\n    },\n    [variables],\n  );\n\n  return (\n    <PageContainer\n      title={\n        isNew ? (\n          <span>\n            <FormattedMessage id=\"new\" /> {template} <FormattedMessage id=\"template\" />\n          </span>\n        ) : (\n          <span>\n            <FormattedMessage id=\"edit\" /> {template} <FormattedMessage id=\"template\" />\n          </span>\n        )\n      }\n    >\n      <ProCard size=\"small\">\n        <ProForm\n          initialValues={{}}\n          onFinish={onFormFinish}\n          form={form}\n          onValuesChange={() => {\n            const values = form.getFieldsValue();\n            handleSetTokens(values.event);\n            setSaved(false);\n          }}\n        >\n          <ProForm.Group>\n            <ProFormText\n              width=\"sm\"\n              name=\"name\"\n              label={<FormattedMessage id=\"name\" />}\n              placeholder={intl.formatMessage({\n                id: 'name',\n              })}\n              rules={[{ required: true, message: <FormattedMessage id=\"select\" /> }]}\n            />\n            <ProFormSelect\n              name=\"event\"\n              width=\"lg\"\n              label={<FormattedMessage id=\"event\" />}\n              valueEnum={variables ? variablesForChannel(channels[template]) : {}}\n              placeholder={intl.formatMessage({\n                id: 'event',\n              })}\n              rules={[{ required: true, message: <FormattedMessage id=\"select\" /> }]}\n            />\n\n            <ProForm.Item label={<FormattedMessage id=\"templates.set_as_default_template\" />}>\n              <ProFormCheckbox name=\"default\" />\n            </ProForm.Item>\n          </ProForm.Group>\n\n          {!isNew && template !== 'pdf' && (\n            <ProForm.Group>\n              <ProForm.Item label={<FormattedMessage id=\"preview\" />}>\n                <PreviewButton\n                  disabled={!saved}\n                  id={Number(id)}\n                  type={template}\n                  onPreviewData={(data) => {\n                    if (data && data.data && data.data.content) {\n                      setPreviewData(data.data.content);\n                    }\n                  }}\n                />\n              </ProForm.Item>\n\n              {isManuallyTriggered && (\n                <ProForm.Item\n                  label={<FormattedMessage id=\"generate_pdf\" />}\n                  tooltip={<FormattedMessage id=\"generate_pdf_tooltip\" />}\n                >\n                  <TemplateManuallyTrigger templateId={Number(id)} />\n                </ProForm.Item>\n              )}\n\n              {isManuallyTriggered && (\n                <ProForm.Item\n                  label={<FormattedMessage id=\"generate_pdf\" />}\n                  tooltip={<FormattedMessage id=\"generate_pdf_tooltip\" />}\n                >\n                  <TemplateManuallyTriggerProduct templateId={Number(id)} />\n                </ProForm.Item>\n              )}\n            </ProForm.Group>\n          )}\n\n          {channels[template] === TemplateChannelValue.pdf && !isNew && (\n            <Collapse ghost destroyInactivePanel defaultActiveKey={[-1]}>\n              <Panel header={<FormattedMessage id=\"generated_pdfs\" />} key={0}>\n                <PdfList template_id={Number(id)} />\n              </Panel>\n            </Collapse>\n          )}\n\n          {!tokens && !isNew ? (\n            <Spin />\n          ) : (\n            tokens &&\n            tokens.sections &&\n            Object.keys(tokens.sections).map((section, index) => {\n              const fieldItem = tokens.sections && tokens.sections[section];\n\n              return (\n                <React.Fragment key={section}>\n                  {index === 0 && template !== 'pdf' && (\n                    <React.Fragment>\n                      <Divider>\n                        <FormattedMessage id=\"templates.tokens\" />\n                      </Divider>\n                      <Space>\n                        <Typography>\n                          {tokens.variables.map((token) => (\n                            <Tag color=\"orange\" key={token}>\n                              {token}\n                            </Tag>\n                          ))}\n                        </Typography>\n                      </Space>\n                    </React.Fragment>\n                  )}\n                  <Divider />\n                  <TemplateFields name={section} field={fieldItem} variables={tokens.variables} />\n                </React.Fragment>\n              );\n            })\n          )}\n          <Divider />\n        </ProForm>\n      </ProCard>\n      {previewData && <p>fabric preview</p>}\n    </PageContainer>\n  );\n};\n","import { request } from 'umi';\nimport type { RequestOptionsInit } from 'umi-request';\n\nexport async function templates(params?: API.TemplatesParams, options?: RequestOptionsInit) {\n  return request<API.TemplateList>(`/api/admin/templates`, {\n    method: 'GET',\n    useCache: false,\n    params,\n    ...(options || {}),\n  });\n}\n\nexport async function template(id: number, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.Template>>(`/api/admin/templates/${id}`, {\n    method: 'GET',\n    ...(options || {}),\n  });\n}\n\nexport async function createTemplate(body?: Partial<API.Template>, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.Template>>(`/api/admin/templates`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    data: body,\n    ...(options || {}),\n  });\n}\n\nexport async function updateTemplate(\n  id: number,\n  body?: Partial<API.Template>,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.Template>>(`/api/admin/templates/${id}`, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    data: body,\n    ...(options || {}),\n  });\n}\n\nexport async function deleteTemplate(id: number, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.Template>>(`/api/admin/templates/${id}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    ...(options || {}),\n  });\n}\n\nexport async function variables(options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.TemplateVariables>>(`/api/admin/templates/variables`, {\n    method: 'GET',\n    ...(options || {}),\n  });\n}\n\nexport async function preview(id: number, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<Record<string, string>>>(\n    `/api/admin/templates/${id}/preview`,\n    {\n      method: 'GET',\n      ...(options || {}),\n    },\n  );\n}\n\n/// api/admin/events/trigger-manually/{id}\n\nexport async function triggerManualEvent(\n  id: number,\n\n  users: number[],\n\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.Template>>(`/api/admin/events/trigger-manually/${id}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    data: {\n      users,\n    },\n    ...(options || {}),\n  });\n}\n\n// /api/admin/products/{id}/trigger-event-manually/{idTemplate}\n\nexport async function triggerManualEventForProduct(\n  templateId: number,\n  productId: number,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.Template>>(\n    `/api/admin/products/${productId}/trigger-event-manually/${templateId}`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      ...(options || {}),\n    },\n  );\n}\n"],"sourceRoot":""}