{"version":3,"sources":["webpack:///./src/pages/UserGroups/form.tsx"],"names":["intl","useIntl","params","useParams","group","isNew","useState","data","setData","fetchData","useCallback","fetchUserGroup","Number","response","success","handleDelete","user_id","prevState","users","filter","user","id","removeUserFromGroup","then","handleAdd","find","addUserToGroup","useEffect","formProps","useMemo","onFinish","values","postData","createUserGroup","history","push","updateUserGroup","message","initialValues","formatMessage","minWidth","item","first_name","last_name","email"],"mappings":"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","file":"p__UserGroups__form.2f82711b.async.js","sourcesContent":["import React, { useMemo, useState, useEffect } from 'react';\nimport { message, Spin, List, Button, Divider, Typography } from 'antd';\nimport ProForm, { ProFormText, ProFormSwitch } from '@ant-design/pro-form';\nimport ProCard from '@ant-design/pro-card';\nimport {\n  userGroup as fetchUserGroup,\n  createUserGroup,\n  updateUserGroup,\n  addUserToGroup,\n  removeUserFromGroup,\n} from '@/services/escola-lms/user_groups';\nimport { PageContainer } from '@ant-design/pro-layout';\n\nimport { useParams, history, useIntl, FormattedMessage } from 'umi';\nimport { useCallback } from 'react';\n\nimport { DeleteOutlined } from '@ant-design/icons';\nimport UserSelect from '@/components/UserSelect';\nimport UserGroupSelect from '../../components/UserGroupSelect';\n\nexport default () => {\n  const intl = useIntl();\n  const params = useParams<{ group?: string }>();\n  const { group } = params;\n  const isNew = group === 'new';\n\n  const [data, setData] = useState<Partial<API.UserGroup>>();\n\n  const fetchData = useCallback(async () => {\n    const response = await fetchUserGroup(Number(group));\n    if (response.success) {\n      setData({\n        ...response.data,\n      });\n    }\n  }, [group]);\n\n  const handleDelete = useCallback(\n    (user_id: number) => {\n      setData((prevState) => ({\n        ...prevState,\n        users: prevState ? prevState?.users?.filter((user) => user.id !== user_id) : [],\n      }));\n\n      removeUserFromGroup(Number(group), user_id).then((response) => {\n        if (response.success) {\n          setData((prevState) => ({\n            ...prevState,\n            users: response.data,\n          }));\n        }\n      });\n    },\n    [group],\n  );\n\n  const handleAdd = useCallback(\n    (user_id: number) => {\n      if (!user_id || data?.users?.find((user) => user.id === user_id)) {\n        return;\n      }\n      addUserToGroup(Number(group), user_id).then((response) => {\n        if (response.success) {\n          setData((prevState) => ({\n            ...prevState,\n            users: response.data,\n          }));\n        }\n      });\n    },\n    [data, group],\n  );\n\n  useEffect(() => {\n    if (group === 'new') {\n      setData({});\n      return;\n    }\n\n    fetchData();\n  }, [group, fetchData]);\n\n  const formProps = useMemo(\n    () => ({\n      onFinish: async (values: Partial<API.UserGroup>) => {\n        let response: API.DefaultResponse<API.UserGroup>;\n        const postData: Partial<API.UserGroup> = {\n          ...values,\n        };\n\n        if (group === 'new') {\n          response = await createUserGroup(postData);\n          if (response.success) {\n            history.push(`/users/groups/${response.data.id}`);\n          }\n        } else {\n          response = await updateUserGroup(Number(group), postData);\n        }\n\n        message.success(response.message);\n      },\n      initialValues: data,\n    }),\n    [data, group],\n  );\n\n  if (!data) {\n    return <Spin />;\n  }\n\n  return (\n    <PageContainer\n      title={\n        isNew ? <FormattedMessage id=\"new_user_group\" /> : <FormattedMessage id=\"edit_user_group\" />\n      }\n    >\n      <ProCard>\n        <ProForm {...formProps}>\n          <ProForm.Group>\n            <ProFormText\n              width=\"md\"\n              name=\"name\"\n              label={<FormattedMessage id=\"name\" />}\n              tooltip={<FormattedMessage id=\"name\" />}\n              placeholder={intl.formatMessage({\n                id: 'name',\n              })}\n              required\n            />\n            <ProForm.Item\n              style={{ minWidth: '300px' }}\n              name=\"parent_id\"\n              label={<FormattedMessage id=\"parent_id_group\" defaultMessage=\"parent_id_group\" />}\n              valuePropName=\"value\"\n            >\n              <UserGroupSelect />\n            </ProForm.Item>\n            <ProFormSwitch name=\"registerable\" label={<FormattedMessage id=\"registerable\" />} />\n          </ProForm.Group>\n\n          {group !== 'new' && (\n            <React.Fragment>\n              <ProForm.Group>\n                <Typography>\n                  <FormattedMessage id=\"add_person_to_group\" defaultMessage=\"Add User to group\" />\n                </Typography>\n                <UserSelect onChange={(user_id) => handleAdd(Number(user_id))} />\n              </ProForm.Group>\n\n              <Divider />\n\n              <List\n                size=\"small\"\n                itemLayout=\"horizontal\"\n                dataSource={data.users}\n                renderItem={(item) => (\n                  <List.Item\n                    actions={[\n                      <Button\n                        key={'delete'}\n                        onClick={() => handleDelete(item.id)}\n                        type=\"primary\"\n                        icon={<DeleteOutlined />}\n                        size=\"small\"\n                        danger\n                      >\n                        {' '}\n                        <FormattedMessage id=\"delete\" />\n                      </Button>,\n                    ]}\n                  >\n                    {item.first_name} {item.last_name} <small>{item.email}</small>\n                  </List.Item>\n                )}\n              />\n            </React.Fragment>\n          )}\n\n          <Divider />\n        </ProForm>\n      </ProCard>\n    </PageContainer>\n  );\n};\n"],"sourceRoot":""}