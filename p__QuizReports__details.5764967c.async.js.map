{"version":3,"file":"p__QuizReports__details.5764967c.async.js","mappings":"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","sources":["webpack://ant-design-pro/./src/pages/QuizReports/components/QuizReportDetailsDescription.tsx","webpack://ant-design-pro/./src/pages/QuizReports/components/QuizReportEditAnswerScore.tsx","webpack://ant-design-pro/./src/pages/QuizReports/components/QuizReportQuestionAnswerDetails.tsx","webpack://ant-design-pro/./src/pages/QuizReports/components/QuizReportQuestionDetails.tsx","webpack://ant-design-pro/./src/pages/QuizReports/details.tsx"],"sourcesContent":["import { Descriptions, Space, Typography } from 'antd';\nimport { format } from 'date-fns';\nimport React from 'react';\nimport { FormattedMessage } from 'umi';\n\nimport TypeButtonDrawer from '@/components/TypeButtonDrawer';\nimport { DATETIME_FORMAT } from '@/consts/dates';\n\ninterface Props {\n  data: API.QuizAttemptDetails;\n}\n\nconst QuizReportDetailsDescription: React.FC<Props> = ({ data }) => (\n  <Space direction=\"vertical\">\n    <Typography.Text strong>\n      <FormattedMessage id=\"details\" defaultMessage=\"Details\" />\n    </Typography.Text>\n    <Descriptions style={{ width: '100%' }} bordered>\n      <Descriptions.Item span={3} label={<FormattedMessage id=\"ID\" defaultMessage=\"ID\" />}>\n        {data.id}\n      </Descriptions.Item>\n      <Descriptions.Item\n        span={1.5}\n        label={<FormattedMessage id=\"student\" defaultMessage=\"Student\" />}\n      >\n        <TypeButtonDrawer\n          type=\"EscolaLms\\Core\\Models\\User\"\n          type_id={data.user_id}\n          text={\n            data?.user?.first_name && data?.user?.last_name\n              ? `${data.user.first_name} ${data.user.last_name}`\n              : undefined\n          }\n        />\n      </Descriptions.Item>\n      <Descriptions.Item\n        span={1.5}\n        label={<FormattedMessage id=\"gift_quiz\" defaultMessage=\"GIFT Quiz\" />}\n      >\n        <TypeButtonDrawer\n          type=\"EscolaLms\\TopicTypeGift\\Models\\GiftQuiz\"\n          type_id={data.topic_gift_quiz_id}\n        />\n      </Descriptions.Item>\n      <Descriptions.Item\n        span={1.5}\n        label={<FormattedMessage id=\"started_at\" defaultMessage=\"Started at Date\" />}\n      >\n        {format(new Date(data.started_at), DATETIME_FORMAT)}\n      </Descriptions.Item>\n      <Descriptions.Item\n        span={1.5}\n        label={<FormattedMessage id=\"end_at\" defaultMessage=\"End at Date\" />}\n      >\n        {data.end_at ? format(new Date(data.end_at), DATETIME_FORMAT) : '-'}\n      </Descriptions.Item>\n      <Descriptions.Item\n        span={1.5}\n        label={<FormattedMessage id=\"result_score\" defaultMessage=\"Result score\" />}\n      >\n        {typeof data.result_score === 'number' ? data.result_score : '-'}\n      </Descriptions.Item>\n      <Descriptions.Item\n        span={1.5}\n        label={<FormattedMessage id=\"max_score\" defaultMessage=\"Max score\" />}\n      >\n        {data.max_score}\n      </Descriptions.Item>\n    </Descriptions>\n  </Space>\n);\n\nexport default QuizReportDetailsDescription;\n","import { DrawerForm, ProFormText } from '@ant-design/pro-form';\nimport React, { useCallback, useMemo } from 'react';\nimport { FormattedMessage } from 'umi';\n\nimport { updateQuizAnswer } from '@/services/escola-lms/gift_quiz';\n\ninterface FormData {\n  score: number;\n}\n\ninterface Props {\n  answer?: API.AttemptAnswer;\n  onClose?: () => void;\n  onSuccess?: (data: API.AttemptAnswer) => void;\n  onError?: (error: unknown) => void;\n}\n\nexport const QuizReportEditAnswerScore: React.FC<Props> = ({\n  answer,\n  onClose,\n  onSuccess,\n  onError,\n}) => {\n  const onFinish = useCallback(\n    async (formData: FormData) => {\n      if (answer?.id === undefined) return;\n      try {\n        const res = await updateQuizAnswer(answer.id, formData);\n\n        if (!res.success) {\n          onError?.(res.errors);\n          return;\n        }\n\n        onSuccess?.(res.data);\n      } catch (e) {\n        onError?.(e);\n      }\n    },\n    [answer?.id],\n  );\n\n  const initialValues: Partial<FormData> = useMemo(\n    () => ({ score: answer?.score }),\n    [answer?.score],\n  );\n\n  return (\n    <DrawerForm<FormData>\n      visible={!!answer}\n      initialValues={initialValues}\n      onVisibleChange={(visible) => !visible && onClose?.()}\n      onFinish={onFinish}\n      title={<FormattedMessage id=\"edit_score\" />}\n      drawerProps={{\n        width: 378,\n        destroyOnClose: true,\n      }}\n    >\n      <ProFormText\n        name=\"score\"\n        label={<FormattedMessage id=\"student_score\" />}\n        required\n        rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n      />\n    </DrawerForm>\n  );\n};\n","import { EditOutlined } from '@ant-design/icons';\nimport { Button, Descriptions, Space, Tooltip, Typography } from 'antd';\nimport React, { useCallback, useState } from 'react';\nimport { FormattedMessage } from 'umi';\n\nimport { QuizReportEditAnswerScore } from './QuizReportEditAnswerScore';\n\ntype OpenEditScoreFactory = (answer: API.AttemptAnswer) => () => void;\n\ninterface DetailsBaseTemplateProps {\n  children: React.ReactNode;\n  openEditScoreFactory: OpenEditScoreFactory;\n  answer: API.AttemptAnswer;\n}\n\nconst DetailsBaseTemplate: React.FC<DetailsBaseTemplateProps> = ({\n  children,\n  openEditScoreFactory,\n  answer,\n}) => (\n  <Descriptions column={2} labelStyle={{ fontWeight: 'bold' }}>\n    <Descriptions.Item\n      label={\n        <Space align=\"center\">\n          <FormattedMessage id=\"student_score\" defaultMessage=\"Student score\" />\n          <Tooltip title={<FormattedMessage id=\"edit_score\" />}>\n            <Button\n              type=\"text\"\n              style={{ width: 22, height: 22 }}\n              icon={<EditOutlined />}\n              onClick={openEditScoreFactory(answer)}\n            />\n          </Tooltip>\n        </Space>\n      }\n    >\n      {answer.score}\n    </Descriptions.Item>\n    <Descriptions.Item\n      contentStyle={{ display: 'flex', gap: '10px', flexWrap: 'wrap' }}\n      label={<FormattedMessage id=\"student_answer\" defaultMessage=\"Student answer\" />}\n    >\n      {children}\n    </Descriptions.Item>\n  </Descriptions>\n);\n\nfunction isTextAnswer(answer: API.GiftQuizAnswer): answer is API.TextAnswer {\n  return typeof (answer as API.TextAnswer)?.text === 'string';\n}\n\nfunction isMultipleAnswer(answer: API.GiftQuizAnswer): answer is API.MultipleAnswer {\n  return Array.isArray((answer as API.MultipleAnswer)?.multiple);\n}\n\nfunction isMatchingAnswer(answer: API.GiftQuizAnswer): answer is API.MatchingAnswer {\n  return typeof (answer as API.MatchingAnswer)?.matching === 'object';\n}\n\nfunction isNumericAnswer(answer: API.GiftQuizAnswer): answer is API.NumericAnswer {\n  return typeof (answer as API.NumericAnswer)?.numeric === 'number';\n}\n\nfunction isBooleanAnswer(answer: API.GiftQuizAnswer): answer is API.BooleanAnswer {\n  return typeof (answer as API.BooleanAnswer)?.bool === 'boolean';\n}\n\ninterface QuizReportQuestionAnswerDetailsContentProps {\n  answerObj?: API.AttemptAnswer;\n  openEditScoreFactory: OpenEditScoreFactory;\n}\n\nconst QuizReportQuestionAnswerDetailsContent: React.FC<\n  QuizReportQuestionAnswerDetailsContentProps\n> = ({ answerObj, openEditScoreFactory }) => {\n  if (!answerObj)\n    return (\n      <Typography.Paragraph style={{ fontStyle: 'italic' }}>\n        <FormattedMessage\n          id=\"student_didnt_answer\"\n          defaultMessage=\"Student didn't answer this question\"\n        />\n      </Typography.Paragraph>\n    );\n\n  if (isTextAnswer(answerObj.answer)) {\n    return (\n      <DetailsBaseTemplate openEditScoreFactory={openEditScoreFactory} answer={answerObj}>\n        {answerObj.answer.text}\n      </DetailsBaseTemplate>\n    );\n  }\n\n  if (isMultipleAnswer(answerObj.answer)) {\n    return (\n      <DetailsBaseTemplate openEditScoreFactory={openEditScoreFactory} answer={answerObj}>\n        {answerObj.answer.multiple.join(', ')}\n      </DetailsBaseTemplate>\n    );\n  }\n\n  if (isMatchingAnswer(answerObj.answer)) {\n    const answersArr = Object.entries(answerObj.answer.matching).map(\n      ([key, val]) => `${key} - ${val ?? ''}`,\n    );\n\n    return (\n      <DetailsBaseTemplate openEditScoreFactory={openEditScoreFactory} answer={answerObj}>\n        {answersArr.map((str) => (\n          <Typography.Text style={{ width: 'max-content' }} key={str}>\n            {str}\n          </Typography.Text>\n        ))}\n      </DetailsBaseTemplate>\n    );\n  }\n\n  if (isNumericAnswer(answerObj.answer)) {\n    return (\n      <DetailsBaseTemplate openEditScoreFactory={openEditScoreFactory} answer={answerObj}>\n        {answerObj.answer.numeric}\n      </DetailsBaseTemplate>\n    );\n  }\n\n  if (isBooleanAnswer(answerObj.answer)) {\n    return (\n      <DetailsBaseTemplate openEditScoreFactory={openEditScoreFactory} answer={answerObj}>\n        {answerObj.answer.bool ? (\n          <FormattedMessage id=\"true_answer\" defaultMessage=\"True\" />\n        ) : (\n          <FormattedMessage id=\"false_answer\" defaultMessage=\"False\" />\n        )}\n      </DetailsBaseTemplate>\n    );\n  }\n\n  return <pre>answer type not supported</pre>;\n};\n\ninterface QuizReportQuestionAnswerDetailsProps {\n  refreshData: () => void;\n  answerObj?: API.AttemptAnswer;\n}\n\nconst QuizReportQuestionAnswerDetails: React.FC<QuizReportQuestionAnswerDetailsProps> = ({\n  refreshData,\n  ...props\n}) => {\n  const [editScoreModal, setEditScoreModal] = useState<API.AttemptAnswer>();\n  const openEditScoreFactory = useCallback(\n    (answer: API.AttemptAnswer) => () => setEditScoreModal(answer),\n    [],\n  );\n  const closeEditScore = useCallback(() => setEditScoreModal(undefined), []);\n\n  const onEditAnswerScoreSuccess = useCallback(() => {\n    refreshData();\n    closeEditScore();\n  }, []);\n\n  return (\n    <>\n      <QuizReportQuestionAnswerDetailsContent\n        {...props}\n        openEditScoreFactory={openEditScoreFactory}\n      />\n      <QuizReportEditAnswerScore\n        answer={editScoreModal}\n        onSuccess={onEditAnswerScoreSuccess}\n        onClose={closeEditScore}\n      />\n    </>\n  );\n};\n\nexport default QuizReportQuestionAnswerDetails;\n","import { Descriptions } from 'antd';\nimport React from 'react';\nimport { FormattedMessage } from 'umi';\n\nimport { QuestionType } from '@/services/escola-lms/enums';\n\ninterface Props {\n  question: API.AttemptGiftQuestion;\n}\n\nconst ANSWER_TYPES = [\n  QuestionType.MULTIPLE_CHOICE,\n  QuestionType.MULTIPLE_CHOICE_WITH_MULTIPLE_RIGHT_ANSWERS,\n];\n\nconst QuizReportQuestionDetails: React.FC<Props> = ({ question }) => (\n  <Descriptions column={2} labelStyle={{ fontWeight: 'bold' }}>\n    <Descriptions.Item label={<FormattedMessage id=\"ID\" defaultMessage=\"ID\" />}>\n      {question.id}\n    </Descriptions.Item>\n    <Descriptions.Item label={<FormattedMessage id=\"type\" defaultMessage=\"Type\" />}>\n      <FormattedMessage id={`gift_type.${question.type}`} />\n    </Descriptions.Item>\n    {question.title && (\n      <Descriptions.Item label={<FormattedMessage id=\"title\" defaultMessage=\"Title\" />}>\n        {question.title}\n      </Descriptions.Item>\n    )}\n    <Descriptions.Item\n      label={<FormattedMessage id=\"possible_score\" defaultMessage=\"Possible score\" />}\n    >\n      {question.score}\n    </Descriptions.Item>\n    {ANSWER_TYPES.includes(question.type) && (\n      <Descriptions.Item\n        label={<FormattedMessage id=\"possible_answers\" defaultMessage=\"Possible answers\" />}\n      >\n        {(\n          question as\n            | API.QuizQuestion_MultipleChoiceWithMultipleRightAnswers\n            | API.QuizQuestion_MultipleChoice\n        ).options.answers.join(', ')}\n      </Descriptions.Item>\n    )}\n    {question.type === QuestionType.TRUE_FALSE && (\n      <Descriptions.Item\n        label={<FormattedMessage id=\"possible_answers\" defaultMessage=\"Possible answers\" />}\n      >\n        <FormattedMessage id=\"possible_true_false\" defaultMessage=\"True, False\" />\n      </Descriptions.Item>\n    )}\n    {question.type === QuestionType.MATCHING && (\n      <>\n        <Descriptions.Item\n          label={<FormattedMessage id=\"matching_questions\" defaultMessage=\"Matching questions\" />}\n        >\n          {(question as API.QuizQuestion_Matching).options.sub_questions.join(', ')}\n        </Descriptions.Item>\n        <Descriptions.Item\n          label={<FormattedMessage id=\"matching_answers\" defaultMessage=\"Matching answers\" />}\n        >\n          {(question as API.QuizQuestion_Matching).options.sub_answers.join(', ')}\n        </Descriptions.Item>\n      </>\n    )}\n  </Descriptions>\n);\n\nexport default QuizReportQuestionDetails;\n","import ProCard from '@ant-design/pro-card';\nimport { PageContainer } from '@ant-design/pro-layout';\nimport { Collapse, Space, Spin, Typography } from 'antd';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { FormattedMessage, useParams } from 'umi';\n\nimport { getQuizAttemptDetails } from '@/services/escola-lms/gift_quiz';\nimport QuizReportDetailsDescription from './components/QuizReportDetailsDescription';\nimport QuizReportQuestionAnswerDetails from './components/QuizReportQuestionAnswerDetails';\nimport QuizReportQuestionDetails from './components/QuizReportQuestionDetails';\n\nfunction useQuizAttempt() {\n  const { reportId } = useParams<{ reportId?: string }>();\n  const [data, setData] = useState<API.QuizAttemptDetails>();\n  const [error, setError] = useState<Record<string, string[]>>();\n  const [loading, setLoading] = useState(false);\n\n  const fetchQuizAttempt = useCallback(async () => {\n    if (!reportId) return;\n    setLoading(true);\n    try {\n      const response = await getQuizAttemptDetails(reportId);\n      if (response.success) {\n        setData(response.data);\n      } else {\n        setError(response.errors);\n      }\n    } catch (e) {\n      setError((prev) => ({ ...prev, message: ['Error during fetching occurred!', e as string] }));\n    } finally {\n      setLoading(false);\n    }\n  }, [reportId]);\n\n  useEffect(() => {\n    fetchQuizAttempt();\n  }, [fetchQuizAttempt]);\n\n  return { data, error, loading, fetchQuizAttempt };\n}\n\nconst QuizDetails: React.FC = () => {\n  const { data, error, loading, fetchQuizAttempt } = useQuizAttempt();\n\n  return (\n    <PageContainer\n      title={<FormattedMessage id=\"quiz_report_details\" defaultMessage=\"Quiz Report Details\" />}\n    >\n      <ProCard bodyStyle={{ display: 'flex', flexDirection: 'column', gap: '20px' }}>\n        {!data && loading && <Spin />}\n        {!data && error && <pre>{JSON.stringify(error)}</pre>}\n        {data && (\n          <>\n            <QuizReportDetailsDescription data={data} />\n            {!!data.questions.length && (\n              <Space direction=\"vertical\">\n                <Typography.Text strong>\n                  <FormattedMessage id=\"questions\" defaultMessage=\"Questions\" />\n                </Typography.Text>\n                <Collapse style={{ width: '100%' }}>\n                  {data.questions.map((question) => (\n                    <Collapse.Panel key={question.id} header={question.question}>\n                      <QuizReportQuestionDetails question={question} />\n                      <QuizReportQuestionAnswerDetails\n                        refreshData={fetchQuizAttempt}\n                        answerObj={data?.answers.find(\n                          (answerObj) => answerObj.topic_gift_question_id === question.id,\n                        )}\n                      />\n                    </Collapse.Panel>\n                  ))}\n                </Collapse>\n              </Space>\n            )}\n          </>\n        )}\n      </ProCard>\n    </PageContainer>\n  );\n};\n\nexport default QuizDetails;\n"],"names":["QuizReportDetailsDescription","_ref","_data$user","_data$user2","data","_jsxs","Space","direction","children","_jsx","Typography","Text","strong","FormattedMessage","id","defaultMessage","Descriptions","style","width","bordered","Item","span","label","TypeButtonDrawer","type","type_id","user_id","text","user","first_name","last_name","concat","undefined","topic_gift_quiz_id","format","Date","started_at","DATETIME_FORMAT","end_at","result_score","max_score","QuizReportEditAnswerScore","answer","onClose","onSuccess","onError","onFinish","useCallback","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","formData","res","wrap","_context","prev","next","abrupt","updateQuizAnswer","sent","success","errors","t0","stop","_x","apply","arguments","initialValues","useMemo","score","DrawerForm","visible","onVisibleChange","title","drawerProps","destroyOnClose","ProFormText","name","required","rules","message","DetailsBaseTemplate","openEditScoreFactory","column","labelStyle","fontWeight","align","Tooltip","Button","height","icon","EditOutlined","onClick","contentStyle","display","gap","flexWrap","isTextAnswer","isMultipleAnswer","Array","isArray","multiple","isMatchingAnswer","_typeof","matching","isNumericAnswer","numeric","isBooleanAnswer","bool","QuizReportQuestionAnswerDetailsContent","answerObj","Paragraph","fontStyle","join","answersArr","Object","entries","map","_ref3","_ref4","_slicedToArray","key","val","str","QuizReportQuestionAnswerDetails","_ref5","refreshData","props","_objectWithoutProperties","_excluded","_useState","useState","_useState2","editScoreModal","setEditScoreModal","closeEditScore","onEditAnswerScoreSuccess","_Fragment","_objectSpread","ANSWER_TYPES","QuestionType","MULTIPLE_CHOICE","MULTIPLE_CHOICE_WITH_MULTIPLE_RIGHT_ANSWERS","QuizReportQuestionDetails","question","includes","options","answers","TRUE_FALSE","MATCHING","sub_questions","sub_answers","useQuizAttempt","_useParams","useParams","reportId","setData","_useState3","_useState4","error","setError","_useState5","_useState6","loading","setLoading","fetchQuizAttempt","response","getQuizAttemptDetails","finish","useEffect","QuizDetails","_useQuizAttempt","PageContainer","ProCard","bodyStyle","flexDirection","Spin","JSON","stringify","questions","length","Collapse","Panel","header","find","topic_gift_question_id"],"sourceRoot":""}