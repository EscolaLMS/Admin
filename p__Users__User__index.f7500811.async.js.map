{"version":3,"file":"p__Users__User__index.f7500811.async.js","mappings":"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","sources":["webpack://ant-design-pro/./src/services/escola-lms/tracker.ts","webpack://ant-design-pro/./src/components/LogsWidget/index.tsx","webpack://ant-design-pro/./src/components/ResponsiveImage/index.tsx","webpack://ant-design-pro/./src/pages/Users/User/form.tsx","webpack://ant-design-pro/./src/pages/Users/User/components/Categories.tsx","webpack://ant-design-pro/./src/pages/Users/User/index.tsx","webpack://ant-design-pro/./src/services/escola-lms/roles.ts"],"sourcesContent":["import type { AxiosRequestConfig } from '@umijs/max';\nimport { request } from 'umi';\n\n/**  GET /api/admin/track/routes */\nexport async function track(\n  params: API.PaginationParams & {\n    current?: number;\n    pageSize?: number;\n    date_from?: string;\n    date_to?: string;\n    user_id?: number;\n    path?: string;\n    method: 'string';\n  },\n  options?: AxiosRequestConfig,\n) {\n  return request<API.DefaultMetaResponse<EscolaLms.Tracker.Models.TrackRoute>>(\n    `/api/admin/tracks/routes`,\n    {\n      method: 'GET',\n      /* useCache: true */ useCache: false,\n      params: {\n        ...params,\n        per_page: params.pageSize,\n        page: params.current,\n      },\n      ...(options || {}),\n    },\n  );\n}\n","import TypeButtonDrawer from '@/components/TypeButtonDrawer';\nimport UserSelect from '@/components/UserSelect';\nimport { DATETIME_FORMAT } from '@/consts/dates';\nimport { track } from '@/services/escola-lms/tracker';\nimport type { ActionType, ProColumns } from '@ant-design/pro-table';\nimport ProTable from '@ant-design/pro-table';\nimport { format } from 'date-fns';\nimport React, { useRef, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'umi';\n\nexport const TableColumns: ProColumns<EscolaLms.Tracker.Models.TrackRoute>[] = [\n  {\n    title: <FormattedMessage id=\"ID\" defaultMessage=\"ID\" />,\n    dataIndex: 'id',\n    hideInSearch: true,\n    sorter: true,\n    width: '80px',\n  },\n  {\n    title: <FormattedMessage id=\"dateRange\" defaultMessage=\"Date Range\" />,\n    dataIndex: 'dateRange',\n    hideInSearch: false,\n    hideInForm: true,\n    hideInTable: true,\n    valueType: 'dateRange',\n    fieldProps: {\n      allowEmpty: [true, true],\n    },\n  },\n  {\n    title: <FormattedMessage id=\"http_method\" defaultMessage=\"http_method\" />,\n    dataIndex: 'method',\n    hideInSearch: false,\n    sorter: true,\n    valueEnum: {\n      GET: 'GET',\n      POST: 'POST',\n      PUT: 'PUT',\n      DELETE: 'DELETE',\n      PATCH: 'PATCH',\n    },\n  },\n  {\n    title: <FormattedMessage id=\"path\" defaultMessage=\"path\" />,\n    dataIndex: 'path',\n    sorter: true,\n    hideInSearch: false,\n  },\n];\n\nconst LogsWidget: React.FC<{ useAsWidget?: boolean; userID?: number }> = ({\n  useAsWidget,\n  userID,\n}) => {\n  const actionRef = useRef<ActionType>();\n  const [loading, setLoading] = useState(false);\n  const intl = useIntl();\n  return (\n    <ProTable<\n      EscolaLms.Tracker.Models.TrackRoute,\n      API.PageParams & {\n        user_id?: number;\n        method: 'string';\n        dateRange: [string, string];\n        path: string;\n      }\n    >\n      headerTitle={intl.formatMessage({\n        id: 'menu.Analytics.Logs',\n        defaultMessage: 'menu.Analytics.Logs',\n      })}\n      loading={loading}\n      actionRef={actionRef}\n      rowKey=\"id\"\n      search={{\n        layout: 'vertical',\n      }}\n      request={({ user_id, method, dateRange, path, pageSize, current }, sort) => {\n        const sortArr = sort && Object.entries(sort)[0];\n        setLoading(true);\n        const date_from =\n          dateRange && dateRange[0] ? format(new Date(dateRange[0]), DATETIME_FORMAT) : undefined;\n        const date_to =\n          dateRange && dateRange[1] ? format(new Date(dateRange[1]), DATETIME_FORMAT) : undefined;\n\n        return track({\n          user_id: useAsWidget ? userID : user_id,\n          method,\n          pageSize,\n          current,\n          path,\n          date_from,\n          date_to,\n          order_by: sortArr && sortArr[0],\n          order: sortArr ? (sortArr[1] === 'ascend' ? 'ASC' : 'DESC') : undefined,\n        }).then((response) => {\n          setLoading(false);\n          if (response.success) {\n            return {\n              data: response.data,\n              total: response.meta.total,\n              success: true,\n            };\n          }\n          return [];\n        });\n      }}\n      columns={[\n        ...TableColumns,\n        {\n          title: <FormattedMessage id=\"user\" defaultMessage=\"user\" />,\n          dataIndex: 'user_id',\n          key: 'user_id',\n          hideInSearch: useAsWidget,\n          sorter: true,\n          renderFormItem: (item, { type, defaultRender, ...rest }, form) => {\n            if (type === 'form') {\n              return null;\n            }\n            const stateType = form.getFieldValue('state');\n            return (\n              <UserSelect\n                {...rest}\n                state={{\n                  type: stateType,\n                }}\n              />\n            );\n          },\n          render: (_, record) =>\n            record.user && <TypeButtonDrawer type={'App\\\\Models\\\\User'} type_id={record.user.id} />,\n        },\n      ]}\n    />\n  );\n};\n\nexport default LogsWidget;\n","import type { ImageProps } from 'antd';\nimport { Image } from 'antd';\nimport React from 'react';\ndeclare const REACT_APP_API_URL: string;\n\ninterface ResponsiveImageProps extends ImageProps {\n  path: string;\n  size?: number;\n  srcSizes?: number[];\n  alt?: string;\n}\n\nconst ResponsiveImage: React.FC<ResponsiveImageProps> = ({\n  path,\n  size,\n  srcSizes,\n  alt = 'LMS Image',\n  ...props\n}) => {\n  const src = `${window.REACT_APP_API_URL || REACT_APP_API_URL}/api/images/img?path=${path}&w=${\n    srcSizes ? srcSizes[0] : size\n  }`;\n  const srcSet =\n    srcSizes &&\n    srcSizes.map(\n      (srcSize) =>\n        `${\n          window.REACT_APP_API_URL || REACT_APP_API_URL\n        }/api/images/img?path=${path}&w=${srcSize} ${srcSize}w`,\n    );\n\n  return (\n    <div className=\"escolalms-image\">\n      <Image src={src} srcSet={srcSet && srcSet.join(',')} alt={alt} {...props} />\n    </div>\n  );\n};\n\nexport default ResponsiveImage;\n","import ResponsiveImage from '@/components/ResponsiveImage';\nimport SecureUploadBrowser from '@/components/SecureUpload/browser';\nimport UserGroupSelect from '@/components/UserGroupSelect';\nimport useModelFields from '@/hooks/useModelFields';\nimport { roles as getRoles } from '@/services/escola-lms/roles';\nimport { createUser, deleteUserAvatar, resendEmail, updateUser } from '@/services/escola-lms/user';\nimport {\n  addUserToGroup,\n  removeUserFromGroup,\n  userGroupsTree,\n} from '@/services/escola-lms/user_groups';\nimport ProForm, { ProFormCheckbox, ProFormSwitch, ProFormText } from '@ant-design/pro-form';\nimport { Button, Divider, Form, Row, Space, Spin, Typography, message } from 'antd';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { FormattedMessage, Link, history, useIntl, useModel, useParams } from 'umi';\nimport AdditionalField from './components/AdditionalField';\n\nfunction useUserGroups(user_id: number) {\n  const [userGroups, setUserGroups] = useState<number[]>([]);\n  const [userGroupsLoading, setUserGroupsLoading] = useState(false);\n\n  const fetchUserGroups = useCallback(async () => {\n    try {\n      setUserGroupsLoading(true);\n      const response = await userGroupsTree({ user_id });\n\n      if (response.success) {\n        setUserGroups(response.data.map(({ id }) => id));\n      }\n    } finally {\n      setUserGroupsLoading(false);\n    }\n  }, [user_id]);\n\n  const handleAddToGroup = useCallback(\n    async (group_id: string | number) => {\n      if (typeof group_id === 'string') return;\n      setUserGroupsLoading(true);\n\n      await addUserToGroup(group_id, user_id);\n      await fetchUserGroups();\n\n      setUserGroupsLoading(false);\n    },\n    [user_id],\n  );\n\n  const handleRemoveFromGroup = useCallback(\n    async (group_id: string | number) => {\n      if (typeof group_id === 'string') return;\n      setUserGroupsLoading(true);\n\n      await removeUserFromGroup(group_id, user_id);\n      await fetchUserGroups();\n\n      setUserGroupsLoading(false);\n    },\n    [user_id],\n  );\n\n  const handleClearAllGroups = useCallback(async () => {\n    setUserGroupsLoading(true);\n\n    await Promise.all(userGroups.map((group_id) => removeUserFromGroup(group_id, user_id)));\n    await fetchUserGroups();\n\n    setUserGroupsLoading(false);\n  }, [userGroups]);\n\n  useEffect(() => {\n    fetchUserGroups();\n  }, [fetchUserGroups]);\n\n  return {\n    userGroups,\n    userGroupsLoading,\n    handleAddToGroup,\n    handleRemoveFromGroup,\n    handleClearAllGroups,\n  };\n}\n\nexport default ({\n  isNew,\n  data,\n  setData,\n}: {\n  isNew: boolean;\n  data: Partial<API.UserItem> | undefined;\n  setData: (data: Partial<API.UserItem>) => void;\n}) => {\n  const intl = useIntl();\n  const params = useParams<{ user?: string }>();\n  const { user } = params;\n  const additionalFields = useModelFields('EscolaLms\\\\Auth\\\\Models\\\\User');\n  const { initialState } = useModel('@@initialState');\n  const baseUrl = initialState?.config?.filter((item) => item.key === 'frontURL')[0]?.data;\n\n  const {\n    userGroups,\n    userGroupsLoading,\n    handleAddToGroup,\n    handleRemoveFromGroup,\n    handleClearAllGroups,\n  } = useUserGroups(data?.id ?? 0);\n\n  const [roles, setRoles] = useState<API.Role[]>();\n  const [form] = ProForm.useForm();\n\n  const fetchRoles = useCallback(async () => {\n    const request = await getRoles();\n    const response = await request;\n\n    if (response.success) {\n      setRoles(response.data);\n    }\n  }, [user]);\n\n  const onDeleteAvatar = () => {\n    deleteUserAvatar(Number(user))\n      .then((response) => {\n        if (response.success) {\n          message.success(response.message);\n          // @ts-ignore\n          setData((prevState) => ({\n            ...prevState,\n            avatar: '',\n            path_avatar: '',\n          }));\n        }\n      })\n      .catch((error: any) => {\n        message.error(error.data.message);\n      });\n  };\n\n  useEffect(() => {\n    fetchRoles();\n  }, [user]);\n\n  const formProps = useMemo(\n    () => ({\n      form,\n      onFinish: async (values: Partial<API.UserItem>) => {\n        let response: API.DefaultResponse<API.UserItem>;\n\n        const postData: Partial<API.UserItem> = {\n          ...values,\n        };\n\n        if (!postData.password || postData.password === '') {\n          delete postData.password;\n        }\n\n        if (isNew) {\n          response = await createUser(postData);\n          if (response.success) {\n            history.push(`/users/${response.data.id}/user_info`);\n          }\n        } else {\n          response = await updateUser(Number(user), postData);\n        }\n\n        message.success(response.message);\n      },\n      initialValues: data,\n    }),\n    [data, user],\n  );\n\n  if (!data) {\n    return <Spin />;\n  }\n\n  return (\n    <ProForm {...formProps}>\n      <ProForm.Group>\n        <ProFormText\n          width=\"md\"\n          name=\"first_name\"\n          label={<FormattedMessage id=\"first_name\" />}\n          tooltip={<FormattedMessage id=\"first_name\" />}\n          placeholder={intl.formatMessage({\n            id: 'first_name',\n          })}\n          required\n          rules={[{ required: true, message: intl.formatMessage({ id: 'field_required' }) }]}\n        />\n        <ProFormText\n          width=\"md\"\n          name=\"last_name\"\n          label={<FormattedMessage id=\"last_name\" />}\n          tooltip={<FormattedMessage id=\"last_name\" />}\n          placeholder={intl.formatMessage({\n            id: 'last_name',\n          })}\n          required\n          rules={[{ required: true, message: intl.formatMessage({ id: 'field_required' }) }]}\n        />\n        <ProFormText\n          width=\"md\"\n          name=\"email\"\n          label={<FormattedMessage id=\"email\" />}\n          tooltip={<FormattedMessage id=\"email\" />}\n          placeholder={intl.formatMessage({\n            id: 'email',\n          })}\n          required\n          rules={[{ required: true, message: intl.formatMessage({ id: 'field_required' }) }]}\n        />\n        <ProFormText.Password\n          shouldUpdate\n          width=\"md\"\n          name=\"password\"\n          label={<FormattedMessage id=\"password\" />}\n          tooltip={<FormattedMessage id=\"password\" />}\n          placeholder={intl.formatMessage({\n            id: 'password',\n          })}\n          required={isNew}\n          rules={[\n            {\n              validator(_, value) {\n                if (value && !/(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{8,}$/i.test(value)) {\n                  return Promise.reject(new Error(intl.formatMessage({ id: 'badPassword' })));\n                }\n                return Promise.resolve();\n              },\n            },\n            {\n              required: isNew,\n              message: <FormattedMessage id=\"field_required\" />,\n            },\n          ]}\n        />\n        {additionalFields.state === 'loaded' &&\n          additionalFields.list.map((field: API.ModelField) => (\n            <AdditionalField key={field.id} field={field} />\n          ))}\n      </ProForm.Group>\n      <ProForm.Group>\n        {!isNew && (\n          <Space direction=\"vertical\">\n            {/* if he is an admin, do not display the switch */}\n            {!data.roles?.includes('admin') && (\n              <ProFormSwitch\n                initialValue={data.is_active}\n                name=\"email_verified\"\n                label={<FormattedMessage id=\"is_email_verified\" />}\n              />\n            )}\n\n            <Form.Item noStyle shouldUpdate>\n              {() => {\n                return form.getFieldValue('email_verified') ? (\n                  <React.Fragment />\n                ) : (\n                  <>\n                    {!baseUrl && (\n                      <p>\n                        <FormattedMessage id=\"no_base_url\" />\n                        <Link to=\"/configuration/settings/escola_auth\">Settings</Link>\n                      </p>\n                    )}\n                    <Button\n                      disabled={!baseUrl}\n                      size=\"small\"\n                      onClick={() => {\n                        resendEmail(form.getFieldValue('email'), `${baseUrl}email-verify`).then(\n                          () => {\n                            message.success(\n                              intl.formatMessage({\n                                id: 'email_resend',\n                              }),\n                            );\n                          },\n                        );\n                      }}\n                    >\n                      <FormattedMessage id=\"resend\" />\n                    </Button>\n                  </>\n                );\n              }}\n            </Form.Item>\n          </Space>\n        )}\n\n        <ProFormSwitch name=\"is_active\" label={<FormattedMessage id=\"is_active\" />} />\n\n        {roles && (\n          <ProFormCheckbox.Group\n            name=\"roles\"\n            layout=\"horizontal\"\n            label={<FormattedMessage id=\"roles\" />}\n            options={roles\n              .filter((role: API.Role) => role.guard_name !== 'web')\n              .map((role: API.Role) => role.name)}\n          />\n        )}\n      </ProForm.Group>\n      {!isNew && (\n        <>\n          <ProForm.Group>\n            <ProForm.Item name=\"avatar\" label={<FormattedMessage id=\"avatar\" />}>\n              {data.path_avatar ? (\n                <ResponsiveImage path={data.path_avatar} size={600} width={200} />\n              ) : (\n                <Typography>\n                  <FormattedMessage id=\"avatar_placeholder\" />\n                </Typography>\n              )}\n            </ProForm.Item>\n            <Form.Item noStyle shouldUpdate>\n              {() => (\n                <>\n                  <SecureUploadBrowser\n                    folder={`avatars/${user}`}\n                    wrapInForm={false}\n                    url={`/api/admin/users/${user}/avatar`}\n                    name=\"avatar\"\n                    accept=\"image/*\"\n                    onChange={(info) => {\n                      if (info.file.status === 'done') {\n                        if (info.file.response && info.file.response.success) {\n                          setData(info.file.response.data);\n                        }\n                      }\n                    }}\n                  />\n                  <Button danger onClick={onDeleteAvatar}>\n                    <FormattedMessage id=\"delete\" />\n                  </Button>\n                </>\n              )}\n            </Form.Item>\n          </ProForm.Group>\n          <Row>\n            <Divider />\n            <ProForm.Item\n              style={{ width: '100%' }}\n              label={<FormattedMessage id=\"groups\" defaultMessage=\"Groups\" />}\n            >\n              <UserGroupSelect\n                multiple\n                loading={userGroupsLoading}\n                disabled={userGroupsLoading}\n                value={userGroups}\n                onSelect={handleAddToGroup}\n                onDeselect={handleRemoveFromGroup}\n                onClear={handleClearAllGroups}\n              />\n            </ProForm.Item>\n          </Row>\n        </>\n      )}\n    </ProForm>\n  );\n};\n","import CategoryCheckboxTree from '@/components/CategoryCheckboxTree';\nimport { updateUserInterests } from '@/services/escola-lms/user';\nimport ProForm from '@ant-design/pro-form';\nimport { message } from 'antd';\nimport { useMemo } from 'react';\nimport { FormattedMessage } from 'umi';\n\nconst UserCategories: React.FC<{ data: Partial<API.UserItem> | undefined }> = ({ data }) => {\n  const formProps = useMemo(\n    () => ({\n      onFinish: async (values: Partial<API.UserItem>) => {\n        const postData: Partial<API.UserItem> = {\n          ...values,\n        };\n\n        const response: API.DefaultResponse<Partial<API.UserItem>> = await updateUserInterests(\n          Number(data?.id),\n          postData,\n        );\n\n        message.success(response.message);\n      },\n      initialValues: data,\n    }),\n    [data],\n  );\n\n  return (\n    <ProForm {...formProps}>\n      <ProForm.Item\n        label={<FormattedMessage id=\"categories\" />}\n        name=\"interests\"\n        valuePropName=\"value\"\n      >\n        <CategoryCheckboxTree />\n      </ProForm.Item>\n    </ProForm>\n  );\n};\n\nexport default UserCategories;\n","import ProCard from '@ant-design/pro-card';\nimport { PageContainer } from '@ant-design/pro-layout';\nimport { FormattedMessage, history, useIntl, useParams } from 'umi';\nimport UserForm from './form';\n\nimport LogsWidget from '@/components/LogsWidget';\nimport { user as fetchUser } from '@/services/escola-lms/user';\nimport { categoriesArrToIds } from '@/utils/utils';\nimport { useCallback, useEffect, useState } from 'react';\nimport UserCategories from './components/Categories';\n\nexport default () => {\n  const params = useParams<{ user?: string; tab?: string }>();\n  const [data, setData] = useState<Partial<API.UserItem>>();\n  const intl = useIntl();\n  const { tab = 'user_info', user } = params;\n  const isNew = typeof user === 'undefined';\n\n  const fetchData = useCallback(async () => {\n    const response = await fetchUser(Number(user));\n    if (response.success) {\n      setData({\n        ...response.data,\n        interests: response.data.interests.map(categoriesArrToIds),\n      });\n    }\n  }, [user]);\n\n  useEffect(() => {\n    if (isNew) {\n      setData({});\n      return;\n    }\n\n    fetchData();\n  }, [user, fetchData]);\n\n  return (\n    <PageContainer\n      title={<FormattedMessage id=\"menu.Settings\" />}\n      header={{\n        breadcrumb: {\n          routes: [\n            {\n              path: `/users/${user}/user_info`,\n              breadcrumbName: intl.formatMessage({\n                id: 'menu.Settings',\n              }),\n            },\n\n            {\n              path: String(tab),\n              breadcrumbName: intl.formatMessage({\n                id: String(tab),\n              }),\n            },\n          ],\n        },\n      }}\n    >\n      <ProCard\n        tabs={{\n          type: 'card',\n          activeKey: tab,\n          onChange: (key) => history.push(`/users/${user}/${key}`),\n        }}\n      >\n        <ProCard.TabPane\n          key=\"user_info\"\n          tab={isNew ? <FormattedMessage id=\"new_user\" /> : <FormattedMessage id=\"edit_user\" />}\n        >\n          <UserForm isNew={isNew} data={data} setData={setData} />\n        </ProCard.TabPane>\n        {!isNew && (\n          <ProCard.TabPane\n            key={'categories'}\n            tab={\n              <span>\n                <FormattedMessage id=\"categories\" />\n              </span>\n            }\n          >\n            {data?.id && <UserCategories data={data} />}\n          </ProCard.TabPane>\n        )}\n        {/* {!isNew && (\n          <ProCard.TabPane\n            key={'settings'}\n            tab={\n              <span>\n                <FormattedMessage id=\"user.settings\" />\n              </span>\n            }\n          >\n            {user && <Settings user={user} isProfile={false} />}\n          </ProCard.TabPane>\n        )} */}\n        {!isNew && (\n          <ProCard.TabPane\n            key={'logs'}\n            tab={\n              <span>\n                <FormattedMessage id=\"user_logs\" />\n              </span>\n            }\n          >\n            {user && <LogsWidget useAsWidget userID={Number(user)} />}\n          </ProCard.TabPane>\n        )}\n      </ProCard>\n    </PageContainer>\n  );\n};\n","import type { AxiosRequestConfig } from '@umijs/max';\nimport { request } from 'umi';\n\n/**  GET /api/admin/roles */\nexport async function roles(\n  params?: API.CourseParams & {\n    // query\n    current?: number;\n    pageSize?: number;\n    name?: string;\n    search?: string;\n  },\n  options?: AxiosRequestConfig,\n) {\n  return request<API.RolesList>(`/api/admin/roles`, {\n    method: 'GET',\n    /* useCache: true */ useCache: false,\n    params,\n    ...(options || {}),\n  });\n}\n\n/**  POST /api/admin/roles */\nexport async function createRole(body?: Partial<API.Role>, options?: AxiosRequestConfig) {\n  return request<API.DefaultResponse<API.Role>>(`/api/admin/roles`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    data: body,\n    ...(options || {}),\n  });\n}\n\n/**  DELETE /api/admin/roles/:id */\nexport async function deleteRole(id: string, options?: AxiosRequestConfig) {\n  return request<API.DefaultResponse<API.Role>>(`/api/admin/roles/${id}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    ...(options || {}),\n  });\n}\n\n/**  GET /api/admin/roles/:name */\nexport async function permisions(name: string, options?: AxiosRequestConfig) {\n  return request<API.RolesList>(`/api/admin/roles/${name}`, {\n    method: 'GET',\n    /* useCache: true */ useCache: false,\n\n    ...(options || {}),\n  });\n}\n\n/**  PATCH /api/admin/roles/:name */\nexport async function setRolePermisions(name: string, body?: any, options?: AxiosRequestConfig) {\n  return request<API.DefaultResponse<API.Role>>(`/api/admin/roles/${name}`, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    data: body,\n    ...(options || {}),\n  });\n}\n"],"names":["track","_x","_x2","_track","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","params","options","wrap","_context","prev","next","abrupt","request","_objectSpread","method","useCache","per_page","pageSize","page","current","stop","TableColumns","title","_jsx","FormattedMessage","id","defaultMessage","dataIndex","hideInSearch","sorter","width","hideInForm","hideInTable","valueType","fieldProps","allowEmpty","valueEnum","GET","POST","PUT","DELETE","PATCH","LogsWidget","_ref","useAsWidget","userID","actionRef","useRef","_useState","useState","_useState2","_slicedToArray","loading","setLoading","intl","useIntl","ProTable","headerTitle","formatMessage","rowKey","search","layout","_ref2","sort","user_id","dateRange","path","sortArr","Object","entries","date_from","format","Date","DATETIME_FORMAT","undefined","date_to","order_by","order","then","response","success","data","total","meta","columns","concat","key","renderFormItem","item","_ref3","form","type","defaultRender","rest","_objectWithoutProperties","_excluded","stateType","getFieldValue","UserSelect","state","render","_","record","user","TypeButtonDrawer","type_id","ResponsiveImage","size","srcSizes","_ref$alt","alt","props","src","window","REACT_APP_API_URL","srcSet","map","srcSize","className","children","Image","join","useUserGroups","userGroups","setUserGroups","_useState3","_useState4","userGroupsLoading","setUserGroupsLoading","fetchUserGroups","useCallback","userGroupsTree","sent","finish","handleAddToGroup","_callee2","group_id","_context2","addUserToGroup","handleRemoveFromGroup","_ref4","_callee3","_context3","removeUserFromGroup","handleClearAllGroups","_callee4","_context4","Promise","all","useEffect","_ref6","_initialState$config","_data$id","_data$roles","isNew","setData","useParams","additionalFields","useModelFields","_useModel","useModel","initialState","baseUrl","config","filter","_useUserGroups","_useState5","_useState6","roles","setRoles","_ProForm$useForm","ProForm","useForm","_ProForm$useForm2","fetchRoles","_callee5","_context5","getRoles","onDeleteAvatar","deleteUserAvatar","Number","message","prevState","avatar","path_avatar","error","formProps","useMemo","onFinish","_onFinish","_callee6","values","postData","_context6","password","createUser","history","push","updateUser","_x3","initialValues","_jsxs","ProFormText","name","label","tooltip","placeholder","required","rules","Password","shouldUpdate","validator","value","test","reject","Error","resolve","list","field","AdditionalField","Space","direction","includes","ProFormSwitch","initialValue","is_active","Form","Item","noStyle","React","_Fragment","Link","to","Button","disabled","onClick","resendEmail","ProFormCheckbox","Group","role","guard_name","Typography","SecureUploadBrowser","folder","wrapInForm","url","accept","onChange","info","file","status","danger","Row","Divider","style","UserGroupSelect","multiple","onSelect","onDeselect","onClear","Spin","UserCategories","updateUserInterests","valuePropName","CategoryCheckboxTree","_params$tab","tab","fetchData","fetchUser","interests","categoriesArrToIds","PageContainer","header","breadcrumb","routes","breadcrumbName","String","ProCard","tabs","activeKey","TabPane","UserForm","_roles","createRole","_x4","_createRole","body","headers","deleteRole","_x5","_x6","_deleteRole","permisions","_x7","_x8","_permisions","setRolePermisions","_x9","_x10","_x11","_setRolePermisions"],"sourceRoot":""}