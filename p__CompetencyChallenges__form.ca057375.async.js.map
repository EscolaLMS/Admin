{"version":3,"sources":["webpack:///./src/services/escola-lms/enums.ts","webpack:///./src/pages/CompetencyChallenges/components/MainForm.tsx","webpack:///./src/pages/CompetencyChallenges/components/ScaleCategoryTree.tsx","webpack:///./src/pages/CompetencyChallenges/components/Scales.tsx","webpack:///./src/pages/CompetencyChallenges/components/DiagnosticTest.tsx","webpack:///./src/pages/CompetencyChallenges/form.tsx","webpack:///./src/services/escola-lms/competency-challenges.ts","webpack:///./src/components/WysiwygMarkdown/index.tsx","webpack:///./src/components/GiftQuizQuestions/editor/question/MultipleChoice.tsx","webpack:///./src/components/GiftQuizQuestions/editor/question/TrueFalse.tsx","webpack:///./src/components/GiftQuizQuestions/editor/question/ShortAnswers.tsx","webpack:///./src/components/GiftQuizQuestions/editor/question/Matching.tsx","webpack:///./src/components/GiftQuizQuestions/editor/question/Numerical.tsx","webpack:///./src/components/GiftQuizQuestions/editor/question/Essay.tsx","webpack:///./src/components/GiftQuizQuestions/editor/question/index.tsx","webpack:///./src/components/GiftQuizQuestions/editor/utils.ts","webpack:///./src/components/GiftQuizQuestions/editor/index.tsx","webpack:///./src/components/GiftQuizQuestions/table.tsx"],"names":["TopicType","EventTypes","CourseStatus","TemplateChannelValue","TemplateEvents","VouchersTypes","QuestionType","AttendanceValue","ExamGradeType","CompetencyChallengeType","typeOptions","Object","values","map","value","label","MainForm","data","competency_challenge_id","onAddSuccess","onUpdateSuccess","intl","useIntl","ProForm","useForm","form","isNew","Number","isNaN","initialValues","useMemo","authors","restValues","id","addCompetencyChallenge","useCallback","name","type","is_active","createCompetencyChallenge","res","success","error","message","formatMessage","history","push","changeCompetencyChallenge","formValues","getFieldsValue","image_url","image_path","updateCompetencyChallenge","required","width","maxWidth","info","file","response","paths","setFieldsValue","treeConvert","category","disabledNodes","depth","subcategories","length","title","disabled","includes","children","cat","ScaleCategoryTree","onChange","multiple","useState","categories","setCategories","useEffect","categoryTree","then","treeData","maxHeight","overflow","staticColumns","dataIndex","editable","render","_n","record","split","state","valueType","formItemProps","rules","min","max","fieldProps","category_id","renderFormItem","_s","_c","getFieldValue","getDefaultData","scales","scale_min","Scales","onScaleDelete","onScaleAdd","onScaleUpdate","editableKeys","setEditableRowKeys","formRef","useRef","editableFormRef","actionRef","defaultData","columns","_i","action","startEditable","idStr","currentData","current","setFieldValue","filter","deleteCompetencyChallengeScale","table","r","creatorButtonText","index","onlyOneLineEditorAlertMessage","onSave","_k","createCompetencyChallengeScale","updateCompetencyChallengeScale","deletePopconfirmMessage","actionRender","dom","save","delete","cancel","DiagnosticTest","loading","setLoading","quizData","setQuizData","fetchQuiz","quiz_id","undefined","getGiftQuiz","finally","onFormFinish","formData","updateGiftQuiz","position","paddingBottom","_p","reset","submit","bottom","left","defaultMessage","questions","disabledDepth","CompetencyChallenge","setData","useParams","tab","pageTitle","fetchData","getCompetencyChallenge","breadcrumb","routes","path","breadcrumbName","String","padding","cardProps","activeKey","key","params","options","request","method","useCache","body","headers","competency_challenge_scale_id","EmbedUploaded","attrs","href","filename","pop","FormWysiwyg","directory","matcher","url","component","upload","result","resizePath","resizedImage","Error","v","INITIAL_VALUES","MULTIPLE_CHOICE","isCorrect","MULTIPLE_CHOICE_WITH_MULTIPLE_RIGHT_ANSWERS","weight","GiftQuizQuestionMultipleChoiceEditor","field","i","count","ordinalNumber","remove","display","justifyContent","validator","answers","answer","Promise","reject","resolve","MAX_SAFE_INTEGER","addonAfter","GiftQuizQuestionTrueFalseEditor","GiftQuizQuestionShortEditor","tooltipText","_f","_a","deleteButton","firstOfPair","secondOfPair","GiftQuizQuestionMatchingEditor","style","flexWrap","GiftQuizQuestionNumericalEditor","GiftQuizQuestionEssayEditor","GiftQuizQuestion","TRUE_FALSE","SHORT_ANSWERS","MATCHING","NUMERICAL_QUESTION","ESSAY","DESCRIPTION","parseMultipleChoice","question","giftString","sign","trim","parseMultipleChoiceWithMultipleRightAnswers","parseTrueFalse","parseShortAnswers","parseMatching","parseNumerical","errorMargin","parseEssay","parseDescription","parseToGIFT","parseMultipleChoiceToFormData","parsedValue","score","stem","text","isMultipleChoice","choices","every","reduce","acc","parseTrueFalseToFormData","isTrue","parseShortAnswersToFormData","parseMatchingToFormData","matchPairs","subquestion","subanswer","parseNumericalToFormData","Array","isArray","number","range","parseDescriptionEssayToFormData","questionBase","parse","VALUES_NOT_TO_RESET","TYPE_OPTIONS","q","GiftQuizQuestionEditor","onSubmit","categoryProps","useWatch","parseToFormData","onFinish","status","resetFields","fields","fieldsToReset","keys","DragHandle","SortableHandle","cursor","color","SortableItem","SortableElement","props","SortContainer","SortableContainer","className","hideInForm","hideInSearch","hideInSetting","_","row","obj","categoryColumn","Table","onAdded","onRemoved","onEdited","quizId","tableLoading","tableHeader","questionsCategory","newQuestion","setNewQuestion","editQuestion","setEditQuestion","debug","setDebug","dataSource","setDataSource","reload","onSortEnd","oldIndex","newIndex","newData","arrayMoveImmutable","slice","Boolean","order","forEach","newRow","updateQuestion","topic_gift_quiz_id","DraggableContainer","DraggableBodyRow","restProps","findIndex","x","onNewQuestionSubmit","createQuestion","console","log","onEditQuestionSubmit","bodyStyle","settings","deleteQuestion","wrapper","marginTop"],"mappings":"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","file":"p__CompetencyChallenges__form.ca057375.async.js","sourcesContent":["export enum TopicType {\n  Unselected = '',\n  RichText = 'EscolaLms\\\\TopicTypes\\\\Models\\\\TopicContent\\\\RichText',\n  OEmbed = 'EscolaLms\\\\TopicTypes\\\\Models\\\\TopicContent\\\\OEmbed',\n  Audio = 'EscolaLms\\\\TopicTypes\\\\Models\\\\TopicContent\\\\Audio',\n  Video = 'EscolaLms\\\\TopicTypes\\\\Models\\\\TopicContent\\\\Video',\n  H5P = 'EscolaLms\\\\TopicTypes\\\\Models\\\\TopicContent\\\\H5P',\n  Image = 'EscolaLms\\\\TopicTypes\\\\Models\\\\TopicContent\\\\Image',\n  PDF = 'EscolaLms\\\\TopicTypes\\\\Models\\\\TopicContent\\\\PDF',\n  SCORM = 'EscolaLms\\\\TopicTypes\\\\Models\\\\TopicContent\\\\ScormSco',\n  Project = 'EscolaLms\\\\TopicTypeProject\\\\Models\\\\Project',\n  GiftQuiz = 'EscolaLms\\\\TopicTypeGift\\\\Models\\\\GiftQuiz',\n}\n\nexport enum EventTypes {\n  OrderPaid = 'EscolaLms\\\\Cart\\\\Events\\\\OrderPaid',\n  UserLogged = 'EscolaLms\\\\Auth\\\\Events\\\\UserLogged',\n}\n\nexport enum CourseStatus {\n  draft = 'draft',\n  published = 'published',\n  archived = 'archived',\n}\n\nexport enum TemplateChannelValue {\n  email = 'EscolaLms\\\\TemplatesEmail\\\\Core\\\\EmailChannel',\n  pdf = 'EscolaLms\\\\TemplatesPdf\\\\Core\\\\PdfChannel',\n  sms = 'EscolaLms\\\\TemplatesSms\\\\Core\\\\SmsChannel',\n}\n\nexport enum TemplateEvents {\n  ManuallyTriggeredEvent = 'EscolaLms\\\\Templates\\\\Events\\\\ManuallyTriggeredEvent',\n}\n\nexport enum VouchersTypes {\n  cart_fixed = 'cart_fixed',\n  cart_percent = 'cart_percent',\n  product_fixed = 'product_fixed',\n  product_percent = 'product_percent',\n}\n\nexport type BuyableTypes =\n  | 'App\\\\Models\\\\Course'\n  | 'App\\\\Models\\\\Consultation'\n  | 'App\\\\Models\\\\Webinar'\n  | 'App\\\\Models\\\\StationaryEvent'\n  | 'EscolaLms\\\\Courses\\\\Models\\\\Course'\n  | 'EscolaLms\\\\Consultations\\\\Models\\\\Consultation'\n  | 'EscolaLms\\\\Webinars\\\\Models\\\\Webinar'\n  | 'EscolaLms\\\\StationaryEvents\\\\Models\\\\StationaryEvent';\n\nexport enum QuestionType {\n  MULTIPLE_CHOICE = 'multiple_choice',\n  MULTIPLE_CHOICE_WITH_MULTIPLE_RIGHT_ANSWERS = 'multiple_choice_with_multiple_right_answers',\n  TRUE_FALSE = 'true_false',\n  SHORT_ANSWERS = 'short_answers',\n  MATCHING = 'matching',\n  NUMERICAL_QUESTION = 'numerical_question',\n  ESSAY = 'essay',\n  DESCRIPTION = 'description',\n}\n\nexport enum AttendanceValue {\n  PRESENT = 'present',\n  PRESENT_NOT_EXERCISING = 'present_not_exercising',\n  ABSENT = 'absent',\n  EXCUSED_ABSENCE = 'excused_absence',\n}\n\nexport enum ExamGradeType {\n  Manual = 'manual',\n  TeamsForms = 'teams_forms',\n  TeamsLecture = 'teams_lecture',\n  TestPortal = 'test_portal',\n}\n\nexport enum CompetencyChallengeType {\n  Simple = 'simple',\n  Complex = 'complex',\n}\n","import React, { useCallback, useMemo } from 'react';\nimport { FormattedMessage, history, useIntl } from 'umi';\nimport { message } from 'antd';\nimport ProForm, {\n  ProFormSelect,\n  ProFormSwitch,\n  ProFormText,\n  ProFormTextArea,\n} from '@ant-design/pro-form';\n\nimport UserSelect from '@/components/UserSelect';\nimport ProFormImageUpload from '@/components/ProFormImageUpload';\nimport WysiwygMarkdown from '@/components/WysiwygMarkdown';\nimport {\n  createCompetencyChallenge,\n  updateCompetencyChallenge,\n} from '@/services/escola-lms/competency-challenges';\nimport { CompetencyChallengeType } from '@/services/escola-lms/enums';\n\nconst typeOptions = Object.values(CompetencyChallengeType).map((value) => ({\n  value,\n  label: <FormattedMessage id={`CompetencyChallenges.types.${value}`} />,\n}));\n\ninterface Props {\n  competency_challenge_id: number;\n  data?: API.CompetencyChallenge;\n  onAddSuccess?: (response: API.DataResponseSuccess<API.CreateCompetencyChallenge>) => void;\n  onUpdateSuccess?: (response: API.DataResponseSuccess<API.CreateCompetencyChallenge>) => void;\n}\n\nexport const MainForm: React.FC<Props> = ({\n  data,\n  competency_challenge_id,\n  onAddSuccess,\n  onUpdateSuccess,\n}) => {\n  const intl = useIntl();\n  const [form] = ProForm.useForm();\n\n  const isNew = Number.isNaN(competency_challenge_id);\n\n  const initialValues = useMemo(() => {\n    if (!data) return {};\n    const { authors, ...restValues } = data;\n\n    return { ...restValues, authors: authors.map(({ id }) => id) };\n  }, [data]);\n\n  const addCompetencyChallenge = useCallback(\n    async ({ name, type, is_active = false }: API.CreateCompetencyChallenge) => {\n      try {\n        const res = await createCompetencyChallenge({ name, is_active, type });\n\n        if (!res.success) {\n          message.error(res.message);\n          return;\n        }\n\n        message.success(intl.formatMessage({ id: res.message }));\n        history.push(`/competency-challenges/${res.data.id}/main`);\n        onAddSuccess?.(res);\n      } catch {\n        message.error(intl.formatMessage({ id: 'error' }));\n      }\n    },\n    [],\n  );\n\n  const changeCompetencyChallenge = useCallback(\n    async (formValues: API.UpdateCompetencyChallenge) => {\n      try {\n        // those values don't have inputs, so we have to do it manually\n        const { image_url, image_path }: { image_url: string; image_path: string } =\n          form.getFieldsValue(['image_url', 'image_path']);\n\n        const res = await updateCompetencyChallenge(competency_challenge_id, {\n          ...formValues,\n          image_url,\n          image_path,\n        });\n\n        if (!res.success) {\n          message.error(res.message);\n          return;\n        }\n\n        message.success(intl.formatMessage({ id: res.message }));\n        onUpdateSuccess?.(res);\n      } catch {\n        message.error(intl.formatMessage({ id: 'error' }));\n      }\n    },\n    [competency_challenge_id],\n  );\n\n  return (\n    <ProForm\n      form={form}\n      initialValues={initialValues}\n      onFinish={isNew ? addCompetencyChallenge : changeCompetencyChallenge}\n    >\n      <ProForm.Group title={<FormattedMessage id=\"CompetencyChallenges.base\" />}>\n        <ProFormText\n          width=\"md\"\n          name=\"name\"\n          label={<FormattedMessage id=\"name\" />}\n          placeholder={intl.formatMessage({ id: 'name' })}\n          required\n          rules={[{ required: true, message: intl.formatMessage({ id: 'field_required' }) }]}\n        />\n        <ProFormSelect\n          width=\"md\"\n          name=\"type\"\n          label={<FormattedMessage id=\"type\" />}\n          options={typeOptions}\n          required\n          rules={[{ required: true, message: intl.formatMessage({ id: 'field_required' }) }]}\n        />\n        <ProFormSwitch name=\"is_active\" label={<FormattedMessage id=\"is_active\" />} />\n      </ProForm.Group>\n      {!isNew && (\n        <>\n          <ProForm.Group title={<FormattedMessage id=\"CompetencyChallenges.additional\" />}>\n            <ProForm.Item\n              name=\"description\"\n              label={<FormattedMessage id=\"description\" />}\n              valuePropName=\"value\"\n              style={{\n                width: 440,\n              }}\n            >\n              <WysiwygMarkdown directory={`competency-challenges/${competency_challenge_id}`} />\n            </ProForm.Item>\n            <ProFormTextArea width=\"lg\" name=\"summary\" label={<FormattedMessage id=\"summary\" />} />\n            <ProForm.Item\n              name=\"authors\"\n              label={<FormattedMessage id=\"author\" />}\n              style={{ width: '100%', maxWidth: 440 }}\n            >\n              <UserSelect multiple />\n            </ProForm.Item>\n          </ProForm.Group>\n          <ProFormImageUpload\n            wrapInForm={false}\n            folder={`/competency-challenges/${competency_challenge_id}`}\n            title=\"image\"\n            action={`/api/admin/competency-challenges/${competency_challenge_id}?_method=PATCH`}\n            src_name=\"image_url\"\n            form_name=\"image\"\n            getUploadedSrcField={(info) => info.file.response.data.image_url}\n            setPath={(paths) => form.setFieldsValue(paths)}\n          />\n        </>\n      )}\n    </ProForm>\n  );\n};\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { FormattedMessage } from 'umi';\nimport { TreeSelect } from 'antd';\n\nimport { categoryTree } from '@/services/escola-lms/category';\n\ntype TreeNodeType = {\n  title: string;\n  value: number;\n  disabled?: boolean;\n  children?: TreeNodeType[];\n};\n\nconst treeConvert = (\n  category: API.Category,\n  disabledNodes: number[],\n  depth: number = 0,\n): TreeNodeType =>\n  category.subcategories?.length\n    ? {\n        title: category.name,\n        value: category.id,\n        disabled: depth === 0 || disabledNodes.includes(category.id),\n        children: category.subcategories.map((cat) => treeConvert(cat, disabledNodes, depth + 1)),\n      }\n    : {\n        title: category.name,\n        value: category.id,\n        disabled: depth === 0 || disabledNodes.includes(category.id),\n      };\n\ninterface Props {\n  multiple?: boolean;\n  value?: string | string[] | number | number[];\n  onChange?: (value: string | string[] | number | number[]) => void;\n  disabledNodes?: number[]; // categories id arr\n}\n\nexport const ScaleCategoryTree: React.FC<Props> = ({\n  value,\n  onChange,\n  multiple = false,\n  disabledNodes = [],\n}) => {\n  const [categories, setCategories] = useState<API.Category[]>([]);\n\n  useEffect(() => {\n    categoryTree().then((response) => {\n      if (response.success) {\n        setCategories(response.data);\n      }\n    });\n  }, []);\n\n  const treeData = useMemo(\n    () => categories.map((cat) => treeConvert(cat, disabledNodes)),\n    [categories, disabledNodes],\n  );\n\n  return (\n    <TreeSelect<string | string[] | number | number[]>\n      loading={categories.length === 0}\n      multiple={multiple}\n      showSearch\n      value={value}\n      dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n      placeholder={<FormattedMessage id=\"select\" defaultMessage=\"Please select\" />}\n      allowClear\n      treeDefaultExpandAll\n      onChange={onChange}\n      treeData={treeData}\n      disabled={categories.length === 0}\n    />\n  );\n};\n","import TypeButtonDrawer from '@/components/TypeButtonDrawer';\nimport React, { useMemo, useRef, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'umi';\nimport { Button, Popconfirm, Tooltip } from 'antd';\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons';\nimport ProForm, { type ProFormInstance } from '@ant-design/pro-form';\nimport { EditableProTable } from '@ant-design/pro-table';\nimport type { ActionType, EditableFormInstance, ProColumns } from '@ant-design/pro-table';\n\nimport {\n  createCompetencyChallengeScale,\n  deleteCompetencyChallengeScale,\n  updateCompetencyChallengeScale,\n} from '@/services/escola-lms/competency-challenges';\nimport { ScaleCategoryTree } from './ScaleCategoryTree';\n\ntype DataSourceType = {\n  id: React.Key;\n  scale_min: number;\n  category_id: number;\n};\n\ninterface Props {\n  competency_challenge_id: number;\n  scales: API.CompetencyChallengeScale[];\n  onScaleDelete?: () => void;\n  onScaleAdd?: () => void;\n  onScaleUpdate?: () => void;\n}\n\nconst staticColumns: ProColumns<DataSourceType>[] = [\n  {\n    title: <FormattedMessage id=\"ID\" />,\n    dataIndex: 'id',\n    editable: false,\n    render: (_n, record) => {\n      if (typeof record.id !== 'string') return '-';\n      const [state, id] = record.id.split('-');\n\n      if (state === 'new') return '-';\n\n      return id;\n    },\n  },\n  {\n    title: <FormattedMessage id=\"min_points\" />,\n    dataIndex: 'scale_min',\n    valueType: 'digit',\n    formItemProps: {\n      rules: [\n        {\n          required: true,\n          message: <FormattedMessage id=\"field_required\" />,\n        },\n        {\n          type: 'number',\n          min: 0,\n          max: 100,\n          message: <FormattedMessage id=\"number_between\" values={{ min: 0 }} />,\n        },\n      ],\n    },\n    fieldProps: {\n      min: 0,\n    },\n  },\n  {\n    title: <FormattedMessage id=\"category\" />,\n    dataIndex: 'category_id',\n    render: (_n, record) => <TypeButtonDrawer type=\"Category\" type_id={record.category_id} />,\n    formItemProps: {\n      rules: [\n        {\n          required: true,\n          message: <FormattedMessage id=\"field_required\" />,\n        },\n      ],\n    },\n    renderFormItem: (_s, _c, form) => {\n      const disabledNodes: number[] = (form.getFieldValue('table') ?? []).map(\n        (record: DataSourceType) => record.category_id,\n      );\n\n      return <ScaleCategoryTree disabledNodes={disabledNodes} />;\n    },\n  },\n];\n\nconst getDefaultData = (scales: API.CompetencyChallengeScale[]): DataSourceType[] =>\n  scales.map(({ id, scale_min, category }) => ({\n    // due to key errors\n    id: `old-${id}`,\n    scale_min,\n    category_id: category.id,\n  }));\n\nexport const Scales: React.FC<Props> = ({\n  competency_challenge_id,\n  scales,\n  onScaleDelete,\n  onScaleAdd,\n  onScaleUpdate,\n}) => {\n  const [editableKeys, setEditableRowKeys] = useState<React.Key[]>([]);\n\n  const intl = useIntl();\n  const formRef = useRef<ProFormInstance>();\n  const editableFormRef = useRef<EditableFormInstance>();\n  const actionRef = useRef<ActionType>();\n\n  const defaultData = useMemo(() => getDefaultData(scales), [scales]);\n\n  const columns: ProColumns<DataSourceType>[] = useMemo(() => {\n    return [\n      ...staticColumns,\n\n      {\n        valueType: 'option',\n        title: <FormattedMessage id=\"options\" />,\n        render: (_n, record, _i, action) => [\n          <Tooltip key=\"edit\" title={<FormattedMessage id=\"edit\" defaultMessage=\"edit\" />}>\n            <Button\n              type=\"primary\"\n              icon={<EditOutlined />}\n              onClick={() => action?.startEditable(record.id)}\n            />\n          </Tooltip>,\n          <Popconfirm\n            key=\"delete\"\n            title={\n              <FormattedMessage\n                id=\"deleteQuestion\"\n                defaultMessage=\"Are you sure to delete this record?\"\n              />\n            }\n            onConfirm={async () => {\n              if (typeof record.id !== 'string') return;\n              const [state, idStr] = record.id.split('-');\n\n              if (state === 'new') {\n                const currentData: DataSourceType[] = formRef.current?.getFieldValue('table');\n\n                formRef.current?.setFieldValue(\n                  'table',\n                  currentData.filter(({ id }) => id !== record.id),\n                );\n                return;\n              }\n\n              const response = await deleteCompetencyChallengeScale(+idStr);\n              if (response.success) {\n                onScaleDelete?.();\n              }\n            }}\n            okText={<FormattedMessage id=\"ok\" />}\n            cancelText={<FormattedMessage id=\"cancel\" />}\n          >\n            <Tooltip title={<FormattedMessage id=\"delete\" defaultMessage=\"delete\" />}>\n              <Button type=\"primary\" icon={<DeleteOutlined />} danger />\n            </Tooltip>\n          </Popconfirm>,\n        ],\n      },\n    ];\n  }, []);\n\n  return (\n    <ProForm<{\n      table: DataSourceType[];\n    }>\n      formRef={formRef}\n      initialValues={{\n        table: defaultData,\n      }}\n      submitter={false}\n    >\n      <EditableProTable<DataSourceType>\n        rowKey={(r) => r.id}\n        editableFormRef={editableFormRef}\n        controlled\n        actionRef={actionRef}\n        maxLength={10}\n        name=\"table\"\n        columns={columns}\n        recordCreatorProps={{\n          creatorButtonText: <FormattedMessage id=\"CompetencyChallenges.addNewRow\" />,\n          disabled: editableKeys.length > 0,\n          record: (index) => ({ id: `new-${index}` } as DataSourceType),\n        }}\n        editable={{\n          onlyOneLineEditorAlertMessage: intl.formatMessage({\n            id: 'CompetencyChallenges.onlyOneRowIsEditable',\n          }),\n          onSave: async (_k, { scale_min, category_id, ...record }) => {\n            if (typeof record.id !== 'string') return;\n\n            const [state, idStr] = record.id.split('-');\n            if (state === 'new') {\n              const res = await createCompetencyChallengeScale({\n                scale_min,\n                category_id,\n                competency_challenge_id,\n              });\n\n              if (res.success) {\n                onScaleAdd?.();\n              }\n\n              return;\n            }\n\n            const res = await updateCompetencyChallengeScale(+idStr, {\n              scale_min,\n              category_id,\n              competency_challenge_id,\n            });\n            if (res.success) {\n              onScaleUpdate?.();\n            }\n            return;\n          },\n          deletePopconfirmMessage: <FormattedMessage id=\"deleteQuestion\" />,\n          actionRender: (record, _c, dom) => {\n            if (typeof record.id !== 'string') return [];\n\n            const [state] = record.id.split('-');\n            if (state === 'new') return [dom.save, dom.delete];\n\n            return [dom.save, dom.cancel];\n          },\n          type: 'single',\n          editableKeys,\n          onChange: setEditableRowKeys,\n        }}\n      />\n    </ProForm>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { useIntl, FormattedMessage } from 'umi';\nimport { Divider, Space, Spin } from 'antd';\nimport ProForm, { ProFormDigit, ProFormGroup } from '@ant-design/pro-form';\n\nimport { Table } from '@/components/GiftQuizQuestions/table';\nimport { getGiftQuiz, updateGiftQuiz } from '@/services/escola-lms/gift_quiz';\n\ninterface Props {\n  data?: API.CompetencyChallenge;\n}\n\ninterface FormData {\n  max_attempts: number;\n  max_execution_time: number;\n}\n\nexport const DiagnosticTest: React.FC<Props> = ({ data }) => {\n  const [loading, setLoading] = useState(false);\n  const [quizData, setQuizData] = useState<API.GiftQuiz>();\n  const intl = useIntl();\n\n  const fetchQuiz = useCallback(() => {\n    if (data?.quiz_id === undefined) return;\n\n    setLoading(true);\n    getGiftQuiz(data?.quiz_id)\n      .then((res) => {\n        if (res.success) {\n          setQuizData(res.data);\n        }\n      })\n      .finally(() => setLoading(false));\n  }, [data?.quiz_id]);\n\n  const onFormFinish = useCallback(async (formData: FormData) => {\n    if (data?.quiz_id === undefined) return;\n\n    setLoading(true);\n    updateGiftQuiz(data?.quiz_id, { ...formData, value: 'diagnostic-test' })\n      .then((res) => {\n        if (res.success) {\n          setQuizData(res.data);\n        }\n      })\n      .finally(() => setLoading(false));\n  }, []);\n\n  useEffect(() => {\n    fetchQuiz();\n  }, [fetchQuiz]);\n\n  if (!quizData) return <Spin />;\n\n  return (\n    <div style={{ position: 'relative', paddingBottom: '64px' }}>\n      <ProForm<FormData>\n        submitter={{\n          render: (_p, [reset, submit]) => (\n            <Space style={{ position: 'absolute', bottom: 0, left: 0 }}>\n              {reset}\n              {submit}\n            </Space>\n          ),\n        }}\n        initialValues={quizData}\n        onFinish={onFormFinish}\n      >\n        <ProFormGroup>\n          <ProFormDigit\n            name=\"max_attempts\"\n            label={<FormattedMessage id=\"max_attempts\" />}\n            tooltip={<FormattedMessage id=\"max_attempts\" />}\n            placeholder={intl.formatMessage({\n              id: 'max_attempts',\n              defaultMessage: 'max_attempts',\n            })}\n          />\n          <ProFormDigit\n            name=\"max_execution_time\"\n            label={<FormattedMessage id=\"max_execution_time\" />}\n            tooltip={<FormattedMessage id=\"max_execution_time\" />}\n            placeholder={intl.formatMessage({\n              id: 'max_execution_time',\n              defaultMessage: 'max_execution_time',\n            })}\n          />\n        </ProFormGroup>\n      </ProForm>\n      <Divider />\n      <Table\n        questions={quizData.questions}\n        quizId={quizData.id}\n        onAdded={fetchQuiz}\n        onEdited={fetchQuiz}\n        onRemoved={fetchQuiz}\n        tableHeader={<FormattedMessage id=\"questions\" />}\n        tableLoading={loading}\n        questionsCategory={{ disabledDepth: 1 }}\n      />\n    </div>\n  );\n};\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { useParams, history, FormattedMessage, useIntl } from 'umi';\nimport { Spin } from 'antd';\nimport { PageContainer } from '@ant-design/pro-layout';\nimport ProCard from '@ant-design/pro-card';\n\nimport { getCompetencyChallenge } from '@/services/escola-lms/competency-challenges';\nimport { MainForm } from './components/MainForm';\nimport { Scales } from './components/Scales';\nimport { DiagnosticTest } from './components/DiagnosticTest';\n\nconst CompetencyChallenge: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const [data, setData] = useState<API.CompetencyChallenge>();\n\n  const intl = useIntl();\n  const { id, tab = 'main' } = useParams<{ id?: string; tab?: string }>();\n  const isNew = id === 'new';\n  const competency_challenge_id = Number(id);\n\n  const pageTitle = useMemo(() => {\n    if (isNew) return intl.formatMessage({ id: 'CompetencyChallenges.new_challenge' });\n    if (data?.name) return data.name;\n\n    return intl.formatMessage({ id: 'menu.Competency challenges' });\n  }, [intl, data?.name]);\n\n  const fetchData = useCallback(() => {\n    if (Number.isNaN(competency_challenge_id)) return;\n\n    setLoading(true);\n    getCompetencyChallenge(competency_challenge_id)\n      .then((res) => {\n        if (res.success) {\n          setData(res.data);\n        }\n      })\n      .finally(() => setLoading(false));\n  }, [competency_challenge_id]);\n\n  useEffect(() => {\n    fetchData();\n  }, [fetchData]);\n\n  return (\n    <PageContainer\n      title={pageTitle}\n      header={{\n        breadcrumb: {\n          routes: [\n            {\n              path: 'competency-challenges',\n              breadcrumbName: intl.formatMessage({\n                id: 'menu.Competency challenges',\n              }),\n            },\n            {\n              path: String(id),\n              breadcrumbName: pageTitle,\n            },\n            {\n              path: tab,\n              breadcrumbName: intl.formatMessage({ id: `CompetencyChallenges.${tab}` }),\n            },\n          ],\n        },\n      }}\n    >\n      <ProCard\n        bodyStyle={{ padding: '24px' }}\n        tabs={{\n          type: 'card',\n          cardProps: { loading: loading && <Spin /> },\n          activeKey: tab,\n          onChange: (key) => {\n            history.push(`/competency-challenges/${id}/${key}`);\n          },\n        }}\n      >\n        <ProCard.TabPane key=\"main\" tab={<FormattedMessage id=\"CompetencyChallenges.main\" />}>\n          <MainForm\n            competency_challenge_id={competency_challenge_id}\n            data={data}\n            onUpdateSuccess={fetchData}\n          />\n        </ProCard.TabPane>\n        <ProCard.TabPane\n          key=\"scales\"\n          tab={<FormattedMessage id=\"CompetencyChallenges.scales\" />}\n          disabled={isNew}\n        >\n          <Scales\n            competency_challenge_id={competency_challenge_id}\n            scales={data?.scales ?? []}\n            onScaleDelete={fetchData}\n            onScaleAdd={fetchData}\n            onScaleUpdate={fetchData}\n          />\n        </ProCard.TabPane>\n        <ProCard.TabPane\n          key=\"diagnostic-test\"\n          tab={<FormattedMessage id=\"CompetencyChallenges.diagnostic-test\" />}\n          disabled={isNew}\n        >\n          <DiagnosticTest data={data} />\n        </ProCard.TabPane>\n      </ProCard>\n    </PageContainer>\n  );\n};\n\nexport default CompetencyChallenge;\n","import { request } from 'umi';\nimport type { RequestOptionsInit } from 'umi-request';\n\n/**  GET /api/admin/competency-challenges */\nexport async function getCompetencyChallenges(\n  params?: API.CompetencyChallengesParams,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultMetaResponse<API.CompetencyChallenge>>(\n    `/api/admin/competency-challenges`,\n    {\n      method: 'GET',\n      /* useCache: true */ useCache: false,\n      params,\n      ...(options || {}),\n    },\n  );\n}\n\n/** GET /api/admin/competency-challenges/:competency_challenge_id */\nexport async function getCompetencyChallenge(\n  competency_challenge_id: number,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.CompetencyChallenge>>(\n    `/api/admin/competency-challenges/${competency_challenge_id}`,\n    {\n      method: 'GET',\n      /* useCache: true */ useCache: false,\n      ...(options || {}),\n    },\n  );\n}\n\n/** POST /api/admin/competency-challenges */\nexport async function createCompetencyChallenge(\n  body: API.CreateCompetencyChallenge,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.CompetencyChallenge>>(`/api/admin/competency-challenges`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    data: body,\n    ...(options || {}),\n  });\n}\n\n/** PUT /api/admin/competency-challenges/:competency_challenge_id */\nexport async function updateCompetencyChallenge(\n  competency_challenge_id: number,\n  body: API.UpdateCompetencyChallenge,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.CompetencyChallenge>>(\n    `/api/admin/competency-challenges/${competency_challenge_id}`,\n    {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      data: body,\n      ...(options || {}),\n    },\n  );\n}\n\n/**  DELETE /api/admin/competency-challenges/:competency_challenge_id */\nexport async function deleteCompetencyChallenge(\n  competency_challenge_id: number,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DeleteResponse>(\n    `/api/admin/competency-challenges/${competency_challenge_id}`,\n    {\n      method: 'DELETE',\n      ...(options || {}),\n    },\n  );\n}\n\n/** POST /api/admin/competency-challenges/scales */\nexport async function createCompetencyChallengeScale(\n  body: API.CreateCompetencyChallengeScale,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.CompetencyChallengeScale>>(\n    `/api/admin/competency-challenges/scales`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      data: body,\n      ...(options || {}),\n    },\n  );\n}\n\n/** PATCH /api/admin/competency-challenges/scales/:competency_challenge_scale_id */\nexport async function updateCompetencyChallengeScale(\n  competency_challenge_scale_id: number,\n  body: API.CreateCompetencyChallengeScale,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.CompetencyChallengeScale>>(\n    `/api/admin/competency-challenges/scales/${competency_challenge_scale_id}`,\n    {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      data: body,\n      ...(options || {}),\n    },\n  );\n}\n\n/**  DELETE /api/admin/competency-challenges/scales/:competency_challenge_scale_id */\nexport async function deleteCompetencyChallengeScale(\n  competency_challenge_scale_id: number,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DeleteResponse>(\n    `/api/admin/competency-challenges/scales/${competency_challenge_scale_id}`,\n    {\n      method: 'DELETE',\n      ...(options || {}),\n    },\n  );\n}\n","import React from 'react';\nimport RichMarkdownEditor2 from 'traverse-markdown-editor';\nimport { upload, resizedImage } from '@/services/escola-lms/files';\nimport './index.css';\nimport { useIntl } from 'umi';\n\ninterface FormWysiwygProps {\n  value?: string;\n  defaultValue?: string;\n  onChange?: (value: string) => void;\n  directory?: string;\n}\n\nexport const EmbedUploaded: React.FC<{ attrs: { href: string } }> = ({ attrs }) => {\n  const href = attrs.href;\n  const filename = href.split('/').pop();\n  return (\n    <p>\n      <a rel=\"noreferrer\" href={href} target=\"_blank\">\n        {filename}\n      </a>\n    </p>\n  );\n};\n\nexport const FormWysiwyg: React.FC<FormWysiwygProps> = ({\n  value,\n  onChange,\n  directory = '/wysiwyg',\n}) => {\n  const intl = useIntl();\n\n  return (\n    <div className=\"form-wysiwyg-markdown\">\n      <RichMarkdownEditor2\n        excludeBlockMenuItems={['Sketch']}\n        embeds={[\n          {\n            matcher: (url) => {\n              return true;\n            },\n            component: EmbedUploaded,\n          },\n        ]}\n        uploadImage={async (file) => {\n          const result = await upload(file, directory);\n\n          if (result.success) {\n            if (file.type.includes('image/')) {\n              const resizePath = result.data[0].name.includes('/')\n                ? result.data[0].name\n                : `${directory}${result.data[0].name}`;\n              return resizedImage(resizePath, 1000);\n            }\n            return result.data[0].url;\n          }\n          throw new Error('Error while uploading');\n        }}\n        defaultValue={value || ''}\n        onChange={(v) => onChange && onChange(v())}\n        placeholder={intl.formatMessage({\n          id: 'wysiwyg_placeholder',\n        })}\n      />\n    </div>\n  );\n};\n\nexport default FormWysiwyg;\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'umi';\nimport { Button, Tooltip } from 'antd';\nimport ProForm, {\n  ProFormCheckbox,\n  ProFormDigit,\n  ProFormList,\n  ProFormText,\n} from '@ant-design/pro-form';\nimport { DeleteOutlined } from '@ant-design/icons';\n\nimport { QuestionType } from '@/services/escola-lms/enums';\n\nconst INITIAL_VALUES = {\n  [QuestionType.MULTIPLE_CHOICE]: [\n    { isCorrect: false, value: '' },\n    { isCorrect: false, value: '' },\n  ],\n  [QuestionType.MULTIPLE_CHOICE_WITH_MULTIPLE_RIGHT_ANSWERS]: [\n    { value: '', weight: '' },\n    { value: '', weight: '' },\n  ],\n};\n\ninterface Props {\n  type: QuestionType.MULTIPLE_CHOICE | QuestionType.MULTIPLE_CHOICE_WITH_MULTIPLE_RIGHT_ANSWERS;\n}\n\nexport const GiftQuizQuestionMultipleChoiceEditor: React.FC<Props> = ({ type }) => {\n  const intl = useIntl();\n\n  return (\n    <>\n      <ProFormText\n        name=\"question\"\n        label={<FormattedMessage id=\"question\" />}\n        rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n        required\n      />\n      <ProFormList\n        name=\"answers\"\n        creatorButtonProps={{\n          creatorButtonText: intl.formatMessage({ id: 'Questions.addAnswer' }),\n        }}\n        actionRender={() => []}\n        initialValue={INITIAL_VALUES[type] ?? []}\n      >\n        {(field, i, action, count) => (\n          <ProForm.Group\n            title={\n              <>\n                <FormattedMessage id=\"Questions.answer\" values={{ ordinalNumber: i + 1 }} />\n                {count > 2 && (\n                  <Tooltip title={intl.formatMessage({ id: 'Questions.deleteAnswer' })}>\n                    <Button\n                      type=\"text\"\n                      icon={<DeleteOutlined />}\n                      onClick={() => action.remove(field.name)}\n                    />\n                  </Tooltip>\n                )}\n              </>\n            }\n            titleStyle={{ width: '100%', display: 'flex', justifyContent: 'space-between' }}\n          >\n            {type === QuestionType.MULTIPLE_CHOICE && (\n              <ProFormCheckbox\n                name=\"isCorrect\"\n                label={\n                  <FormattedMessage\n                    id=\"Questions.correctAnswer\"\n                    defaultMessage=\"Is Correct Answer?\"\n                  />\n                }\n                rules={[\n                  ({ getFieldValue }) => ({\n                    validator: () => {\n                      const answers = getFieldValue('answers') ?? [];\n                      if (\n                        answers.filter((answer: { isCorrect: boolean }) => answer?.isCorrect)\n                          .length > 1\n                      ) {\n                        return Promise.reject('Only one answer can be correct');\n                      }\n\n                      return Promise.resolve();\n                    },\n                    message: <FormattedMessage id=\"Questions.onlyOneAnswerIsCorrect\" />,\n                  }),\n                ]}\n              />\n            )}\n            <ProFormText\n              name=\"value\"\n              rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n              label={<FormattedMessage id=\"content\" defaultMessage=\"Content\" />}\n            />\n            {type === QuestionType.MULTIPLE_CHOICE_WITH_MULTIPLE_RIGHT_ANSWERS && (\n              <ProFormDigit\n                name=\"weight\"\n                rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n                fieldProps={{ min: -Number.MAX_SAFE_INTEGER, addonAfter: '%' }}\n                label={<FormattedMessage id=\"weight\" defaultMessage=\"Weight\" />}\n              />\n            )}\n          </ProForm.Group>\n        )}\n      </ProFormList>\n    </>\n  );\n};\n","import React from 'react';\nimport { FormattedMessage } from 'umi';\nimport { ProFormCheckbox, ProFormText } from '@ant-design/pro-form';\n\nexport const GiftQuizQuestionTrueFalseEditor: React.FC = () => (\n  <>\n    <ProFormText\n      name=\"question\"\n      label={<FormattedMessage id=\"question\" />}\n      rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n      required\n    />\n    <ProFormCheckbox name=\"isCorrect\" label={<FormattedMessage id=\"Questions.correctAnswer\" />} />\n  </>\n);\n","import React from 'react';\nimport { useIntl, FormattedMessage } from 'umi';\nimport { ProFormList, ProFormText } from '@ant-design/pro-form';\n\nconst INITIAL_VALUES = [{ value: '' }];\n\nexport const GiftQuizQuestionShortEditor: React.FC = () => {\n  const intl = useIntl();\n\n  return (\n    <>\n      <ProFormText\n        name=\"question\"\n        label={<FormattedMessage id=\"question\" />}\n        rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n        required\n      />\n      <ProFormList\n        name=\"answers\"\n        creatorButtonProps={{\n          creatorButtonText: intl.formatMessage({ id: 'Questions.addAnswer' }),\n        }}\n        deleteIconProps={{ tooltipText: intl.formatMessage({ id: 'Questions.deleteAnswer' }) }}\n        actionRender={(_f, _a, [, deleteButton]) => [deleteButton]}\n        min={1}\n        initialValue={INITIAL_VALUES}\n      >\n        {(_f, i) => (\n          <ProFormText\n            name=\"value\"\n            rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n            label={\n              <FormattedMessage\n                id=\"Questions.answer\"\n                values={{ ordinalNumber: i + 1 }}\n                defaultMessage={`Answer ${i + 1}`}\n              />\n            }\n          />\n        )}\n      </ProFormList>\n    </>\n  );\n};\n","import React from 'react';\nimport { FormattedMessage, useIntl } from 'umi';\nimport ProForm, { ProFormList, ProFormText } from '@ant-design/pro-form';\n\nconst INITIAL_VALUES = [\n  {\n    firstOfPair: '',\n    secondOfPair: '',\n  },\n];\n\nexport const GiftQuizQuestionMatchingEditor: React.FC = () => {\n  const intl = useIntl();\n\n  return (\n    <>\n      <ProFormText\n        name=\"question\"\n        label={<FormattedMessage id=\"question\" />}\n        rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n        required\n      />\n      <ProFormList\n        name=\"answers\"\n        creatorButtonProps={{\n          creatorButtonText: intl.formatMessage({\n            id: 'Questions.addMatchingPair',\n            defaultMessage: 'Add Matching Pair',\n          }),\n        }}\n        deleteIconProps={{ tooltipText: intl.formatMessage({ id: 'Questions.deletePair' }) }}\n        actionRender={(_f, _a, [, deleteButton]) => [deleteButton]}\n        min={1}\n        initialValue={INITIAL_VALUES}\n      >\n        {(_f, i) => (\n          <ProForm.Group\n            direction=\"horizontal\"\n            align=\"baseline\"\n            size=\"small\"\n            spaceProps={{ style: { flexWrap: 'nowrap' } }}\n            title={\n              <FormattedMessage\n                id=\"Questions.pair\"\n                values={{ ordinalNumber: i + 1 }}\n                defaultMessage={`Pair ${i + 1}`}\n              />\n            }\n          >\n            <ProFormText\n              name=\"firstOfPair\"\n              rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n            />\n            <ProFormText\n              name=\"secondOfPair\"\n              rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n            />\n          </ProForm.Group>\n        )}\n      </ProFormList>\n    </>\n  );\n};\n","import React from 'react';\nimport { FormattedMessage } from 'umi';\nimport { ProFormDigit, ProFormText } from '@ant-design/pro-form';\n\nexport const GiftQuizQuestionNumericalEditor: React.FC = () => (\n  <>\n    <ProFormText\n      name=\"question\"\n      label={<FormattedMessage id=\"question\" />}\n      rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n      required\n    />\n    <ProFormDigit\n      name=\"answer\"\n      label={<FormattedMessage id=\"answer\" />}\n      rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n      required\n    />\n    <ProFormDigit\n      name=\"errorMargin\"\n      fieldProps={{ addonAfter: '+/-' }}\n      label={<FormattedMessage id=\"Questions.errorMargin\" />}\n      rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n      required\n    />\n  </>\n);\n","import React from 'react';\nimport { FormattedMessage } from 'umi';\nimport { ProFormTextArea } from '@ant-design/pro-form';\n\nexport const GiftQuizQuestionEssayEditor: React.FC = () => (\n  <ProFormTextArea\n    name=\"question\"\n    label={<FormattedMessage id=\"question\" />}\n    rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n    required\n  />\n);\n","import React from 'react';\n\nimport { QuestionType } from '@/services/escola-lms/enums';\nimport { GiftQuizQuestionMultipleChoiceEditor } from './MultipleChoice';\nimport { GiftQuizQuestionTrueFalseEditor } from './TrueFalse';\nimport { GiftQuizQuestionShortEditor } from './ShortAnswers';\nimport { GiftQuizQuestionMatchingEditor } from './Matching';\nimport { GiftQuizQuestionNumericalEditor } from './Numerical';\nimport { GiftQuizQuestionEssayEditor } from './Essay';\n\ninterface Props {\n  type: QuestionType | undefined;\n}\n\nexport const GiftQuizQuestion: React.FC<Props> = ({ type }) => {\n  if (!type) return null;\n\n  switch (type) {\n    case QuestionType.MULTIPLE_CHOICE:\n    case QuestionType.MULTIPLE_CHOICE_WITH_MULTIPLE_RIGHT_ANSWERS:\n      return <GiftQuizQuestionMultipleChoiceEditor type={type} />;\n    case QuestionType.TRUE_FALSE:\n      return <GiftQuizQuestionTrueFalseEditor />;\n    case QuestionType.SHORT_ANSWERS:\n      return <GiftQuizQuestionShortEditor />;\n    case QuestionType.MATCHING:\n      return <GiftQuizQuestionMatchingEditor />;\n    case QuestionType.NUMERICAL_QUESTION:\n      return <GiftQuizQuestionNumericalEditor />;\n    case QuestionType.ESSAY:\n    case QuestionType.DESCRIPTION:\n      return <GiftQuizQuestionEssayEditor />;\n  }\n\n  return <pre>Unsupported type {type}</pre>;\n};\n","import { parse } from '@escolalms/gift-pegjs';\nimport type {\n  Description,\n  Essay,\n  Matching,\n  Numerical,\n  ShortAnswer,\n  TrueFalse,\n  MultipleChoice,\n} from '@escolalms/gift-pegjs';\n\nimport { QuestionType } from '@/services/escola-lms/enums';\nimport type {\n  DescriptionFormData,\n  EssayFormData,\n  GiftQuizFormData,\n  MatchingFormData,\n  MultipleChoiceFormData,\n  MultipleChoiceWithMultipleRightAnswersFormData,\n  NumericalFormData,\n  ShortAnswersFormData,\n  TrueFalseFormData,\n} from './types';\n\nconst parseMultipleChoice = ({ question, answers }: MultipleChoiceFormData): string => {\n  if (answers.length === 0) return `${question}{}`;\n\n  let giftString = `${question}{`;\n\n  for (const { isCorrect, value } of answers) {\n    const sign = isCorrect ? '=' : '~';\n\n    giftString += `${sign}${value}`;\n  }\n\n  giftString += '}';\n\n  return giftString.trim();\n};\n\nconst parseMultipleChoiceWithMultipleRightAnswers = ({\n  question,\n  answers,\n}: MultipleChoiceWithMultipleRightAnswersFormData): string => {\n  if (answers.length == 0) return `${question}{}`;\n\n  let giftString = `${question}{`;\n\n  for (const { value, weight } of answers) {\n    giftString += `~%${weight}%${value}`;\n  }\n\n  giftString += '}';\n\n  return giftString.trim();\n};\n\nconst parseTrueFalse = ({ question, isCorrect }: TrueFalseFormData): string =>\n  `${question}{${isCorrect ? 'T' : 'F'}}`;\n\nconst parseShortAnswers = ({ question, answers }: ShortAnswersFormData): string => {\n  if (answers.length === 0) return `${question}{}`;\n\n  let giftString = `${question}{`;\n\n  for (const { value } of answers) {\n    giftString += `=${value}`;\n  }\n\n  giftString += '}';\n\n  return giftString.trim();\n};\n\nconst parseMatching = ({ question, answers }: MatchingFormData): string => {\n  if (answers.length === 0) return `${question}{}`;\n\n  let giftString = `${question}{`;\n\n  for (const { firstOfPair, secondOfPair } of answers) {\n    giftString += `=${firstOfPair}->${secondOfPair}`;\n  }\n\n  giftString += '}';\n\n  return giftString.trim();\n};\n\nconst parseNumerical = ({ question, answer, errorMargin }: NumericalFormData): string =>\n  `${question}{#${answer}:${errorMargin}}`;\n\nconst parseEssay = ({ question }: EssayFormData): string => `${question}{}`;\n\nconst parseDescription = ({ question }: DescriptionFormData): string => question;\n\nexport const parseToGIFT = (formData: GiftQuizFormData): string => {\n  switch (formData.type) {\n    case QuestionType.MULTIPLE_CHOICE:\n      return parseMultipleChoice(formData);\n    case QuestionType.MULTIPLE_CHOICE_WITH_MULTIPLE_RIGHT_ANSWERS:\n      return parseMultipleChoiceWithMultipleRightAnswers(formData);\n    case QuestionType.TRUE_FALSE:\n      return parseTrueFalse(formData);\n    case QuestionType.SHORT_ANSWERS:\n      return parseShortAnswers(formData);\n    case QuestionType.MATCHING:\n      return parseMatching(formData);\n    case QuestionType.NUMERICAL_QUESTION:\n      return parseNumerical(formData);\n    case QuestionType.ESSAY:\n      return parseEssay(formData);\n    case QuestionType.DESCRIPTION:\n      return parseDescription(formData);\n    default:\n      throw new Error(`Unsupported type: ${(formData as GiftQuizFormData).type}`);\n  }\n};\n\nconst parseMultipleChoiceToFormData = (\n  parsedValue: MultipleChoice,\n  { type, score, category_id }: API.QuizQuestion,\n): MultipleChoiceFormData | MultipleChoiceWithMultipleRightAnswersFormData => {\n  const question = parsedValue?.stem.text;\n\n  const isMultipleChoice = parsedValue.choices.every(({ weight }) => weight === null);\n\n  if (isMultipleChoice) {\n    const answers: MultipleChoiceFormData['answers'] = parsedValue.choices.map(\n      ({ isCorrect, text }) => ({\n        isCorrect,\n        value: text.text,\n      }),\n    );\n\n    return { type, score, category_id, question, answers };\n  }\n\n  const answers = parsedValue.choices.reduce<\n    MultipleChoiceWithMultipleRightAnswersFormData['answers']\n  >(\n    (acc, { weight, text }) => (weight !== null ? [...acc, { weight, value: text.text }] : acc),\n    [],\n  );\n\n  return { type, score, category_id, question, answers };\n};\n\nconst parseTrueFalseToFormData = (\n  parsedValue: TrueFalse,\n  { type, score, category_id }: API.QuizQuestion,\n): TrueFalseFormData => {\n  const question = parsedValue?.stem.text;\n  const isCorrect = parsedValue.isTrue;\n\n  return { type, score, category_id, question, isCorrect };\n};\n\nconst parseShortAnswersToFormData = (\n  parsedValue: ShortAnswer,\n  { type, score, category_id }: API.QuizQuestion,\n): ShortAnswersFormData => {\n  const question = parsedValue?.stem.text;\n\n  const answers: ShortAnswersFormData['answers'] = parsedValue.choices.map(({ text }) => ({\n    value: text.text,\n  }));\n\n  return { type, score, category_id, question, answers };\n};\n\nconst parseMatchingToFormData = (\n  parsedValue: Matching,\n  { type, score, category_id }: API.QuizQuestion,\n): MatchingFormData => {\n  const question = parsedValue?.stem.text;\n  const answers: MatchingFormData['answers'] = parsedValue.matchPairs.map(\n    ({ subquestion, subanswer }) => ({ firstOfPair: subquestion.text, secondOfPair: subanswer }),\n  );\n\n  return { type, score, category_id, question, answers };\n};\n\nconst parseNumericalToFormData = (\n  parsedValue: Numerical,\n  { type, score, category_id }: API.QuizQuestion,\n): NumericalFormData => {\n  const question = parsedValue?.stem.text;\n\n  // TODO\n  if (Array.isArray(parsedValue?.choices)) {\n    throw new Error('Unsupported choices type: array');\n  }\n\n  const answer = parsedValue?.choices.number;\n  const errorMargin = parsedValue?.choices.range;\n\n  if (answer === undefined || errorMargin === undefined) {\n    throw new Error(`Value undefined - answer: ${answer} errorMargin: ${errorMargin}`);\n  }\n\n  return { type, score, category_id, question, answer, errorMargin };\n};\n\nconst parseDescriptionEssayToFormData = (\n  parsedValue: Description | Essay,\n  { type, score, category_id }: API.QuizQuestion,\n): DescriptionFormData | EssayFormData => {\n  const question = parsedValue?.stem.text;\n\n  return { type, score, category_id, question };\n};\n\nexport function parseToFormData(\n  questionBase: API.QuizQuestion | undefined,\n): GiftQuizFormData | undefined {\n  if (!questionBase) return;\n\n  const [parsedValue] = parse(questionBase.value);\n\n  switch (parsedValue.type) {\n    case 'MC':\n      return parseMultipleChoiceToFormData(parsedValue, questionBase);\n    case 'TF':\n      return parseTrueFalseToFormData(parsedValue, questionBase);\n    case 'Short':\n      return parseShortAnswersToFormData(parsedValue, questionBase);\n    case 'Matching':\n      return parseMatchingToFormData(parsedValue, questionBase);\n    case 'Numerical':\n      return parseNumericalToFormData(parsedValue, questionBase);\n    case 'Description':\n    case 'Essay':\n      return parseDescriptionEssayToFormData(parsedValue, questionBase);\n    default:\n      throw new Error(`Unsupported type: ${parsedValue?.type}`);\n  }\n}\n","import React, { useCallback, useEffect, useMemo } from 'react';\nimport { FormattedMessage, useIntl } from 'umi';\nimport { Space, Divider } from 'antd';\nimport ProForm, { ProFormDigit, ProFormSelect } from '@ant-design/pro-form';\n\nimport { QuestionType } from '@/services/escola-lms/enums';\nimport CategoryTree, { type CategoryTreeProps } from '@/components/CategoryTree';\nimport { GiftQuizQuestion } from './question';\nimport type { QuizQuestionSubmitData, GiftQuizFormData } from './types';\nimport { parseToFormData, parseToGIFT } from './utils';\n\nconst VALUES_NOT_TO_RESET = ['type', 'score', 'category'];\n\nconst TYPE_OPTIONS = Object.values(QuestionType).reduce<\n  { value: QuestionType; label: React.ReactNode }[]\n>(\n  (acc, q) => (q ? [...acc, { value: q, label: <FormattedMessage id={`gift_type.${q}`} /> }] : acc),\n  [],\n);\n\ninterface Props {\n  onSubmit: (quizQuestion: QuizQuestionSubmitData) => Promise<boolean>;\n  values?: API.QuizQuestion;\n  categoryProps?: boolean | Omit<CategoryTreeProps, 'value' | 'onChange'>;\n}\n\nexport const GiftQuizQuestionEditor: React.FC<Props> = ({\n  onSubmit,\n  values,\n  categoryProps = false,\n}) => {\n  const intl = useIntl();\n\n  const [form] = ProForm.useForm<GiftQuizFormData>();\n  const type: API.QuestionType | undefined = ProForm.useWatch('type', form);\n\n  const initialValues = useMemo(() => parseToFormData(values), [values]);\n\n  const onFinish = useCallback(async (formData: GiftQuizFormData) => {\n    const value = parseToGIFT(formData);\n\n    const { score, category_id } = formData;\n    const status = await onSubmit({ value, score, category_id });\n\n    if (!status) {\n      return;\n    }\n\n    form.resetFields();\n  }, []);\n\n  useEffect(() => {\n    form.resetFields();\n  }, [initialValues]);\n\n  useEffect(() => {\n    if (type) {\n      const fields = form.getFieldsValue();\n      const fieldsToReset = Object.keys(fields).filter((key) => !VALUES_NOT_TO_RESET.includes(key));\n\n      form.resetFields(fieldsToReset);\n    }\n  }, [type]);\n\n  return (\n    <Space direction=\"vertical\" style={{ display: 'flex' }}>\n      <Divider>\n        <FormattedMessage id={initialValues ? 'Questions.edit' : 'addNewQuestion'} />\n      </Divider>\n      <ProForm layout=\"horizontal\" form={form} onFinish={onFinish} initialValues={initialValues}>\n        <ProFormSelect\n          name=\"type\"\n          placeholder={intl.formatMessage({\n            id: 'selectNewQuestionType',\n            defaultMessage: 'Select new question type',\n          })}\n          label={<FormattedMessage id=\"type\" defaultMessage=\"Type:\" />}\n          options={TYPE_OPTIONS}\n          rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n          required\n        />\n        <GiftQuizQuestion type={type} />\n        <ProFormDigit\n          name=\"score\"\n          label={<FormattedMessage id=\"Questions.score\" defaultMessage=\"Score\" />}\n          rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n        />\n        {categoryProps && (\n          <ProForm.Item\n            name=\"category_id\"\n            label={<FormattedMessage id=\"category\" defaultMessage=\"Category\" />}\n            rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n            required\n          >\n            <CategoryTree {...(typeof categoryProps === 'object' ? categoryProps : {})} />\n          </ProForm.Item>\n        )}\n      </ProForm>\n    </Space>\n  );\n};\n","import React, { useState, useCallback, useRef, useEffect } from 'react';\nimport { FormattedMessage } from 'umi';\nimport { SortableContainer, SortableElement, SortableHandle } from 'react-sortable-hoc';\nimport { arrayMoveImmutable } from 'array-move';\nimport { parse } from '@escolalms/gift-pegjs';\nimport { Button, Drawer, Typography, Switch } from 'antd';\nimport { MenuOutlined, PlusCircleOutlined } from '@ant-design/icons';\nimport { ProTable } from '@ant-design/pro-table';\nimport type { ProColumns, ActionType } from '@ant-design/pro-table';\n\nimport TypeButtonDrawer from '@/components/TypeButtonDrawer';\nimport type { CategoryTreeProps } from '@/components/CategoryTree';\nimport { createQuestion, deleteQuestion, updateQuestion } from '@/services/escola-lms/gift_quiz';\nimport { GiftQuizQuestionEditor } from './editor';\nimport type { QuizQuestionSubmitData } from './editor/types';\nimport './index.css';\n\nconst DragHandle = SortableHandle(() => <MenuOutlined style={{ cursor: 'grab', color: '#999' }} />);\nconst SortableItem = SortableElement((props: React.HTMLAttributes<HTMLTableRowElement>) => (\n  <tr {...props} />\n));\nconst SortContainer = SortableContainer((props: React.HTMLAttributes<HTMLTableSectionElement>) => (\n  <tbody {...props} />\n));\n\nconst staticColumns: ProColumns<API.QuizQuestion>[] = [\n  {\n    title: <FormattedMessage id=\"sort\" defaultMessage=\"sort\" />,\n    dataIndex: 'id',\n    width: 60,\n    className: 'drag-visible',\n    render: () => <DragHandle />,\n  },\n  {\n    title: <FormattedMessage id=\"type\" defaultMessage=\"Type\" />,\n    dataIndex: 'type',\n    hideInForm: true,\n    hideInSearch: true,\n    hideInSetting: true,\n    render: (_, row) => <FormattedMessage id={`gift_type.${row.type}`} />,\n  },\n  {\n    title: <FormattedMessage id=\"question\" defaultMessage=\"Question\" />,\n    dataIndex: 'question',\n    hideInForm: true,\n    hideInSearch: true,\n    hideInSetting: true,\n    render: (_, row) => {\n      const obj = parse(row.value);\n\n      if (obj?.[0] && 'stem' in obj[0]) {\n        return obj[0].stem.text;\n      }\n      return 'question';\n    },\n  },\n];\n\nconst categoryColumn: ProColumns<API.QuizQuestion> = {\n  title: <FormattedMessage id=\"category\" defaultMessage=\"Category\" />,\n  dataIndex: 'category_id',\n  hideInForm: true,\n  hideInSearch: true,\n  hideInSetting: true,\n  render: (_, row) =>\n    typeof row.category_id === 'number' ? (\n      <TypeButtonDrawer type=\"Category\" type_id={row.category_id} />\n    ) : (\n      '-'\n    ),\n};\n\ninterface OnSortEndParams {\n  oldIndex: number;\n  newIndex: number;\n}\n\ninterface Props {\n  quizId: number;\n  questions: API.QuizQuestion[];\n  onAdded?: () => void;\n  onRemoved?: () => void;\n  onEdited?: () => void;\n  tableHeader?: React.ReactNode;\n  tableLoading?: boolean;\n  questionsCategory?: boolean | Omit<CategoryTreeProps, 'value' | 'onChange'>;\n}\n\nexport const Table: React.FC<Props> = ({\n  questions,\n  onAdded,\n  onRemoved,\n  onEdited,\n  quizId,\n  tableLoading,\n  tableHeader,\n  questionsCategory,\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [newQuestion, setNewQuestion] = useState(false);\n  const [editQuestion, setEditQuestion] = useState<API.QuizQuestion>();\n\n  const [debug, setDebug] = useState(false);\n\n  const [dataSource, setDataSource] = useState(questions);\n\n  const actionRef = useRef<ActionType>();\n\n  useEffect(() => {\n    actionRef.current?.reload();\n    setDataSource(questions);\n  }, [questions]);\n\n  const onSortEnd = ({ oldIndex, newIndex }: OnSortEndParams) => {\n    if (oldIndex !== newIndex) {\n      const newData = arrayMoveImmutable(dataSource.slice(), oldIndex, newIndex)\n        .filter(Boolean)\n        .map((row, index) => ({ ...row, order: index }));\n\n      newData.forEach((newRow, index) => {\n        if (newRow.id !== dataSource[index].id) {\n          updateQuestion(newRow.id, { ...newRow, order: index + 1, topic_gift_quiz_id: quizId });\n        }\n      });\n\n      setDataSource(newData);\n    }\n  };\n\n  // TODO types & refactor https://react.dev/learn/your-first-component#nesting-and-organizing-components\n  const DraggableContainer = (props: any) => (\n    <SortContainer\n      useDragHandle\n      disableAutoscroll\n      helperClass=\"row-dragging\"\n      onSortEnd={onSortEnd}\n      {...props}\n    />\n  );\n\n  // TODO types & refactor https://react.dev/learn/your-first-component#nesting-and-organizing-components\n  const DraggableBodyRow = (props: any) => {\n    const { className, style, ...restProps } = props;\n    // function findIndex base on Table rowKey props and should always be a right array index\n    const index = dataSource.findIndex((x) => x.id === restProps['data-row-key']);\n    return <SortableItem index={index} {...restProps} />;\n  };\n\n  const onNewQuestionSubmit = useCallback(\n    async (data: QuizQuestionSubmitData) => {\n      try {\n        setLoading(true);\n\n        const response = await createQuestion({ topic_gift_quiz_id: quizId, ...data });\n        setNewQuestion(false);\n        onAdded?.();\n        return response.success;\n      } catch (err) {\n        console.log(err);\n        return false;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [newQuestion, quizId],\n  );\n\n  const onEditQuestionSubmit = useCallback(\n    async (data: QuizQuestionSubmitData) => {\n      if (editQuestion?.id === undefined) return false;\n\n      try {\n        setLoading(true);\n\n        const response = await updateQuestion(editQuestion.id, {\n          topic_gift_quiz_id: quizId,\n          ...data,\n        });\n        setEditQuestion(undefined);\n        onEdited?.();\n        return response.success;\n      } catch (err) {\n        console.log(err);\n        return false;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [editQuestion?.id, quizId],\n  );\n\n  return (\n    <>\n      <Drawer open={newQuestion} onClose={() => setNewQuestion(false)}>\n        <GiftQuizQuestionEditor onSubmit={onNewQuestionSubmit} categoryProps={questionsCategory} />\n      </Drawer>\n      <Drawer open={!!editQuestion} onClose={() => setEditQuestion(undefined)}>\n        <GiftQuizQuestionEditor\n          onSubmit={onEditQuestionSubmit}\n          categoryProps={questionsCategory}\n          values={editQuestion}\n        />\n      </Drawer>\n      <ProTable\n        search={false}\n        cardProps={{ bodyStyle: { padding: 0 } }}\n        loading={tableLoading}\n        headerTitle={tableHeader}\n        toolbar={{ settings: [] }}\n        toolBarRender={() => [\n          <Button\n            key=\"add\"\n            icon={<PlusCircleOutlined />}\n            type=\"primary\"\n            onClick={() => setNewQuestion(true)}\n          >\n            {' '}\n            <FormattedMessage id=\"addNewQuestion\" defaultMessage=\"Add new question\" />\n          </Button>,\n        ]}\n        columns={[\n          ...staticColumns,\n          ...(questionsCategory ? [categoryColumn] : []),\n          {\n            title: <FormattedMessage id=\"actions\" defaultMessage=\"Actions\" />,\n            dataIndex: 'address',\n            valueType: 'option',\n            render: (_, row) => [\n              <Button\n                key=\"edit\"\n                size=\"small\"\n                type=\"primary\"\n                onClick={() => {\n                  setEditQuestion(row);\n                }}\n              >\n                <FormattedMessage id=\"Questions.edit\" defaultMessage=\"Edit Question\" />\n              </Button>,\n              <Button\n                loading={loading}\n                key=\"delete\"\n                size=\"small\"\n                danger\n                onClick={() => {\n                  setLoading(true);\n                  deleteQuestion(row.id)\n                    .then(() => {\n                      if (onRemoved) {\n                        onRemoved();\n                      }\n                    })\n                    .finally(() => {\n                      setLoading(false);\n                    });\n                }}\n              >\n                <FormattedMessage id=\"Questions.delete\" defaultMessage=\"Delete Question\" />\n              </Button>,\n            ],\n          },\n        ]}\n        rowKey={(record) => record.id}\n        pagination={false}\n        dataSource={dataSource}\n        components={{\n          body: {\n            wrapper: DraggableContainer,\n            row: DraggableBodyRow,\n          },\n        }}\n      />\n      <Typography style={{ marginTop: '3em' }}>\n        Debug GIFT: <Switch checked={debug} onChange={(v) => setDebug(v)} />\n      </Typography>\n    </>\n  );\n};\n"],"sourceRoot":""}