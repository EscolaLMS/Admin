{"version":3,"sources":["webpack:///./src/components/SemesterSelect/index.tsx","webpack:///./src/pages/TeacherSubjects/index.tsx"],"names":["SemesterSelect","value","onChange","onSelect","onDeselect","onClear","loading","disabled","multiple","useState","semesters","setSemesters","fetching","setFetching","cache","useRef","abortController","setSemestersFromResponse","useCallback","responseSemesters","prevSemesters","filter","semester","index","arr","findIndex","item","id","useEffect","current","fetch","academicYearID","abort","AbortController","fetchSemesters","signal","then","response","success","data","catch","onSearch","search","width","undefined","input","option","children","toString","toLowerCase","indexOf","map","name","TableColumns","hideInSearch","hideInTable","title","dataIndex","renderFormItem","form","type","defaultRender","rest","stateType","getFieldValue","render","_","record","groups","group","hideInForm","TableList","actionRef","intl","useIntl","formatMessage","defaultMessage","layout","pageSize","semester_id","semesterSubjects","per_page","page","total","meta","valueType"],"mappings":"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","file":"p__TeacherSubjects.4521b730.async.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Select, Spin } from 'antd';\nimport { semesters as fetchSemesters } from '@/services/escola-lms/semester_subject';\nimport { FormattedMessage } from 'umi';\nimport { useCallback } from 'react';\n\nexport const SemesterSelect: React.FC<{\n  state?: {\n    type: number;\n  };\n  multiple?: boolean;\n  value?: string | string[] | number | number[];\n  onChange?: (value: string | string[] | number | number[]) => void;\n  onSelect?: (value: string | number) => void;\n  onDeselect?: (value: string | number) => void;\n  onClear?: () => void;\n  loading?: boolean;\n  disabled?: boolean;\n}> = ({ value, onChange, onSelect, onDeselect, onClear, loading, disabled, multiple = false }) => {\n  const [semesters, setSemesters] = useState<API.Semester[]>([]);\n  const [fetching, setFetching] = useState(false);\n  const cache = useRef<API.Semester[]>();\n  const abortController = useRef<AbortController>();\n\n  const setSemestersFromResponse = useCallback((responseSemesters: API.Semester[]) => {\n    setSemesters((prevSemesters) =>\n      [...prevSemesters, ...responseSemesters].filter(\n        (semester, index, arr) => arr.findIndex((item) => item.id === semester.id) === index,\n      ),\n    );\n  }, []);\n\n  useEffect(() => {\n    cache.current = semesters;\n  }, [semesters]);\n\n  const fetch = useCallback(\n    (academicYearID?: string) => {\n      setFetching(true);\n      if (abortController.current) {\n        abortController.current.abort();\n      }\n\n      abortController.current = new AbortController();\n      fetchSemesters({ academicYearID }, { signal: abortController.current.signal })\n        .then((response) => {\n          if (response.success) {\n            setSemesters(response.data);\n          }\n          setFetching(false);\n        })\n        .catch(() => setFetching(false));\n    },\n    [setSemestersFromResponse],\n  );\n\n  const onSearch = useCallback(\n    (search: string) => {\n      fetch(search);\n    },\n    [fetch],\n  );\n\n  return (\n    <Select\n      onSelect={onSelect}\n      onDeselect={onDeselect}\n      onClear={onClear}\n      loading={loading}\n      disabled={disabled}\n      onFocus={() => fetch()}\n      allowClear\n      style={{ width: '100%' }}\n      value={value}\n      onChange={onChange}\n      mode={multiple ? 'multiple' : undefined}\n      showSearch\n      onSearch={onSearch}\n      placeholder={<FormattedMessage id=\"select_semester\" defaultMessage=\"Select semester\" />}\n      optionFilterProp=\"children\"\n      filterOption={(input, option) => {\n        if (option && option.children) {\n          return option?.children?.toString().toLowerCase().indexOf(input.toLowerCase()) >= 0;\n        }\n        return true;\n      }}\n      notFoundContent={fetching ? <Spin size=\"small\" /> : null}\n    >\n      {semesters.map((item) => (\n        <Select.Option key={item.id} value={item.id}>\n          {item.name}\n        </Select.Option>\n      ))}\n    </Select>\n  );\n};\n\nexport default SemesterSelect;\n","import { Button, Tooltip } from 'antd';\nimport React, { useRef } from 'react';\nimport { useIntl, FormattedMessage, Link } from 'umi';\nimport { PageContainer } from '@ant-design/pro-layout';\nimport type { ProColumns, ActionType } from '@ant-design/pro-table';\nimport ProTable from '@ant-design/pro-table';\nimport { semesterSubjects } from '@/services/escola-lms/semester_subject';\nimport { EditOutlined } from '@ant-design/icons';\nimport SemesterSelect from '@/components/SemesterSelect';\n\nexport const TableColumns: ProColumns<API.Subjects>[] = [\n  {\n    hideInSearch: false,\n    hideInTable: true,\n    title: <FormattedMessage id=\"semester\" defaultMessage=\"semester\" />,\n    dataIndex: 'semester_id',\n    renderFormItem: (item, { type, defaultRender, ...rest }, form) => {\n      if (type === 'form') {\n        return null;\n      }\n      const stateType = form.getFieldValue('state');\n      return (\n        <SemesterSelect\n          {...rest}\n          state={{\n            type: stateType,\n          }}\n        />\n      );\n    },\n  },\n  {\n    title: <FormattedMessage id=\"ID\" defaultMessage=\"ID\" />,\n    dataIndex: 'id',\n    hideInSearch: true,\n    width: '80px',\n  },\n  {\n    title: <FormattedMessage id=\"subject\" defaultMessage=\"subject\" />,\n    dataIndex: ['subject', 'name'],\n    hideInSearch: true,\n  },\n  {\n    title: <FormattedMessage id=\"semester\" defaultMessage=\"semester\" />,\n    dataIndex: ['semester', 'name'],\n    hideInSearch: true,\n  },\n  {\n    title: <FormattedMessage id=\"group\" defaultMessage=\"group\" />,\n    dataIndex: 'groups',\n    render: (_, record) => (\n      <span>\n        {record.groups.map((group: API.SubjectGroups) => (\n          <span key={group.id}>\n            {group.name} <br />\n          </span>\n        ))}\n      </span>\n    ),\n    hideInForm: true,\n    hideInSearch: true,\n  },\n];\n\nconst TableList: React.FC = () => {\n  const actionRef = useRef<ActionType>();\n  const intl = useIntl();\n\n  return (\n    <PageContainer>\n      <ProTable<API.Subjects, API.SubjectParams>\n        headerTitle={intl.formatMessage({\n          id: 'menu.Teacher.Subjects',\n          defaultMessage: 'Subjects',\n        })}\n        actionRef={actionRef}\n        rowKey=\"id\"\n        search={{\n          layout: 'vertical',\n        }}\n        request={({ pageSize, current, semester_id }) => {\n          return semesterSubjects({ per_page: pageSize, page: current, semester_id }).then(\n            (response) => {\n              if (response.success) {\n                return {\n                  data: response.data,\n                  total: response.meta.total,\n                  success: true,\n                };\n              }\n              return [];\n            },\n          );\n        }}\n        columns={[\n          ...TableColumns,\n          {\n            hideInSearch: true,\n            title: <FormattedMessage id=\"pages.searchTable.titleOption\" />,\n            dataIndex: 'option',\n            valueType: 'option',\n            render: (_, record) => [\n              <Link to={`/teacher/subjects/${record.id}`} key=\"edit\">\n                <Tooltip title={<FormattedMessage id=\"edit\" defaultMessage=\"edit\" />}>\n                  <Button type=\"primary\" icon={<EditOutlined />} />\n                </Tooltip>\n              </Link>,\n            ],\n          },\n        ]}\n      />\n    </PageContainer>\n  );\n};\n\nexport default TableList;\n"],"sourceRoot":""}