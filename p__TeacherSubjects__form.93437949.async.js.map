{"version":3,"sources":["webpack:///./src/components/CourseStatistics/ExportStatsButton.tsx","webpack:///./src/components/CourseStatistics/userProgress.tsx","webpack:///./src/services/escola-lms/exams.ts","webpack:///./src/pages/TeacherSubjects/components/ConvertGradesModal.tsx","webpack:///./src/pages/TeacherSubjects/components/ExamForm.tsx","webpack:///./src/pages/TeacherSubjects/components/ExamResults.tsx","webpack:///./src/pages/TeacherSubjects/components/Exams.tsx","webpack:///./src/services/escola-lms/chats.ts","webpack:///./src/pages/TeacherSubjects/components/CreateTeamsChatButton.tsx","webpack:///./src/pages/TeacherSubjects/components/Students.tsx","webpack:///./src/services/escola-lms/attendances.ts","webpack:///./src/components/AttendanceCheckbox/utils.ts","webpack:///./src/components/AttendanceCheckbox/index.tsx","webpack:///./src/pages/TeacherSubjects/components/Attendances.tsx","webpack:///./src/services/escola-lms/grades.ts","webpack:///./src/pages/TeacherSubjects/components/GradesScale.tsx","webpack:///./src/services/escola-lms/schedules.ts","webpack:///./src/pages/TeacherSubjects/components/Schedule.tsx","webpack:///./src/pages/TeacherSubjects/components/FinalGradesDetails/utils.ts","webpack:///./src/pages/TeacherSubjects/components/FinalGradesDetails/hooks.ts","webpack:///./src/pages/TeacherSubjects/components/FinalGradesDetails/index.tsx","webpack:///./src/pages/TeacherSubjects/components/FinalGradesList.tsx","webpack:///./src/pages/TeacherSubjects/components/FileExportsHistory.tsx","webpack:///./src/pages/TeacherSubjects/components/FinalGradeSelect.tsx","webpack:///./src/pages/TeacherSubjects/components/ExamGradeInput.tsx","webpack:///./src/pages/TeacherSubjects/components/ClassRegister/utils.tsx","webpack:///./src/pages/TeacherSubjects/components/ClassRegister/index.tsx","webpack:///./src/pages/TeacherSubjects/form.tsx","webpack:///./src/components/ProgramForm/Context/index.tsx","webpack:///./src/services/escola-lms/reports.ts"],"names":["ExportStatsButton","course_id","stat","useState","loading","setLoading","onClickFactory","useCallback","courseId","exportStatForCourse","response","Blob","downloadLink","document","createElement","href","window","URL","createObjectURL","download","body","appendChild","click","removeChild","console","error","findH5PType","topic","topicable","content","contents","Object","values","library","UserProgress","topics","stats","showSeconds","setShowSeconds","columns","useMemo","title","dataIndex","render","id","map","type","topicable_type","split","pop","row","result","minutes","started_at","finished_at","seconds","toFixed","dataSource","userStat","reduce","acc","find","userStatTopic","Number","email","v","x","table","props","maxWidth","UserCourseFinish","attempts","courseAttempts","attempt","attemptCount","Array","isArray","length","UserCourseAttempts","choosenUserEmail","setChoosenUserEmail","choosenAttempt","setChoosenAttempt","intl","useIntl","flatMap","userStats","dates","datesValue","date","seconds_total","config","xField","yField","seriesField","isStack","xAxis","label","autoHide","autoRotate","slider","start","end","position","layout","newValue","Set","filter","overflow","minHeight","width","formatMessage","formatter","datum","Math","floor","name","value","isInteger","params","options","request","method","useCache","headers","data","exam_id","user_id","FileExamGradeType","onDataConverted","groupSelectDisabled","useTeacherSubject","semester_subject_id","teacherSubjectData","selectedGroup","setSelectedGroup","groupOptions","groups","reqData","group_id","onUploadFile","success","exam_results","results","info","fileList","undefined","ManualExamGradeType","groupUsers","onSelectedGroupChange","currGroup","byId","users","first_name","last_name","academic_teacher_id","EXAM_GRADE_IMAGES","ExamGradeType","TestPortal","TeamsForms","TeamsLecture","Manual","ExampleImagesPreview","images","visible","setVisible","openImagePreview","onVisibleChange","src","display","ModalFooter","onOk","onCancel","okDisabled","currentImages","justifyContent","FILE_TYPES","ConvertGradesModal","open","closeModal","onSuccess","fetchGroupUsers","convertedData","setConvertedData","useEffect","forEach","includes","SelectTypeButtonsGroup","onSelect","staticColumns","editable","valueType","formItemProps","rules","required","message","min","max","ExamForm","ProForm","useForm","form","selectedType","setSelectedType","fetching","setFetching","getGroupById","editableKeys","numExamId","resetFields","isNaN","getExam","then","res","weight","passed_at","setFieldsValue","finally","resetState","Boolean","formData","areExamResultsValid","every","createExam","updateExam","history","push","onValuesChange","record","bodyStyle","paddingInline","hideInSearch","ExamResults","setTitle","total","sorter","_","format","Date","DAY_FORMAT","created_at","semester","year","Exams","actionRef","useRef","location","useLocation","query","sort","current","pageSize","sortArr","entries","getExams","per_page","page","order_by","order","meta","deleteExam","reload","CreateTeamsChatButton","student_id","onClick","createTeamsChat","web_url","TableColumns","getGroupsOptions","subjectGroups","getTableData","studentUserGroups","curr","userTable","innerAcc","currentUser","group_name","Students","fetchAllStudentsAndGroups","parent_id","tableData","toLowerCase","hideInTable","filterMultiple","fieldProps","mode","_n","attendances","attendance","attendanceMapped","AttendanceValue","ABSENT","attendanceMap","PRESENT","ch1","ch2","PRESENT_NOT_EXERCISING","EXCUSED_ABSENCE","statusStr","statusMap","true_false","true_true","false_false","false_true","AttendanceCheckbox","groupAttendanceScheduleId","studentId","parseToStatus","status","setStatus","firstMount","handleChangeAttendance","changeStudentAttendance","parseToAttendanceValue","onCh1Change","e","target","checked","onCh2Change","prev","Attendances","dynamicCols","setDynamicCols","selectedGroupName","setSelectedGroupName","defaultValue","allowClear","fixed","defaultMessage","full_name","Promise","all","fetchStudentUserGroup","fetchGroupAttendanceSchedule","studentUserGroupRes","groupAttendanceScheduleRes","String","date_from","align","studentFullName","studentAttendances","groupAttendanceSchedule","studentAttendance","a","b","localeCompare","onChange","tutor_id","s_subject_scale_form_id","final_grade_id","GradeScaleTable","subjectTutorGradeScale","onFormSubmit","setEditableKeys","gradeScaleWithIds","scale","i","setFieldValue","_p","submit","padding","startEditable","saveText","actionRender","_r","_c","dom","save","GradesScale","useModel","initialState","tutors","subjectTutorGrades","setSubjectTutorGrades","selectedTutor","setSelectedTutor","tutorViewing","tutorsSelectOptions","refreshSubjectTutorGrades","getSubjectTutorGrades","onFormSubmitFactory","subjectTutorGradeScales","grade_scale","tutorGradeScale","grade","grade_value","createSubjectTutorGrades","textAlign","Schedule","selectedEvent","setSelectedEvent","eventData","setEventData","now","moment","events","event","group","term_status","toDate","date_to","tutor_name","tutor","tutor_email","subject","ms_teams_join_url","fetchEvents","fetchAllSchedules","date_form","handleEventClick","handleModalClose","checkDate","isSame","isAfter","dateCellRender","filteredEvents","handlePanelChange","startOf","subtract","endOf","add","initialStartDate","initialEndDate","DAYTIME_FORMAT","getStudentExamsFromExams","exams","exam","examResult","getProposedGrade","studentExams","tutorGradeScales","sum","weightsSum","weightedAverage","sortedGradeScales","isWeightedAverageGreater","at","firstFalseIndex","findIndex","getScalesBySubjectScaleFormId","tutorGrades","setter","promiseCb","finalGrades","setFinalGrades","setLoadingFactory","fetchFinalGrades","getUserFinalGrades","deleteFinalGrade","withLoading","removeFinalGrade","gradeTerms","setGradeTerms","getGradeTerms","subjectGradeScales","setSubjectGradeScales","getSubjectGradeScales","setTutorGradeScales","userAttendanceSchedules","setUserAttendanceSchedules","fetchUserAttendanceSchedules","filteredSchedules","rest","attendanceItem","setStudentExams","userCourses","setUserCourses","userCoursesStats","setUserCoursesStats","userCoursesTopics","setUserCoursesTopics","course","program","responses","getFlatTopics","lessons","getCourseStats","finishedTopics","attendanceList","tutorGradeScalesColumns","userAttendanceColumns","studentExamsColumns","staticFinalGradesColumns","grade_date","grade_name","TABLE_PAGE_SIZE","FinalGradesDetails","useStudentExams","useFinalGrades","useGradeTerms","useSubjectGradeScales","useTutorGradeScales","useUserAttendanceSchedules","useUserCoursesStats","gradeTermsSelectOptions","gradesSelectOptions","proposedGrade","onFinalGradeSubmit","grade_scale_id","grade_term_id","existingFinalGrade","grades","grade_term","updateFinalGrade","createFinalGrade","lesson_group_user_id","finalGradesColumns","finalGradesTableData","term","areStatisticsLoading","isStatisticDataPresent","fontSize","fontWeight","user","flexDirection","paddingTop","flex","gap","FinalGradesList","group_ids","allGroups","getGroupFinalGrades","DownloadButton","url","DATETIME_FORMAT","renderFormItem","item","defaultRender","stateType","getFieldValue","created_by","exported_at","exported_by","FileExportsHistory","getPCGExportsHistory","getGradeScaleId","gradeScales","FinalGradeSelect","defaultFinalGrade","createdGrade","setCreatedGrade","recentGrade","ExamGradeInput","debounce","createExamResult","getAttendanceCols","children","getStudentAttendances","groupAttendanceSchedules","getExamsCols","getStudentExamResults","getFinalGradesCols","final_grades","getStudentFinalGrades","finalGradeItem","getFinalGrades","studentFinalGrade","ClassRegister","fetchGroupFinalGrades","finalGradesRes","fetchExams","fetchSubjectTutorGrades","fetchGradeTerms","fetchSubjectGradeScales","examsRes","tutorGradesRes","gradeTermsRes","subjectGradeScalesRes","attendanceCols","examsCols","finalGradeCols","studentFinalGrades","tutorScales","proposed_grade","studentExamResults","groupName","TeacherSubjectsFormContent","tab","setInitialState","currentUserHasPermissions","isUserHavePermissions","showGradeScale","PERMISSIONS","TeacherListGradeScale","breadcrumb","routes","path","breadcrumbName","activeKey","key","useParams","subjectId","Context","React","createContext","getRandomId","round","random","getFlatLessons","recursiveAddTopicToLessons","lessonId","lesson","recursiveAddLessonToLessons","newLesson","recursiveEditLesson","updatedLesson","appendParentIdToLessons","lessonParentId","recursiveDeleteLesson","recursiveDeleteTopic","topicId","recursiveTopicUploaded","prevTopicId","lesson_id","file","AppContext","state","setState","flatTopics","flatLessons","h5ps","setH5ps","l","getLessons","getLessonIdByTopicId","topic_id","lesson_item","currentEditMode","t","addNewLesson","parentId","isNew","active","prevState","updateLesson","apiCreateLesson","apiUpdateLesson","deleteLesson","apiRemoveLesson","updateTopic","topic_item","apiCreateTopic","apiUpdateTopic","TopicType","Video","setTimeout","deleteTopic","apiRemoveTopic","addNewTopic","newTopic","onTopicUploaded","cloneTopic","apiCloneTopic","cloneLesson","apiCloneLesson","responseType","accept"],"mappings":"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","file":"p__TeacherSubjects__form.93437949.async.js","sourcesContent":["import React, { useCallback, useState } from 'react';\nimport { FormattedMessage } from 'umi';\nimport { Button } from 'antd';\nimport { ExportOutlined } from '@ant-design/icons';\n\nimport { exportStatForCourse } from '@/services/escola-lms/reports';\n\ninterface Props {\n  course_id: number;\n  stat?: API.ExportStatForCourseStat;\n}\n\nexport const ExportStatsButton: React.FC<Props> = ({\n  course_id,\n  stat = 'EscolaLms\\\\Reports\\\\Stats\\\\Course\\\\FinishedTopics',\n}) => {\n  const [loading, setLoading] = useState(false);\n\n  const onClickFactory = useCallback(\n    (courseId: number) => async () => {\n      setLoading(true);\n      try {\n        const response = await exportStatForCourse(courseId, {\n          stat,\n        });\n\n        if (response instanceof Blob) {\n          const downloadLink = document.createElement('a');\n          downloadLink.href = window.URL.createObjectURL(response);\n          downloadLink.download = `finished_topics_${course_id}.xlsx`;\n          document.body.appendChild(downloadLink);\n          downloadLink.click();\n          document.body.removeChild(downloadLink);\n        }\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setLoading(false);\n      }\n    },\n    [stat],\n  );\n\n  return (\n    <Button type=\"primary\" loading={loading} onClick={onClickFactory(course_id)}>\n      <ExportOutlined /> <FormattedMessage id=\"export\" />\n    </Button>\n  );\n};\n","import React, { useMemo, useState } from 'react';\nimport { Row, Select, Space, Switch, Table, Tag } from 'antd';\nimport type { ColumnsType } from 'antd/es/table';\nimport ProCard from '@ant-design/pro-card';\nimport { Column } from '@ant-design/plots';\nimport { FormattedMessage, useIntl } from 'umi';\nimport ScrollContainer from 'react-indiana-drag-scroll';\n\nimport TypeButtonDrawer from '../TypeButtonDrawer';\nimport { ExportStatsButton } from './ExportStatsButton';\n\ntype UserStatColumn = Record<string, number | string | API.FinishedTopicsUserStat> & {\n  email: string;\n  id: number;\n};\n\nconst findH5PType = (topic: API.TopicH5P) => {\n  if (topic.topicable.content.contents) {\n    return Object.values(topic.topicable.content.contents)[0].library;\n  }\n  return 'H5P';\n};\n\nexport const UserProgress: React.FC<{\n  course_id: number;\n  topics: API.Topic[];\n  stats: API.FinishedTopicsUserStats[];\n}> = ({ course_id, topics, stats }) => {\n  const [showSeconds, setShowSeconds] = useState(false);\n  const columns: ColumnsType<UserStatColumn> = useMemo(() => {\n    return [\n      {\n        title: <FormattedMessage id=\"user\" />,\n        dataIndex: 'id',\n        render: (id: number) => <TypeButtonDrawer type=\"App\\Models\\User\" type_id={id} />,\n      },\n      {\n        title: <FormattedMessage id=\"email\" />,\n        dataIndex: 'email',\n      },\n      ...topics.map((topic) => {\n        let type: string | undefined = topic.topicable_type?.split('\\\\').pop();\n\n        if (type === 'H5P') {\n          type = findH5PType(topic as API.TopicH5P);\n        }\n\n        return {\n          render: (row: API.FinishedTopicsUserStat | undefined) => {\n            let result = 0;\n            let minutes = 0;\n            if (row) {\n              if (row.started_at && row.finished_at) {\n                result = 1;\n              } else if (row.started_at) {\n                result = 2;\n              }\n              minutes = row.seconds / 60;\n            }\n\n            switch (result) {\n              case 1:\n                return (\n                  <Space>\n                    <Tag color=\"success\">F</Tag>\n                    {showSeconds && <small>{minutes.toFixed(2)}m</small>}\n                  </Space>\n                );\n              case 2:\n                return (\n                  <Space>\n                    <Tag color=\"blue\">S</Tag>\n                    {showSeconds && <small>{minutes.toFixed(2)}m</small>}\n                  </Space>\n                );\n              case 0:\n              default:\n                return (\n                  <React.Fragment>\n                    <Tag color=\"error\">N</Tag>\n                  </React.Fragment>\n                );\n            }\n          },\n\n          title: (\n            <small>\n              <Tag>{type}</Tag> {topic.title}\n            </small>\n          ),\n          dataIndex: topic.id,\n        };\n      }),\n    ];\n  }, [topics, showSeconds]);\n\n  const dataSource: UserStatColumn[] = useMemo(() => {\n    return stats.map((userStat) =>\n      topics.reduce(\n        (acc, topic) => {\n          const result = userStat.topics.find((userStatTopic) => userStatTopic.id === topic.id);\n          return { ...acc, [Number(topic.id)]: result ?? 0 };\n        },\n        { email: userStat.email, id: userStat.id } as UserStatColumn,\n      ),\n    );\n  }, [stats, topics]);\n\n  return (\n    <Table\n      title={() => (\n        <Row justify=\"space-between\" align=\"middle\">\n          <Space>\n            <FormattedMessage id=\"Finished\" defaultMessage=\"Finished:\" />{' '}\n            <Tag color=\"success\">F</Tag>\n            <FormattedMessage id=\"Started\" defaultMessage=\"Started:\" /> <Tag color=\"blue\">S</Tag>\n            <FormattedMessage id=\"NotStarted\" defaultMessage=\"Not Started:\" />{' '}\n            <Tag color=\"error\">N</Tag>\n            <FormattedMessage id=\"ShowMinutes\" defaultMessage=\"Show minutes spent on topic:\" />{' '}\n            <Switch checked={showSeconds} onChange={(v) => setShowSeconds(v)} />\n          </Space>\n          <ExportStatsButton course_id={course_id} />\n        </Row>\n      )}\n      columns={columns}\n      dataSource={dataSource}\n      size=\"small\"\n      scroll={{ x: 1500 }}\n      components={{\n        table: (props: React.HTMLAttributes<HTMLTableElement>) => (\n          <ScrollContainer horizontal={true} style={{ maxWidth: 'auto' }} hideScrollbars={false}>\n            <table {...props} />\n          </ScrollContainer>\n        ),\n      }}\n    />\n  );\n};\n\nexport const UserCourseFinish: React.FC<{\n  stats: API.FinishedCourseUserStats[];\n  attempts: API.CourseAttempts[];\n}> = ({ stats, attempts }) => {\n  const columns: ColumnsType<{ email: string; finished_at: Date | string }> = useMemo(() => {\n    return [\n      {\n        title: <FormattedMessage id=\"user\" />,\n        dataIndex: 'id',\n        render: (id: number) => <TypeButtonDrawer type=\"App\\Models\\User\" type_id={id} />,\n      },\n      {\n        title: <FormattedMessage id=\"email\" />,\n        dataIndex: 'email',\n      },\n      {\n        title: <FormattedMessage id=\"attempt\" defaultMessage=\"Attempt\" />,\n        dataIndex: 'attempt',\n      },\n      {\n        title: <FormattedMessage id=\"finished_at\" defaultMessage=\"Finished at\" />,\n        dataIndex: 'finished_at',\n      },\n    ];\n  }, []);\n\n  const dataSource: { email: string; finished_at: Date | string }[] = useMemo(() => {\n    return stats.map(({ id, email, finished_at }) => {\n      const courseAttempts = attempts?.find((attempt) => attempt.id === id);\n      const attemptCount = Array.isArray(courseAttempts?.attempts)\n        ? courseAttempts?.attempts.length\n        : 0;\n\n      return {\n        id,\n        email,\n        finished_at,\n        attempt: attemptCount,\n      };\n    });\n  }, [stats]);\n\n  return (\n    <Table\n      title={() => (\n        <Space>\n          <FormattedMessage id=\"course.finished\" defaultMessage=\"Finished\" />\n        </Space>\n      )}\n      columns={columns}\n      dataSource={dataSource}\n      size=\"small\"\n      scroll={{ x: 500 }}\n    />\n  );\n};\n\nexport const UserCourseAttempts: React.FC<{ stats: API.CourseAttempts[] }> = ({ stats }) => {\n  const [choosenUserEmail, setChoosenUserEmail] = useState<string | null>(null);\n  const [choosenAttempt, setChoosenAttempt] = useState<number | null>(null);\n  const intl = useIntl();\n\n  const dataSource = useMemo(() => {\n    return stats.flatMap((userStats) =>\n      Object.values(userStats.attempts).flatMap(({ dates, attempt }) => {\n        const datesValue = Object.values(dates).flatMap(({ date, seconds_total }) => {\n          return {\n            date,\n            attempt,\n            seconds_total,\n            email: userStats.email,\n          };\n        });\n\n        return datesValue;\n      }),\n    );\n  }, [stats]);\n\n  const config: any = {\n    xField: 'date',\n    yField: 'seconds_total',\n    seriesField: 'attempt',\n    isStack: true,\n    xAxis: {\n      label: {\n        autoHide: true,\n        autoRotate: false,\n      },\n    },\n    slider: {\n      start: 0,\n      end: 1,\n    },\n    label: {\n      position: 'middle',\n      layout: [\n        {\n          type: 'interval-adjust-position',\n        },\n        {\n          type: 'interval-hide-overlap',\n        },\n        {\n          type: 'adjust-color',\n        },\n      ],\n    },\n  };\n\n  return (\n    <ProCard\n      title={\n        <Space>\n          <FormattedMessage id=\"course.interactions_time_in_days\" />\n          <Select\n            showSearch\n            value={choosenUserEmail}\n            onChange={(newValue) => {\n              setChoosenUserEmail(newValue);\n              setChoosenAttempt(null);\n            }}\n            placeholder={<FormattedMessage id=\"select_person\" defaultMessage=\"Select a person\" />}\n          >\n            {stats.map(({ id, email }) => (\n              <Select.Option key={id} value={email}>\n                {email}\n              </Select.Option>\n            ))}\n          </Select>\n          <Select\n            value={choosenAttempt}\n            onChange={(newValue) => setChoosenAttempt(newValue)}\n            disabled={choosenUserEmail === null}\n            placeholder={<FormattedMessage id=\"select_attempt\" defaultMessage=\"Select attempt\" />}\n          >\n            {[\n              ...new Set(\n                dataSource\n                  .filter(({ email }) => email === choosenUserEmail)\n                  .map(({ attempt }) => attempt),\n              ),\n            ].map((attempt) => (\n              <Select.Option value={attempt} key={attempt}>\n                <FormattedMessage id=\"attempt\" defaultMessage=\"Attempt\" /> {attempt}\n              </Select.Option>\n            ))}\n          </Select>\n        </Space>\n      }\n      colSpan={12}\n      layout=\"center\"\n    >\n      <div style={{ overflow: 'auto', minHeight: '400px', width: '100%' }}>\n        <Column\n          {...config}\n          tooltip={{\n            title: `${intl.formatMessage({ id: 'attempt' })}`,\n            formatter: (datum) => {\n              const minutes = Math.floor(+datum.seconds_total / 60);\n              const seconds = +datum.seconds_total > 60 ? +datum.seconds_total - minutes * 60 : 0;\n\n              return {\n                name: datum.attempt,\n                value: `${minutes}m ${seconds}s`,\n              };\n            },\n          }}\n          data={dataSource\n            .filter(({ email }) => email === choosenUserEmail)\n            .filter(({ attempt }) =>\n              Number.isInteger(choosenAttempt) ? attempt === choosenAttempt : true,\n            )}\n        />\n      </div>\n    </ProCard>\n  );\n};\n","import { request } from 'umi';\nimport type { RequestOptionsInit } from 'umi-request';\n\n/**  GET /api/admin/exams */\nexport async function getExams(params?: API.ExamsParams, options?: RequestOptionsInit) {\n  return request<API.DefaultMetaResponse<API.Exam>>(`/api/admin/exams`, {\n    method: 'GET',\n    /* useCache: true */ useCache: false,\n    params,\n    ...(options || {}),\n  });\n}\n\n/**  POST /api/admin/exams */\nexport async function createExam(body?: API.CreateExamRequest, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.Exam>>(`/api/admin/exams`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    data: body,\n    ...(options || {}),\n  });\n}\n\n/**  PUT /api/admin/exams/:id */\nexport async function updateExam(\n  id: number,\n  body: API.CreateExamRequest,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.Exam>>(`/api/admin/exams/${id}`, {\n    method: 'PUT',\n    data: body,\n    /* useCache: true */ useCache: false,\n    ...(options || {}),\n  });\n}\n\n/**  GET /api/admin/exams/:id */\nexport async function getExam(id: number, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.Exam>>(`/api/admin/exams/${id}`, {\n    method: 'GET',\n    /* useCache: true */ useCache: false,\n    ...(options || {}),\n  });\n}\n\n/**  DELETE /api/admin/exams/:id */\nexport async function deleteExam(id: number, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<undefined>>(`/api/admin/exams/${id}`, {\n    method: 'DELETE',\n    ...(options || {}),\n  });\n}\n\n/**  POST /api/admin/exams/:id/users/:user_id */\nexport async function createExamResult(\n  exam_id: number,\n  user_id: number,\n  body: API.CreateExamResultRequest,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.Exam>>(`/api/admin/exams/${exam_id}/users/${user_id}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    data: body,\n    ...(options || {}),\n  });\n}\n\n/**  DELETE /api/admin/exams/:id/users/:user_id */\nexport async function deleteExamResult(\n  exam_id: number,\n  user_id: number,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<undefined>>(`/api/admin/exams/${exam_id}/users/${user_id}`, {\n    method: 'DELETE',\n    ...(options || {}),\n  });\n}\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { FormattedMessage } from 'umi';\nimport { Button, Image, Modal, Select, Space, Tooltip } from 'antd';\nimport type { DefaultOptionType } from 'antd/lib/select';\nimport ProForm from '@ant-design/pro-form';\nimport { InfoCircleOutlined } from '@ant-design/icons';\n\nimport SecureUpload from '@/components/SecureUpload';\nimport { ExamGradeType } from '@/services/escola-lms/enums';\nimport { useTeacherSubject } from '../context';\n\nconst FileExamGradeType: React.FC<{\n  type: ExamGradeType;\n  groupSelectDisabled: boolean;\n  onDataConverted: (data: ConvertedData | undefined) => void;\n}> = ({ type, onDataConverted, groupSelectDisabled }) => {\n  const { semester_subject_id, teacherSubjectData } = useTeacherSubject();\n  const [selectedGroup, setSelectedGroup] = useState<number | null>(null);\n\n  const groupOptions: DefaultOptionType[] = useMemo(\n    () =>\n      (teacherSubjectData?.groups ?? []).map(({ id, name }) => ({\n        label: name,\n        value: id,\n      })),\n\n    [],\n  );\n  const reqData: API.ParseExamFileRequest = {\n    type,\n    group_id: selectedGroup!,\n    semester_subject_id: semester_subject_id!,\n  };\n\n  const onUploadFile = useCallback((response: API.DefaultResponse<API.Exam>) => {\n    if (response.success) {\n      // TODO error handling\n      // filter out users that are not in selected group\n      const exam_results = response.data.results.filter(({ user_id }) => user_id !== null);\n      if (!exam_results.length) return;\n\n      onDataConverted({ exam_results, group_id: response.data.group_id });\n    }\n  }, []);\n\n  return (\n    <>\n      <ProForm.Item label={<FormattedMessage id=\"group\" />}>\n        <Select\n          disabled={groupSelectDisabled}\n          value={selectedGroup}\n          onChange={(v) => setSelectedGroup(v)}\n          options={groupOptions}\n          placeholder={<FormattedMessage id=\"select_group\" />}\n          style={{ width: '100%' }}\n        />\n      </ProForm.Item>\n      <SecureUpload\n        name=\"file\"\n        url=\"/api/admin/exams/parse\"\n        onUpload={onUploadFile}\n        onChange={(info) => !info.fileList.length && onDataConverted(undefined)}\n        maxFiles={1}\n        data={reqData}\n        disabled={!selectedGroup}\n      />\n    </>\n  );\n};\n\nconst ManualExamGradeType: React.FC<{\n  onDataConverted: (convertedData: ConvertedData) => void;\n}> = ({ onDataConverted }) => {\n  const { teacherSubjectData, groupUsers } = useTeacherSubject();\n  const [selectedGroup, setSelectedGroup] = useState<number | null>(null);\n\n  const groupOptions: DefaultOptionType[] = useMemo(\n    () =>\n      (teacherSubjectData?.groups ?? []).map(({ id, name }) => ({\n        label: name,\n        value: id,\n      })),\n\n    [],\n  );\n\n  const onSelectedGroupChange = useCallback(\n    (group_id: number) => {\n      setSelectedGroup(group_id);\n      const currGroup = groupUsers.byId?.[group_id];\n      if (!currGroup) return;\n\n      const exam_results = currGroup.users.reduce<API.ExamResult[]>(\n        (acc, { id, email, first_name, last_name, academic_teacher_id }) => {\n          // filter out tutors\n          if (academic_teacher_id !== null) return acc;\n\n          return [\n            ...acc,\n            {\n              email,\n              first_name,\n              last_name,\n              user_id: id,\n              result: 0,\n            },\n          ];\n        },\n        [],\n      );\n\n      onDataConverted({ group_id, exam_results });\n    },\n    [groupUsers.byId],\n  );\n\n  return (\n    <Select\n      value={selectedGroup}\n      onChange={onSelectedGroupChange}\n      options={groupOptions}\n      placeholder={<FormattedMessage id=\"select_group\" />}\n      style={{ width: '100%' }}\n    />\n  );\n};\n\nexport interface ConvertedData {\n  group_id: number;\n  exam_results: API.ExamResult[];\n}\n\ninterface Props {\n  open: boolean;\n  closeModal: () => void;\n  onSuccess: (convertedData: ConvertedData) => void;\n  type: ExamGradeType;\n}\n\nconst EXAM_GRADE_IMAGES: Record<ExamGradeType, string[]> = {\n  [ExamGradeType.TestPortal]: ['/teacher-examples/testPortal.png'],\n  [ExamGradeType.TeamsForms]: ['/teacher-examples/teamsForms.png'],\n  [ExamGradeType.TeamsLecture]: [\n    '/teacher-examples/teamsLecture.png',\n    '/teacher-examples/teamsLectureWithoutMail.png',\n  ],\n  [ExamGradeType.Manual]: [],\n};\n\nconst ExampleImagesPreview: React.FC<{ images: string[] }> = ({ images }) => {\n  const [visible, setVisible] = useState(false);\n\n  const openImagePreview = useCallback(() => setVisible(true), []);\n\n  return (\n    <>\n      <Tooltip title={<FormattedMessage id=\"see_file_example_image\" />}>\n        <Button onClick={openImagePreview} icon={<InfoCircleOutlined />} />\n      </Tooltip>\n      <Image.PreviewGroup preview={{ visible, onVisibleChange: setVisible }}>\n        {images.map((src) => (\n          <Image key={src} style={{ display: 'none' }} src={src} />\n        ))}\n      </Image.PreviewGroup>\n    </>\n  );\n};\n\nconst ModalFooter: React.FC<{\n  type: ExamGradeType;\n  onOk: () => void;\n  onCancel: () => void;\n  okDisabled: boolean;\n}> = ({ type, onOk, onCancel, okDisabled }) => {\n  const currentImages = EXAM_GRADE_IMAGES?.[type] ?? EXAM_GRADE_IMAGES[ExamGradeType.Manual];\n\n  return (\n    <Space\n      style={{ width: '100%', justifyContent: currentImages.length ? 'space-between' : 'flex-end' }}\n    >\n      {!!currentImages.length && <ExampleImagesPreview images={currentImages} />}\n      <Space>\n        <Button onClick={onCancel}>\n          <FormattedMessage id=\"cancel\" />\n        </Button>\n        <Button type=\"primary\" disabled={okDisabled} onClick={onOk}>\n          <FormattedMessage id=\"ok\" />\n        </Button>\n      </Space>\n    </Space>\n  );\n};\n\nconst FILE_TYPES = [ExamGradeType.TeamsLecture, ExamGradeType.TestPortal, ExamGradeType.TeamsForms];\n\nexport const ConvertGradesModal: React.FC<Props> = ({ open, closeModal, onSuccess, type }) => {\n  const { teacherSubjectData, fetchGroupUsers } = useTeacherSubject();\n  const [convertedData, setConvertedData] = useState<ConvertedData>();\n\n  useEffect(() => {\n    if (type === ExamGradeType.Manual && open) {\n      teacherSubjectData?.groups?.forEach(({ id }) => fetchGroupUsers(id));\n    }\n  }, [type, open]);\n\n  return (\n    <Modal\n      title={<FormattedMessage id={`TeacherSubjects.Exams.${type}Convert`} />}\n      width=\"40vw\"\n      open={open}\n      onCancel={closeModal}\n      footer={\n        <ModalFooter\n          type={type}\n          onOk={() => {\n            if (convertedData) {\n              onSuccess(convertedData);\n            }\n          }}\n          onCancel={closeModal}\n          okDisabled={!convertedData}\n        />\n      }\n    >\n      {FILE_TYPES.includes(type) && (\n        <FileExamGradeType\n          type={type}\n          onDataConverted={setConvertedData}\n          groupSelectDisabled={!!convertedData}\n        />\n      )}\n      {type === ExamGradeType.Manual && <ManualExamGradeType onDataConverted={setConvertedData} />}\n    </Modal>\n  );\n};\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { FormattedMessage, history } from 'umi';\nimport { Button, Col, InputNumber, Row, Spin } from 'antd';\nimport ProTable, { ProColumns } from '@ant-design/pro-table';\nimport ProForm, { ProFormDatePicker, ProFormText } from '@ant-design/pro-form';\nimport { ExamGradeType } from '@/services/escola-lms/enums';\nimport { createExam, getExam, updateExam } from '@/services/escola-lms/exams';\n\nimport { ConvertGradesModal, type ConvertedData } from './ConvertGradesModal';\nimport { useTeacherSubject } from '../context';\n\nconst SelectTypeButtonsGroup: React.FC<{ onSelect: (type: ExamGradeType) => void }> = ({\n  onSelect,\n}) => (\n  <Row gutter={[16, 16]}>\n    <Col span={12}>\n      <Button type=\"primary\" onClick={() => onSelect(ExamGradeType.TeamsForms)}>\n        <FormattedMessage id=\"uploadFile.MsTeamsForms\" defaultMessage=\"uploadFile.MsTeamsForms\" />\n      </Button>\n    </Col>\n    <Col span={12}>\n      <Button type=\"primary\" onClick={() => onSelect(ExamGradeType.TestPortal)}>\n        <FormattedMessage id=\"uploadFile.TestPortal\" defaultMessage=\"uploadFile.TestPortal\" />\n      </Button>\n    </Col>\n    <Col span={12}>\n      <Button type=\"primary\" onClick={() => onSelect(ExamGradeType.TeamsLecture)}>\n        <FormattedMessage id=\"uploadFile.MsTeams\" defaultMessage=\"uploadFile.MsTeams\" />\n      </Button>\n    </Col>\n    <Col span={12}>\n      <Button type=\"primary\" onClick={() => onSelect(ExamGradeType.Manual)}>\n        <FormattedMessage id=\"uploadGradesManually\" defaultMessage=\"uploadGradesManually\" />\n      </Button>\n    </Col>\n  </Row>\n);\n\nconst staticColumns: ProColumns<API.ExamResult>[] = [\n  { title: <FormattedMessage id=\"first_name\" />, dataIndex: 'first_name', editable: false },\n  { title: <FormattedMessage id=\"last_name\" />, dataIndex: 'last_name', editable: false },\n  {\n    title: <FormattedMessage id=\"examResult\" />,\n    dataIndex: 'result',\n    valueType: 'percent',\n    formItemProps: {\n      rules: [\n        {\n          required: true,\n          message: <FormattedMessage id=\"field_required\" />,\n        },\n        {\n          type: 'number',\n          min: 0,\n          max: 100,\n          message: <FormattedMessage id=\"number_between\" values={{ min: 0, max: 100 }} />,\n        },\n      ],\n    },\n  },\n];\n\ninterface ExamFormValues {\n  title: string;\n  weight: number;\n  passed_at: Date | string;\n}\n\ninterface Props {\n  exam_id: string;\n}\nexport const ExamForm: React.FC<Props> = ({ exam_id }) => {\n  const [form] = ProForm.useForm<ExamFormValues>();\n  const [selectedType, setSelectedType] = useState<ExamGradeType>();\n  const [convertedData, setConvertedData] = useState<ConvertedData>();\n  const [fetching, setFetching] = useState(false);\n  const { semester_subject_id, getGroupById } = useTeacherSubject();\n\n  const editableKeys = useMemo(\n    () => (convertedData?.exam_results ?? []).map(({ user_id }) => user_id),\n    [convertedData?.exam_results],\n  );\n\n  useEffect(() => {\n    const numExamId = Number(exam_id);\n\n    if (exam_id === 'new') {\n      setSelectedType(undefined);\n      setConvertedData(undefined);\n      form.resetFields();\n    }\n\n    if (exam_id !== 'new' && !Number.isNaN(numExamId)) {\n      setFetching(true);\n      getExam(numExamId)\n        .then((res) => {\n          if (res.success) {\n            const { type, results, title, weight, passed_at, group_id } = res.data;\n            setSelectedType(type);\n            setConvertedData({ group_id, exam_results: results });\n            form.setFieldsValue({ title, weight, passed_at });\n          }\n        })\n        .finally(() => setFetching(false));\n    }\n  }, [exam_id]);\n\n  const resetState = useCallback(() => {\n    setSelectedType(undefined);\n    setConvertedData(undefined);\n  }, []);\n\n  if (fetching) {\n    return <Spin />;\n  }\n\n  return (\n    <>\n      {selectedType && (\n        <ConvertGradesModal\n          open={Boolean(selectedType && !convertedData)}\n          type={selectedType}\n          closeModal={resetState}\n          onSuccess={setConvertedData}\n        />\n      )}\n      <ProForm\n        form={form}\n        submitter={selectedType === undefined || !convertedData ? false : undefined}\n        onFinish={async (formData: ExamFormValues) => {\n          // Validation since table has other form instance\n          const areExamResultsValid = convertedData?.exam_results?.every(\n            ({ result }) => typeof result === 'number' && result >= 0 && result <= 100,\n          );\n\n          if (convertedData && areExamResultsValid && typeof semester_subject_id === 'number') {\n            const { title, passed_at, weight } = formData;\n            const numExamId = Number(exam_id);\n            const { exam_results, group_id } = convertedData;\n\n            const reqData: API.CreateExamRequest = {\n              type: selectedType!,\n              semester_subject_id,\n              title,\n              passed_at,\n              weight,\n              group_id,\n              results: exam_results,\n            };\n\n            const response = Number.isNaN(numExamId)\n              ? await createExam(reqData)\n              : await updateExam(numExamId, reqData);\n            if (response.success) {\n              history.push(`/teacher/subjects/${semester_subject_id}/exams`);\n            }\n          }\n          return true;\n        }}\n        onReset={resetState}\n      >\n        <ProForm.Group>\n          <ProFormText\n            label={<FormattedMessage id=\"examTitle\" defaultMessage=\"examTitle\" />}\n            rules={[\n              {\n                required: true,\n                message: <FormattedMessage id=\"field_required\" />,\n              },\n            ]}\n            width=\"lg\"\n            name=\"title\"\n          />\n          <ProFormDatePicker\n            label={<FormattedMessage id=\"datePassingExam\" defaultMessage=\"datePassingExam\" />}\n            rules={[\n              {\n                required: true,\n                message: <FormattedMessage id=\"field_required\" />,\n              },\n            ]}\n            width=\"lg\"\n            name=\"passed_at\"\n          />\n          <ProForm.Item\n            name=\"weight\"\n            label={<FormattedMessage id=\"examImportance\" defaultMessage=\"examImportance\" />}\n            rules={[\n              { required: true, message: <FormattedMessage id=\"field_required\" /> },\n              {\n                type: 'number',\n                min: 1,\n                max: 100,\n                message: <FormattedMessage id=\"number_between\" values={{ min: 1, max: 100 }} />,\n              },\n            ]}\n          >\n            <InputNumber />\n          </ProForm.Item>\n        </ProForm.Group>\n        {selectedType && convertedData && (\n          <ProTable\n            rowKey=\"user_id\"\n            headerTitle={getGroupById(convertedData.group_id)?.name}\n            editable={{\n              type: 'single',\n              editableKeys,\n              onValuesChange: (record, dataSource) =>\n                setConvertedData({ group_id: convertedData.group_id, exam_results: dataSource }),\n            }}\n            cardProps={{ bodyStyle: { paddingInline: 0 } }}\n            search={false}\n            dataSource={convertedData.exam_results}\n            columns={staticColumns}\n          />\n        )}\n        {!convertedData && <SelectTypeButtonsGroup onSelect={setSelectedType} />}\n      </ProForm>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport type { ProColumns } from '@ant-design/pro-table';\nimport ProTable from '@ant-design/pro-table';\nimport { FormattedMessage } from 'umi';\n\nimport { getExam } from '@/services/escola-lms/exams';\n\ninterface Props {\n  exam_id: number;\n}\n\nconst columns: ProColumns<API.ExamResult>[] = [\n  { title: <FormattedMessage id=\"first_name\" />, dataIndex: 'first_name' },\n  { title: <FormattedMessage id=\"last_name\" />, dataIndex: 'last_name' },\n  { title: <FormattedMessage id=\"examResult\" />, dataIndex: 'result', hideInSearch: true },\n];\n\nexport const ExamResults: React.FC<Props> = ({ exam_id }) => {\n  const [title, setTitle] = useState('');\n\n  return (\n    <ProTable<API.ExamResult>\n      className=\"table-standalone\"\n      rowKey=\"user_id\"\n      search={false}\n      headerTitle={title}\n      request={async () => {\n        const response = await getExam(exam_id);\n\n        if (response.success) {\n          setTitle(response.data.title);\n\n          return {\n            total: response.data.results.length,\n            success: true,\n            data: response.data.results,\n          };\n        }\n\n        return [];\n      }}\n      columns={columns}\n    />\n  );\n};\n","import React, { useMemo, useRef } from 'react';\nimport { format } from 'date-fns';\nimport type { Location } from 'history';\nimport { FormattedMessage, Link, useLocation } from 'umi';\nimport { Button, Popconfirm, Tooltip } from 'antd';\nimport { DeleteOutlined, EditOutlined, LineChartOutlined } from '@ant-design/icons';\nimport ProTable from '@ant-design/pro-table';\nimport type { ActionType, ProColumns } from '@ant-design/pro-table';\n\nimport { DAY_FORMAT } from '@/consts/dates';\nimport { getExams, deleteExam } from '@/services/escola-lms/exams';\nimport TypeButtonDrawer from '@/components/TypeButtonDrawer';\nimport { ExamForm } from './ExamForm';\nimport { ExamResults } from './ExamResults';\nimport { useTeacherSubject } from '../context';\n\nconst staticColumns: ProColumns<API.Exam>[] = [\n  {\n    title: <FormattedMessage id=\"ID\" defaultMessage=\"ID\" />,\n    dataIndex: 'id',\n    sorter: true,\n    width: '80px',\n  },\n  {\n    title: <FormattedMessage id=\"title\" defaultMessage=\"title\" />,\n    dataIndex: 'title',\n    hideInSearch: true,\n    sorter: true,\n  },\n  {\n    title: <FormattedMessage id=\"type\" defaultMessage=\"type\" />,\n    dataIndex: 'type',\n    sorter: true,\n    render: (_, record) => <FormattedMessage id={`ExamGradeType.${record.type}`} />,\n  },\n  {\n    title: <FormattedMessage id=\"TeacherSubjects.Exams.exam_date\" defaultMessage=\"Exam date\" />,\n    dataIndex: 'passed_at',\n    sorter: true,\n    render: (_, record) => record.passed_at && format(new Date(record.passed_at), DAY_FORMAT),\n  },\n  {\n    title: <FormattedMessage id=\"TeacherSubjects.Exams.grade_weight\" defaultMessage=\"Weight\" />,\n    dataIndex: 'weight',\n    sorter: true,\n    render: (_, record) => record.weight + '%',\n  },\n  {\n    title: <FormattedMessage id=\"created_at\" defaultMessage=\"Created at\" />,\n    dataIndex: 'created_at',\n    sorter: true,\n    render: (_, record) => record.created_at && format(new Date(record.created_at), DAY_FORMAT),\n  },\n  {\n    title: <FormattedMessage id=\"semester\" defaultMessage=\"Semester\" />,\n    dataIndex: 'semester',\n    sorter: true,\n    render: (_, record) => (\n      <FormattedMessage\n        id={`SemesterType.${record.semester.type}`}\n        values={{ year: record.semester.year }}\n      />\n    ),\n  },\n  {\n    title: <FormattedMessage id=\"group\" defaultMessage=\"Group\" />,\n    dataIndex: 'group_id',\n    sorter: true,\n    render: (_, record) => (\n      <TypeButtonDrawer key={record.group_id} type=\"Students\" type_id={record.group_id} />\n    ),\n  },\n];\n\nexport const Exams: React.FC = () => {\n  const actionRef = useRef<ActionType>();\n  const { semester_subject_id } = useTeacherSubject();\n  const location = useLocation() as Location & { query: { exam_id?: string; results?: string } };\n\n  const { exam_id, results } = useMemo(\n    () => ({ exam_id: location.query?.exam_id ?? null, results: location.query?.results }),\n    [location.query?.exam_id, location.query?.results],\n  );\n\n  if (results !== null && !Number.isNaN(Number(results))) {\n    return <ExamResults exam_id={Number(results)} />;\n  }\n\n  if (exam_id !== null) {\n    return <ExamForm exam_id={exam_id} />;\n  }\n\n  return (\n    <ProTable<API.Exam, API.ExamsParams>\n      className=\"table-standalone\"\n      headerTitle={<FormattedMessage id=\"exams\" />}\n      actionRef={actionRef}\n      search={false}\n      rowKey=\"id\"\n      request={async ({ current, pageSize }, sort) => {\n        if (semester_subject_id === null)\n          return {\n            data: [],\n            total: 0,\n            success: false,\n          };\n        const sortArr = sort && Object.entries(sort)[0];\n\n        const response = await getExams({\n          per_page: pageSize,\n          page: current,\n          semester_subject_id: !Number.isNaN(semester_subject_id) ? semester_subject_id : undefined,\n          order_by: sortArr && sortArr[0],\n          order: sortArr && (sortArr[1] === 'ascend' ? 'ASC' : 'DESC'),\n        });\n\n        if (response.success) {\n          return {\n            data: response.data,\n            total: response.meta.total,\n            success: true,\n          };\n        }\n\n        return {\n          data: [],\n          total: 0,\n          success: false,\n        };\n      }}\n      columns={[\n        ...staticColumns,\n        {\n          title: <FormattedMessage id=\"pages.searchTable.titleOption\" />,\n          dataIndex: 'option',\n          valueType: 'option',\n          render: (_, record) => [\n            <Link\n              to={`/teacher/subjects/${record.semester_subject_id}/exams?exam_id=${record.id}`}\n              key=\"edit\"\n            >\n              <Tooltip title={<FormattedMessage id=\"edit\" defaultMessage=\"edit\" />}>\n                <Button type=\"primary\" icon={<EditOutlined />} />\n              </Tooltip>\n            </Link>,\n            <Link\n              to={`/teacher/subjects/${record.semester_subject_id}/exams?results=${record.id}`}\n              key=\"results\"\n            >\n              <Tooltip\n                title={\n                  <FormattedMessage id=\"TeacherSubjects.Exams.results\" defaultMessage=\"results\" />\n                }\n              >\n                <Button icon={<LineChartOutlined />} />\n              </Tooltip>\n            </Link>,\n            <Popconfirm\n              key=\"delete\"\n              title={\n                <FormattedMessage\n                  id=\"deleteQuestion\"\n                  defaultMessage=\"Are you sure to delete this record?\"\n                />\n              }\n              onConfirm={async () => {\n                const response = await deleteExam(record.id);\n\n                if (response.success && actionRef.current) {\n                  actionRef.current.reload();\n                }\n              }}\n              okText={<FormattedMessage id=\"yes\" />}\n              cancelText={<FormattedMessage id=\"no\" />}\n            >\n              <Tooltip title={<FormattedMessage id=\"delete\" defaultMessage=\"delete\" />}>\n                <Button type=\"primary\" icon={<DeleteOutlined />} danger />\n              </Tooltip>\n            </Popconfirm>,\n          ],\n        },\n      ]}\n    />\n  );\n};\n","import { request } from 'umi';\nimport type { RequestOptionsInit } from 'umi-request';\n\n/**  POST /api/admin/chats/ms-teams */\nexport async function createTeamsChat(\n  body: API.CreateTeamsChatRequest,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.TeamsChat>>(`/api/admin/chats/ms-teams`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    data: body,\n    ...(options || {}),\n  });\n}\n","import React, { useCallback, useState } from 'react';\nimport { FormattedMessage } from 'umi';\nimport { Button, message, Tooltip } from 'antd';\nimport { ExportOutlined } from '@ant-design/icons';\n\nimport { createTeamsChat } from '@/services/escola-lms/chats';\n\ninterface Props {\n  student_id: number;\n}\n\nexport const CreateTeamsChatButton: React.FC<Props> = ({ student_id }) => {\n  const [loading, setLoading] = useState(false);\n\n  const onClick = useCallback(async () => {\n    setLoading(true);\n    const response = await createTeamsChat({ user_id: student_id });\n    if (!response.success) {\n      message.error(response.message);\n      setLoading(false);\n      return;\n    }\n\n    window.open(response.data.web_url, '_blank', 'noopener noreferrer');\n    setLoading(false);\n  }, []);\n\n  return (\n    <Tooltip title={<FormattedMessage id=\"msTeams\" defaultMessage=\"teams\" />}>\n      <Button loading={loading} type=\"primary\" icon={<ExportOutlined />} onClick={onClick} />\n    </Tooltip>\n  );\n};\n","import React, { useMemo } from 'react';\nimport { FormattedMessage } from 'umi';\nimport type { DefaultOptionType } from 'antd/lib/select';\nimport ProTable, { type ProColumns } from '@ant-design/pro-table';\n\nimport { allStudentsAndGroups as fetchAllStudentsAndGroups } from '@/services/escola-lms/student_user_groups';\nimport { useTeacherSubject } from '../context';\nimport { CreateTeamsChatButton } from './CreateTeamsChatButton';\n\ninterface TableDataProps {\n  group_id: number;\n  group_name: string;\n  user_id: number;\n  first_name: string;\n  last_name: string;\n  email: string;\n}\n\ninterface TableParams {\n  groups: number[];\n  first_name: string;\n  last_name: string;\n  email: string;\n}\n\nexport const TableColumns: ProColumns<TableDataProps>[] = [\n  {\n    title: <FormattedMessage id=\"ID\" defaultMessage=\"ID\" />,\n    dataIndex: 'user_id',\n    hideInSearch: true,\n    width: '80px',\n  },\n  {\n    title: <FormattedMessage id=\"first_name\" defaultMessage=\"First name\" />,\n    dataIndex: 'first_name',\n  },\n  {\n    title: <FormattedMessage id=\"last_name\" defaultMessage=\"Last name\" />,\n    dataIndex: 'last_name',\n  },\n  {\n    title: <FormattedMessage id=\"email\" defaultMessage=\"email\" />,\n    dataIndex: 'email',\n  },\n  {\n    title: <FormattedMessage id=\"groupName\" defaultMessage=\"Group name\" />,\n    dataIndex: 'group_name',\n    hideInSearch: true,\n  },\n];\n\nconst getGroupsOptions = (subjectGroups: API.SubjectGroups[]): DefaultOptionType[] =>\n  subjectGroups.map(({ id, name }) => ({\n    label: name,\n    value: id,\n  }));\n\nconst getTableData = (studentUserGroups: API.StudentUserGroup[]): TableDataProps[] =>\n  studentUserGroups.reduce<TableDataProps[]>((acc, curr) => {\n    const userTable = curr?.users?.reduce<TableDataProps[]>(\n      (innerAcc, currentUser) =>\n        currentUser.academic_teacher_id !== null\n          ? innerAcc\n          : [\n              ...innerAcc,\n              {\n                group_id: curr.id,\n                group_name: curr.name,\n                user_id: currentUser.id,\n                first_name: currentUser.first_name,\n                last_name: currentUser.last_name,\n                email: currentUser.email,\n              },\n            ],\n      [],\n    );\n\n    return [...acc, ...userTable];\n  }, []);\n\nexport const Students: React.FC = () => {\n  const { teacherSubjectData } = useTeacherSubject();\n\n  const groupOptions = useMemo(\n    () => getGroupsOptions(teacherSubjectData?.groups ?? []),\n    [teacherSubjectData?.groups],\n  );\n\n  return (\n    <ProTable<TableDataProps, TableParams>\n      className=\"table-standalone\"\n      rowKey={(record) => `${record.group_id}-${record.user_id}`}\n      search={{ layout: 'vertical' }}\n      request={async ({ groups, first_name = '', last_name = '', email = '' }) => {\n        const response = await fetchAllStudentsAndGroups({\n          parent_id: teacherSubjectData?.group_id,\n          'id[]': groups,\n        });\n\n        if (!response.success) {\n          return { data: [], total: 0, success: false };\n        }\n\n        const tableData = getTableData(response.data).filter(\n          (record) =>\n            record.first_name.toLowerCase().includes(first_name.toLowerCase()) &&\n            record.last_name.toLowerCase().includes(last_name.toLowerCase()) &&\n            record.email.toLowerCase().includes(email.toLowerCase()),\n        );\n\n        return { data: tableData, total: tableData.length, success: true };\n      }}\n      columns={[\n        {\n          title: <FormattedMessage id=\"groups\" defaultMessage=\"Groups\" />,\n          dataIndex: 'groups',\n          hideInTable: true,\n          filterMultiple: true,\n          valueType: 'select',\n          fieldProps: {\n            options: groupOptions,\n            mode: 'multiple',\n          },\n        },\n        ...TableColumns,\n        {\n          hideInSearch: true,\n          title: <FormattedMessage id=\"msTeams\" />,\n          dataIndex: 'teamsLink',\n          valueType: 'option',\n          render: (_n, record) => [\n            <CreateTeamsChatButton key=\"teamsChat\" student_id={record.user_id} />,\n          ],\n        },\n      ]}\n    />\n  );\n};\n","import type { RequestOptionsInit } from 'umi-request';\nimport type { AttendanceValue } from './enums';\nimport { request } from 'umi';\n\nexport async function groupAttendanceSchedule(group_id: number, options?: RequestOptionsInit) {\n  return request<API.AttendanceScheduleList>(`/api/admin/schedules/groups/${group_id}`, {\n    method: 'GET',\n    /* useCache: true */ useCache: false,\n    ...(options || {}),\n  });\n}\n\nexport async function changeStudentAttendance(\n  id: number,\n  user_id: number,\n  value: AttendanceValue,\n  options?: RequestOptionsInit,\n) {\n  return request<API.ChangeStudentAttendance>(`/api/admin/schedules/${id}/attendances`, {\n    data: {\n      attendances: [\n        {\n          user_id,\n          value,\n        },\n      ],\n    },\n    method: 'POST',\n    ...(options || {}),\n  });\n}\n","import { AttendanceValue } from '@/services/escola-lms/enums';\nimport type { AttendanceMap, Status } from './types';\n\nexport function parseToStatus(attendance: AttendanceValue | null): Status {\n  const attendanceMapped = attendance === null ? AttendanceValue.ABSENT : attendance;\n\n  const attendanceMap: AttendanceMap = {\n    [AttendanceValue.PRESENT]: { ch1: true, ch2: false },\n    [AttendanceValue.PRESENT_NOT_EXERCISING]: { ch1: true, ch2: true },\n    [AttendanceValue.ABSENT]: { ch1: false, ch2: false },\n    [AttendanceValue.EXCUSED_ABSENCE]: { ch1: false, ch2: true },\n  };\n\n  return attendanceMap[attendanceMapped] ?? { ch1: false, ch2: false };\n}\n\nexport function parseToAttendanceValue({ ch1, ch2 }: Status): AttendanceValue {\n  const statusStr = `${ch1}_${ch2}`;\n\n  const statusMap = {\n    true_false: AttendanceValue.PRESENT,\n    true_true: AttendanceValue.PRESENT_NOT_EXERCISING,\n    false_false: AttendanceValue.ABSENT,\n    false_true: AttendanceValue.EXCUSED_ABSENCE,\n  };\n\n  return statusMap[statusStr] ?? AttendanceValue.ABSENT;\n}\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { FormattedMessage } from 'umi';\nimport { Checkbox, Space, Tooltip } from 'antd';\nimport type { CheckboxChangeEvent } from 'antd/es/checkbox';\nimport { changeStudentAttendance } from '@/services/escola-lms/attendances';\n\nimport type { Status } from './types';\nimport { parseToAttendanceValue, parseToStatus } from './utils';\n\ninterface AttendanceCheckboxProps {\n  groupAttendanceScheduleId: number;\n  studentId: number;\n  attendance: API.AttendanceValue | null;\n  onSuccess?: () => void;\n}\n\nconst AttendanceCheckbox: React.FC<AttendanceCheckboxProps> = ({\n  groupAttendanceScheduleId,\n  studentId,\n  attendance,\n  onSuccess,\n}) => {\n  const [status, setStatus] = useState<Status>(parseToStatus(attendance));\n\n  const [loading, setLoading] = useState(false);\n  const firstMount = useRef(true);\n\n  const handleChangeAttendance = useCallback((stat: Status) => {\n    setLoading(true);\n    changeStudentAttendance(groupAttendanceScheduleId, studentId, parseToAttendanceValue(stat))\n      .then((res) => {\n        if (res.success) {\n          onSuccess?.();\n        }\n      })\n      .finally(() => setLoading(false));\n  }, []);\n\n  const onCh1Change = useCallback(\n    (e: CheckboxChangeEvent) =>\n      setStatus(e.target.checked ? { ch1: true, ch2: false } : { ch1: false, ch2: false }),\n    [],\n  );\n\n  const onCh2Change = useCallback(\n    (e: CheckboxChangeEvent) => setStatus((prev) => ({ ...prev, ch2: e.target.checked })),\n    [],\n  );\n\n  useEffect(() => {\n    if (firstMount.current) {\n      firstMount.current = false;\n      return;\n    }\n\n    handleChangeAttendance(status);\n  }, [status, handleChangeAttendance]);\n\n  return (\n    <Space>\n      <Tooltip title={<FormattedMessage id=\"present\" />}>\n        <Checkbox disabled={loading} checked={status.ch1} onChange={onCh1Change} />\n      </Tooltip>\n      <Tooltip title={<FormattedMessage id={status.ch1 ? 'not_exercising' : 'excused_absence'} />}>\n        <Checkbox disabled={loading} checked={status.ch2} onChange={onCh2Change} />\n      </Tooltip>\n    </Space>\n  );\n};\n\nexport default AttendanceCheckbox;\n","import React, { useMemo, useRef, useState } from 'react';\nimport { format } from 'date-fns';\nimport { FormattedMessage, useIntl } from 'umi';\nimport { message } from 'antd';\nimport ProTable from '@ant-design/pro-table';\nimport type { ProColumns, ActionType } from '@ant-design/pro-table';\n\nimport { DAY_FORMAT } from '@/consts/dates';\nimport { groupAttendanceSchedule as fetchGroupAttendanceSchedule } from '@/services/escola-lms/attendances';\nimport { studentUserGroup as fetchStudentUserGroup } from '@/services/escola-lms/student_user_groups';\nimport AttendanceCheckbox from '@/components/AttendanceCheckbox';\nimport { useTeacherSubject } from '../context';\n\ntype AttendanceTableItem = { id: number; full_name: string } & Record<string, API.AttendanceValue>;\n\ninterface AttendanceTableFilters {\n  full_name?: string;\n  group_id?: number;\n}\n\nexport const Attendances: React.FC = () => {\n  const { teacherSubjectData } = useTeacherSubject();\n  const [dynamicCols, setDynamicCols] = useState<ProColumns<AttendanceTableItem>[]>([]);\n  const [selectedGroupName, setSelectedGroupName] = useState('');\n  const intl = useIntl();\n\n  const actionRef = useRef<ActionType>();\n\n  const groupOptions = useMemo(\n    () => (teacherSubjectData?.groups ?? []).map(({ id, name }) => ({ value: id, label: name })),\n    [teacherSubjectData?.groups],\n  );\n\n  const columns: ProColumns<AttendanceTableItem>[] = useMemo(\n    () => [\n      {\n        title: <FormattedMessage id=\"group\" />,\n        dataIndex: 'group_id',\n        hideInTable: true,\n        valueType: 'select',\n        fieldProps: {\n          options: groupOptions,\n          defaultValue: groupOptions?.[0]?.value,\n          allowClear: false,\n        },\n      },\n      {\n        title: <FormattedMessage id=\"nameAndSurname\" defaultMessage=\"Name and surname\" />,\n        dataIndex: 'full_name',\n        fixed: 'left',\n      },\n      ...dynamicCols,\n    ],\n    [groupOptions, dynamicCols],\n  );\n\n  return (\n    <ProTable<AttendanceTableItem, AttendanceTableFilters>\n      className=\"table-standalone\"\n      headerTitle={`${intl.formatMessage({\n        id: 'attendances',\n        defaultMessage: 'Attendances',\n      })} (${selectedGroupName})`}\n      request={async ({ group_id = groupOptions?.[0]?.value, full_name = '' }) => {\n        const [studentUserGroupRes, groupAttendanceScheduleRes] = await Promise.all([\n          fetchStudentUserGroup(group_id),\n          fetchGroupAttendanceSchedule(group_id),\n        ]);\n        const selectedGroup = groupOptions.find(({ value }) => value === group_id);\n\n        if (!studentUserGroupRes.success || !groupAttendanceScheduleRes.success || !selectedGroup)\n          return { data: [], total: 0, success: false };\n\n        if (!groupAttendanceScheduleRes.data.length) {\n          message.error(\n            intl.formatMessage({\n              id: 'noAttendanceSchedule',\n              defaultMessage: 'No attendance schedule for this group...',\n            }),\n          );\n\n          return { data: [], total: 0, success: false };\n        }\n\n        setSelectedGroupName(selectedGroup.label);\n        setDynamicCols(\n          groupAttendanceScheduleRes.data.reduce<ProColumns<AttendanceTableItem>[]>(\n            (acc, curr) => [\n              ...acc,\n              {\n                title: String(format(new Date(curr.date_from), DAY_FORMAT)),\n                dataIndex: String(curr.date_from),\n                hideInSearch: true,\n                width: 100,\n                align: 'center',\n                render: (_, record) => (\n                  <AttendanceCheckbox\n                    groupAttendanceScheduleId={curr.id}\n                    attendance={record[`${curr?.date_from}`]}\n                    studentId={record.id}\n                  />\n                ),\n              },\n            ],\n            [],\n          ),\n        );\n\n        const data = studentUserGroupRes.data.users\n          .reduce<AttendanceTableItem[]>(\n            (acc, { id, academic_teacher_id, first_name, last_name }) => {\n              const studentFullName = `${last_name} ${first_name}`;\n              // filter out tutor & first name and second name filter\n              if (\n                academic_teacher_id !== null ||\n                !studentFullName.toLowerCase().includes(full_name.toLowerCase())\n              )\n                return acc;\n\n              const studentAttendances = groupAttendanceScheduleRes.data.reduce<\n                Record<string, API.AttendanceValue>\n              >((innerAcc, groupAttendanceSchedule) => {\n                const studentAttendance = groupAttendanceSchedule.attendances.find(\n                  (attendance) => attendance.user_id === id,\n                );\n                if (!studentAttendance) return innerAcc;\n\n                return {\n                  ...innerAcc,\n                  [`${groupAttendanceSchedule.date_from}`]: studentAttendance.value,\n                };\n              }, {});\n\n              return [...acc, { id, full_name: studentFullName, ...studentAttendances }];\n            },\n            [],\n          )\n          .sort((a, b) => a.full_name.localeCompare(b.full_name));\n\n        return { data, total: data.length, success: true };\n      }}\n      columns={columns}\n      search={{ layout: 'vertical' }}\n      pagination={{ onChange: () => actionRef.current?.reload() }}\n      scroll={{ x: 1500 }}\n      actionRef={actionRef}\n      rowKey=\"id\"\n    />\n  );\n};\n","import { request } from 'umi';\nimport type { RequestOptionsInit } from 'umi-request';\n\n/**  GET /api/admin/semester-subjects/:semester_subject_id/tutors/:tutor_id/grades */\nexport async function getSubjectTutorGrades(\n  semester_subject_id: number,\n  tutor_id: number,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.SubjectTutorGrades>>(\n    `/api/admin/semester-subjects/${semester_subject_id}/tutors/${tutor_id}/grades`,\n    {\n      method: 'GET',\n      /* useCache: true */ useCache: false,\n      ...(options || {}),\n    },\n  );\n}\n\n/**  POST /api/admin/semester-subjects/:semester_subject_id/tutors/:tutor_id/grades */\nexport async function createSubjectTutorGrades(\n  semester_subject_id: number,\n  tutor_id: number,\n  body: API.CreateSubjectTutorGradesRequest,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.GradeScale[]>>(\n    `/api/admin/semester-subjects/${semester_subject_id}/tutors/${tutor_id}/grades`,\n    {\n      method: 'POST',\n      data: body,\n      ...(options || {}),\n    },\n  );\n}\n\n/**  GET /api/admin/lesson-group-users */\nexport async function getGroupFinalGrades(\n  group_id: number | number[],\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.FinalGradeItem[]>>(`/api/admin/lesson-group-users`, {\n    method: 'GET',\n    params: { 'groups[]': group_id },\n    /* useCache: true */ useCache: false,\n    ...(options || {}),\n  });\n}\n\n/**  GET /api/admin/lesson-group-users/groups/:group_id/users/:user_id */\nexport async function getUserFinalGrades(\n  group_id: number,\n  user_id: number,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.FinalGradeItem>>(\n    `/api/admin/lesson-group-users/groups/${group_id}/users/${user_id}`,\n    {\n      method: 'GET',\n      /* useCache: true */ useCache: false,\n      ...(options || {}),\n    },\n  );\n}\n\n/** GET /api/admin/grade-terms */\nexport async function getGradeTerms(options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.GradeTerm[]>>(`/api/admin/grade-terms`, {\n    method: 'GET',\n    /* useCache: true */ useCache: false,\n    ...(options || {}),\n  });\n}\n\n/** GET /api/admin/grade-scales/:s_subject_scale_form_id */\nexport async function getSubjectGradeScales(\n  s_subject_scale_form_id: number,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.SubjectGradeScale[]>>(\n    `/api/admin/grade-scales/${s_subject_scale_form_id}`,\n    {\n      method: 'GET',\n      /* useCache: true */ useCache: false,\n      ...(options || {}),\n    },\n  );\n}\n\n/** POST /api/admin/final-grades */\nexport async function createFinalGrade(\n  body: API.CreateFinalGradeRequest,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.FinalGradeItem>>(`/api/admin/final-grades`, {\n    method: 'POST',\n    data: body,\n    ...(options || {}),\n  });\n}\n\n/** PATCH /api/admin/final-grades/:id */\nexport async function updateFinalGrade(\n  final_grade_id: number,\n  body: API.UpdateFinalGradeRequest,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.FinalGradeItem>>(\n    `/api/admin/final-grades/${final_grade_id}`,\n    {\n      method: 'PATCH',\n      data: body,\n      ...(options || {}),\n    },\n  );\n}\n\n/** DELETE /api/admin/final-grades/:id */\nexport async function removeFinalGrade(final_grade_id: number, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<undefined>>(`/api/admin/final-grades/${final_grade_id}`, {\n    method: 'DELETE',\n    ...(options || {}),\n  });\n}\n","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { FormattedMessage, useModel } from 'umi';\nimport { Button, Divider, Select, Spin, Typography } from 'antd';\nimport ProForm from '@ant-design/pro-form';\nimport { EditableProTable } from '@ant-design/pro-table';\nimport type { ProColumns, ActionType } from '@ant-design/pro-table';\nimport { CheckOutlined, EditOutlined } from '@ant-design/icons';\n\nimport { createSubjectTutorGrades, getSubjectTutorGrades } from '@/services/escola-lms/grades';\nimport { useTeacherSubject } from '../context';\n\ntype TableGradeScale = API.GradeScale & { id: string };\n\ninterface FormData {\n  table: TableGradeScale[];\n}\n\nconst staticColumns: ProColumns<TableGradeScale>[] = [\n  {\n    title: <FormattedMessage id=\"grade\" />,\n    dataIndex: 'grade',\n    editable: false,\n  },\n  {\n    title: <FormattedMessage id=\"degree\" />,\n    dataIndex: 'name',\n    editable: false,\n  },\n  {\n    title: <FormattedMessage id=\"min_percent\" />,\n    dataIndex: 'grade_value',\n    valueType: 'percent',\n    formItemProps: {\n      rules: [\n        {\n          required: true,\n          message: <FormattedMessage id=\"field_required\" />,\n        },\n        {\n          type: 'number',\n          min: 0,\n          max: 100,\n          message: <FormattedMessage id=\"number_between\" values={{ min: 0, max: 100 }} />,\n        },\n      ],\n    },\n  },\n];\n\ninterface GradeScaleTableProps {\n  subjectTutorGradeScale: API.SubjectTutorGradeScale;\n  onFormSubmit: (formData: FormData) => Promise<void>;\n}\n\nconst GradeScaleTable: React.FC<GradeScaleTableProps> = ({\n  subjectTutorGradeScale,\n  onFormSubmit,\n}) => {\n  const [editableKeys, setEditableKeys] = useState<React.Key[]>([]);\n  const actionRef = useRef<ActionType>();\n\n  const [form] = ProForm.useForm<FormData>();\n\n  useEffect(() => {\n    const gradeScaleWithIds = (subjectTutorGradeScale.scale ?? []).map((values, i) => ({\n      ...values,\n      id: String((i + 1) * 100),\n    }));\n\n    form.setFieldValue('table', gradeScaleWithIds);\n  }, []);\n\n  return (\n    <ProForm<FormData>\n      form={form}\n      onFinish={onFormSubmit}\n      submitter={{ render: (_p, [, submit]) => [submit] }}\n    >\n      <EditableProTable<TableGradeScale>\n        name=\"table\"\n        rowKey=\"id\"\n        actionRef={actionRef}\n        formItemProps={{ label: <FormattedMessage id=\"grades-scale\" /> }}\n        cardProps={{ bodyStyle: { padding: 0 } }}\n        recordCreatorProps={false}\n        columns={[\n          ...staticColumns,\n          {\n            title: <FormattedMessage id=\"options\" />,\n            valueType: 'option',\n            render: (_n, row) => (\n              <Button\n                type=\"primary\"\n                onClick={() => actionRef.current?.startEditable(row.id)}\n                icon={<EditOutlined />}\n              />\n            ),\n          },\n        ]}\n        editable={{\n          form,\n          type: 'multiple',\n          editableKeys,\n          saveText: <Button type=\"primary\" icon={<CheckOutlined />} />,\n          onChange: setEditableKeys,\n          actionRender: (_r, _c, dom) => [dom.save],\n        }}\n      />\n    </ProForm>\n  );\n};\n\nexport const GradesScale: React.FC = () => {\n  const { initialState } = useModel('@@initialState');\n  const { semester_subject_id, tutors } = useTeacherSubject();\n\n  const [subjectTutorGrades, setSubjectTutorGrades] = useState<API.SubjectTutorGrades>();\n  const [loading, setLoading] = useState(false);\n  const [selectedTutor, setSelectedTutor] = useState<number | null>(null);\n\n  const tutorViewing = useMemo(\n    () => !!tutors.data.find(({ id }) => id === initialState?.currentUser?.id),\n    [tutors.data, initialState?.currentUser?.id],\n  );\n  const tutorsSelectOptions = useMemo(\n    () =>\n      tutors.data.map(({ id, first_name, last_name }) => ({\n        label: `${first_name} ${last_name}`,\n        value: id,\n      })),\n    [tutors.data],\n  );\n\n  const refreshSubjectTutorGrades = useCallback(() => {\n    if (semester_subject_id === null || selectedTutor === null) return;\n\n    setLoading(true);\n    setSubjectTutorGrades(undefined);\n    getSubjectTutorGrades(semester_subject_id, selectedTutor)\n      .then((response) => {\n        if (response.success) {\n          setSubjectTutorGrades(response.data);\n        }\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, [semester_subject_id, selectedTutor]);\n\n  const onFormSubmitFactory = useCallback(\n    (subjectTutorGradeScales: API.SubjectTutorGradeScale[], s_subject_scale_form_id: number) =>\n      async (formData: FormData) => {\n        if (semester_subject_id === null || selectedTutor === null) return;\n\n        const grade_scale = subjectTutorGradeScales.reduce<API.SubjectTutorGradeScale[]>(\n          (acc, tutorGradeScale) =>\n            tutorGradeScale.s_subject_scale_form_id === s_subject_scale_form_id\n              ? [\n                  ...acc,\n                  {\n                    s_subject_scale_form_id,\n                    scale: formData.table.map(({ name, grade, grade_value }) => ({\n                      name,\n                      grade,\n                      grade_value,\n                    })),\n                  },\n                ]\n              : [...acc, tutorGradeScale],\n          [],\n        );\n\n        const res = await createSubjectTutorGrades(semester_subject_id, selectedTutor, {\n          grade_scale,\n        });\n\n        if (res.success) {\n          refreshSubjectTutorGrades();\n        }\n      },\n    [selectedTutor, semester_subject_id],\n  );\n\n  useEffect(() => {\n    if (!tutorViewing || !initialState?.currentUser?.id) {\n      if (tutors.data?.[0]) {\n        setSelectedTutor(tutors.data?.[0].id);\n      }\n      return;\n    }\n\n    setSelectedTutor(initialState?.currentUser?.id);\n  }, [initialState?.currentUser?.id, tutorViewing]);\n\n  useEffect(() => {\n    refreshSubjectTutorGrades();\n  }, [refreshSubjectTutorGrades]);\n\n  if (tutors.loading) {\n    return <Spin />;\n  }\n\n  return (\n    <>\n      <ProForm.Item label={<FormattedMessage id=\"menu.Teacher\" />}>\n        <Select\n          disabled={tutorViewing}\n          placeholder={<FormattedMessage id=\"select\" />}\n          options={tutorsSelectOptions}\n          value={selectedTutor}\n          onChange={(v) => setSelectedTutor(v)}\n        />\n      </ProForm.Item>\n      <Divider />\n      {loading && !subjectTutorGrades && <Spin />}\n      {subjectTutorGrades?.grade_scale ? (\n        subjectTutorGrades.grade_scale.map((subjectTutorGradeScale, i) => (\n          <React.Fragment key={subjectTutorGradeScale.s_subject_scale_form_id}>\n            {i > 0 && <Divider />}\n            <GradeScaleTable\n              subjectTutorGradeScale={subjectTutorGradeScale}\n              onFormSubmit={onFormSubmitFactory(\n                subjectTutorGrades.grade_scale ?? [],\n                subjectTutorGradeScale.s_subject_scale_form_id,\n              )}\n            />\n          </React.Fragment>\n        ))\n      ) : (\n        <Typography.Paragraph style={{ textAlign: 'center' }}>\n          <FormattedMessage id=\"gradesScalesMissing\" />\n        </Typography.Paragraph>\n      )}\n    </>\n  );\n};\n","import type { RequestOptionsInit } from 'umi-request';\nimport { request } from 'umi';\n\nexport async function allSchedules(\n  params: API.PageParams &\n    API.PaginationParams & {\n      // query\n      semester_subject_id?: number | null;\n      date_form?: Date;\n      date_to?: Date;\n      group_id?: number;\n      term_status_id?: number;\n    },\n  options?: RequestOptionsInit,\n) {\n  return request<API.ScheduleList>(`/api/admin/schedules`, {\n    params,\n    method: 'GET',\n    /* useCache: true */ useCache: false,\n    ...(options || {}),\n  });\n}\n","import React, { useCallback, useEffect, useState, useMemo } from 'react';\nimport moment from 'moment';\nimport { FormattedMessage } from 'umi';\nimport { Badge, Button, Modal, Typography, Calendar } from 'antd';\nimport type { CalendarMode } from 'antd/lib/calendar/generateCalendar';\n\nimport { DAYTIME_FORMAT } from '@/consts/dates';\nimport { allSchedules as fetchAllSchedules } from '@/services/escola-lms/schedules';\nimport { useTeacherSubject } from '../context';\nimport './index.css';\n\ninterface EventCalendarProps {\n  id: number;\n  title: string;\n  start: Date | string;\n  end: Date | string;\n  tutor_name: string;\n  tutor_email: string;\n  group: string;\n  semester: string;\n  subject: string;\n  ms_teams_join_url: string | null;\n}\n\nexport const Schedule: React.FC = () => {\n  const [selectedEvent, setSelectedEvent] = useState<EventCalendarProps | null>(null);\n  const [eventData, setEventData] = useState<API.ScheduleData[]>([]);\n  const { semester_subject_id } = useTeacherSubject();\n  const now = moment();\n\n  const events: EventCalendarProps[] = useMemo(\n    () =>\n      eventData.map((event) => ({\n        id: event.id,\n        title: `${event.group.name} (${event.term_status.name})`,\n        start: moment(event.date_from).toDate(),\n        end: moment(event.date_to).toDate(),\n        tutor_name: `${event.tutor.first_name} ${event.tutor.last_name}`,\n        tutor_email: event.tutor.email,\n        semester: event.semester.name,\n        group: event.group.name,\n        subject: event.subject.name,\n        ms_teams_join_url: event.ms_teams_join_url,\n      })),\n    [eventData],\n  );\n\n  const fetchEvents = useCallback(\n    (start: moment.Moment, end: moment.Moment) => {\n      fetchAllSchedules({\n        semester_subject_id: semester_subject_id,\n        date_form: start.toDate(),\n        date_to: end.toDate(),\n      }).then((response) => {\n        if (response.success) {\n          setEventData(response.data);\n        }\n      });\n    },\n    [semester_subject_id],\n  );\n\n  const handleEventClick = useCallback((event: EventCalendarProps) => {\n    setSelectedEvent(event);\n  }, []);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedEvent(null);\n  }, []);\n\n  const checkDate = useCallback((date: moment.Moment) => {\n    if (date.isSame(now, 'day')) {\n      return 'warning';\n    }\n    return date.isAfter(now, 'day') ? 'success' : 'error';\n  }, []);\n\n  const dateCellRender = useCallback(\n    (date: moment.Moment) => {\n      const filteredEvents = events.filter((event) => moment(event.start).isSame(date, 'day'));\n\n      return (\n        <ul className=\"events\">\n          {filteredEvents.map((event) => (\n            <li key={event.id} onClick={() => handleEventClick(event)}>\n              <Badge status={checkDate(moment(event.start))} text={event.title} />\n            </li>\n          ))}\n        </ul>\n      );\n    },\n    [eventData],\n  );\n\n  const handlePanelChange = useCallback((date: moment.Moment, mode: CalendarMode) => {\n    const start = moment(date).startOf(mode).subtract(1, 'month');\n    const end = moment(date).endOf(mode).add(1, 'month');\n    fetchEvents(start, end);\n  }, []);\n\n  useEffect(() => {\n    const initialStartDate = moment().startOf('month');\n    const initialEndDate = moment().endOf('month');\n    fetchEvents(initialStartDate, initialEndDate);\n  }, []);\n  return (\n    <>\n      <Typography.Title level={4}>\n        <FormattedMessage id=\"schedule\" defaultMessage=\"Schedule\" />\n      </Typography.Title>\n\n      <Calendar dateCellRender={dateCellRender} onPanelChange={handlePanelChange} />\n\n      <Modal\n        open={selectedEvent !== null}\n        title={`${selectedEvent?.subject}: ${selectedEvent?.title}`}\n        onCancel={handleModalClose}\n        footer={null}\n      >\n        <Typography.Paragraph>\n          <FormattedMessage id=\"tutorName\" defaultMessage=\"Tutor\" />: {selectedEvent?.tutor_name}\n        </Typography.Paragraph>\n        <Typography.Paragraph>\n          <FormattedMessage id=\"email\" defaultMessage=\"Email\" />: {selectedEvent?.tutor_email}\n        </Typography.Paragraph>\n        <Typography.Paragraph>\n          <FormattedMessage id=\"group\" defaultMessage=\"Group\" />: {selectedEvent?.group}\n        </Typography.Paragraph>\n        <Typography.Paragraph>\n          <FormattedMessage id=\"semester\" defaultMessage=\"Semester\" />: {selectedEvent?.semester}\n        </Typography.Paragraph>\n        <Typography.Paragraph>\n          <FormattedMessage id=\"started_at\" defaultMessage=\"Start date\" />:\n          {selectedEvent && moment(selectedEvent.start).format(DAYTIME_FORMAT)}\n        </Typography.Paragraph>\n        <Typography.Paragraph>\n          <FormattedMessage id=\"end_at\" defaultMessage=\"End date\" />:\n          {selectedEvent && moment(selectedEvent.end).format(DAYTIME_FORMAT)}\n        </Typography.Paragraph>\n        {selectedEvent?.ms_teams_join_url && (\n          <Typography.Paragraph>\n            <a\n              href={selectedEvent.ms_teams_join_url}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              key=\"teamsLink\"\n            >\n              <Button type=\"primary\">\n                <FormattedMessage id=\"msTeams\" />\n              </Button>\n            </a>\n          </Typography.Paragraph>\n        )}\n      </Modal>\n    </>\n  );\n};\n","import type { StudentExam } from './types';\n\nexport const getStudentExamsFromExams = (exams: API.Exam[], student_id: number): StudentExam[] =>\n  exams.reduce<StudentExam[]>((acc, { results, ...exam }) => {\n    const result = results.find((examResult) => examResult.user_id === student_id);\n    if (!result) return acc;\n\n    return [...acc, { ...exam, result }];\n  }, []);\n\nexport const getProposedGrade = (\n  studentExams: StudentExam[],\n  tutorGradeScales: API.GradeScale[],\n): string => {\n  const [sum, weightsSum] = studentExams.reduce<[number, number]>(\n    (acc, { result, weight }) => [acc[0] + result.result * weight, acc[1] + weight],\n    [0, 0],\n  );\n  const weightedAverage = Number.isNaN(sum / weightsSum) ? 0 : sum / weightsSum;\n\n  const sortedGradeScales = tutorGradeScales\n    .sort((a, b) => a.grade_value - b.grade_value)\n    .reduce<(API.GradeScale & { isWeightedAverageGreater: boolean })[]>(\n      (acc, curr) => [\n        ...acc,\n        {\n          ...curr,\n          isWeightedAverageGreater: weightedAverage >= curr.grade_value,\n        },\n      ],\n      [],\n    );\n\n  if (sortedGradeScales.every(({ isWeightedAverageGreater }) => isWeightedAverageGreater)) {\n    return sortedGradeScales.at(-1)?.name ?? '';\n  }\n\n  const firstFalseIndex = sortedGradeScales.findIndex(\n    ({ isWeightedAverageGreater }) => !isWeightedAverageGreater,\n  );\n  if (firstFalseIndex < 0) return '';\n\n  return sortedGradeScales[firstFalseIndex - 1]?.name;\n};\n\nexport const getScalesBySubjectScaleFormId = (\n  s_subject_scale_form_id: number,\n  tutorGrades: API.SubjectTutorGradeScale[],\n): API.GradeScale[] | undefined =>\n  tutorGrades.find(\n    (subjectTutorGradeScale) =>\n      subjectTutorGradeScale.s_subject_scale_form_id === s_subject_scale_form_id,\n  )?.scale;\n","import type React from 'react';\nimport { useCallback, useEffect, useState } from 'react';\nimport { groupAttendanceSchedule } from '@/services/escola-lms/attendances';\nimport {\n  getGradeTerms,\n  getUserFinalGrades,\n  getSubjectGradeScales,\n  getSubjectTutorGrades,\n  removeFinalGrade,\n} from '@/services/escola-lms/grades';\nimport { getExams } from '@/services/escola-lms/exams';\nimport { course, getCourseStats, program } from '@/services/escola-lms/course';\nimport { getFlatTopics } from '@/components/ProgramForm/Context';\nimport { getScalesBySubjectScaleFormId, getStudentExamsFromExams } from './utils';\nimport type { FetchedData, StudentExam } from './types';\n\ntype SetLoading = (loading: boolean) => void;\n\nfunction setLoadingFactory<T>(\n  setter: React.Dispatch<React.SetStateAction<FetchedData<T>>>,\n): SetLoading {\n  return function setLoading(loading) {\n    setter((prev) => ({ ...prev, loading }));\n  };\n}\n\nasync function withLoading<T>(setLoading: SetLoading, promiseCb: () => Promise<T>) {\n  setLoading(true);\n  try {\n    return promiseCb();\n  } finally {\n    setLoading(false);\n  }\n}\n\nexport function useFinalGrades(group_id: number, user_id: number) {\n  const [finalGrades, setFinalGrades] = useState<FetchedData<API.FinalGradeItem>>({\n    loading: false,\n  });\n\n  const setLoading = useCallback(setLoadingFactory(setFinalGrades), []);\n\n  const fetchFinalGrades = useCallback(async () => {\n    const res = await getUserFinalGrades(group_id, user_id);\n    if (!res.success) return res;\n\n    setFinalGrades((prev) => ({ ...prev, data: res.data }));\n    return res;\n  }, [user_id, group_id]);\n\n  const deleteFinalGrade = useCallback(\n    (final_grade_id: number) =>\n      withLoading(setLoading, () => removeFinalGrade(final_grade_id).then(fetchFinalGrades)),\n    [fetchFinalGrades],\n  );\n\n  useEffect(() => {\n    withLoading(setLoading, fetchFinalGrades);\n  }, [fetchFinalGrades]);\n\n  return { finalGrades, deleteFinalGrade };\n}\n\nexport function useGradeTerms() {\n  const [gradeTerms, setGradeTerms] = useState<FetchedData<API.GradeTerm[]>>({ loading: false });\n\n  useEffect(() => {\n    setGradeTerms((prev) => ({ ...prev, loading: true }));\n    getGradeTerms()\n      .then((response) => {\n        if (response.success) {\n          setGradeTerms((prev) => ({ ...prev, data: response.data }));\n        }\n      })\n      .finally(() => {\n        setGradeTerms((prev) => ({ ...prev, loading: false }));\n      });\n  }, []);\n\n  return { gradeTerms };\n}\n\nexport function useSubjectGradeScales(s_subject_scale_form_id: number | undefined) {\n  const [subjectGradeScales, setSubjectGradeScales] = useState<\n    FetchedData<API.SubjectGradeScale[]>\n  >({\n    loading: false,\n  });\n\n  useEffect(() => {\n    if (s_subject_scale_form_id === undefined) return;\n\n    setSubjectGradeScales((prev) => ({ ...prev, loading: true }));\n    getSubjectGradeScales(s_subject_scale_form_id)\n      .then((response) => {\n        if (response.success) {\n          setSubjectGradeScales((prev) => ({ ...prev, data: response.data }));\n        }\n      })\n      .finally(() => {\n        setSubjectGradeScales((prev) => ({ ...prev, loading: false }));\n      });\n  }, [s_subject_scale_form_id]);\n\n  return { subjectGradeScales };\n}\n\nexport function useTutorGradeScales(\n  semester_subject_id: number | undefined | null,\n  tutor_id: number | undefined | null,\n  s_subject_scale_form_id: number | undefined | null,\n) {\n  const [tutorGradeScales, setTutorGradeScales] = useState<FetchedData<API.GradeScale[]>>({\n    loading: false,\n  });\n\n  useEffect(() => {\n    if (\n      typeof semester_subject_id !== 'number' ||\n      typeof tutor_id !== 'number' ||\n      typeof s_subject_scale_form_id !== 'number'\n    )\n      return;\n\n    setTutorGradeScales((prev) => ({ ...prev, loading: true }));\n    getSubjectTutorGrades(semester_subject_id, tutor_id)\n      .then((response) => {\n        if (response.success) {\n          setTutorGradeScales((prev) => ({\n            ...prev,\n            data: getScalesBySubjectScaleFormId(\n              s_subject_scale_form_id,\n              response.data.grade_scale ?? [],\n            )?.map((v, i) => ({ ...v, id: i })),\n          }));\n        }\n      })\n      .finally(() => {\n        setTutorGradeScales((prev) => ({ ...prev, loading: false }));\n      });\n  }, [semester_subject_id, tutor_id]);\n\n  return { tutorGradeScales };\n}\n\nexport function useUserAttendanceSchedules(group_id: number, user_id: number) {\n  const [userAttendanceSchedules, setUserAttendanceSchedules] = useState<\n    FetchedData<API.UserAttendanceSchedule[]>\n  >({ loading: false });\n\n  const fetchUserAttendanceSchedules = useCallback(() => {\n    setUserAttendanceSchedules((prev) => ({ ...prev, loading: true }));\n    groupAttendanceSchedule(group_id)\n      .then((response) => {\n        if (response.success) {\n          const filteredSchedules = response.data.reduce<API.UserAttendanceSchedule[]>(\n            (acc, { attendances, ...rest }) => {\n              const attendance = attendances.find(\n                (attendanceItem) => attendanceItem.user_id === user_id,\n              );\n\n              if (!attendance) return acc;\n\n              return [...acc, { ...rest, attendance }];\n            },\n            [],\n          );\n\n          setUserAttendanceSchedules((prev) => ({ ...prev, data: filteredSchedules }));\n        }\n      })\n      .finally(() => {\n        setUserAttendanceSchedules((prev) => ({ ...prev, loading: false }));\n      });\n  }, [group_id, user_id]);\n\n  useEffect(() => {\n    fetchUserAttendanceSchedules();\n  }, [fetchUserAttendanceSchedules]);\n\n  return { userAttendanceSchedules, fetchUserAttendanceSchedules };\n}\n\nexport function useStudentExams(student_id: number, semester_subject_id: number | null) {\n  const [studentExams, setStudentExams] = useState<FetchedData<StudentExam[]>>({ loading: false });\n\n  useEffect(() => {\n    if (!semester_subject_id) return;\n    setStudentExams((prev) => ({ ...prev, loading: true }));\n    getExams({ student_id, semester_subject_id })\n      .then((response) => {\n        if (response.success) {\n          const data = getStudentExamsFromExams(response.data, student_id);\n\n          setStudentExams((prev) => ({ ...prev, data }));\n        }\n      })\n      .finally(() => {\n        setStudentExams((prev) => ({ ...prev, loading: false }));\n      });\n  }, [student_id, semester_subject_id]);\n\n  return { studentExams };\n}\n\nexport function useUserCoursesStats(group_id: number, user_id: number) {\n  const [userCourses, setUserCourses] = useState<FetchedData<API.Course[]>>({\n    loading: false,\n  });\n  const [userCoursesStats, setUserCoursesStats] = useState<\n    FetchedData<\n      Record<\n        string,\n        { finishedTopics: API.FinishedTopicsUserStats[]; attendanceList: API.CourseAttempts[] }\n      >\n    >\n  >({ loading: false });\n  const [userCoursesTopics, setUserCoursesTopics] = useState<\n    FetchedData<Record<string, API.Topic[]>>\n  >({ loading: false });\n\n  useEffect(() => {\n    setUserCourses((prev) => ({ ...prev, loading: true }));\n    course({ group_id })\n      .then((response) => {\n        if (response.success) {\n          setUserCourses((prev) => ({ ...prev, data: response.data }));\n        }\n      })\n      .finally(() => {\n        setUserCourses((prev) => ({ ...prev, loading: false }));\n      });\n  }, [group_id]);\n\n  useEffect(() => {\n    if (!userCourses.data) return;\n\n    setUserCoursesTopics((prev) => ({ ...prev, loading: true }));\n    Promise.all(userCourses.data.map(({ id }) => program(Number(id))))\n      .then((responses) => {\n        responses.forEach((response) => {\n          if (response.success) {\n            setUserCoursesTopics((prev) => ({\n              ...prev,\n              data: {\n                ...prev.data,\n                [Number(response.data.id)]: getFlatTopics(response.data.lessons),\n              },\n            }));\n          }\n        });\n      })\n      .finally(() => {\n        setUserCoursesTopics((prev) => ({ ...prev, loading: false }));\n      });\n\n    setUserCoursesStats((prev) => ({ ...prev, loading: true }));\n    Promise.all(\n      userCourses.data.map(({ id }) =>\n        getCourseStats(Number(id), [\n          'EscolaLms\\\\Reports\\\\Stats\\\\Course\\\\FinishedTopics',\n          'EscolaLms\\\\Reports\\\\Stats\\\\Course\\\\AttendanceList',\n        ]).then((response) => {\n          if (response.success) {\n            const finishedTopics = (\n              response.data['EscolaLms\\\\Reports\\\\Stats\\\\Course\\\\FinishedTopics'] ?? []\n            ).filter((userStat) => userStat.id === user_id);\n\n            const attendanceList =\n              response.data['EscolaLms\\\\Reports\\\\Stats\\\\Course\\\\AttendanceList'] ?? [];\n\n            setUserCoursesStats((prev) => ({\n              ...prev,\n              data: {\n                ...prev.data,\n                [Number(id)]: { finishedTopics, attendanceList },\n              },\n            }));\n          }\n        }),\n      ),\n    ).finally(() => setUserCoursesStats((prev) => ({ ...prev, loading: false })));\n  }, [userCourses.data, user_id]);\n\n  return { userCourses, userCoursesStats, userCoursesTopics };\n}\n","import React, { useCallback, useMemo } from 'react';\nimport { FormattedMessage, history } from 'umi';\nimport { format } from 'date-fns';\nimport { Button, Col, Divider, message, Popconfirm, Row, Spin, Tooltip, Typography } from 'antd';\nimport { DeleteOutlined } from '@ant-design/icons';\nimport ProForm, { ProFormSelect } from '@ant-design/pro-form';\nimport ProTable, { type ProColumns } from '@ant-design/pro-table';\n\nimport { DAY_FORMAT } from '@/consts/dates';\nimport { createFinalGrade, updateFinalGrade } from '@/services/escola-lms/grades';\nimport AttendanceCheckbox from '@/components/AttendanceCheckbox';\nimport { UserCourseAttempts, UserProgress } from '@/components/CourseStatistics/userProgress';\nimport { useTeacherSubject } from '../../context';\nimport {\n  useFinalGrades,\n  useSubjectGradeScales,\n  useGradeTerms,\n  useUserAttendanceSchedules,\n  useStudentExams,\n  useTutorGradeScales,\n  useUserCoursesStats,\n} from './hooks';\nimport type { StudentExam } from './types';\nimport { getProposedGrade } from './utils';\n\ninterface Props {\n  user_id: number;\n  group_id: number;\n}\n\ninterface FormData {\n  grade_term_id: number;\n  grade_scale_id: number;\n}\n\ntype FinalGradeTableItem = API.GradeTerm & { grade?: API.FinalGradeItemGrade };\n\nconst tutorGradeScalesColumns: ProColumns<API.GradeScale>[] = [\n  {\n    title: <FormattedMessage id=\"grade\" />,\n    dataIndex: 'grade',\n  },\n  {\n    title: <FormattedMessage id=\"degree\" />,\n    dataIndex: 'name',\n  },\n  {\n    title: <FormattedMessage id=\"min_percent\" />,\n    dataIndex: 'grade_value',\n    valueType: 'percent',\n  },\n];\n\nconst userAttendanceColumns: ProColumns<API.UserAttendanceSchedule>[] = [\n  {\n    title: <FormattedMessage id=\"date\" />,\n    dataIndex: 'date_from',\n    render: (_n, row) => format(new Date(row.date_from), DAY_FORMAT),\n  },\n];\n\nconst studentExamsColumns: ProColumns<StudentExam>[] = [\n  {\n    title: <FormattedMessage id=\"name\" />,\n    dataIndex: 'title',\n  },\n  {\n    title: <FormattedMessage id=\"TeacherSubjects.Exams.grade_weight\" defaultMessage=\"Weight\" />,\n    dataIndex: 'weight',\n    valueType: 'percent',\n  },\n  {\n    title: <FormattedMessage id=\"created_at\" defaultMessage=\"Created at\" />,\n    dataIndex: 'created_at',\n    render: (_n, row) => format(new Date(row.created_at), DAY_FORMAT),\n  },\n  {\n    title: <FormattedMessage id=\"grade\" />,\n    dataIndex: 'result',\n    render: (_n, row) => `${row.result.result}%`,\n  },\n];\n\nconst staticFinalGradesColumns: ProColumns<FinalGradeTableItem>[] = [\n  {\n    title: <FormattedMessage id=\"name\" />,\n    dataIndex: 'name',\n  },\n  {\n    title: <FormattedMessage id=\"issued_at\" />,\n    dataIndex: 'grade',\n    render: (_n, row) =>\n      row.grade?.grade_date ? format(new Date(row.grade?.grade_date), DAY_FORMAT) : '-',\n  },\n  {\n    title: <FormattedMessage id=\"grade\" />,\n    dataIndex: 'grade',\n    render: (_n, row) => row.grade?.grade_name ?? '-',\n  },\n];\n\nconst TABLE_PAGE_SIZE = 6;\n\nexport const FinalGradesDetails: React.FC<Props> = ({ user_id, group_id }) => {\n  const { semester_subject_id } = useTeacherSubject();\n  const { studentExams } = useStudentExams(user_id, semester_subject_id);\n  const { finalGrades, deleteFinalGrade } = useFinalGrades(group_id, user_id);\n  const { gradeTerms } = useGradeTerms();\n  const { subjectGradeScales } = useSubjectGradeScales(finalGrades.data?.s_subject_scale_form_id);\n  const { tutorGradeScales } = useTutorGradeScales(\n    semester_subject_id,\n    finalGrades.data?.tutor_id,\n    finalGrades.data?.s_subject_scale_form_id,\n  );\n  const { userAttendanceSchedules, fetchUserAttendanceSchedules } = useUserAttendanceSchedules(\n    group_id,\n    user_id,\n  );\n  const { userCourses, userCoursesStats, userCoursesTopics } = useUserCoursesStats(\n    group_id,\n    user_id,\n  );\n\n  const [form] = ProForm.useForm<FormData>();\n\n  const gradeTermsSelectOptions = useMemo(\n    () => (gradeTerms.data ?? []).map(({ id, name }) => ({ label: name, value: id })),\n    [gradeTerms.data],\n  );\n\n  const gradesSelectOptions = useMemo(\n    () =>\n      (subjectGradeScales.data ?? []).map(({ name, id }) => ({\n        label: name,\n        value: id,\n      })),\n    [subjectGradeScales.data],\n  );\n\n  const proposedGrade = useMemo(\n    () => getProposedGrade(studentExams.data ?? [], tutorGradeScales.data ?? []),\n    [studentExams.data, tutorGradeScales.data],\n  );\n\n  const onFinalGradeSubmit = useCallback(\n    async ({ grade_scale_id, grade_term_id }: FormData) => {\n      if (finalGrades.data?.id === undefined) return;\n\n      const existingFinalGrade = finalGrades.data?.grades.find(\n        ({ grade_term }) => grade_term.id === grade_term_id,\n      );\n\n      if (existingFinalGrade) {\n        const response = await updateFinalGrade(existingFinalGrade.id, { grade_scale_id });\n\n        message[response.success ? 'success' : 'error'](response.message);\n        if (response.success) {\n          history.push(`/teacher/subjects/${semester_subject_id}/final-grades`);\n        }\n        return;\n      }\n\n      const response = await createFinalGrade({\n        grade_scale_id,\n        grade_term_id,\n        lesson_group_user_id: finalGrades.data.id,\n      });\n\n      message[response.success ? 'success' : 'error'](response.message);\n\n      if (response.success) {\n        history.push(`/teacher/subjects/${semester_subject_id}/final-grades`);\n      }\n    },\n    [finalGrades.data, semester_subject_id],\n  );\n\n  const finalGradesColumns: ProColumns<FinalGradeTableItem>[] = useMemo(\n    () => [\n      ...staticFinalGradesColumns,\n      {\n        title: <FormattedMessage id=\"options\" defaultMessage=\"options\" />,\n        dataIndex: 'option',\n        valueType: 'option',\n        render: (_n, record) =>\n          typeof record?.grade?.id === 'number'\n            ? [\n                <Popconfirm\n                  key=\"delete\"\n                  title={\n                    <FormattedMessage\n                      id=\"deleteQuestion\"\n                      defaultMessage=\"Are you sure to delete this record?\"\n                    />\n                  }\n                  onConfirm={() => deleteFinalGrade(record.grade!.id)}\n                  okText={<FormattedMessage id=\"yes\" defaultMessage=\"Yes\" />}\n                  cancelText={<FormattedMessage id=\"no\" defaultMessage=\"No\" />}\n                >\n                  <Tooltip title={<FormattedMessage id=\"delete\" defaultMessage=\"delete\" />}>\n                    <Button type=\"primary\" icon={<DeleteOutlined />} danger />\n                  </Tooltip>\n                </Popconfirm>,\n              ]\n            : [],\n      },\n    ],\n    [],\n  );\n\n  const finalGradesTableData: FinalGradeTableItem[] = useMemo(\n    () =>\n      (gradeTerms.data ?? []).map((term) => ({\n        ...term,\n        grade: finalGrades.data?.grades.find(({ grade_term }) => grade_term.id === term.id),\n      })),\n    [finalGrades.data, gradeTerms.data],\n  );\n\n  const areStatisticsLoading =\n    (userCourses.loading && !userCourses.data) ||\n    (userCoursesStats.loading && !userCoursesStats.data) ||\n    (userCoursesTopics.loading && !userCoursesTopics.data);\n\n  const isStatisticDataPresent = Boolean(\n    userCourses.data && userCoursesStats.data && userCoursesTopics.data,\n  );\n\n  if (finalGrades.loading) {\n    return <Spin />;\n  }\n\n  return (\n    <>\n      {finalGrades.data && (\n        <>\n          <Typography.Text style={{ fontSize: '16px', fontWeight: 500 }}>\n            <FormattedMessage\n              id=\"TeacherSubjects.FinalGrades.Student\"\n              values={finalGrades.data.user}\n            />\n          </Typography.Text>\n          <Divider />\n        </>\n      )}\n      <Row gutter={[48, 48]} justify=\"space-between\">\n        <Col span={12}>\n          <ProTable\n            rowKey=\"id\"\n            headerTitle={<FormattedMessage id=\"TeacherSubjects.FinalGrades.StudentPartialGrades\" />}\n            search={false}\n            pagination={{ pageSize: TABLE_PAGE_SIZE }}\n            dataSource={studentExams.data}\n            loading={studentExams.loading}\n            columns={studentExamsColumns}\n            options={false}\n            cardProps={{ bodyStyle: { padding: 0 } }}\n          />\n        </Col>\n        <Col span={12}>\n          <ProTable\n            rowKey=\"id\"\n            headerTitle={<FormattedMessage id=\"TeacherSubjects.FinalGrades.FinalGrades\" />}\n            search={false}\n            pagination={{ pageSize: TABLE_PAGE_SIZE }}\n            dataSource={finalGradesTableData}\n            loading={finalGrades.loading || gradeTerms.loading}\n            columns={finalGradesColumns}\n            options={false}\n            cardProps={{ bodyStyle: { padding: 0 } }}\n          />\n        </Col>\n        <Col span={12}>\n          <ProTable<API.UserAttendanceSchedule>\n            rowKey=\"id\"\n            headerTitle={<FormattedMessage id=\"TeacherSubjects.FinalGrades.Attendances\" />}\n            search={false}\n            options={false}\n            pagination={{ pageSize: TABLE_PAGE_SIZE }}\n            cardProps={{ bodyStyle: { padding: 0 } }}\n            dataSource={userAttendanceSchedules.data}\n            loading={userAttendanceSchedules.loading}\n            columns={[\n              ...userAttendanceColumns,\n              {\n                title: <FormattedMessage id=\"TeacherSubjects.FinalGrades.Attendance\" />,\n                dataIndex: 'attendance',\n                render: (_n, row) => (\n                  <AttendanceCheckbox\n                    groupAttendanceScheduleId={row.id}\n                    studentId={user_id}\n                    attendance={row.attendance.value}\n                    onSuccess={fetchUserAttendanceSchedules}\n                  />\n                ),\n              },\n            ]}\n          />\n        </Col>\n        <Col span={12}>\n          <ProTable<API.GradeScale>\n            rowKey=\"id\"\n            headerTitle={<FormattedMessage id=\"TeacherSubjects.FinalGrades.GradesScale\" />}\n            search={false}\n            options={false}\n            pagination={{ pageSize: TABLE_PAGE_SIZE }}\n            cardProps={{ bodyStyle: { padding: 0 } }}\n            dataSource={tutorGradeScales.data}\n            loading={tutorGradeScales.loading}\n            columns={tutorGradeScalesColumns}\n          />\n        </Col>\n        {areStatisticsLoading && <Spin />}\n        {isStatisticDataPresent &&\n          userCourses.data?.map(({ id, title }) => (\n            <Col key={id} span={24}>\n              <Typography.Text style={{ fontSize: '16px', fontWeight: 500 }}>\n                {title}\n              </Typography.Text>\n              <UserProgress\n                course_id={Number(id)}\n                topics={userCoursesTopics.data?.[Number(id)] ?? []}\n                stats={userCoursesStats.data?.[Number(id)]?.finishedTopics ?? []}\n              />\n              <UserCourseAttempts\n                stats={userCoursesStats.data?.[Number(id)]?.attendanceList ?? []}\n              />\n            </Col>\n          ))}\n      </Row>\n      <ProForm<FormData> form={form} onFinish={onFinalGradeSubmit}>\n        <ProForm.Group\n          style={{ display: 'flex', flexDirection: 'column', paddingTop: '48px' }}\n          title={<FormattedMessage id=\"TeacherSubjects.FinalGrades.IssueAssessment\" />}\n          titleStyle={{ flex: 'unset' }}\n          align=\"center\"\n        >\n          <ProFormSelect\n            name=\"grade_term_id\"\n            rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n            label={<FormattedMessage id=\"TeacherSubjects.FinalGrades.GradeTerm\" />}\n            options={gradeTermsSelectOptions}\n            width=\"sm\"\n            fieldProps={{ loading: gradeTerms.loading }}\n          />\n          <ProFormSelect\n            name=\"grade_scale_id\"\n            rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n            label={<FormattedMessage id=\"TeacherSubjects.FinalGrades.FinalGrade\" />}\n            options={gradesSelectOptions}\n            fieldProps={{ loading: finalGrades.loading || subjectGradeScales.loading }}\n          />\n          <ProForm.Item>\n            <FormattedMessage\n              id=\"TeacherSubjects.FinalGrades.ProposedGrade\"\n              values={{ grade: proposedGrade }}\n            />\n          </ProForm.Item>\n        </ProForm.Group>\n      </ProForm>\n    </>\n  );\n};\n","import React, { useMemo } from 'react';\nimport type { Location } from 'history';\nimport { FormattedMessage, Link, useLocation } from 'umi';\nimport { Button, Tooltip, Typography } from 'antd';\nimport ProTable from '@ant-design/pro-table';\nimport type { ProColumns } from '@ant-design/pro-table';\nimport { EditOutlined } from '@ant-design/icons';\n\nimport TypeButtonDrawer from '@/components/TypeButtonDrawer';\nimport { getGroupFinalGrades } from '@/services/escola-lms/grades';\nimport { FinalGradesDetails } from './FinalGradesDetails';\nimport { useTeacherSubject } from '../context';\n\ninterface TableParams {\n  group_id?: number[];\n  first_name?: string;\n  last_name?: string;\n}\n\nconst staticColumns: ProColumns<API.FinalGradeItem>[] = [\n  {\n    title: <FormattedMessage id=\"first_name\" />,\n    dataIndex: 'first_name',\n    render: (_n, row) => row.user.first_name,\n  },\n  {\n    title: <FormattedMessage id=\"last_name\" />,\n    dataIndex: 'last_name',\n    render: (_n, row) => row.user.last_name,\n  },\n  {\n    title: <FormattedMessage id=\"grade\" />,\n    hideInSearch: true,\n    dataIndex: 'grades',\n    render: (_n, row) => (\n      <div style={{ display: 'flex', flexDirection: 'column', gap: '4px' }}>\n        {row.grades.length\n          ? row.grades.map(({ grade_name, grade_term, id }) => (\n              <Typography.Text key={id}>\n                {grade_term.name}: {grade_name}\n              </Typography.Text>\n            ))\n          : '-'}\n      </div>\n    ),\n  },\n];\n\nexport const FinalGradesList: React.FC = () => {\n  const location = useLocation() as Location & { query: { user_id?: string; group_id?: string } };\n  const { user_id, group_id } = useMemo(\n    () => ({\n      user_id: Number.isNaN(Number(location.query?.user_id))\n        ? null\n        : Number(location.query?.user_id),\n      group_id: Number.isNaN(Number(location.query?.group_id))\n        ? null\n        : Number(location.query?.group_id),\n    }),\n\n    [location.query?.user_id, location.query?.group_id],\n  );\n\n  const { teacherSubjectData, semester_subject_id } = useTeacherSubject();\n\n  const groupOptions = useMemo(\n    () => (teacherSubjectData?.groups ?? []).map(({ id, name }) => ({ label: name, value: id })),\n    [teacherSubjectData?.groups],\n  );\n\n  if (user_id !== null && group_id !== null) {\n    return <FinalGradesDetails user_id={user_id} group_id={group_id} />;\n  }\n\n  return (\n    <ProTable<API.FinalGradeItem, TableParams>\n      className=\"table-standalone\"\n      rowKey=\"id\"\n      search={{ layout: 'vertical' }}\n      request={async ({ group_id: group_ids = [], first_name = '', last_name = '' }) => {\n        const allGroups = (teacherSubjectData?.groups ?? []).map(({ id }) => id);\n\n        const response = await getGroupFinalGrades(group_ids.length === 0 ? allGroups : group_ids);\n\n        if (!response.success) {\n          return { success: false, total: 0, data: [] };\n        }\n\n        // TODO backend filter\n        const data = response.data.filter(\n          ({ user }) =>\n            user.first_name.toLowerCase().includes(first_name.toLowerCase()) &&\n            user.last_name.toLowerCase().includes(last_name.toLowerCase()),\n        );\n\n        return { success: true, total: data.length, data };\n      }}\n      columns={[\n        {\n          title: <FormattedMessage id=\"group\" />,\n          dataIndex: 'group_id',\n          valueType: 'select',\n          fieldProps: {\n            options: groupOptions,\n            mode: 'multiple',\n          },\n          render: (_n, row) => (\n            <TypeButtonDrawer key={row.group_id} type=\"Students\" type_id={row.group_id} />\n          ),\n        },\n        ...staticColumns,\n        {\n          title: <FormattedMessage id=\"options\" />,\n          hideInSearch: true,\n          render: (_n, row) => [\n            <Link\n              key=\"edit\"\n              to={`/teacher/subjects/${semester_subject_id}/final-grades?user_id=${row.user.id}&group_id=${row.group_id}`}\n            >\n              <Tooltip title={<FormattedMessage id=\"edit\" />}>\n                <Button type=\"primary\" icon={<EditOutlined />} />\n              </Tooltip>\n            </Link>,\n          ],\n        },\n      ]}\n    />\n  );\n};\n","import React, { useMemo } from 'react';\nimport { format } from 'date-fns';\nimport { FormattedMessage } from 'umi';\nimport { Button, Tooltip } from 'antd';\nimport type { ProColumns } from '@ant-design/pro-table';\nimport ProTable from '@ant-design/pro-table';\nimport { DownloadOutlined } from '@ant-design/icons';\n\nimport { DATETIME_FORMAT } from '@/consts/dates';\nimport { getPCGExportsHistory } from '@/services/escola-lms/pcg-export';\nimport TypeButtonDrawer from '@/components/TypeButtonDrawer';\nimport UserSelect from '@/components/UserSelect';\nimport { useTeacherSubject } from '../context';\n\nconst DownloadButton: React.FC<{ url: string }> = ({ url }) => (\n  <Tooltip title={<FormattedMessage id=\"download\" />}>\n    <Button\n      type=\"primary\"\n      onClick={() => {\n        window.open(url, '_blank', 'noopener noreferrer');\n      }}\n      icon={<DownloadOutlined />}\n    />\n  </Tooltip>\n);\n\nconst staticColumns: ProColumns<API.PCGFileExportsHistoryItem>[] = [\n  {\n    title: <FormattedMessage id=\"ID\" />,\n    dataIndex: 'id',\n    hideInSearch: true,\n  },\n  {\n    title: <FormattedMessage id=\"created_at\" />,\n    dataIndex: 'created_at',\n    hideInSearch: true,\n    render: (_n, record) => format(new Date(record.created_at), DATETIME_FORMAT),\n  },\n  {\n    title: <FormattedMessage id=\"created_by\" />,\n    dataIndex: 'created_by',\n    renderFormItem: (item, { type, defaultRender, ...rest }, form) => {\n      if (type === 'form') {\n        return null;\n      }\n      const stateType = form.getFieldValue('state');\n      return (\n        <UserSelect\n          {...rest}\n          state={{\n            type: stateType,\n          }}\n        />\n      );\n    },\n    render: (_n, record) => (\n      <TypeButtonDrawer\n        key={record.created_by.id}\n        type=\"EscolaLms\\Core\\Models\\User\"\n        type_id={record.created_by.id}\n        text={\n          record?.created_by?.first_name && record?.created_by?.last_name\n            ? `${record.created_by.first_name} ${record.created_by.last_name}`\n            : undefined\n        }\n      />\n    ),\n  },\n  {\n    title: <FormattedMessage id=\"exported_at\" />,\n    dataIndex: 'exported_at',\n    hideInSearch: true,\n    render: (_n, record) => format(new Date(record.exported_at), DATETIME_FORMAT),\n  },\n  {\n    title: <FormattedMessage id=\"exported_by\" />,\n    dataIndex: 'exported_by',\n    renderFormItem: (item, { type, defaultRender, ...rest }, form) => {\n      if (type === 'form') {\n        return null;\n      }\n      const stateType = form.getFieldValue('state');\n      return (\n        <UserSelect\n          {...rest}\n          state={{\n            type: stateType,\n          }}\n        />\n      );\n    },\n    render: (_n, record) => (\n      <TypeButtonDrawer\n        key={record.exported_by.id}\n        type=\"EscolaLms\\Core\\Models\\User\"\n        type_id={record.exported_by.id}\n        text={\n          record?.exported_by?.first_name && record?.exported_by?.last_name\n            ? `${record.exported_by.first_name} ${record.exported_by.last_name}`\n            : undefined\n        }\n      />\n    ),\n  },\n  {\n    title: <FormattedMessage id=\"version\" />,\n    dataIndex: 'version',\n    hideInSearch: true,\n  },\n  {\n    title: <FormattedMessage id=\"options\" />,\n    valueType: 'option',\n    render: (_n, record) => [<DownloadButton key=\"download\" url={record.url} />],\n  },\n];\n\nexport const FileExportsHistory: React.FC = () => {\n  const { teacherSubjectData } = useTeacherSubject();\n\n  const groupOptions = useMemo(\n    () => (teacherSubjectData?.groups ?? []).map(({ id, name }) => ({ value: id, label: name })),\n    [teacherSubjectData?.groups],\n  );\n\n  const columns: ProColumns<API.PCGFileExportsHistoryItem>[] = useMemo(\n    () => [\n      {\n        title: <FormattedMessage id=\"group\" />,\n        dataIndex: 'group_id',\n        hideInTable: true,\n        valueType: 'select',\n        fieldProps: {\n          options: groupOptions,\n          defaultValue: teacherSubjectData?.groups?.[0]?.id,\n          allowClear: false,\n        },\n      },\n      ...staticColumns,\n    ],\n    [teacherSubjectData?.groups?.[0]?.id, groupOptions],\n  );\n\n  return (\n    <ProTable<API.PCGFileExportsHistoryItem, API.PCGFileExportsHistoryParams>\n      className=\"table-standalone\"\n      request={async ({\n        group_id = teacherSubjectData?.groups?.[0]?.id,\n        created_by,\n        exported_by,\n      }) => {\n        const response = await getPCGExportsHistory({ group_id, created_by, exported_by });\n\n        if (!response.success) {\n          return { success: false, data: [], total: 0 };\n        }\n\n        return { success: true, data: response.data, total: response.data.length };\n      }}\n      columns={columns}\n      search={{ layout: 'vertical' }}\n      scroll={{ x: 1500 }}\n    />\n  );\n};\n","import React, { useCallback, useMemo, useState } from 'react';\nimport { FormattedMessage } from 'umi';\nimport { Select } from 'antd';\n\nimport { createFinalGrade, removeFinalGrade, updateFinalGrade } from '@/services/escola-lms/grades';\n\ninterface Props {\n  term: API.GradeTerm;\n  gradeScales: API.SubjectGradeScale[];\n  defaultFinalGrade?: API.FinalGradeItemGrade;\n  finalGrades?: API.FinalGradeItem;\n}\n\nconst getGradeScaleId = (\n  gradeScales: API.SubjectGradeScale[],\n  name: string | undefined,\n): number | undefined => gradeScales.find((scale) => scale.name === name)?.id;\n\nexport const FinalGradeSelect: React.FC<Props> = ({\n  term,\n  gradeScales,\n  defaultFinalGrade,\n  finalGrades,\n}) => {\n  const [createdGrade, setCreatedGrade] = useState(defaultFinalGrade);\n\n  const [loading, setLoading] = useState(false);\n\n  const options = useMemo(\n    () => gradeScales.map(({ name, id }) => ({ value: id, label: name })),\n    [gradeScales],\n  );\n\n  const onChange = useCallback(\n    (grade_scale_id: number | undefined) => {\n      if (!finalGrades?.id) return;\n\n      if (grade_scale_id === undefined) {\n        if (!createdGrade) return;\n        setLoading(true);\n        removeFinalGrade(createdGrade.id)\n          .then((res) => {\n            if (!res.success) return;\n            setCreatedGrade(undefined);\n          })\n          .finally(() => setLoading(false));\n        return;\n      }\n\n      if (createdGrade) {\n        setLoading(true);\n        updateFinalGrade(createdGrade.id, {\n          grade_scale_id,\n        }).finally(() => setLoading(false));\n        return;\n      }\n\n      setLoading(true);\n      createFinalGrade({\n        grade_term_id: term.id,\n        grade_scale_id,\n        lesson_group_user_id: finalGrades.id,\n      })\n        .then((res) => {\n          if (res.success) {\n            const recentGrade = res.data.grades.find((grade) => grade.grade_term.id === term.id);\n            setCreatedGrade(recentGrade);\n          }\n        })\n        .finally(() => setLoading(false));\n    },\n    [createdGrade, term.id, finalGrades?.id],\n  );\n\n  if (!finalGrades) return null;\n\n  return (\n    <Select\n      allowClear\n      loading={loading}\n      disabled={loading}\n      placeholder={<FormattedMessage id=\"select_final_grade\" />}\n      style={{ width: '100%' }}\n      onChange={onChange}\n      options={options}\n      defaultValue={getGradeScaleId(gradeScales, defaultFinalGrade?.grade_name)}\n    />\n  );\n};\n","import React, { useCallback } from 'react';\nimport { InputNumber } from 'antd';\nimport { debounce } from 'lodash';\n\nimport { createExamResult } from '@/services/escola-lms/exams';\n\ninterface Props {\n  exam_id: number;\n  result: number;\n  student_id: number;\n  onSuccess?: (exam: API.Exam) => void;\n}\n\nexport const ExamGradeInput: React.FC<Props> = ({ exam_id, result, student_id, onSuccess }) => {\n  const onChange = useCallback(\n    debounce((value: number | null) => {\n      createExamResult(exam_id, student_id, { result: value ?? 0 }).then((res) => {\n        if (res.success) {\n          onSuccess?.(res.data);\n        }\n      });\n    }, 300),\n    [exam_id, result, student_id],\n  );\n\n  return <InputNumber type=\"number\" min={0} max={100} onChange={onChange} defaultValue={result} />;\n};\n","import { FormattedMessage } from 'umi';\nimport { format } from 'date-fns';\nimport type { ProColumns } from '@ant-design/pro-table';\n\nimport { DAY_FORMAT } from '@/consts/dates';\nimport AttendanceCheckbox from '@/components/AttendanceCheckbox';\n\nimport type { StudentExam } from '../FinalGradesDetails/types';\nimport { FinalGradeSelect } from '../FinalGradeSelect';\nimport { ExamGradeInput } from '../ExamGradeInput';\nimport type {\n  ClassRegisterTableItemAttendance,\n  ClassRegisterTableItemFinalGrade,\n  ClassRegisterTableItem,\n  ClassRegisterTableItemExamResult,\n} from './types';\n\n/* Attendance */\nexport const getAttendanceCols = (\n  groupAttendanceSchedule: API.GroupAttendanceSchedule[],\n): ProColumns<ClassRegisterTableItem> => {\n  const dynamicCols = groupAttendanceSchedule.reduce<ProColumns<ClassRegisterTableItem>[]>(\n    (acc, curr) => [\n      ...acc,\n      {\n        title: format(new Date(curr.date_from), DAY_FORMAT),\n        dataIndex: `attendance-${curr.date_from}`,\n        hideInSearch: true,\n        width: 100,\n        align: 'center',\n        render: (_, record) => (\n          <AttendanceCheckbox\n            groupAttendanceScheduleId={curr.id}\n            attendance={record[`attendance-${curr?.date_from}`]}\n            studentId={record.id}\n          />\n        ),\n      },\n    ],\n    [],\n  );\n\n  if (!dynamicCols.length)\n    return { title: <FormattedMessage id=\"attendance\" />, hideInSearch: true, hideInTable: true };\n\n  return {\n    title: <FormattedMessage id=\"attendance\" />,\n    hideInSearch: true,\n    children: dynamicCols,\n  };\n};\n\nexport const getStudentAttendances = (\n  groupAttendanceSchedules: API.GroupAttendanceSchedule[],\n  student_id: number,\n): ClassRegisterTableItemAttendance =>\n  groupAttendanceSchedules.reduce((innerAcc, groupAttendanceSchedule) => {\n    const studentAttendance = groupAttendanceSchedule.attendances.find(\n      (attendance) => attendance.user_id === student_id,\n    );\n    if (!studentAttendance) return innerAcc;\n\n    return {\n      ...innerAcc,\n      [`attendance-${groupAttendanceSchedule.date_from}`]: studentAttendance.value,\n    };\n  }, {});\n\n/* Exams */\nexport const getExamsCols = (exams: API.Exam[]): ProColumns<ClassRegisterTableItem> => {\n  const dynamicCols = exams.reduce<ProColumns<ClassRegisterTableItem>[]>(\n    (acc, exam) => [\n      ...acc,\n      {\n        dataIndex: `exam-${exam.id}`,\n        title: <FormattedMessage id=\"examTitleWithWeight\" values={exam} />,\n        hideInSearch: true,\n        width: 100,\n        render: (_n, record) =>\n          record?.[`exam-${exam.id}`]?.result !== undefined ? (\n            <ExamGradeInput\n              result={record?.[`exam-${exam.id}`].result}\n              exam_id={exam.id}\n              student_id={record.id}\n            />\n          ) : (\n            '-'\n          ),\n      },\n    ],\n    [],\n  );\n\n  if (!dynamicCols.length)\n    return { title: <FormattedMessage id=\"exams\" />, hideInSearch: true, hideInTable: true };\n\n  return { title: <FormattedMessage id=\"exams\" />, hideInSearch: true, children: dynamicCols };\n};\n\nexport const getStudentExamResults = (\n  studentExams: StudentExam[],\n): ClassRegisterTableItemExamResult =>\n  studentExams.reduce(\n    (innerAcc, { result, id: exam_id }) => ({\n      ...innerAcc,\n      [`exam-${exam_id}`]: result,\n    }),\n    {},\n  );\n\n/* Final grades */\nexport const getFinalGradesCols = (\n  gradeTerms: API.GradeTerm[],\n  subjectGradeScales: API.SubjectGradeScale[],\n): ProColumns<ClassRegisterTableItem> => ({\n  title: <FormattedMessage id=\"final-grades\" />,\n  hideInSearch: true,\n  children: gradeTerms.map((term) => ({\n    title: term.name,\n    hideInSearch: true,\n    width: 100,\n    align: 'center',\n    render: (_n, record) => (\n      <FinalGradeSelect\n        defaultFinalGrade={record[`final-grade-${term.id}`]}\n        finalGrades={record.final_grades}\n        term={term}\n        gradeScales={subjectGradeScales}\n      />\n    ),\n  })),\n});\n\nexport const getStudentFinalGrades = (\n  finalGrades: API.FinalGradeItem[],\n  student_id: number,\n): API.FinalGradeItem | undefined =>\n  finalGrades.find((finalGradeItem) => finalGradeItem.user.id === student_id);\n\nexport const getFinalGrades = (\n  studentFinalGrade?: API.FinalGradeItem,\n): ClassRegisterTableItemFinalGrade =>\n  (studentFinalGrade?.grades ?? []).reduce(\n    (acc, grade) => ({ ...acc, [`final-grade-${grade.grade_term.id}`]: grade }),\n    {},\n  );\n","import React, { useMemo, useRef, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'umi';\nimport { message } from 'antd';\nimport ProTable from '@ant-design/pro-table';\nimport type { ProColumns, ActionType } from '@ant-design/pro-table';\n\nimport { groupAttendanceSchedule as fetchGroupAttendanceSchedule } from '@/services/escola-lms/attendances';\nimport { studentUserGroup as fetchStudentUserGroup } from '@/services/escola-lms/student_user_groups';\nimport {\n  getSubjectTutorGrades as fetchSubjectTutorGrades,\n  getGroupFinalGrades as fetchGroupFinalGrades,\n  getGradeTerms as fetchGradeTerms,\n  getSubjectGradeScales as fetchSubjectGradeScales,\n} from '@/services/escola-lms/grades';\nimport { getExams as fetchExams } from '@/services/escola-lms/exams';\nimport { useTeacherSubject } from '../../context';\nimport {\n  getProposedGrade,\n  getScalesBySubjectScaleFormId,\n  getStudentExamsFromExams,\n} from '../FinalGradesDetails/utils';\nimport {\n  getAttendanceCols,\n  getExamsCols,\n  getFinalGrades,\n  getFinalGradesCols,\n  getStudentAttendances,\n  getStudentExamResults,\n  getStudentFinalGrades,\n} from './utils';\nimport type { ClassRegisterTableItem } from './types';\n\nexport const ClassRegister: React.FC = () => {\n  const { teacherSubjectData, semester_subject_id } = useTeacherSubject();\n  const [dynamicCols, setDynamicCols] = useState<ProColumns<ClassRegisterTableItem>[]>([]);\n  const [selectedGroupName, setSelectedGroupName] = useState(teacherSubjectData?.groups?.[0]?.name);\n  const intl = useIntl();\n\n  const groupOptions = useMemo(\n    () => (teacherSubjectData?.groups ?? []).map(({ id, name }) => ({ value: id, label: name })),\n    [teacherSubjectData?.groups],\n  );\n\n  const actionRef = useRef<ActionType>();\n\n  const columns: ProColumns[] = useMemo(\n    () => [\n      {\n        title: <FormattedMessage id=\"group\" />,\n        dataIndex: 'group_id',\n        hideInTable: true,\n        valueType: 'select',\n        fieldProps: {\n          options: groupOptions,\n          defaultValue: groupOptions?.[0]?.value,\n          allowClear: false,\n        },\n      },\n      {\n        title: <FormattedMessage id=\"nameAndSurname\" defaultMessage=\"Name and surname\" />,\n        dataIndex: 'full_name',\n        fixed: 'left',\n      },\n      ...dynamicCols,\n    ],\n    [groupOptions, dynamicCols],\n  );\n\n  return (\n    <ProTable<ClassRegisterTableItem>\n      className=\"table-standalone\"\n      request={async ({ group_id = groupOptions[0]?.value, full_name = '' }) => {\n        const finalGradesRes = await fetchGroupFinalGrades(group_id);\n        const selectedGroup = groupOptions.find(({ value }) => value === group_id);\n        if (\n          !finalGradesRes.success ||\n          finalGradesRes.data[0] === undefined ||\n          semester_subject_id === null\n        ) {\n          message.error(\n            intl.formatMessage({ id: 'groupDataMissing' }, { group_name: selectedGroup?.label }),\n          );\n\n          return { data: [], total: 0, success: false };\n        }\n\n        const [\n          studentUserGroupRes,\n          groupAttendanceScheduleRes,\n          examsRes,\n          tutorGradesRes,\n          gradeTermsRes,\n          subjectGradeScalesRes,\n        ] = await Promise.all([\n          fetchStudentUserGroup(group_id),\n          fetchGroupAttendanceSchedule(group_id),\n          fetchExams({ group_id, per_page: -1 }),\n          fetchSubjectTutorGrades(semester_subject_id, finalGradesRes.data?.[0]?.tutor_id),\n          fetchGradeTerms(),\n          fetchSubjectGradeScales(finalGradesRes.data?.[0]?.s_subject_scale_form_id),\n        ]);\n\n        if (\n          !studentUserGroupRes.success ||\n          !groupAttendanceScheduleRes.success ||\n          !examsRes.success ||\n          !tutorGradesRes.success ||\n          !gradeTermsRes.success ||\n          !subjectGradeScalesRes.success ||\n          !selectedGroup\n        ) {\n          message.error(\n            intl.formatMessage({ id: 'groupDataMissing' }, { group_name: selectedGroup?.label }),\n          );\n\n          return { data: [], total: 0, success: false };\n        }\n        setSelectedGroupName(selectedGroup.label);\n\n        /* COLS */\n        const attendanceCols = getAttendanceCols(groupAttendanceScheduleRes.data);\n        const examsCols = getExamsCols(examsRes.data);\n        const finalGradeCols = getFinalGradesCols(gradeTermsRes.data, subjectGradeScalesRes.data);\n\n        setDynamicCols([\n          attendanceCols,\n          examsCols,\n          finalGradeCols,\n          {\n            title: <FormattedMessage id=\"proposed_grade\" />,\n            hideInSearch: true,\n            dataIndex: 'proposed_grade',\n            align: 'center',\n            width: 100,\n          },\n        ]);\n\n        const data = studentUserGroupRes.data.users\n          .reduce<ClassRegisterTableItem[]>(\n            (acc, { id, academic_teacher_id, first_name, last_name }) => {\n              const studentFullName = `${last_name} ${first_name}`;\n              // filter out tutor & first name and second name filter\n              if (\n                academic_teacher_id !== null ||\n                !studentFullName.toLowerCase().includes(full_name.toLowerCase())\n              )\n                return acc;\n\n              const studentAttendances = getStudentAttendances(groupAttendanceScheduleRes.data, id);\n\n              const studentExams = getStudentExamsFromExams(examsRes.data, id);\n\n              const studentFinalGrades = getStudentFinalGrades(finalGradesRes.data, id);\n\n              const tutorScales =\n                getScalesBySubjectScaleFormId(\n                  studentFinalGrades?.s_subject_scale_form_id ?? 0,\n                  tutorGradesRes.data.grade_scale ?? [],\n                ) ?? [];\n\n              const proposed_grade = getProposedGrade(studentExams, tutorScales);\n\n              const studentExamResults = getStudentExamResults(studentExams);\n\n              const finalGrades = getFinalGrades(studentFinalGrades);\n\n              return [\n                ...acc,\n                {\n                  id,\n                  full_name: studentFullName,\n                  ...studentAttendances,\n                  ...studentExamResults,\n                  ...finalGrades,\n                  proposed_grade,\n                  final_grades: studentFinalGrades,\n                },\n              ];\n            },\n            [],\n          )\n          // sort alphabetically\n          .sort((a, b) => a.full_name.localeCompare(b.full_name));\n\n        return { data, total: data.length, success: true };\n      }}\n      columns={columns}\n      headerTitle={\n        <FormattedMessage\n          id=\"classRegisterTitleWithGroupName\"\n          values={{ groupName: selectedGroupName }}\n        />\n      }\n      search={{ layout: 'vertical' }}\n      scroll={{ x: 1500 }}\n      actionRef={actionRef}\n      pagination={{ onChange: () => actionRef.current?.reload() }}\n      rowKey=\"id\"\n    />\n  );\n};\n","import React, { useCallback, useMemo } from 'react';\nimport { useParams, history, useIntl, FormattedMessage, useModel, Link } from 'umi';\nimport { Spin, Button } from 'antd';\nimport ProCard from '@ant-design/pro-card';\nimport { PageContainer } from '@ant-design/pro-layout';\n\nimport PERMISSIONS from '@/consts/permissions';\nimport { isUserHavePermissions } from '@/services/escola-lms/permissions';\nimport { TeacherSubjectContextProvider, useTeacherSubject } from './context';\nimport { Groups } from './components/Groups';\nimport { Exams } from './components/Exams';\nimport { Students } from './components/Students';\nimport { Attendances } from './components/Attendances';\nimport { GradesScale } from './components/GradesScale';\nimport { Schedule } from './components/Schedule';\nimport { FinalGradesList } from './components/FinalGradesList';\nimport { FileExportsHistory } from './components/FileExportsHistory';\nimport { ClassRegister } from './components/ClassRegister';\n\nconst TeacherSubjectsFormContent: React.FC<{ tab: string }> = ({ tab }) => {\n  const intl = useIntl();\n  const { setInitialState, initialState } = useModel('@@initialState');\n  const { teacherSubjectData, semester_subject_id, tutors } = useTeacherSubject();\n\n  const currentUserHasPermissions = useCallback(\n    isUserHavePermissions(initialState?.currentUser as API.UserItem),\n    [initialState?.currentUser],\n  );\n\n  const showGradeScale = useMemo(\n    () =>\n      !!tutors.data.find(({ id }) => id === initialState?.currentUser?.id) ||\n      currentUserHasPermissions(PERMISSIONS.TeacherListGradeScale),\n    [],\n  );\n\n  if (!teacherSubjectData) {\n    return <Spin />;\n  }\n\n  return (\n    <PageContainer\n      title={\n        <>\n          <FormattedMessage id={teacherSubjectData?.subject?.name} />\n          {', '}\n          <FormattedMessage id={tab} />\n        </>\n      }\n      tabBarExtraContent={\n        <div style={{ display: 'flex', padding: '12px', gap: '12px' }}>\n          <Link to={`/teacher/subjects/${semester_subject_id}/exams?exam_id=new`}>\n            <Button type=\"primary\">\n              <FormattedMessage id=\"uploadGrades\" defaultMessage=\"uploadGrades\" />\n            </Button>\n          </Link>\n        </div>\n      }\n      header={{\n        breadcrumb: {\n          routes: [\n            {\n              path: 'teacher',\n              breadcrumbName: intl.formatMessage({\n                id: 'menu.Teacher',\n              }),\n            },\n            {\n              path: 'subjects',\n              breadcrumbName: intl.formatMessage({\n                id: 'menu.Teacher.Subjects',\n              }),\n            },\n            {\n              path: String(semester_subject_id),\n              breadcrumbName: String(teacherSubjectData.subject?.name),\n            },\n            {\n              path: String(tab),\n              breadcrumbName: intl.formatMessage({ id: tab, defaultMessage: String(tab) }),\n            },\n          ],\n        },\n      }}\n    >\n      <ProCard\n        bodyStyle={{ padding: '24px' }}\n        tabs={{\n          type: 'card',\n          activeKey: tab,\n          onChange: (key) => {\n            setInitialState({\n              ...initialState,\n            });\n\n            history.push(`/teacher/subjects/${semester_subject_id}/${key}`);\n          },\n        }}\n      >\n        <ProCard.TabPane key=\"groups\" tab={<FormattedMessage id=\"groups\" />}>\n          <Groups />\n        </ProCard.TabPane>\n        <ProCard.TabPane key=\"students\" tab={<FormattedMessage id=\"students\" />}>\n          <Students />\n        </ProCard.TabPane>\n        <ProCard.TabPane key=\"exams\" tab={<FormattedMessage id=\"exams\" />}>\n          <Exams />\n        </ProCard.TabPane>\n        <ProCard.TabPane key=\"schedule\" tab={<FormattedMessage id=\"schedule\" />}>\n          <Schedule />\n        </ProCard.TabPane>\n        <ProCard.TabPane key=\"class-register\" tab={<FormattedMessage id=\"class-register\" />}>\n          <ClassRegister />\n        </ProCard.TabPane>\n        <ProCard.TabPane key=\"attendance\" tab={<FormattedMessage id=\"attendance\" />}>\n          <Attendances />\n        </ProCard.TabPane>\n        {showGradeScale && (\n          <ProCard.TabPane key=\"grades-scale\" tab={<FormattedMessage id=\"grades-scale\" />}>\n            <GradesScale />\n          </ProCard.TabPane>\n        )}\n        <ProCard.TabPane key=\"final-grades\" tab={<FormattedMessage id=\"final-grades\" />}>\n          <FinalGradesList />\n        </ProCard.TabPane>\n        <ProCard.TabPane\n          key=\"file-exports-history\"\n          tab={<FormattedMessage id=\"file-exports-history\" />}\n        >\n          <FileExportsHistory />\n        </ProCard.TabPane>\n      </ProCard>\n    </PageContainer>\n  );\n};\n\nexport default () => {\n  const params = useParams<{ subjectId?: string; tab?: string }>();\n  const { subjectId, tab = 'groups' } = params;\n\n  return (\n    <TeacherSubjectContextProvider semester_subject_id={Number(subjectId)}>\n      <TeacherSubjectsFormContent tab={tab} />\n    </TeacherSubjectContextProvider>\n  );\n};\n","import React, { useCallback, useEffect, useState, useMemo } from 'react';\nimport { message } from 'antd';\nimport { useIntl, useLocation } from 'umi';\nimport { history } from 'umi';\nimport type { Location } from 'history';\n\nimport {\n  program,\n  createLesson as apiCreateLesson,\n  updateLesson as apiUpdateLesson,\n  createTopic as apiCreateTopic,\n  updateTopic as apiUpdateTopic,\n  removeLesson as apiRemoveLesson,\n  removeTopic as apiRemoveTopic,\n  cloneLesson as apiCloneLesson,\n  cloneTopic as apiCloneTopic,\n} from '@/services/escola-lms/course';\n\nimport type { UploadChangeParam } from 'antd/lib/upload';\nimport { TopicType } from '@/services/escola-lms/enums';\n\ntype CurrentEditMode =\n  | { mode: 'lesson'; id: number; value?: API.Lesson | null }\n  | { mode: 'topic'; id: number; value?: API.Topic | null }\n  | { mode: 'init' };\n\ntype ProgramContext = {\n  currentEditMode?: CurrentEditMode;\n  state?: API.CourseProgram;\n  h5ps?: any[];\n  // token: credentials.token,\n  id?: number;\n  addNewLesson?: (parentId?: number) => API.Lesson;\n  updateLesson?: (lesson_id: number, data: FormData) => Promise<void | boolean>;\n  updateTopic?: (topic_id: number, data: FormData) => Promise<void>;\n  // addResource,\n  // removeResource,\n  deleteLesson?: (lesson_id: number) => void;\n  // updateH5P,\n  addNewTopic?: (lesson_id: number, type: API.TopicType) => API.Topic;\n  deleteTopic?: (topic_id: number) => void;\n  onTopicUploaded?: (prevTopicId: number, info: UploadChangeParam) => void;\n  cloneTopic?: (topic_id: number) => void;\n  cloneLesson?: (lesson_id: number) => void;\n  getLessons?: () => void;\n};\n\nexport const Context = React.createContext<ProgramContext>({});\n\nconst getRandomId = () => Math.round(Math.random() * 99999);\n\nconst getFlatLessons = (lessons: API.Lesson[]): API.Lesson[] => {\n  return lessons.reduce((acc, curr) => {\n    return [...acc, ...(curr.lessons ? getFlatLessons(curr.lessons) : []), curr];\n  }, [] as API.Lesson[]) as API.Lesson[];\n};\n\nexport const getFlatTopics = (lessons: API.Lesson[]): API.Topic[] => {\n  return lessons.reduce((acc, curr) => {\n    return [...acc, ...(curr.lessons ? getFlatTopics(curr.lessons) : []), ...(curr.topics ?? [])];\n  }, [] as API.Topic[]) as API.Topic[];\n};\n\nconst recursiveAddTopicToLessons = (\n  lessons: API.Lesson[],\n  lessonId: number,\n  topic: API.Topic,\n): API.Lesson[] => {\n  return lessons.map((lesson) => ({\n    ...lesson,\n    lessons: lesson.lessons ? recursiveAddTopicToLessons(lesson.lessons, lessonId, topic) : [],\n    topics: lesson.id === lessonId ? [...(lesson.topics ?? []), topic] : lesson.topics ?? [],\n  }));\n};\n\n// Probably should be removed\n// const recursiveEditTopic = (\n//   lessons: API.Lesson[],\n//   topicId: number,\n//   updatedTopic: API.Topic,\n// ): API.Lesson[] => {\n//   return lessons.map((lesson) => ({\n//     ...lesson,\n//     lessons: recursiveEditTopic(lesson.lessons ?? [], topicId, updatedTopic),\n//     topics: lesson.topics?.map((topic) => (topic.id === topicId ? updatedTopic : topic)) ?? [],\n//   }));\n// };\n\nconst recursiveAddLessonToLessons = (\n  lessons: API.Lesson[],\n  newLesson: API.Lesson,\n  lessonId?: number | null,\n): API.Lesson[] => {\n  if (!lessonId) {\n    return [...lessons, newLesson];\n  }\n  return lessons.map((lesson) => ({\n    ...lesson,\n    lessons: [\n      ...(lesson.lessons ? recursiveAddLessonToLessons(lesson.lessons, newLesson, lessonId) : []),\n      ...(lesson.id === lessonId ? [newLesson] : []),\n    ],\n  }));\n};\n\nconst recursiveEditLesson = (\n  lessons: API.Lesson[],\n  lessonId: number,\n  updatedLesson: API.Lesson,\n): API.Lesson[] => {\n  return lessons.map((lesson) => ({\n    ...(lesson.id === lessonId ? updatedLesson : lesson),\n    lessons: lesson.lessons ? recursiveEditLesson(lesson.lessons, lessonId, updatedLesson) : [],\n  }));\n};\n\nconst appendParentIdToLessons = (lessons: API.Lesson[], lessonParentId?: number): API.Lesson[] => {\n  return lessons.map((lesson) => ({\n    ...lesson,\n    parent_id: lessonParentId,\n    lessons: lesson.lessons ? appendParentIdToLessons(lesson.lessons, lesson.id) : [],\n  }));\n};\n\nconst recursiveDeleteLesson = (lessons: API.Lesson[], lessonId: number): API.Lesson[] => {\n  return lessons\n    .filter((lesson) => lesson.id !== lessonId)\n    .map((lesson) => ({\n      ...lesson,\n      lessons: lesson.lessons ? recursiveDeleteLesson(lesson.lessons, lessonId) : [],\n    }));\n};\n\nconst recursiveDeleteTopic = (lessons: API.Lesson[], topicId: number): API.Lesson[] => {\n  return lessons.map((lesson) => ({\n    ...lesson,\n    lessons: lesson.lessons ? recursiveDeleteTopic(lesson.lessons, topicId) : [],\n    topics: lesson.topics ? lesson.topics.filter((topic) => topic.id !== topicId) : [],\n  }));\n};\n\nconst recursiveTopicUploaded = (\n  prevTopicId: number,\n  info: UploadChangeParam,\n  lesson_id: number | null | undefined,\n  lessons: API.Lesson[],\n): API.Lesson[] => {\n  return lessons?.map((lesson) => {\n    if (lesson.id === lesson_id) {\n      return {\n        ...lesson,\n        topics: lesson.topics?.map((topic) => {\n          if (topic.id === prevTopicId) {\n            return info.file.response.data;\n          }\n          return topic;\n        }),\n      };\n    } else if (lesson.lessons) {\n      return {\n        ...lesson,\n        lessons: recursiveTopicUploaded(prevTopicId, info, lesson_id, lesson.lessons || []),\n      };\n    }\n    return lesson;\n  });\n};\n\nexport const AppContext: React.FC<{ children: React.ReactNode; id: number }> = ({\n  children,\n  id,\n}) => {\n  const [state, setState] = useState<API.CourseProgram>();\n  const intl = useIntl();\n\n  const flatTopics: API.Topic[] = useMemo(() => {\n    return state && state.lessons ? getFlatTopics(state.lessons) : [];\n  }, [state]);\n\n  const flatLessons: API.Lesson[] = useMemo(() => {\n    return state && state.lessons ? getFlatLessons(state.lessons) : [];\n  }, [state]);\n\n  const [h5ps, setH5ps] = useState([]);\n\n  const l = useLocation() as Location & { query: { lesson?: string; topic?: string } };\n\n  useEffect(() => {\n    setH5ps([]);\n  }, []);\n\n  /*\n  useEffect(() => {\n    API(`h5p`, token)\n      .then((response) => response.json())\n      .then((data) => {\n        setH5ps(data);\n      });\n    //.then(() => addNewLesson());\n  }, []);\n  */\n\n  const getLessons = useCallback(() => {\n    program(id).then((data) => {\n      return (\n        data.success &&\n        setState({\n          ...data.data,\n          lessons: appendParentIdToLessons(data.data.lessons),\n        })\n      );\n    });\n  }, [id]);\n\n  useEffect(() => {\n    getLessons();\n  }, [getLessons]);\n\n  const getLessonIdByTopicId = useCallback(\n    (topic_id: number) => {\n      const lesson = flatLessons.find((lesson_item) =>\n        lesson_item?.topics?.find((topic) => topic.id === topic_id),\n      );\n      return lesson ? lesson.id : null;\n    },\n    [flatLessons],\n  );\n\n  const currentEditMode = useMemo<CurrentEditMode>(() => {\n    if (l.query?.lesson) {\n      return {\n        mode: 'lesson',\n        id: Number(l.query.lesson),\n        value: flatLessons.find((lesson) => lesson.id === Number(l.query.lesson)),\n      };\n    }\n    if (l.query?.topic) {\n      return {\n        mode: 'topic',\n        id: Number(l.query.topic),\n        value: flatTopics.find((t) => t.id === Number(l.query.topic)),\n      };\n    }\n    return { mode: 'init' };\n  }, [l.query, state, flatLessons, flatTopics]);\n\n  const addNewLesson = useCallback(\n    (parentId?: number) => {\n      const newLesson: API.Lesson = {\n        course_id: id,\n        topics: [],\n        isNew: true,\n        id: state ? state.lessons.length + 1 : getRandomId(), // New Lesson\n        order: 0,\n        title: intl.formatMessage({ id: 'add_title_here' }),\n        active: true,\n        parent_id: parentId,\n      };\n\n      setState((prevState) => ({\n        ...prevState,\n        lessons: recursiveAddLessonToLessons(prevState?.lessons ?? [], newLesson, parentId),\n        //lessons: [...(prevState ? prevState.lessons : []), newLesson] as API.Lesson[],\n      }));\n\n      return newLesson;\n    },\n    [id, state],\n  );\n\n  const updateLesson = useCallback(\n    (lesson_id: number, formData: FormData) => {\n      const newLesson = flatLessons.find((lesson) => lesson.id === lesson_id);\n      const isNew = newLesson && newLesson.isNew;\n\n      return (isNew ? apiCreateLesson(formData) : apiUpdateLesson(lesson_id, formData)).then(\n        (data) => {\n          message.success(data.message);\n          getLessons();\n          return (\n            data.success &&\n            setState((prevState) => ({\n              ...prevState,\n              lessons: recursiveEditLesson(prevState?.lessons ?? [], lesson_id, {\n                ...data.data,\n                isNew: false,\n              }),\n              /*\n              lessons: prevState?.lessons\n                ? prevState.lessons.map((lesson) => {\n                    if (lesson.id === lesson_id) {\n                      return {\n                        ...lesson,\n                        ...data.data,\n                        isNew: false,\n                      };\n                    }\n                    return lesson;\n                  })\n                : [data.data],\n                */\n            }))\n          );\n        },\n      );\n    },\n    [state],\n  );\n\n  const deleteLesson = useCallback(\n    (lesson_id: number) => {\n      const lesson = flatLessons.find((lesson_item) => lesson_item.id === lesson_id);\n      if (!lesson) {\n        return;\n      }\n      const { isNew } = lesson;\n\n      if (isNew) {\n        setState((prevState) => ({\n          ...prevState,\n          lessons: recursiveDeleteLesson(prevState?.lessons ?? [], lesson_id),\n        }));\n      } else {\n        apiRemoveLesson(lesson_id).then((data) => {\n          if (data.success) {\n            message.success(data.message);\n            setState((prevState) => ({\n              ...prevState,\n              lessons: recursiveDeleteLesson(prevState?.lessons ?? [], lesson_id),\n            }));\n          }\n        });\n      }\n    },\n    [state],\n  );\n\n  const updateTopic = useCallback(\n    (topic_id: number, formData: FormData) => {\n      const lesson_id = getLessonIdByTopicId(topic_id);\n\n      const lesson = flatLessons.find((lesson_item) => lesson_item.id === lesson_id);\n\n      const topic = lesson && lesson.topics?.find((topic_item) => topic_item.id === topic_id);\n\n      const isNew = topic?.isNew;\n\n      return (isNew ? apiCreateTopic(formData) : apiUpdateTopic(topic_id, formData)).then(\n        (data) => {\n          if (data.success) {\n            message.success(data.message);\n            getLessons();\n\n            history.push(`/courses/list/${id}/program/?topic=${data.data.id}`);\n\n            if (topic?.topicable_type === TopicType.Video) {\n              setTimeout(() => {\n                getLessons();\n              }, 5000);\n            }\n          }\n        },\n      );\n    },\n    [getLessonIdByTopicId, state, getLessons],\n  );\n\n  const deleteTopic = useCallback(\n    (topic_id: number) => {\n      const lesson_id = getLessonIdByTopicId(topic_id);\n\n      const lesson = flatLessons.find((lesson_item) => lesson_item.id === lesson_id);\n      if (!lesson) {\n        return;\n      }\n\n      const topic = flatTopics?.find((topic_item) => topic_item.id === topic_id);\n\n      const isNew = topic?.isNew;\n      if (isNew && !topic.topicable) {\n        setState((prevState) => ({\n          ...prevState,\n          lessons: recursiveDeleteTopic(prevState?.lessons ?? [], topic_id),\n        }));\n      } else {\n        apiRemoveTopic(topic_id).then((data) => {\n          if (data.success) {\n            message.success(data.message);\n            setState((prevState) => ({\n              ...prevState,\n              lessons: recursiveDeleteTopic(prevState?.lessons ?? [], topic_id),\n            }));\n          }\n        });\n\n        // TODO call API to delete\n        /**\n         return API(`topic/delete/${id}`, token, 'POST')\n        .then((response) => response.json())\n        .then(() =>\n          setState((prevState) => ({\n            ...prevState,\n            lessons: prevState.lessons.map((lesson) => {\n              if (lesson.id == id) {\n                return {\n                  ...lesson,\n                  topics: lesson.topics.filter((topic) => topic.id !== id),\n                };\n              }\n              return lesson;\n            }),\n          })),\n        );\n         */\n      }\n    },\n    [state, getLessonIdByTopicId],\n  );\n\n  /*\n  const addResource = useCallback(\n    (id, formData) => {\n      const isNew = false;\n\n      const id = getLessonByTopicId(id);\n\n      return API(`topic/resource/save/${id}`, token, 'POST', formData)\n        .then((response) => response.json())\n        .then((data) =>\n          setState((prevState) => ({\n            ...prevState,\n            lessons: prevState.lessons.map((lesson) => {\n              if (lesson.id == id) {\n                return {\n                  ...lesson,\n                  topics: lesson.topics.map((topic) => {\n                    if (topic.id == id) {\n                      return {\n                        ...topic,\n                        resources: [...topic.resources, data],\n                      };\n                    }\n                    return topic;\n                  }),\n                };\n              }\n              return lesson;\n            }),\n          })),\n        );\n    },\n    [state],\n  );\n  */\n\n  /*\n  const removeResource = useCallback(\n    (resource_id) => {\n      // resource/delete/{courseFiles}\n\n      const id = getQuizIdByResourseId(resource_id);\n      const id = getLessonByTopicId(id);\n\n      return API(`topic/resource/delete/${resource_id}`, token, 'DELETE', null)\n        .then((response) => response.json())\n        .then(() =>\n          setState((prevState) => ({\n            ...prevState,\n            lessons: prevState.lessons.map((lesson) => {\n              if (lesson.id == id) {\n                return {\n                  ...lesson,\n                  topics: lesson.topics.map((topic) => {\n                    if (topic.id == id) {\n                      return {\n                        ...topic,\n                        resources: topic.resources.filter(\n                          (resource) => resource.id !== resource_id,\n                        ),\n                      };\n                    }\n                    return topic;\n                  }),\n                };\n              }\n              return lesson;\n            }),\n          })),\n        );\n    },\n    [state],\n  );\n  */\n\n  /*\n  const updateH5P = useCallback(\n    (id, h5p_id) => {\n      const id = getLessonByTopicId(id);\n      return API(`topic/h5p/save/${id}`, token, 'POST', getFormData({ media: h5p_id }))\n        .then((response) => response.json())\n        .then((data) =>\n          setState((prevState) => ({\n            ...prevState,\n            lessons: prevState.lessons.map((lesson) => {\n              if (lesson.id == id) {\n                return {\n                  ...lesson,\n                  topics: lesson.topics.map((topic) => {\n                    if (topic.id == id) {\n                      return {\n                        ...topic,\n                        media: data,\n                      };\n                    }\n                    return topic;\n                  }),\n                };\n              }\n              return lesson;\n            }),\n          })),\n        );\n    },\n    [state],\n  );\n  */\n\n  const addNewTopic = useCallback((lesson_id: number, type: API.TopicType) => {\n    const newTopic: API.Topic = {\n      lesson_id,\n      isNew: true,\n      id: getRandomId(),\n      title: intl.formatMessage({ id: 'add_title_here' }),\n      active: true,\n      topicable_type: type,\n    };\n\n    setState((prevState) => ({\n      ...prevState,\n      lessons: recursiveAddTopicToLessons(prevState?.lessons ?? [], lesson_id, newTopic),\n    }));\n    return newTopic;\n  }, []);\n\n  const onTopicUploaded = (prevTopicId: number, info: UploadChangeParam) => {\n    const lesson_id = getLessonIdByTopicId(prevTopicId);\n    setState((prevState) => ({\n      ...prevState,\n      lessons: prevState\n        ? recursiveTopicUploaded(prevTopicId, info, lesson_id, prevState.lessons || [])\n        : [],\n      // Probably should be removed\n      // lessons: recursiveEditTopic(prevState?.lessons ?? [], prevTopicId, info.file.response.data),\n    }));\n    // Update topic id in params after receiving from server\n    history.push(`/courses/list/${id}/program/?topic=${info.file.response.data.id}`);\n  };\n\n  const cloneTopic = useCallback(\n    (topic_id: number) => {\n      return apiCloneTopic(topic_id).then((response) => {\n        if (response.success) {\n          message.success(response.message);\n          const lesson_id = getLessonIdByTopicId(topic_id);\n\n          setState((prevState) => ({\n            ...prevState,\n            lessons: prevState\n              ? prevState.lessons?.map((lesson) => {\n                  if (lesson.id === lesson_id) {\n                    const topics = lesson.topics || [];\n                    return {\n                      ...lesson,\n                      topics: [...topics, response.data] as API.Topic[],\n                    };\n                  }\n                  return lesson;\n                })\n              : [],\n          }));\n        }\n      });\n    },\n    [state, getLessonIdByTopicId],\n  );\n\n  const cloneLesson = useCallback((lesson_id: number) => {\n    return apiCloneLesson(lesson_id).then((response) => {\n      if (response.success) {\n        message.success(response.message);\n\n        setState((prevState) => ({\n          ...prevState,\n          lessons: prevState ? [...prevState.lessons, response.data] : [],\n        }));\n      }\n    });\n  }, []);\n\n  const value = {\n    state,\n    h5ps,\n    // token: credentials.token,\n    id,\n    addNewLesson,\n    updateLesson,\n    updateTopic,\n    // addResource,\n    // removeResource,\n    deleteLesson,\n    // updateH5P,\n    addNewTopic,\n    deleteTopic,\n    onTopicUploaded,\n    cloneTopic,\n    cloneLesson,\n    currentEditMode,\n    getLessons,\n  };\n\n  return <Context.Provider value={value}>{children}</Context.Provider>;\n};\n","import { request } from 'umi';\nimport type { RequestOptionsInit } from 'umi-request';\n\nexport async function reports(\n  params: {\n    // query\n    metric: API.ReportType;\n    date?: string;\n    limit?: number;\n  },\n  options?: RequestOptionsInit,\n) {\n  return request<API.ReportList>('/api/admin/reports/report', {\n    params,\n    method: 'GET',\n    /* useCache: true */ useCache: false,\n    ...(options || {}),\n  });\n}\n\n/* GET /api/admin/stats/course/:course_id/export */\nexport async function exportStatForCourse(\n  course_id: number,\n  params: API.ExportStatForCourseParams,\n  options?: RequestOptionsInit,\n) {\n  return request<Blob | API.DefaultResponseError>(`/api/admin/stats/course/${course_id}/export`, {\n    params,\n    method: 'GET',\n    /* useCache: true */ useCache: false,\n    responseType: 'blob',\n    headers: {\n      accept: 'application/vnd.ms-excel',\n    },\n    ...(options || {}),\n  });\n}\n\n/* GET /api/admin/stats/topic/:topic_id/export */\nexport async function exportStatForTopic(\n  topic_id: number,\n  stat: API.TopicStatsKey,\n  options?: RequestOptionsInit,\n) {\n  return request<Blob | API.DefaultResponseError>(`/api/admin/stats/topic/${topic_id}/export`, {\n    method: 'GET',\n    /* useCache: true */ useCache: false,\n    params: { stat },\n    responseType: 'blob',\n    headers: {\n      accept: 'application/vnd.ms-excel',\n    },\n    ...(options || {}),\n  });\n}\n"],"sourceRoot":""}