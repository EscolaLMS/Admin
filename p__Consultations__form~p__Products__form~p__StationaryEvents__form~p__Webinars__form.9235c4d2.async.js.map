{"version":3,"sources":["webpack:///./src/pages/Products/components/UserAccess.tsx","webpack:///./src/components/TemplateSelect/index.tsx","webpack:///./src/components/TemplateManuallyTrigger/forProduct.tsx","webpack:///./src/pages/Products/components/form.tsx","webpack:///./src/services/escola-lms/users_submissions.ts","webpack:///./src/components/UsersSubmissions/form.tsx","webpack:///./src/components/UsersSubmissions/index.tsx","webpack:///./node_modules/@ant-design/pro-form/es/components/Radio/index.js","webpack:///./src/components/MoneyInput/index.tsx","webpack:///./src/components/CategoryCheckboxTree/index.tsx","webpack:///./src/components/WysiwygMarkdown/index.tsx","webpack:///./src/services/escola-lms/templates.ts","webpack:///./src/components/TagsInput/index.tsx"],"names":["TableColumns","title","dataIndex","UserAccess","id","intl","useIntl","actionRef","useRef","useState","loading","setLoading","ProForm","useForm","form","onFinish","useCallback","value","productAttachToUser","Number","user_id","resetFields","current","reload","onDetachUser","productDetachToUser","formatMessage","defaultMessage","getProduct","then","response","success","data","users","total","length","valueType","width","render","_","record","TemplateSelect","onChange","multiple","params","templates","setTemplates","fetching","setFetching","currTemplates","setCurrTemplates","abortController","fetch","abort","AbortController","fetchTemplates","signal","catch","useEffect","controller","val","Array","isArray","values","map","template","minWidth","undefined","input","option","children","toString","toLowerCase","indexOf","name","channel","split","pop","event","TemplateManuallyTriggerForProduct","productId","setTemplate","onTrigger","triggerManualEventForProduct","message","error","err","finally","TemplateEvents","ManuallyTriggeredEvent","newTemplate","transformProductablesFromAPI","row","class","productable_type","productable_id","quantity","getProductables","valuesArr","result","item","parseInt","ProductsForm","tab","onTabChange","productable","onProductSaved","type","setProductId","currProductables","setCurrProductables","isNew","useMemo","productableType","setProductableType","updateState","forceUpdate","useModel","initialState","currentCurrency","config","find","group","key","setMultiple","class_id","class_type","productForModel","console","log","setFieldsValue","productables","fetchData","newData","categories","categoriesArrToIds","tags","tag","tagsArrToIds","formProps","onValuesChange","related_products","every","related_product","product","postData","createProduct","updateProduct","activeKey","p","required","label","step","formatter","parser","replace","currency","formRef","getFieldValue","Math","round","toFixed","e","target","index","findIndex","collection","info","file","poster_url","removed","options","request","method","body","headers","AddUserSubmission","props","visible","onVisibleChange","hideInSearch","sorter","valueEnum","sent","assigned","accepted","rejected","UserSubmissions","modalVisible","setModalVisible","deleteUserSubmission","layout","sort","email","pageSize","userSubmissions","per_page","page","morphable_type","morphable_id","createTableOrderObject","assignUserSubmission","req","_excluded","RadioGroup","React","forwardRef","_ref","ref","fieldProps","radioType","proFieldProps","rest","_objectWithoutProperties","_jsx","ProField","_objectSpread","runFunction","filedConfig","customLightMode","ProFormRadioComponents","_ref2","_Radio","ProFormRadio","createField","valuePropName","ignoreWidth","WrappedProFormRadio","Group","Button","displayName","centsToDollars","cents","toFixedValue","MoneyInput","restProps","defaultValue","dollars","state","setState","handleInputChange","inputValue","cleanValue","parsedValue","parseFloat","centsValue","trim","formattedDollars","initialValue","isNaN","labelProps","prev","treeConvert","category","subcategories","cat","CategoryCheckboxTree","setCategories","categoryTree","treeData","keys","checked","checkedKeys","EmbedUploaded","attrs","href","filename","FormWysiwyg","directory","matcher","component","upload","includes","resizePath","resizedImage","url","Error","v","useCache","templateId","Option","TagsInput","setTags","tagsUnique"],"mappings":"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","file":"p__Consultations__form~p__Products__form~p__StationaryEvents__form~p__Webinars__form.9235c4d2.async.js","sourcesContent":["import React, { Fragment, useCallback, useRef, useState } from 'react';\nimport ProForm from '@ant-design/pro-form';\nimport UserSelect from '@/components/UserSelect';\nimport { useIntl, FormattedMessage } from 'umi';\nimport {\n  productAttachToUser,\n  productDetachToUser,\n  getProduct,\n} from '@/services/escola-lms/products';\nimport { Button, Tooltip } from 'antd';\n\nimport type { ProColumns, ActionType } from '@ant-design/pro-table';\nimport ProTable from '@ant-design/pro-table';\nimport { DeleteOutlined } from '@ant-design/icons';\n\nexport type MinimumUser = {\n  id: number;\n  email: string;\n  name: string;\n};\n\nexport const TableColumns: ProColumns<MinimumUser>[] = [\n  {\n    title: <FormattedMessage id=\"name\" defaultMessage=\"name\" />,\n    dataIndex: 'name',\n  },\n\n  {\n    title: <FormattedMessage id=\"email\" defaultMessage=\"email\" />,\n    dataIndex: 'email',\n  },\n];\n\nexport const UserAccess: React.FC<{\n  id: number | string;\n}> = ({ id }) => {\n  const intl = useIntl();\n  const actionRef = useRef<ActionType>();\n  const [loading, setLoading] = useState<boolean>(false);\n  const [form] = ProForm.useForm();\n  const onFinish = useCallback(\n    async (value: { user_id: number }) => {\n      setLoading(true);\n      await productAttachToUser(Number(id), { user_id: value.user_id });\n\n      form.resetFields();\n      actionRef.current?.reload();\n      setLoading(false);\n    },\n    [id],\n  );\n\n  const onDetachUser = useCallback(\n    async (user_id: number) => {\n      setLoading(true);\n      await productDetachToUser(Number(id), { user_id });\n      actionRef.current?.reload();\n      setLoading(false);\n    },\n    [id],\n  );\n  return (\n    <Fragment>\n      <ProForm layout=\"inline\" onFinish={onFinish} form={form} labelWrap={true}>\n        <ProForm.Group>\n          <ProForm.Item\n            name=\"user_id\"\n            label={<FormattedMessage id=\"users\" />}\n            valuePropName=\"value\"\n          >\n            <UserSelect />\n          </ProForm.Item>\n        </ProForm.Group>\n      </ProForm>\n\n      <ProTable<MinimumUser>\n        defaultSize=\"small\"\n        loading={loading}\n        search={false}\n        headerTitle={intl.formatMessage({\n          id: 'users',\n          defaultMessage: 'Users',\n        })}\n        actionRef={actionRef}\n        rowKey=\"id\"\n        request={async () => {\n          setLoading(true);\n          return getProduct(Number(id)).then((response) => {\n            setLoading(false);\n            if (response.success && response.data.users) {\n              return {\n                data: response.data.users as MinimumUser[],\n                total: response.data.users.length,\n                success: true,\n              };\n            }\n            if (!response.success) {\n              return {\n                data: [],\n                total: 0,\n                success: false,\n              };\n            }\n            return [];\n          });\n        }}\n        columns={[\n          ...TableColumns,\n          {\n            title: <FormattedMessage id=\"options\" defaultMessage=\"options\" />,\n            dataIndex: 'option',\n            valueType: 'option',\n            width: '10%',\n            render: (_, record) => [\n              <Tooltip\n                key={'delete'}\n                title={<FormattedMessage id=\"delete\" defaultMessage=\"delete\" />}\n              >\n                <Button\n                  type=\"primary\"\n                  icon={<DeleteOutlined />}\n                  danger\n                  onClick={() => onDetachUser(record.id)}\n                />\n              </Tooltip>,\n            ],\n          },\n        ]}\n      />\n    </Fragment>\n  );\n};\n\nexport default UserAccess;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { Select, Spin } from 'antd';\nimport { templates as fetchTemplates } from '@/services/escola-lms/templates';\nimport { FormattedMessage } from 'umi';\nimport { useCallback } from 'react';\n\nexport const TemplateSelect: React.FC<{\n  params?: API.TemplatesParams;\n  state?: {\n    type: number;\n  };\n  multiple?: boolean;\n  value?: string | string[] | number | number[];\n  onChange?: (value: string | string[] | number | number[]) => void;\n}> = ({ value, onChange, multiple = false, params }) => {\n  const [templates, setTemplates] = useState<API.Template[]>([]);\n  const [fetching, setFetching] = useState(false);\n  const [currTemplates, setCurrTemplates] = useState<number[]>([]);\n\n  const abortController = useRef<AbortController>();\n\n  const fetch = useCallback(() => {\n    setFetching(true);\n    if (abortController.current) {\n      abortController.current.abort();\n    }\n\n    abortController.current = new AbortController();\n    fetchTemplates(params, { signal: abortController.current.signal })\n      .then((response) => {\n        if (response.success) {\n          setTemplates(response.data);\n        }\n        setFetching(false);\n      })\n      .catch(() => setFetching(false));\n  }, []);\n\n  useEffect(() => {\n    const controller = new AbortController();\n    if (value) {\n      const val = Array.isArray(value) ? value : [value];\n      const values: number[] = val.map((template) => {\n        if (typeof template === 'object') {\n          return Number((template as API.Template).id);\n        }\n        return Number(template);\n      });\n\n      setCurrTemplates(values);\n    }\n    return () => {\n      controller.abort();\n    };\n  }, [value]);\n\n  return (\n    <Select\n      onFocus={() => fetch()}\n      allowClear\n      style={{ width: '100%', minWidth: '400px' }}\n      value={currTemplates}\n      onChange={onChange}\n      mode={multiple ? 'multiple' : undefined}\n      showSearch\n      placeholder={<FormattedMessage id=\"select_template\" defaultMessage=\"Select a template\" />}\n      optionFilterProp=\"children\"\n      filterOption={(input, option) => {\n        if (option && option.children) {\n          return (\n            option?.children\n              ?.toString()\n              .toLowerCase()\n              .indexOf((input && input.toLowerCase()) || '') >= 0\n          );\n        }\n        return false;\n      }}\n      notFoundContent={fetching ? <Spin size=\"small\" /> : null}\n    >\n      {templates.map((template) => (\n        <Select.Option key={template.id} value={template.id}>\n          {template.name}{' '}\n          <small>\n            <FormattedMessage id={template.channel.split('\\\\').pop()} />:\n            {template.event && <FormattedMessage id={template.event.split('\\\\').pop()} />}\n          </small>\n        </Select.Option>\n      ))}\n    </Select>\n  );\n};\n\nexport default TemplateSelect;\n","import React, { useState, useCallback } from 'react';\nimport { Space, Button, message, Tooltip } from 'antd';\nimport { FormattedMessage } from 'umi';\nimport { triggerManualEventForProduct } from '@/services/escola-lms/templates';\nimport { useIntl } from 'umi';\nimport { TemplateSelect } from '../TemplateSelect';\nimport { TemplateEvents } from '@/services/escola-lms/enums';\n\nexport const TemplateManuallyTriggerForProduct: React.FC<{\n  productId: number;\n}> = ({ productId }) => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [template, setTemplate] = useState<string | number | string[] | number[]>();\n  const intl = useIntl();\n\n  const onTrigger = useCallback(() => {\n    setLoading(true);\n    if (typeof template === 'number') {\n      triggerManualEventForProduct(Number(template), productId)\n        .then((response) => {\n          if (response.success) {\n            message.success(response.message);\n          } else {\n            message.error(response.message);\n          }\n        })\n        .catch((err: any) => message.error(err.toString()))\n        .finally(() => setLoading(false));\n    }\n  }, [template, productId]);\n\n  return (\n    <Space>\n      <TemplateSelect\n        params={{ event: TemplateEvents.ManuallyTriggeredEvent }}\n        multiple={false}\n        value={template}\n        onChange={(newTemplate) => setTemplate(newTemplate)}\n      />\n      <Tooltip title={intl.formatMessage({ id: 'generate_pdf_for_products_tooltip' })}>\n        <Button loading={loading} onClick={() => onTrigger()} disabled={!template}>\n          <FormattedMessage id=\"generate\" />\n        </Button>\n      </Tooltip>\n    </Space>\n  );\n};\n\nexport default TemplateManuallyTriggerForProduct;\n","import { useMemo, useState, useEffect, useCallback } from 'react';\nimport { message, Spin, Row, Col, Input, Tag } from 'antd';\nimport ProForm, {\n  ProFormText,\n  ProFormDigit,\n  ProFormRadio,\n  ProFormSwitch,\n} from '@ant-design/pro-form';\nimport ProCard from '@ant-design/pro-card';\nimport { useIntl, FormattedMessage, useModel } from 'umi';\nimport ProductablesSelect from '@/components/ProductablesSelect';\n\nimport {\n  getProduct,\n  createProduct,\n  updateProduct,\n  productForModel,\n} from '@/services/escola-lms/products';\nimport ProFormImageUpload from '@/components/ProFormImageUpload';\nimport CategoryCheckboxTree from '@/components/CategoryCheckboxTree';\n\nimport './index.css';\nimport UserAccess from './UserAccess';\nimport UserSubmissions from '@/components/UsersSubmissions';\nimport TagsInput from '@/components/TagsInput';\nimport { categoriesArrToIds, tagsArrToIds } from '@/utils/utils';\nimport WysiwygMarkdown from '@/components/WysiwygMarkdown';\nimport TemplateManuallyTriggerForProduct from '@/components/TemplateManuallyTrigger/forProduct';\nimport ProductsSelect from '@/components/ProductsSelect';\nimport ProTable from '@ant-design/pro-table';\nimport { MoneyInput } from '@/components/MoneyInput';\n\ntype MinimumProductProductable = {\n  class: string;\n  id: number;\n  quantity?: number;\n  name?: string;\n};\n\nconst transformProductablesFromAPI = (\n  input: API.ProductableListItem[],\n): MinimumProductProductable[] =>\n  input.map((row) => ({\n    class: row.productable_type,\n    id: Number(row.productable_id),\n    name: row.name,\n    quantity: row.quantity,\n  }));\n\nconst getProductables = (\n  values: string[] | string | API.ProductableResourceListItem[],\n): {\n  id: number;\n  class: string;\n}[] => {\n  const valuesArr: string[] | API.ProductableResourceListItem[] = Array.isArray(values)\n    ? values\n    : [values];\n\n  const result = valuesArr.map((item) => {\n    if (typeof item === 'object') {\n      return item;\n    }\n    return {\n      id: parseInt(item.split(':')[1]),\n      class: item.split(':')[0],\n      name: item.split(':')[2],\n    };\n  });\n\n  return result;\n};\n\nconst ProductsForm: React.FC<{\n  type?: 'line' | 'card';\n  id?: string;\n  productable?: {\n    name?: string;\n    class_type?: string;\n    class_id?: string | number;\n    quantity?: number;\n  };\n  tab: string;\n  onTabChange: (tab: string) => void;\n  onProductSaved?: (model: EscolaLms.Cart.Models.Product) => void;\n}> = ({ tab = 'attributes', onTabChange, id, productable, onProductSaved, type = 'card' }) => {\n  const intl = useIntl();\n\n  const [productId, setProductId] = useState<string | number | undefined>(id);\n  const [currProductables, setCurrProductables] = useState<MinimumProductProductable[]>([]);\n  const isNew = useMemo(() => productId === 'new', [productId]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [productableType, setProductableType] = useState<string | null>(null);\n  const [, updateState] = useState({});\n  const forceUpdate = useCallback(() => updateState({}), []);\n  const [form] = ProForm.useForm();\n\n  const { initialState } = useModel('@@initialState');\n  const currentCurrency = initialState?.config?.find(\n    ({ group, key }) => group === 'currencies' && key === 'default',\n  )?.value;\n\n  const [multiple, setMultiple] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (productable && productable.class_id && productable.class_type) {\n      productForModel({\n        productable_id: Number(productable.class_id),\n        productable_type: productable.class_type,\n      })\n        .then((response) => {\n          if (response.success) {\n            setProductId(response.data.id);\n          }\n        })\n        .catch(() => {\n          // err id 404 this is new model\n          console.log('err');\n          setProductId('new');\n        });\n      setCurrProductables([\n        {\n          class: productable.class_type,\n          id: Number(productable.class_id),\n          name: productable.name,\n        },\n      ]);\n      form.setFieldsValue({\n        productables: [\n          {\n            class: productable.class_type,\n            id: productable.class_id,\n            name: productable.name,\n          },\n        ],\n      });\n    }\n  }, [productable]);\n\n  const fetchData = useCallback(async () => {\n    if (productId && productId !== 'new') {\n      const response = await getProduct(Number(productId));\n      if (response.success) {\n        const newData = {\n          ...response.data,\n          categories: response.data.categories?.map(categoriesArrToIds),\n          tags: response.data.tags?.map((tag) => tagsArrToIds(tag as API.Tag)),\n          productables: response.data.productables\n            ? transformProductablesFromAPI(response.data.productables as API.ProductProductable[])\n            : [],\n        };\n        if (response.data && response?.data?.productables) {\n          setProductableType(response?.data?.productables[0]?.productable_type);\n        }\n\n        setCurrProductables(\n          transformProductablesFromAPI(response.data.productables as API.ProductProductable[]),\n        );\n        form.setFieldsValue(newData);\n\n        setMultiple(response.data.type === 'bundle');\n      }\n    }\n    setLoading(false);\n  }, [productId]);\n\n  useEffect(() => {\n    if (productId) {\n      fetchData();\n    }\n  }, [productId]);\n\n  const formProps = useMemo(\n    () => ({\n      onValuesChange: (\n        values: EscolaLms.Cart.Http.Requests.Admin.ProductUpdateRequest &\n          EscolaLms.Cart.Http.Requests.Admin.ProductCreateRequest & {\n            productables: string[] | string;\n            type: 'bundle' | 'single';\n          },\n      ) => {\n        if (values.type) {\n          setMultiple(values.type === 'bundle');\n        }\n      },\n\n      onFinish: async (\n        values: EscolaLms.Cart.Http.Requests.Admin.ProductUpdateRequest &\n          Omit<EscolaLms.Cart.Http.Requests.Admin.ProductCreateRequest, 'related_products'> & {\n            productables: string[] | string;\n            related_products: EscolaLms.Cart.Models.Product[] | number[];\n          },\n      ) => {\n        const related_products = values.related_products?.every(\n          (related_product) => typeof related_product === 'object',\n        )\n          ? (values.related_products as EscolaLms.Cart.Models.Product[]).map(\n              (product) => product.id,\n            )\n          : values.related_products;\n\n        const postData = {\n          ...values,\n          productables: currProductables\n            ? getProductables(\n                currProductables as string[] | string | API.ProductableResourceListItem[],\n              )\n            : undefined,\n          ...(values.related_products ? { related_products } : {}),\n        };\n\n        let response: API.DefaultResponse<EscolaLms.Cart.Models.Product>;\n\n        if (isNew) {\n          response = await createProduct(postData);\n          if (response.success) {\n            if (onProductSaved) {\n              onProductSaved(response.data);\n            }\n            setProductId(response.data.id);\n            form.setFieldsValue(response.data);\n          }\n        } else {\n          response = await updateProduct(Number(productId), postData);\n          if (response.success) {\n            if (onProductSaved) {\n              onProductSaved(response.data);\n            }\n          }\n        }\n\n        message.success(response.message);\n      },\n    }),\n    [productId, onProductSaved, currProductables],\n  );\n\n  if (loading) {\n    return <Spin />;\n  }\n\n  return (\n    <ProCard\n      title={\n        type === 'line' ? (\n          <FormattedMessage id=\"product_widget_title\" defaultMessage=\"Product Attibutes\" />\n        ) : null\n      }\n      tooltip={\n        type === 'line' ? (\n          <FormattedMessage\n            id=\"product_widget_tooltip\"\n            defaultMessage=\"All attributes below are related only to product\"\n          />\n        ) : null\n      }\n      subTitle={\n        type === 'line' ? (\n          <FormattedMessage\n            id=\"product_widget_tooltip\"\n            defaultMessage=\"All attributes below are related only to product\"\n          />\n        ) : null\n      }\n      tabs={{\n        type: type,\n        activeKey: tab,\n        onChange: (key) => onTabChange(key),\n      }}\n    >\n      <ProCard.TabPane key=\"attributes\" tab={<FormattedMessage id=\"attributes\" />}>\n        <ProForm {...formProps} form={form} omitNil={false}>\n          <ProForm.Group>\n            <ProFormText\n              width=\"md\"\n              name=\"name\"\n              initialValue={isNew && productable ? productable.name : undefined}\n              label={<FormattedMessage id=\"name\" />}\n              tooltip={<FormattedMessage id=\"name_tooltip\" />}\n              placeholder={intl.formatMessage({\n                id: 'name',\n                defaultMessage: 'name',\n              })}\n              required\n            />\n            <ProForm.Item\n              shouldUpdate\n              style={{ minWidth: 104 * 3 }}\n              name=\"productables\"\n              tooltip={<FormattedMessage id=\"productables_tooltip\" />}\n              label={<FormattedMessage id=\"productables\" />}\n              valuePropName=\"value\"\n            >\n              <ProductablesSelect\n                multiple={multiple}\n                disabled={productable !== undefined}\n                onChange={(p) =>\n                  setCurrProductables(\n                    getProductables(p as string[] | string | API.ProductableResourceListItem[]),\n                  )\n                }\n              />\n            </ProForm.Item>\n          </ProForm.Group>\n          <ProForm.Group>\n            <ProFormRadio.Group\n              disabled={productable !== undefined}\n              initialValue={productId && productId !== 'new' ? undefined : 'single'}\n              rules={[\n                {\n                  required: true,\n                },\n              ]}\n              name=\"type\"\n              label={<FormattedMessage id=\"type\" />}\n              options={[\n                {\n                  label: intl.formatMessage({\n                    id: 'single',\n                    defaultMessage: 'single',\n                  }),\n                  value: 'single',\n                },\n                {\n                  label: intl.formatMessage({\n                    id: 'bundle',\n                    defaultMessage: 'bundle',\n                  }),\n                  value: 'bundle',\n                },\n              ]}\n            />\n            <ProFormSwitch\n              name=\"purchasable\"\n              label={<FormattedMessage id=\"purchasable\" />}\n              tooltip={<FormattedMessage id=\"purchasable_tooltip\" />}\n            />\n          </ProForm.Group>\n          <ProForm.Group title={<FormattedMessage id=\"prices\" />}>\n            <MoneyInput\n              form={form}\n              width=\"xs\"\n              name=\"price\"\n              label={{\n                id: 'price',\n              }}\n              tooltip={<FormattedMessage id=\"price_tooltip\" />}\n              placeholder={intl.formatMessage({\n                id: 'price',\n                defaultMessage: 'price',\n              })}\n              fieldProps={{ step: 1 }}\n            />\n\n            <ProFormDigit\n              rules={[\n                {\n                  required: true,\n                },\n              ]}\n              width=\"xs\"\n              name=\"tax_rate\"\n              label={<FormattedMessage id=\"tax_rate\" />}\n              tooltip={<FormattedMessage id=\"tax_rate_tooltip\" />}\n              placeholder={intl.formatMessage({\n                id: 'tax_rate',\n                defaultMessage: 'tax_rate',\n              })}\n              initialValue={isNew ? 23 : undefined}\n              min={0}\n              max={100}\n              fieldProps={{\n                step: 1,\n                formatter: (value) => `${value}%`,\n                parser: (value) => (value ? value.replace('%', '') : ''),\n              }}\n            />\n            <ProForm.Item\n              shouldUpdate\n              label={\n                <FormattedMessage\n                  id=\"price_brutto\"\n                  values={{\n                    currency: currentCurrency ? `(${currentCurrency})` : '',\n                  }}\n                />\n              }\n              tooltip={<FormattedMessage id=\"price_brutto_tooltip\" />}\n            >\n              {(formRef) => {\n                return (\n                  <Input\n                    disabled\n                    readOnly\n                    style={{ width: '104px' }}\n                    value={\n                      formRef.getFieldValue('price')\n                        ? (\n                            Math.round(\n                              parseInt(formRef.getFieldValue('price')) *\n                                (1 + parseInt(formRef.getFieldValue('tax_rate')) / 100),\n                            ) / 100\n                          ).toFixed(2)\n                        : undefined\n                    }\n                  />\n                );\n              }}\n            </ProForm.Item>\n\n            <ProForm.Item\n              shouldUpdate\n              label={\n                <FormattedMessage\n                  id=\"tax_value\"\n                  values={{\n                    currency: currentCurrency ? `(${currentCurrency})` : '',\n                  }}\n                />\n              }\n              tooltip={<FormattedMessage id=\"tax_value_tooltip\" />}\n            >\n              {(formRef) => {\n                return (\n                  <Input\n                    disabled\n                    readOnly\n                    style={{ width: '104px' }}\n                    value={\n                      formRef.getFieldValue('price')\n                        ? (\n                            Math.round(\n                              parseInt(formRef.getFieldValue('price')) *\n                                (parseInt(formRef.getFieldValue('tax_rate')) / 100),\n                            ) / 100\n                          ).toFixed(2)\n                        : undefined\n                    }\n                  />\n                );\n              }}\n            </ProForm.Item>\n\n            <MoneyInput\n              form={form}\n              width=\"xs\"\n              name=\"price_old\"\n              label={{\n                id: 'price_old',\n              }}\n              tooltip={<FormattedMessage id=\"price_old_tooltip\" />}\n              placeholder={intl.formatMessage({\n                id: 'price',\n                defaultMessage: 'price',\n              })}\n              fieldProps={{ step: 1 }}\n              defaultValue={null}\n            />\n\n            <MoneyInput\n              form={form}\n              initialValue={isNew ? null : undefined}\n              width=\"xs\"\n              name=\"extra_fees\"\n              label={{\n                id: 'extra_fees',\n              }}\n              tooltip={<FormattedMessage id=\"extra_fees_tooltip\" />}\n              placeholder={intl.formatMessage({\n                id: 'extra_fees',\n                defaultMessage: 'extra_fees',\n              })}\n              fieldProps={{ step: 1 }}\n            />\n          </ProForm.Group>\n          <ProForm.Group title={<FormattedMessage id=\"additional_fields\" />}>\n            <ProFormText\n              width=\"sm\"\n              name=\"duration\"\n              label={<FormattedMessage id=\"duration\" />}\n              tooltip={<FormattedMessage id=\"duration_tooltip\" />}\n              placeholder={intl.formatMessage({\n                id: 'duration',\n                defaultMessage: 'duration',\n              })}\n            />\n            <ProFormDigit\n              initialValue={isNew ? null : undefined}\n              width=\"sm\"\n              name=\"limit_per_user\"\n              label={<FormattedMessage id=\"limit_per_user\" />}\n              tooltip={<FormattedMessage id=\"limit_per_user_tooltip\" />}\n              placeholder={intl.formatMessage({\n                id: 'limit_per_user',\n                defaultMessage: 'limit_per_user',\n              })}\n              min={0}\n              max={99999}\n              fieldProps={{ step: 1 }}\n            />\n            <ProFormDigit\n              initialValue={isNew ? null : undefined}\n              width=\"sm\"\n              name=\"limit_total\"\n              label={<FormattedMessage id=\"limit_total\" />}\n              tooltip={<FormattedMessage id=\"limit_total_tooltip\" />}\n              placeholder={intl.formatMessage({\n                id: 'limit_total',\n                defaultMessage: 'limit_total',\n              })}\n              min={0}\n              max={99999}\n              fieldProps={{ step: 1 }}\n            />\n            <ProFormText\n              width=\"sm\"\n              name=\"teaser_url\"\n              label={<FormattedMessage id=\"teaser_url\" />}\n              tooltip={<FormattedMessage id=\"teaser_url_tooltip\" />}\n              placeholder={intl.formatMessage({\n                id: 'teaser_url',\n                defaultMessage: 'teaser_url',\n              })}\n            />\n          </ProForm.Group>{' '}\n          <ProForm.Item\n            shouldUpdate\n            name={'related_products'}\n            label={<FormattedMessage id={'related_products'} />}\n            valuePropName=\"value\"\n          >\n            {productableType && <ProductsSelect type={productableType} multiple />}\n          </ProForm.Item>\n          {!isNew && (\n            <ProForm.Item\n              style={{ width: '100%' }}\n              name=\"description\"\n              label={<FormattedMessage id=\"description\" />}\n              tooltip={<FormattedMessage id=\"description_tooltip\" />}\n              valuePropName=\"value\"\n            >\n              <WysiwygMarkdown directory={`products/${productId}/wysiwyg`} />\n            </ProForm.Item>\n          )}\n          {currProductables.length > 0 && multiple && (\n            <ProTable<MinimumProductProductable>\n              headerTitle={intl.formatMessage({\n                id: 'selected_products',\n                defaultMessage: 'Selected Products',\n              })}\n              pagination={false}\n              search={false}\n              dataSource={[...currProductables]}\n              rowKey=\"id\"\n              columns={[\n                {\n                  title: <FormattedMessage id=\"id\" defaultMessage=\"id\" />,\n                  dataIndex: 'id',\n                  width: '80px',\n                },\n                {\n                  title: <FormattedMessage id=\"name\" defaultMessage=\"name\" />,\n                  dataIndex: 'name',\n                },\n                {\n                  title: <FormattedMessage id=\"type\" defaultMessage=\"type\" />,\n                  dataIndex: 'class',\n                  render: (_, record) => (\n                    <Tag>\n                      <FormattedMessage\n                        id={record.class.split('\\\\').pop()}\n                        defaultMessage={record.class.split('\\\\').pop()}\n                      />\n                    </Tag>\n                  ),\n                },\n                {\n                  title: <FormattedMessage id=\"quantity\" defaultMessage=\"quantity\" />,\n                  dataIndex: 'quantity',\n                  width: '10%',\n                  render: (_, record) => {\n                    return (\n                      <Input\n                        min={1}\n                        type=\"number\"\n                        value={record.quantity || 1}\n                        onChange={(e) => {\n                          const value = e.target.value;\n\n                          const index = currProductables.findIndex((item) => item.id === record.id);\n                          const collection = currProductables;\n                          collection[index].quantity = Number(value);\n\n                          setCurrProductables(collection);\n                          // this is needed because the datasource in the pro table does not want to update the data :(\n                          forceUpdate();\n                        }}\n                      />\n                    );\n                  },\n                },\n              ]}\n            />\n          )}\n        </ProForm>{' '}\n      </ProCard.TabPane>\n      {!isNew && (\n        <ProCard.TabPane\n          key=\"media\"\n          tab={<FormattedMessage id=\"cart_media\" defaultMessage=\"Cart Media\" />}\n        >\n          <ProForm {...formProps} form={form}>\n            <ProFormImageUpload\n              folder={`products/${productId}`}\n              wrapInForm={false}\n              title=\"image\"\n              action={`/api/admin/products/${productId}/?_method=PUT`}\n              src_name=\"poster_url\"\n              form_name=\"poster\"\n              getUploadedSrcField={(info) => info.file.response.data.poster_url}\n              setPath={(removed) => form.setFieldsValue(removed)}\n            />\n          </ProForm>\n        </ProCard.TabPane>\n      )}\n      {!isNew && (\n        <ProCard.TabPane\n          key=\"categories\"\n          tab={\n            <FormattedMessage\n              id=\"product_categories_and_tags\"\n              defaultMessage=\"Product Categories & Tags\"\n            />\n          }\n        >\n          <ProForm {...formProps} form={form}>\n            <Row>\n              <Col span={12}>\n                <ProForm.Item\n                  label={<FormattedMessage id=\"categories\" />}\n                  name=\"categories\"\n                  valuePropName=\"value\"\n                >\n                  <CategoryCheckboxTree />\n                </ProForm.Item>\n              </Col>\n              <Col span={12}>\n                <ProForm.Item\n                  label={<FormattedMessage id=\"tags\" />}\n                  name=\"tags\"\n                  valuePropName=\"value\"\n                >\n                  <TagsInput />\n                </ProForm.Item>\n              </Col>\n            </Row>\n          </ProForm>\n        </ProCard.TabPane>\n      )}\n      {!isNew && (\n        <ProCard.TabPane\n          key=\"users\"\n          tab={<FormattedMessage id=\"users_attached\" defaultMessage=\"Users Attached\" />}\n        >\n          <Row>\n            <Col span={24}>{productId && <UserAccess id={productId} />}</Col>\n          </Row>\n        </ProCard.TabPane>\n      )}{' '}\n      {!isNew && (\n        <ProCard.TabPane\n          key=\"user_submission\"\n          tab={\n            <FormattedMessage\n              id=\"user_submission\"\n              defaultMessage=\"Users Attached without Account\"\n            />\n          }\n        >\n          <Row>\n            <Col span={12}>\n              {productId && (\n                <UserSubmissions id={Number(productId)} type=\"EscolaLms\\Cart\\Models\\Product\" />\n              )}\n            </Col>\n          </Row>\n        </ProCard.TabPane>\n      )}\n      {!isNew && productId && (\n        <ProCard.TabPane key=\"template\" tab={<FormattedMessage id=\"template\" />}>\n          <Row>\n            <Col span={12}>\n              <TemplateManuallyTriggerForProduct productId={Number(productId)} />\n            </Col>\n          </Row>\n        </ProCard.TabPane>\n      )}\n    </ProCard>\n  );\n};\n\nexport default ProductsForm;\n","import { request } from 'umi';\nimport type { RequestOptionsInit } from 'umi-request';\n\n/**  GET /api/admin/user-submissions */\nexport async function userSubmissions(\n  params?: API.PageParams &\n    API.PaginationParams & {\n      email?: string;\n      status?: string;\n      morphable_id?: number;\n      morphable_type?: string;\n    },\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultMetaResponse<EscolaLms.AssignWithoutAccount.Models.UserSubmission>>(\n    `/api/admin/user-submissions`,\n    {\n      method: 'GET',\n      params,\n      ...(options || {}),\n    },\n  );\n}\n\n/**  POST /api/admin/user-submissions */\nexport async function assignUserSubmission(\n  body?: Partial<EscolaLms.AssignWithoutAccount.Models.UserSubmission>,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<EscolaLms.AssignWithoutAccount.Models.UserSubmission>>(\n    `/api/admin/user-submissions`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      data: body,\n      ...(options || {}),\n    },\n  );\n}\n\n/**  DELETE /api/admin/user-submissions/:id */\nexport async function deleteUserSubmission(id: number, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<EscolaLms.AssignWithoutAccount.Models.UserSubmission>>(\n    `/api/admin/user-submissions/${id}`,\n    {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      ...(options || {}),\n    },\n  );\n}\n","import React from 'react';\nimport { Form } from 'antd';\nimport ProForm, { ProFormText, ModalForm } from '@ant-design/pro-form';\n\nimport { useIntl, FormattedMessage } from 'umi';\n\nexport const AddUserSubmission: React.FC<{\n  id?: number | false;\n  visible: boolean;\n  onVisibleChange: (visible: boolean) => void;\n  onFinish: (formData: API.Setting) => Promise<boolean | void>;\n}> = (props) => {\n  const intl = useIntl();\n\n  const { visible, onVisibleChange, onFinish, id } = props;\n\n  const [form] = Form.useForm();\n\n  return (\n    <ModalForm\n      form={form}\n      title={intl.formatMessage({\n        id: id ? 'email' : 'email',\n        defaultMessage: id ? 'email' : 'email',\n      })}\n      width=\"30vw\"\n      visible={visible}\n      onVisibleChange={onVisibleChange}\n      onFinish={onFinish}\n    >\n      <ProForm.Group>\n        <ProFormText\n          width=\"md\"\n          name=\"email\"\n          label={<FormattedMessage id=\"email\" />}\n          tooltip={<FormattedMessage id=\"email_tooltip\" />}\n          placeholder={intl.formatMessage({\n            id: 'email',\n            defaultMessage: 'email',\n          })}\n          required\n        />\n      </ProForm.Group>\n    </ModalForm>\n  );\n};\n\nexport default AddUserSubmission;\n","import React, { Fragment, useCallback, useRef, useState } from 'react';\nimport ProForm from '@ant-design/pro-form';\nimport { useIntl, FormattedMessage } from 'umi';\n\nimport { Button, message, Popconfirm, Tag, Tooltip } from 'antd';\n\nimport type { ProColumns, ActionType } from '@ant-design/pro-table';\nimport ProTable from '@ant-design/pro-table';\nimport { DeleteOutlined, PlusOutlined } from '@ant-design/icons';\nimport {\n  assignUserSubmission,\n  deleteUserSubmission,\n  userSubmissions,\n} from '@/services/escola-lms/users_submissions';\nimport { createTableOrderObject } from '@/utils/utils';\nimport AddUserSubmission from './form';\nimport './index.css';\n\nexport const TableColumns: ProColumns<EscolaLms.AssignWithoutAccount.Models.UserSubmission>[] = [\n  {\n    title: <FormattedMessage id=\"ID\" defaultMessage=\"ID\" />,\n    dataIndex: 'id',\n    hideInSearch: true,\n    sorter: true,\n    width: '80px',\n  },\n\n  {\n    title: <FormattedMessage id=\"email\" defaultMessage=\"email\" />,\n    dataIndex: 'email',\n    hideInSearch: false,\n    width: '70%',\n    sorter: true,\n  },\n  {\n    title: <FormattedMessage id=\"status\" defaultMessage=\"status\" />,\n    dataIndex: 'status',\n    hideInSearch: true,\n    sorter: true,\n    valueEnum: {\n      sent: (\n        <Tag color=\"processing\">\n          <FormattedMessage id=\"sent\" />\n        </Tag>\n      ),\n      assigned: (\n        <Tag color=\"default\">\n          <FormattedMessage id=\"assigned\" />\n        </Tag>\n      ),\n      accepted: (\n        <Tag color=\"success\">\n          <FormattedMessage id=\"accepted\" />\n        </Tag>\n      ),\n      rejected: (\n        <Tag color=\"error\">\n          <FormattedMessage id=\"rejected\" />\n        </Tag>\n      ),\n    },\n  },\n];\n\nexport const UserSubmissions: React.FC<{\n  id: number;\n  type: string;\n}> = ({ id, type }) => {\n  const intl = useIntl();\n  const actionRef = useRef<ActionType>();\n  const [loading, setLoading] = useState<boolean>(false);\n  const [form] = ProForm.useForm();\n  const [modalVisible, setModalVisible] = useState(false);\n\n  const onDetachUser = useCallback(\n    async (user_id: number) => {\n      setLoading(true);\n      await deleteUserSubmission(Number(user_id));\n      actionRef.current?.reload();\n      setLoading(false);\n    },\n    [id, type],\n  );\n  return (\n    <Fragment>\n      <ProTable<\n        EscolaLms.AssignWithoutAccount.Models.UserSubmission,\n        API.PageParams & { email?: string; morphable_id?: number; morphable_type?: string }\n      >\n        defaultSize=\"small\"\n        loading={loading}\n        search={{\n          layout: 'vertical',\n        }}\n        headerTitle={intl.formatMessage({\n          id: 'user_submission',\n          defaultMessage: 'user_submission',\n        })}\n        actionRef={actionRef}\n        toolBarRender={() => [\n          <Button type=\"primary\" key=\"primary\" onClick={() => setModalVisible(true)}>\n            <PlusOutlined /> <FormattedMessage id=\"email_to_add\" defaultMessage=\"email_to_add\" />\n          </Button>,\n        ]}\n        rowKey=\"id\"\n        request={async ({ email, pageSize, current }, sort) => {\n          setLoading(true);\n          return userSubmissions({\n            email,\n            per_page: pageSize,\n            page: current,\n            morphable_type: type,\n            morphable_id: id,\n            ...createTableOrderObject(sort, 'created_at'),\n          }).then((response) => {\n            setLoading(false);\n            if (response.success) {\n              return {\n                data: response.data,\n                total: response.data.length,\n                success: true,\n              };\n            }\n            if (!response.success) {\n              return {\n                data: [],\n                total: 0,\n                success: false,\n              };\n            }\n            return [];\n          });\n        }}\n        columns={[\n          ...TableColumns,\n          {\n            title: <FormattedMessage id=\"options\" defaultMessage=\"options\" />,\n            dataIndex: 'option',\n            valueType: 'option',\n            width: '10%',\n            render: (_, record) => [\n              <Popconfirm\n                key=\"delete\"\n                title={\n                  <FormattedMessage\n                    id=\"deleteQuestion\"\n                    defaultMessage=\"Are you sure to delete this record?\"\n                  />\n                }\n                onConfirm={() => onDetachUser(record.id)}\n                okText={<FormattedMessage id=\"yes\" />}\n                cancelText={<FormattedMessage id=\"no\" />}\n              >\n                <Tooltip title={<FormattedMessage id=\"delete\" defaultMessage=\"delete\" />}>\n                  <Button type=\"primary\" icon={<DeleteOutlined />} danger />\n                </Tooltip>\n              </Popconfirm>,\n            ],\n          },\n        ]}\n      />{' '}\n      <AddUserSubmission\n        visible={modalVisible}\n        onVisibleChange={(value) => {\n          return value === false && setModalVisible(false);\n        }}\n        onFinish={async (values) => {\n          setLoading(true);\n          try {\n            const req = await assignUserSubmission({\n              ...values,\n              morphable_id: id,\n              morphable_type: type,\n            });\n            if (req.success) {\n              form.resetFields();\n              actionRef.current?.reload();\n              setLoading(false);\n              setModalVisible(false);\n            }\n          } catch (error) {\n            setModalVisible(false);\n            message.error(<FormattedMessage id=\"error\" defaultMessage=\"error\" />);\n            setLoading(false);\n          }\n        }}\n      />\n    </Fragment>\n  );\n};\n\nexport default UserSubmissions;\n","import \"antd/es/radio/style\";\nimport _Radio from \"antd/es/radio\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"fieldProps\", \"options\", \"radioType\", \"layout\", \"proFieldProps\", \"valueEnum\"];\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { runFunction } from '@ant-design/pro-utils';\nimport React from 'react';\nimport { createField } from '../../BaseForm/createField';\nimport ProField from '../Field';\nvar RadioGroup = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var fieldProps = _ref.fieldProps,\n      options = _ref.options,\n      radioType = _ref.radioType,\n      layout = _ref.layout,\n      proFieldProps = _ref.proFieldProps,\n      valueEnum = _ref.valueEnum,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  return _jsx(ProField, _objectSpread(_objectSpread({\n    valueType: radioType === 'button' ? 'radioButton' : 'radio',\n    ref: ref,\n    valueEnum: runFunction(valueEnum, undefined)\n  }, rest), {}, {\n    fieldProps: _objectSpread({\n      options: options,\n      layout: layout\n    }, fieldProps),\n    proFieldProps: proFieldProps,\n    filedConfig: {\n      customLightMode: true\n    }\n  }));\n});\n/**\n * Radio\n *\n * @param\n */\n\nvar ProFormRadioComponents = /*#__PURE__*/React.forwardRef(function (_ref2, ref) {\n  var fieldProps = _ref2.fieldProps,\n      children = _ref2.children;\n  return _jsx(_Radio, _objectSpread(_objectSpread({}, fieldProps), {}, {\n    ref: ref,\n    children: children\n  }));\n});\nvar ProFormRadio = createField(ProFormRadioComponents, {\n  valuePropName: 'checked',\n  ignoreWidth: true\n});\nvar WrappedProFormRadio = ProFormRadio;\nWrappedProFormRadio.Group = RadioGroup;\nWrappedProFormRadio.Button = _Radio.Button; // @ts-ignore\n// eslint-disable-next-line no-param-reassign\n\nWrappedProFormRadio.displayName = 'ProFormComponent';\nexport default WrappedProFormRadio;","import { Input } from 'antd';\nimport type { FC } from 'react';\nimport { useEffect } from 'react';\nimport React, { useState } from 'react';\nimport type { FormInstance, ProFormFieldProps } from '@ant-design/pro-form';\nimport { ProForm } from '@ant-design/pro-form';\nimport { FormattedMessage, useModel } from 'umi';\n\ninterface CurrencyInputProps extends Omit<ProFormFieldProps, 'label'> {\n  name: string;\n  form: FormInstance<any>;\n  onChange?: (cents: number | null) => void;\n  label?: React.ComponentProps<typeof FormattedMessage>;\n  defaultValue?: number | null;\n}\n\nconst centsToDollars = (cents: number | null, toFixedValue?: number): string => {\n  if (cents === null) return '';\n  return (cents / 100).toFixed(toFixedValue ?? 0);\n};\n\nexport const MoneyInput: FC<CurrencyInputProps> = ({ name, form, onChange, ...restProps }) => {\n  const { label, defaultValue = 0, ...rest } = restProps;\n\n  const [state, setState] = useState<{\n    dollars: string;\n    cents: number | null;\n  }>({\n    dollars: '',\n    cents: null,\n  });\n\n  const { initialState } = useModel('@@initialState');\n\n  const currentCurrency = initialState?.config?.find(\n    ({ group, key }) => group === 'currencies' && key === 'default',\n  )?.value;\n\n  const handleInputChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n    const inputValue = event.target.value;\n\n    // Remove currency symbol and other special characters\n    const cleanValue = inputValue.replace(/[^0-9.]/, '');\n    const parsedValue = parseFloat(cleanValue);\n\n    const centsValue = Math.round(parsedValue * 100);\n    setState({ cents: centsValue || defaultValue, dollars: inputValue.trim() });\n  };\n\n  const formattedDollars = state.cents === null ? '' : centsToDollars(state.cents, 2);\n\n  useEffect(() => {\n    const initialValue = form.getFieldValue(name)\n      ? centsToDollars(form.getFieldValue(name), 2)\n      : '';\n\n    setState({\n      dollars: initialValue,\n      cents: +initialValue * 100 || defaultValue,\n    });\n  }, [form, name]);\n\n  useEffect(() => {\n    if (form && name) {\n      form.setFieldsValue({\n        [name]: !Number.isNaN(state.cents) ? state.cents : null,\n      });\n    }\n\n    if (onChange) {\n      onChange(state.cents);\n    }\n  }, [state]);\n\n  const labelProps = {\n    ...label,\n    values: {\n      ...label?.values,\n      currency: currentCurrency ? `(${currentCurrency})` : '',\n    },\n  };\n\n  return (\n    <ProForm.Item\n      name={name}\n      initialValue={state.dollars}\n      label={label ? <FormattedMessage {...labelProps} /> : undefined}\n      {...rest}\n    >\n      <Input\n        value={state.dollars}\n        onChange={handleInputChange}\n        onBlur={() => {\n          setState((prev) => ({\n            ...prev,\n            dollars: formattedDollars !== 'NaN' ? formattedDollars : '',\n          }));\n        }}\n      />\n    </ProForm.Item>\n  );\n};\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { Tree, Spin } from 'antd';\n\nimport { categoryTree } from '@/services/escola-lms/category';\n\ntype TreeNodeType = {\n  title: string;\n  key: React.Key;\n  children?: TreeNodeType[];\n};\n\nconst treeConvert = (category: API.Category): TreeNodeType => {\n  return category.subcategories && category.subcategories.length\n    ? {\n        title: category.name,\n        key: category.id,\n        children: category.subcategories.map((cat) => treeConvert(cat)),\n      }\n    : {\n        title: category.name,\n        key: category.id,\n      };\n};\n\nexport const CategoryCheckboxTree: React.FC<{\n  state?: {\n    type: number;\n  };\n  multiple?: boolean;\n  value?: React.Key[];\n  onChange?: (value: React.Key[]) => void;\n}> = ({ value, onChange, multiple = true }) => {\n  const [categories, setCategories] = useState<API.Category[]>([]);\n\n  useEffect(() => {\n    categoryTree().then((response) => {\n      if (response.success) {\n        setCategories(response.data);\n      }\n    });\n  }, []);\n\n  const treeData = useMemo(() => {\n    return categories.map((cat) => treeConvert(cat));\n  }, [categories]);\n\n  if (categories.length === 0) {\n    return <Spin />;\n  }\n\n  return (\n    <Tree\n      multiple={multiple}\n      checkable\n      checkStrictly={true}\n      defaultExpandAll\n      style={{ width: '100%' }}\n      checkedKeys={value}\n      onCheck={(keys) => {\n        if (typeof keys === 'object' && !Array.isArray(keys) && keys.checked) {\n          const checkedKeys = keys.checked;\n          return onChange && Array.isArray(checkedKeys) && onChange(checkedKeys);\n        }\n      }}\n      treeData={treeData}\n      disabled={categories.length === 0}\n    />\n  );\n};\n\nexport default CategoryCheckboxTree;\n","import React from 'react';\nimport RichMarkdownEditor2 from '@escolalms/markdown-editor';\nimport { upload, resizedImage } from '@/services/escola-lms/files';\nimport './index.css';\nimport { useIntl } from 'umi';\n\ninterface FormWysiwygProps {\n  value?: string;\n  defaultValue?: string;\n  onChange?: (value: string) => void;\n  directory?: string;\n}\n\nexport const EmbedUploaded: React.FC<{ attrs: { href: string } }> = ({ attrs }) => {\n  const href = attrs.href;\n  const filename = href.split('/').pop();\n  return (\n    <p>\n      <a rel=\"noreferrer\" href={href} target=\"_blank\">\n        {filename}\n      </a>\n    </p>\n  );\n};\n\nexport const FormWysiwyg: React.FC<FormWysiwygProps> = ({\n  value,\n  onChange,\n  directory = '/wysiwyg',\n}) => {\n  const intl = useIntl();\n\n  return (\n    <div className=\"form-wysiwyg-markdown\">\n      <RichMarkdownEditor2\n        excludeBlockMenuItems={['Sketch']}\n        embeds={[\n          {\n            matcher: () => {\n              return true;\n            },\n            component: EmbedUploaded,\n          },\n        ]}\n        uploadImage={async (file) => {\n          const result = await upload(file, directory);\n\n          if (result.success) {\n            if (file.type.includes('image/')) {\n              const resizePath = result.data[0].name.includes('/')\n                ? result.data[0].name\n                : `${directory}${result.data[0].name}`;\n              return resizedImage(resizePath, 1000);\n            }\n            return result.data[0].url;\n          }\n          throw new Error('Error while uploading');\n        }}\n        defaultValue={value || ''}\n        onChange={(v) => onChange && onChange(v())}\n        placeholder={intl.formatMessage({\n          id: 'wysiwyg_placeholder',\n        })}\n      />\n    </div>\n  );\n};\n\nexport default FormWysiwyg;\n","import { request } from 'umi';\nimport type { RequestOptionsInit } from 'umi-request';\n\nexport async function templates(params?: API.TemplatesParams, options?: RequestOptionsInit) {\n  return request<API.TemplateList>(`/api/admin/templates`, {\n    method: 'GET',\n    useCache: false,\n    params,\n    ...(options || {}),\n  });\n}\n\nexport async function template(id: number, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.Template>>(`/api/admin/templates/${id}`, {\n    method: 'GET',\n    ...(options || {}),\n  });\n}\n\nexport async function createTemplate(body?: Partial<API.Template>, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.Template>>(`/api/admin/templates`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    data: body,\n    ...(options || {}),\n  });\n}\n\nexport async function updateTemplate(\n  id: number,\n  body?: Partial<API.Template>,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.Template>>(`/api/admin/templates/${id}`, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    data: body,\n    ...(options || {}),\n  });\n}\n\nexport async function deleteTemplate(id: number, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.Template>>(`/api/admin/templates/${id}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    ...(options || {}),\n  });\n}\n\nexport async function variables(options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.TemplateVariables>>(`/api/admin/templates/variables`, {\n    method: 'GET',\n    ...(options || {}),\n  });\n}\n\nexport async function preview(id: number, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<Record<string, string>>>(\n    `/api/admin/templates/${id}/preview`,\n    {\n      method: 'GET',\n      ...(options || {}),\n    },\n  );\n}\n\n/// api/admin/events/trigger-manually/{id}\n\nexport async function triggerManualEvent(\n  id: number,\n\n  users: number[],\n\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.Template>>(`/api/admin/events/trigger-manually/${id}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    data: {\n      users,\n    },\n    ...(options || {}),\n  });\n}\n\n// /api/admin/products/{id}/trigger-event-manually/{idTemplate}\n\nexport async function triggerManualEventForProduct(\n  templateId: number,\n  productId: number,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.Template>>(\n    `/api/admin/products/${productId}/trigger-event-manually/${templateId}`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      ...(options || {}),\n    },\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport { Select } from 'antd';\nimport { tagsUnique } from '@/services/escola-lms/tag';\n\nconst { Option } = Select;\n\ntype Tag = {\n  title: string;\n};\n\nexport const TagsInput: React.FC<{\n  state?: {\n    type: number;\n  };\n  value?: string;\n  onChange?: (value: string) => void;\n}> = (props) => {\n  const { value, onChange } = props;\n\n  const [tags, setTags] = useState<Tag[]>([]);\n\n  useEffect(() => {\n    tagsUnique().then((response) => setTags(response.data));\n  }, []);\n\n  return (\n    <Select\n      mode=\"tags\"\n      showSearch\n      style={{ width: '100%' }}\n      placeholder=\"Select a Tag\"\n      optionFilterProp=\"children\"\n      onChange={onChange}\n      value={value}\n    >\n      {tags.map((tag) => (\n        <Option value={tag.title} key={tag.title}>\n          {tag.title}\n        </Option>\n      ))}\n    </Select>\n  );\n};\n\nexport default TagsInput;\n"],"sourceRoot":""}