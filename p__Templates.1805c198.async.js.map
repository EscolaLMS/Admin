{"version":3,"sources":["webpack:///./src/pages/Templates/ConfigList/index.tsx","webpack:///./src/hooks/useCheckRoles.ts","webpack:///./src/pages/Templates/index.tsx","webpack:///./src/services/escola-lms/templates.ts"],"names":["TableList","templateType","channel","actionRef","useRef","intl","useIntl","useState","loading","setLoading","columns","title","dataIndex","hideInSearch","sorter","width","render","_","record","created_at","format","Date","DATETIME_FORMAT","event","valueEnum","true","false","handleRemove","useCallback","id","hide","deleteTemplate","then","response","success","message","current","reload","error","formatMessage","defaultMessage","layout","sort","pageSize","name","sortArr","Object","entries","templates","per_page","page","undefined","order_by","order","data","total","meta","valueType","useCheckRoles","useModel","initialState","userRoles","currentUser","roles","checkRoles","settingName","settingsData","config","find","item","key","Array","isArray","every","role","includes","channelType","Templates","params","useParams","template","access","useAccess","hideSMSTab","hideEmailTab","type","activeKey","onChange","history","push","email","certificatesPermission","pdf","sms","options","request","method","useCache","body","headers","users","templateId","productId"],"mappings":"udAWMA,EAAsE,SAAC,EAGvE,IAFJC,GAEI,EAFJA,aACAC,EACI,EADJA,QAEMC,EAAYC,mBACZC,EAAOC,cACb,EAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAEMC,EAA8C,CAClD,CACEC,MAAO,cAAC,IAAD,CAAkB,GAAG,KAAK,eAAe,OAChDC,UAAW,KACXC,aAAc,GACdC,OAAQ,GACRC,MAAO,QAET,CACEJ,MAAO,cAAC,IAAD,CAAkB,GAAG,aAAa,eAAe,eACxDC,UAAW,aACXC,aAAc,GACdC,OAAQ,GACRE,OAAQ,SAACC,EAAGC,EAAJ,OACNA,GAAOC,YAAcC,YAAO,GAAIC,MAAKH,EAAOC,YAAaG,OAE7D,CACEX,MAAO,cAAC,IAAD,CAAkB,GAAG,OAAO,eAAe,SAClDC,UAAW,OACXC,aAAc,GACdC,OAAQ,IAEV,CACEH,MAAO,cAAC,IAAD,CAAkB,GAAG,QAAQ,eAAe,UACnDC,UAAW,QACXC,aAAc,GACdC,OAAQ,GACRE,OAAQ,SAACC,EAAGC,EAAJ,OAAe,eAAC,IAAD,CAAkB,GAAIA,EAAOK,MAAO,eAAgBL,EAAOK,UAEpF,CACEZ,MAAO,cAAC,IAAD,CAAkB,GAAG,yBAC5BC,UAAW,UACXC,aAAc,GACdW,UAAW,CACTC,KACE,mBAAK,MAAM,UAAX,SACE,cAAC,IAAD,CAAkB,GAAG,UAGzBC,MACE,mBAAK,MAAM,QAAX,SACE,cAAC,IAAD,CAAkB,GAAG,YAOzBC,GAAeC,sBAAW,gDAC9B,WAAOC,EAAP,mFACEpB,SAAW,IACLqB,EAAO,IAAQtB,QAAQ,cAAC,IAAD,CAAkB,GAAG,UAAU,eAAe,aAF7E,kBAIUuB,YAAeF,GAAIG,KAAK,SAACC,EAAa,CAC1CxB,EAAW,IACPwB,EAASC,SACX,IAAQA,QAAQD,EAASE,eAPjC,GAUIL,WACArB,EAAW,IACX,GAAAN,EAAUiC,WAAV,oBAAmBC,SAZvB,kBAaW,QAbX,qCAeIP,IACA,IAAQQ,MAAM,cAAC,IAAD,CAAkB,GAAG,QAAQ,eAAe,WAC1D7B,EAAW,IAjBf,kBAkBW,QAlBX,oDAD8B,sDAsB9B,CAACN,IAGH,MACE,eAAC,IAAD,CACE,YAAaE,EAAKkC,cAAc,CAC9BV,GAAI,YACJW,eAAgB,cAElB,QAAShC,EACT,UAAWL,EACX,OAAO,KACP,OAAQ,CACNsC,OAAQ,YAEV,cAAe,iBAAM,CACnB,cAAC,IAAD,CAAkB,GAAE,mCAA8BxC,EAA9B,QAApB,SACE,oBAAQ,KAAK,UAAb,UACE,cAAC,IAAD,IADF,IACmB,cAAC,IAAD,CAAkB,GAAG,MAAM,eAAe,UADlC,YADlB,SAMb,QAAS,WAA8ByC,EAAS,IAApCC,GAAoC,EAApCA,SAAUP,EAA0B,EAA1BA,QAASQ,EAAiB,EAAjBA,KAC7BnC,EAAW,IACX,GAAMoC,GAAUH,GAAQI,OAAOC,QAAQL,GAAM,GAC7C,MAAOM,aAAU,CACfC,SAAUN,EACVO,KAAMd,EACNlC,UACA0C,KAAMA,GAAQO,OACdC,SAAUP,GAAWA,EAAQ,GAC7BQ,MAAOR,EAAWA,EAAQ,KAAO,SAAW,MAAQ,OAAUM,SAC7DnB,KAAK,SAACC,EAAa,CACpB,MAAIA,GAASC,QACXzB,GAAW,IACJ,CACL6C,KAAMrB,EAASqB,KACfC,MAAOtB,EAASuB,KAAKD,MACrBrB,QAAS,KAGN,MAGX,QAAO,UACFxB,EADE,CAEL,CACEG,aAAc,GACdF,MAAO,cAAC,IAAD,CAAkB,GAAG,gCAAgC,eAAe,WAC3EC,UAAW,SACX6C,UAAW,SACXzC,OAAQ,SAACC,EAAGC,EAAJ,OAAe,CACrB,cAAC,IAAD,CAAM,GAAE,mCAA8BjB,EAA9B,YAA8CiB,EAAOW,IAA7D,SACE,mBAAS,MAAO,cAAC,IAAD,CAAkB,GAAG,OAAO,eAAe,SAA3D,SACE,mBAAQ,KAAK,UAAU,KAAM,cAAC,IAAD,SAFsC,QAKvE,mBAEE,MACE,cAAC,IAAD,CACE,GAAG,iBACH,eAAe,wCAGnB,UAAW,iBAAMF,IAAaT,EAAOW,KACrC,OAAQ,cAAC,IAAD,CAAkB,GAAG,QAC7B,WAAY,cAAC,IAAD,CAAkB,GAAG,OAVnC,SAYE,mBAAS,MAAO,cAAC,IAAD,CAAkB,GAAG,SAAS,eAAe,WAA7D,SACE,mBAAQ,KAAK,UAAU,KAAM,cAAC,IAAD,IAAoB,OAAM,QAZrD,kBAsBH7B,ICtKF0D,EAAgB,UAAM,OACjC,EAAyBC,YAAS,kBAA1BC,EAAR,EAAQA,aACFC,EAAYD,IAAY,MAAZ,GAAAA,EAAcE,eAAd,0BAA2BC,QAAS,GAEhDC,EAAapC,sBAAY,SAACqC,EAAiC,SACzDC,EAAeN,GAAH,SAAGA,EAAcO,UAAjB,qBAAG,EAAsBC,KAAK,SAACC,EAAD,OAAUA,GAAKC,MAAQL,OAArD,wBAAG,EAAgEX,KACrF,MAAIiB,OAAMC,QAAQX,IAAcU,MAAMC,QAAQN,GACrCL,EAAUY,MAAM,SAACC,EAAD,OAAUR,GAAaS,SAASD,KAErD,MAAOR,IAAiB,UACnBA,EAEF,IACN,IAEH,MAAO,CACLF,eCXQY,E,UAAAA,E,CAAAA,E,sDAAAA,E,gDAAAA,E,kDAAAA,M,KAMZ,GAAMC,GAAsB,UAAM,CAChC,GAAMC,GAASC,cACPC,EAAaF,EAAbE,SACFC,EAASC,cACf,EAAuBxB,IAAfM,EAAR,EAAQA,WAEFmB,EAAanB,EAAW,uBACxBoB,EAAepB,EAAW,yBAEhC,MACE,eAAC,IAAD,UACE,eAAC,IAAD,CACE,KAAM,CACJqB,KAAM,OACNC,UAAWN,EACXO,SAAU,SAACjB,EAAD,OAASkB,KAAQC,KAAR,mCAAyCnB,MAJhE,UAQG,CAACc,GACA,cAAC,IAAQ,QAAT,CAA6B,IAAK,cAAC,IAAD,CAAkB,GAAG,UAAvD,SACE,cAAC,EAAD,CAAY,aAAc,QAAS,QAASR,EAAYc,SADrC,SAKtBT,EAAOU,wBACN,cAAC,IAAQ,QAAT,CAA6B,IAAK,cAAC,IAAD,CAAkB,GAAG,QAAvD,SACE,cAAC,EAAD,CAAY,aAAc,MAAO,QAASf,EAAYgB,OADlC,OAgBvB,CAACT,GACA,cAAC,IAAQ,QAAT,CAEE,IACE,+BACE,cAAC,IAAD,CAAkB,GAAG,UAJ3B,SAQE,cAAC,EAAD,CAAY,aAAc,MAAO,QAASP,EAAYiB,OAPjD,aAeFhB,gB,sXCtER,WAAP,oC,qDAAO,WAAyBC,EAA8BgB,EAAvD,oGACEC,YAAO,oCACZC,OAAQ,MACRC,SAAU,GACVnB,UACIgB,GAAW,UALZ,qC,wBASA,WAAP,oC,qDAAO,WAAwBjE,EAAYiE,EAApC,oGACEC,YAAO,+BAA4DlE,GAA5D,aACZmE,OAAQ,OACJF,GAAW,UAHZ,qC,wBAOA,WAAP,oC,qDAAO,WAA8BI,EAA8BJ,EAA5D,oGACEC,YAAO,oCACZC,OAAQ,OACRG,QAAS,CACP,eAAgB,oBAElB7C,KAAM4C,GACFJ,GAAW,UAPZ,qC,wBAWA,WAAP,sC,qDAAO,WACLjE,EACAqE,EACAJ,EAHK,oGAKEC,YAAO,+BAA4DlE,GAA5D,aACZmE,OAAQ,QACRG,QAAS,CACP,eAAgB,oBAElB7C,KAAM4C,GACFJ,GAAW,UAXZ,qC,wBAeA,WAAP,oC,qDAAO,WAA8BjE,EAAYiE,EAA1C,oGACEC,YAAO,+BAA4DlE,GAA5D,aACZmE,OAAQ,SACRG,QAAS,CACP,eAAgB,qBAEdL,GAAW,UANZ,qC,wBAUA,WAAP,kC,qDAAO,WAAyBA,EAAzB,oGACEC,YAAO,8CACZC,OAAQ,OACJF,GAAW,UAHZ,qC,wBAOA,WAAP,oC,qDAAO,WAAuBjE,EAAYiE,EAAnC,oGACEC,YAAO,+BACYlE,EADZ,yBAGVmE,OAAQ,OACJF,GAAW,UALd,qC,wBAYA,WAAP,sC,qDAAO,WACLjE,EAEAuE,EAEAN,EALK,oGAOEC,YAAO,6CAA0ElE,GAA1E,aACZmE,OAAQ,OACRG,QAAS,CACP,eAAgB,oBAElB7C,KAAM,CACJ8C,UAEEN,GAAW,UAfZ,qC,wBAqBA,WAAP,sC,qDAAO,WACLO,EACAC,EACAR,EAHK,oGAKEC,YAAO,8BACWO,EADX,mCAC+CD,GAD/C,aAGVL,OAAQ,OACRG,QAAS,CACP,eAAgB,qBAEdL,GAAW,UAZd,qC","file":"p__Templates.1805c198.async.js","sourcesContent":["import { PlusOutlined, DeleteOutlined, EditOutlined } from '@ant-design/icons';\nimport { Button, Tooltip, Popconfirm, message, Tag } from 'antd';\nimport React, { useCallback, useRef, useState } from 'react';\nimport { useIntl, FormattedMessage, Link } from 'umi';\nimport { format } from 'date-fns';\nimport type { ProColumns, ActionType } from '@ant-design/pro-table';\nimport ProTable from '@ant-design/pro-table';\nimport { templates, deleteTemplate } from '@/services/escola-lms/templates';\nimport { DATETIME_FORMAT } from '@/consts/dates';\nimport type { channelType } from '..';\n\nconst TableList: React.FC<{ templateType: string; channel: channelType }> = ({\n  templateType,\n  channel,\n}) => {\n  const actionRef = useRef<ActionType>();\n  const intl = useIntl();\n  const [loading, setLoading] = useState(false);\n\n  const columns: ProColumns<API.TemplateListItem>[] = [\n    {\n      title: <FormattedMessage id=\"ID\" defaultMessage=\"ID\" />,\n      dataIndex: 'id',\n      hideInSearch: true,\n      sorter: true,\n      width: '80px',\n    },\n    {\n      title: <FormattedMessage id=\"created_at\" defaultMessage=\"created_at\" />,\n      dataIndex: 'created_at',\n      hideInSearch: true,\n      sorter: true,\n      render: (_, record) =>\n        record.created_at && format(new Date(record.created_at), DATETIME_FORMAT),\n    },\n    {\n      title: <FormattedMessage id=\"name\" defaultMessage=\"name\" />,\n      dataIndex: 'name',\n      hideInSearch: false,\n      sorter: true,\n    },\n    {\n      title: <FormattedMessage id=\"event\" defaultMessage=\"event\" />,\n      dataIndex: 'event',\n      hideInSearch: true,\n      sorter: false,\n      render: (_, record) => <FormattedMessage id={record.event} defaultMessage={record.event} />,\n    },\n    {\n      title: <FormattedMessage id=\"templates.is_default\" />,\n      dataIndex: 'default',\n      hideInSearch: true,\n      valueEnum: {\n        true: (\n          <Tag color=\"success\">\n            <FormattedMessage id=\"yes\" />\n          </Tag>\n        ),\n        false: (\n          <Tag color=\"error\">\n            <FormattedMessage id=\"no\" />\n          </Tag>\n        ),\n      },\n    },\n  ];\n\n  const handleRemove = useCallback(\n    async (id: number) => {\n      setLoading(true);\n      const hide = message.loading(<FormattedMessage id=\"loading\" defaultMessage=\"loading\" />);\n      try {\n        await deleteTemplate(id).then((response) => {\n          setLoading(false);\n          if (response.success) {\n            message.success(response.message);\n          }\n        });\n        hide();\n        setLoading(false);\n        actionRef.current?.reload();\n        return true;\n      } catch (error) {\n        hide();\n        message.error(<FormattedMessage id=\"error\" defaultMessage=\"error\" />);\n        setLoading(false);\n        return false;\n      }\n    },\n    [actionRef],\n  );\n\n  return (\n    <ProTable<API.TemplateListItem, API.TemplatesParams>\n      headerTitle={intl.formatMessage({\n        id: 'templates',\n        defaultMessage: 'templates',\n      })}\n      loading={loading}\n      actionRef={actionRef}\n      rowKey=\"id\"\n      search={{\n        layout: 'vertical',\n      }}\n      toolBarRender={() => [\n        <Link key={'new'} to={`/configuration/templates/${templateType}/new`}>\n          <Button type=\"primary\" key=\"primary\">\n            <PlusOutlined /> <FormattedMessage id=\"new\" defaultMessage=\"new\" />\n          </Button>\n        </Link>,\n      ]}\n      request={({ pageSize, current, name }, sort) => {\n        setLoading(true);\n        const sortArr = sort && Object.entries(sort)[0];\n        return templates({\n          per_page: pageSize,\n          page: current,\n          channel,\n          name: name || undefined,\n          order_by: sortArr && sortArr[0],\n          order: sortArr ? (sortArr[1] === 'ascend' ? 'ASC' : 'DESC') : undefined,\n        }).then((response) => {\n          if (response.success) {\n            setLoading(false);\n            return {\n              data: response.data,\n              total: response.meta.total,\n              success: true,\n            };\n          }\n          return [];\n        });\n      }}\n      columns={[\n        ...columns,\n        {\n          hideInSearch: true,\n          title: <FormattedMessage id=\"pages.searchTable.titleOption\" defaultMessage=\"option\" />,\n          dataIndex: 'option',\n          valueType: 'option',\n          render: (_, record) => [\n            <Link to={`/configuration/templates/${templateType}/${record.id}`} key=\"edit\">\n              <Tooltip title={<FormattedMessage id=\"edit\" defaultMessage=\"edit\" />}>\n                <Button type=\"primary\" icon={<EditOutlined />} />\n              </Tooltip>\n            </Link>,\n            <Popconfirm\n              key=\"delete\"\n              title={\n                <FormattedMessage\n                  id=\"deleteQuestion\"\n                  defaultMessage=\"Are you sure to delete this record?\"\n                />\n              }\n              onConfirm={() => handleRemove(record.id)}\n              okText={<FormattedMessage id=\"yes\" />}\n              cancelText={<FormattedMessage id=\"no\" />}\n            >\n              <Tooltip title={<FormattedMessage id=\"delete\" defaultMessage=\"delete\" />}>\n                <Button type=\"primary\" icon={<DeleteOutlined />} danger />\n              </Tooltip>\n            </Popconfirm>,\n          ],\n        },\n      ]}\n    />\n  );\n};\n\nexport default TableList;\n","import { useCallback } from 'react';\nimport { useModel } from 'umi';\n\nexport const useCheckRoles = () => {\n  const { initialState } = useModel('@@initialState');\n  const userRoles = initialState?.currentUser?.roles || [];\n\n  const checkRoles = useCallback((settingName: string): boolean => {\n    const settingsData = initialState?.config?.find((item) => item.key === settingName)?.data;\n    if (Array.isArray(userRoles) && Array.isArray(settingsData)) {\n      return userRoles.every((role) => settingsData.includes(role));\n    }\n    if (typeof settingsData === 'boolean') {\n      return settingsData;\n    }\n    return false;\n  }, []);\n\n  return {\n    checkRoles,\n  };\n};\n","import React from 'react';\nimport { FormattedMessage, useParams, history, useAccess } from 'umi';\nimport { PageContainer } from '@ant-design/pro-layout';\nimport ProCard from '@ant-design/pro-card';\n\nimport ConfigList from './ConfigList/index';\nimport { useCheckRoles } from '@/hooks/useCheckRoles';\n\nexport enum channelType {\n  email = 'EscolaLms\\\\TemplatesEmail\\\\Core\\\\EmailChannel',\n  pdf = 'EscolaLms\\\\TemplatesPdf\\\\Core\\\\PdfChannel',\n  sms = 'EscolaLms\\\\TemplatesSms\\\\Core\\\\SmsChannel',\n}\n\nconst Templates: React.FC = () => {\n  const params = useParams<{ template?: string }>();\n  const { template } = params;\n  const access = useAccess();\n  const { checkRoles } = useCheckRoles();\n\n  const hideSMSTab = checkRoles('hideTemplateTab-sms');\n  const hideEmailTab = checkRoles('hideTemplateTab-email');\n\n  return (\n    <PageContainer>\n      <ProCard\n        tabs={{\n          type: 'card',\n          activeKey: template,\n          onChange: (key) => history.push(`/configuration/templates/${key}`),\n        }}\n      >\n        {/** TODO check here if all essential access is given */}\n        {!hideEmailTab && (\n          <ProCard.TabPane key=\"email\" tab={<FormattedMessage id=\"email\" />}>\n            <ConfigList templateType={'email'} channel={channelType.email} />\n          </ProCard.TabPane>\n        )}\n\n        {access.certificatesPermission && (\n          <ProCard.TabPane key={'pdf'} tab={<FormattedMessage id=\"PDF\" />}>\n            <ConfigList templateType={'pdf'} channel={channelType.pdf} />\n          </ProCard.TabPane>\n        )}\n        {/* This was disabled so remove comment when functionality will be ready */}\n        {/* <ProCard.TabPane\n          disabled\n          key={'Push'}\n          tab={\n            <span>\n              <FormattedMessage id=\"Push\" />\n            </span>\n          }\n        >\n          Push\n        </ProCard.TabPane> */}\n        {!hideSMSTab && (\n          <ProCard.TabPane\n            key={'sms'}\n            tab={\n              <span>\n                <FormattedMessage id=\"SMS\" />\n              </span>\n            }\n          >\n            <ConfigList templateType={'sms'} channel={channelType.sms} />\n          </ProCard.TabPane>\n        )}\n      </ProCard>\n    </PageContainer>\n  );\n};\n\nexport default Templates;\n","import { request } from 'umi';\nimport type { RequestOptionsInit } from 'umi-request';\n\nexport async function templates(params?: API.TemplatesParams, options?: RequestOptionsInit) {\n  return request<API.TemplateList>(`/api/admin/templates`, {\n    method: 'GET',\n    useCache: false,\n    params,\n    ...(options || {}),\n  });\n}\n\nexport async function template(id: number, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.Template>>(`/api/admin/templates/${id}`, {\n    method: 'GET',\n    ...(options || {}),\n  });\n}\n\nexport async function createTemplate(body?: Partial<API.Template>, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.Template>>(`/api/admin/templates`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    data: body,\n    ...(options || {}),\n  });\n}\n\nexport async function updateTemplate(\n  id: number,\n  body?: Partial<API.Template>,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.Template>>(`/api/admin/templates/${id}`, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    data: body,\n    ...(options || {}),\n  });\n}\n\nexport async function deleteTemplate(id: number, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.Template>>(`/api/admin/templates/${id}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    ...(options || {}),\n  });\n}\n\nexport async function variables(options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.TemplateVariables>>(`/api/admin/templates/variables`, {\n    method: 'GET',\n    ...(options || {}),\n  });\n}\n\nexport async function preview(id: number, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<Record<string, string>>>(\n    `/api/admin/templates/${id}/preview`,\n    {\n      method: 'GET',\n      ...(options || {}),\n    },\n  );\n}\n\n/// api/admin/events/trigger-manually/{id}\n\nexport async function triggerManualEvent(\n  id: number,\n\n  users: number[],\n\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.Template>>(`/api/admin/events/trigger-manually/${id}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    data: {\n      users,\n    },\n    ...(options || {}),\n  });\n}\n\n// /api/admin/products/{id}/trigger-event-manually/{idTemplate}\n\nexport async function triggerManualEventForProduct(\n  templateId: number,\n  productId: number,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.Template>>(\n    `/api/admin/products/${productId}/trigger-event-manually/${templateId}`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      ...(options || {}),\n    },\n  );\n}\n"],"sourceRoot":""}