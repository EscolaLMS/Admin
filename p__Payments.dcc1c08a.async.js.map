{"version":3,"sources":["webpack:///./src/services/escola-lms/payments.ts","webpack:///./src/pages/Payments/index.tsx"],"names":["params","options","request","method","useCache","TableList","actionRef","useRef","intl","useIntl","columns","title","dataIndex","hideInSearch","sorter","width","hideInForm","hideInTable","valueType","fieldProps","allowEmpty","render","_","record","format","Date","created_at","DATETIME_FORMAT","updated_at","roundTo","amount","valueEnum","new","paid","cancelled","failed","redirect","payable_type","payable_id","formatMessage","id","defaultMessage","layout","sort","pageSize","current","dateRange","status","date_from","undefined","date_to","payments","per_page","page","createTableOrderObject","then","response","success","data","total","meta"],"mappings":"mNAIO,WAAP,oC,qDAAO,WACLA,EAUAC,EAXK,oGAaEC,YAAyB,sBAAlB,aACZF,SACAG,OAAQ,MACaC,SAAU,IAC3BH,GAAW,UAjBZ,qC,wFCUDI,EAAsB,UAAM,CAChC,GAAMC,GAAYC,mBACZC,EAAOC,cAEPC,EAA6C,CACjD,CACEC,MAAO,cAAC,IAAD,CAAkB,GAAG,KAAK,eAAe,OAChDC,UAAW,KACXC,aAAc,GACdC,OAAQ,GACRC,MAAO,QAET,CACEJ,MAAO,cAAC,IAAD,CAAkB,GAAG,YAAY,eAAe,eACvDC,UAAW,YACXC,aAAc,GACdG,WAAY,GACZC,YAAa,GACbC,UAAW,YACXC,WAAY,CACVC,WAAY,CAAC,GAAM,MAGvB,CACET,MAAO,cAAC,IAAD,CAAkB,GAAG,aAAa,eAAe,eACxDC,UAAW,aACXC,aAAc,GACdC,OAAQ,GACRO,OAAQ,SAACC,EAAGC,EAAJ,OAAeC,aAAO,GAAIC,MAAKF,EAAOG,YAAaC,OAE7D,CACEhB,MAAO,cAAC,IAAD,CAAkB,GAAG,aAAa,eAAe,eACxDC,UAAW,aACXC,aAAc,GACdC,OAAQ,GACRO,OAAQ,SAACC,EAAGC,EAAJ,OAAeC,aAAO,GAAIC,MAAKF,EAAOK,YAAaD,OAE7D,CACEhB,MAAO,cAAC,IAAD,CAAkB,GAAG,QAAQ,eAAe,UACnDC,UAAW,SACXC,aAAc,GACdQ,OAAQ,SAACC,EAAGC,EAAJ,OAAeM,aAAQN,EAAOO,OAAQ,EAAG,MACjDhB,OAAQ,IAEV,CACEH,MAAO,cAAC,IAAD,CAAkB,GAAG,WAAW,eAAe,aACtDC,UAAW,WACXC,aAAc,IAEhB,CACEF,MAAO,cAAC,IAAD,CAAkB,GAAG,SAAS,eAAe,WACpDC,UAAW,SACXC,aAAc,GACdC,OAAQ,GACRI,UAAW,SACXa,UAAW,CACTC,IACE,mBAAK,MAAM,aAAX,SACE,cAAC,IAAD,CAAkB,GAAG,kBAGzBC,KACE,mBAAK,MAAM,UAAX,SACE,cAAC,IAAD,CAAkB,GAAG,WAGzBC,UACE,mBAAK,MAAM,UAAX,SACE,cAAC,IAAD,CAAkB,GAAG,gBAGzBC,OACE,mBAAK,MAAM,QAAX,SACE,cAAC,IAAD,CAAkB,GAAG,aAGzBC,SACE,4BACE,cAAC,IAAD,CAAkB,GAAG,iBAe7B,CACEzB,MAAO,cAAC,IAAD,CAAkB,GAAG,UAAU,eAAe,eACrDC,UAAW,UACXC,aAAc,GACdQ,OAAQ,SAACC,EAAGC,EAAJ,OACN,eAAC,IAAD,CAAkB,KAAMA,EAAOc,aAAc,QAASd,EAAOe,gBAKnE,MACE,eAAC,IAAD,UACE,cAAC,IAAD,CAIE,YAAa9B,EAAK+B,cAAc,CAC9BC,GAAI,sBACJC,eAAgB,aAElB,UAAWnC,EACX,OAAO,KACP,OAAQ,CACNoC,OAAQ,YAEV,QAAS,WAEPC,EACG,IAFDC,GAEC,EAFDA,SAAUC,EAET,EAFSA,QAASC,EAElB,EAFkBA,UAAWC,EAE7B,EAF6BA,OAG1BC,EACJF,GAAaA,EAAU,GAAKtB,YAAO,GAAIC,MAAKqB,EAAU,IAAKnB,KAAmBsB,OAC1EC,EACJJ,GAAaA,EAAU,GAAKtB,YAAO,GAAIC,MAAKqB,EAAU,IAAKnB,KAAmBsB,OAChF,MAAOE,GAAS,aACdC,SAAUR,EACVS,KAAMR,EACNG,YACAE,UACAH,UACGO,YAAuBX,EAAM,gBAC/BY,KAAK,SAACC,EAAa,CACpB,MAAIA,GAASC,QACJ,CACLC,KAAMF,EAASE,KACfC,MAAOH,EAASI,KAAKD,MACrBF,QAAS,IAGN,MAGX,QAAS/C,OAMFL","file":"p__Payments.dcc1c08a.async.js","sourcesContent":["import { request } from 'umi';\nimport type { RequestOptionsInit } from 'umi-request';\n\n/**  GET /api/admin/users */\nexport async function payments(\n  params: API.PaginationParams & {\n    // query\n    date_from?: string;\n    date_to?: string;\n    status?: API.PaymentStatus;\n    order_id?: string;\n    // user_id?: number;\n    // author_id?: number;\n    // course_id?: number;\n  },\n  options?: RequestOptionsInit,\n) {\n  return request<API.PaymentList>('/api/admin/payments', {\n    params,\n    method: 'GET',\n    /* useCache: true */ useCache: false,\n    ...(options || {}),\n  });\n}\n","import React, { useRef } from 'react';\nimport { useIntl, FormattedMessage } from 'umi';\nimport { PageContainer } from '@ant-design/pro-layout';\nimport type { ProColumns, ActionType } from '@ant-design/pro-table';\nimport ProTable from '@ant-design/pro-table';\n\nimport { payments } from '@/services/escola-lms/payments';\nimport { format } from 'date-fns';\n\nimport TypeButtonDrawer from '@/components/TypeButtonDrawer';\nimport { DATETIME_FORMAT } from '@/consts/dates';\nimport { createTableOrderObject, roundTo } from '@/utils/utils';\nimport { Tag } from 'antd';\n\nconst TableList: React.FC = () => {\n  const actionRef = useRef<ActionType>();\n  const intl = useIntl();\n\n  const columns: ProColumns<API.PaymentListItem>[] = [\n    {\n      title: <FormattedMessage id=\"ID\" defaultMessage=\"ID\" />,\n      dataIndex: 'id',\n      hideInSearch: true,\n      sorter: true,\n      width: '80px',\n    },\n    {\n      title: <FormattedMessage id=\"dateRange\" defaultMessage=\"Date Range\" />,\n      dataIndex: 'dateRange',\n      hideInSearch: false,\n      hideInForm: true,\n      hideInTable: true,\n      valueType: 'dateRange',\n      fieldProps: {\n        allowEmpty: [true, true],\n      },\n    },\n    {\n      title: <FormattedMessage id=\"created_at\" defaultMessage=\"created_at\" />,\n      dataIndex: 'created_at',\n      hideInSearch: true,\n      sorter: true,\n      render: (_, record) => format(new Date(record.created_at), DATETIME_FORMAT),\n    },\n    {\n      title: <FormattedMessage id=\"updated_at\" defaultMessage=\"updated_at\" />,\n      dataIndex: 'updated_at',\n      hideInSearch: true,\n      sorter: true,\n      render: (_, record) => format(new Date(record.updated_at), DATETIME_FORMAT),\n    },\n    {\n      title: <FormattedMessage id=\"total\" defaultMessage=\"total\" />,\n      dataIndex: 'amount',\n      hideInSearch: true,\n      render: (_, record) => roundTo(record.amount, 2, 100),\n      sorter: true,\n    },\n    {\n      title: <FormattedMessage id=\"currency\" defaultMessage=\"currency\" />,\n      dataIndex: 'currency',\n      hideInSearch: true,\n    },\n    {\n      title: <FormattedMessage id=\"status\" defaultMessage=\"status\" />,\n      dataIndex: 'status',\n      hideInSearch: false,\n      sorter: true,\n      valueType: 'select',\n      valueEnum: {\n        new: (\n          <Tag color=\"processing\">\n            <FormattedMessage id=\"new_payment\" />\n          </Tag>\n        ),\n        paid: (\n          <Tag color=\"success\">\n            <FormattedMessage id=\"paid\" />\n          </Tag>\n        ),\n        cancelled: (\n          <Tag color=\"warning\">\n            <FormattedMessage id=\"cancelled\" />\n          </Tag>\n        ),\n        failed: (\n          <Tag color=\"error\">\n            <FormattedMessage id=\"failed\" />\n          </Tag>\n        ),\n        redirect: (\n          <Tag>\n            <FormattedMessage id=\"redirect\" />\n          </Tag>\n        ),\n      },\n    },\n    // TODO: Remove this or uncomment if we will have billable_type from BE\n    // {\n    //   title: <FormattedMessage id=\"billable\" defaultMessage=\"Billable to\" />,\n    //   dataIndex: 'billable',\n    //   hideInSearch: false,\n    //   sorter: true,\n    //   render: (_, record) => (\n    //     <TypeButtonDrawer type={record.billable_type} type_id={record.user_id} />\n    //   ),\n    // },\n    {\n      title: <FormattedMessage id=\"payable\" defaultMessage=\"Payable to\" />,\n      dataIndex: 'payable',\n      hideInSearch: true,\n      render: (_, record) => (\n        <TypeButtonDrawer type={record.payable_type} type_id={record.payable_id} />\n      ),\n    },\n  ];\n\n  return (\n    <PageContainer>\n      <ProTable<\n        API.PaymentListItem,\n        API.PageParams & { dateRange: [string, string]; status: API.PaymentStatus }\n      >\n        headerTitle={intl.formatMessage({\n          id: 'menu.Sales.Payments',\n          defaultMessage: 'payments',\n        })}\n        actionRef={actionRef}\n        rowKey=\"id\"\n        search={{\n          layout: 'vertical',\n        }}\n        request={(\n          { pageSize, current, dateRange, status /* , user_id, author_id, course_id */ },\n          sort,\n        ) => {\n          const date_from =\n            dateRange && dateRange[0] ? format(new Date(dateRange[0]), DATETIME_FORMAT) : undefined;\n          const date_to =\n            dateRange && dateRange[1] ? format(new Date(dateRange[1]), DATETIME_FORMAT) : undefined;\n          return payments({\n            per_page: pageSize,\n            page: current,\n            date_from,\n            date_to,\n            status,\n            ...createTableOrderObject(sort, 'created_at'),\n          }).then((response) => {\n            if (response.success) {\n              return {\n                data: response.data,\n                total: response.meta.total,\n                success: true,\n              };\n            }\n            return [];\n          });\n        }}\n        columns={columns}\n      />\n    </PageContainer>\n  );\n};\n\nexport default TableList;\n"],"sourceRoot":""}