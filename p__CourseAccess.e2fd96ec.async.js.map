{"version":3,"sources":["webpack:///./src/services/escola-lms/course_access.ts","webpack:///./src/pages/CourseAccess/index.tsx","webpack:///./src/components/CollectionSelect/index.tsx"],"names":["params","options","request","method","per_page","pageSize","page","current","id","handleRemove","deleteCourseAccess","then","response","success","message","DataDisplay","data","useState","visible","setVisible","Object","keys","length","map","key","TableList","actionRef","useRef","intl","useIntl","columns","title","dataIndex","hideInSearch","sorter","width","renderFormItem","item","form","type","defaultRender","rest","stateType","getFieldValue","render","_","record","course","user","created_at","format","Date","DATETIME_FORMAT","valueType","valueEnum","pending","text","status","approved","approveCourseAccess","reload","formatMessage","defaultMessage","layout","sort","course_id","user_id","sortArr","entries","courseAccess","order_by","order","undefined","total","meta","prepareObj","arr","Number","name","CollectionSelect","value","onChange","multiple","defaultValue","modelType","modelCollection","setModelCollection","fetching","setFetching","abortController","modelCollectionMethod","useCallback","getCourses","signal","getWebinars","getConsultations","modelSingleMethod","getCourse","getWebinar","getConsultation","fetch","search","abort","AbortController","catch","onSearch","useEffect","prevCourses","input","option","children","toString","toLowerCase","indexOf","modelItem"],"mappings":"0bAKO,WAAP,oC,qDAAO,WACLA,EACAC,EAFK,oGAIEC,YAAO,kDACZC,OAAQ,MACRH,OAAQ,2BACHA,GADC,IAEJI,SAAUJ,EAAOK,SACjBC,KAAMN,EAAOO,WAEXN,GAAW,UAXZ,qC,wBAgBA,WAAP,oC,qDAAO,WAAkCO,EAAYP,EAA9C,oGACEC,YAAO,6CAC0BM,GAD1B,aAGVL,OAAQ,UACJF,GAAW,UALd,qC,wBAWA,WAAP,oC,qDAAO,WAAmCO,EAAYP,EAA/C,oGACEC,YAAO,qDACkCM,GADlC,aAGVL,OAAQ,QACJF,GAAW,UALd,qC,uHCbDQ,EAAY,gDAAG,WAAOD,EAAP,oGACZE,EAAmBF,GAAIG,KAAK,SAACC,EAAa,CAC/C,MAAIA,GAASC,SACX,IAAQA,QAAQD,EAASE,SAEpB,UALU,qCAAH,sDASZC,EAA2C,SAAC,EAAa,IAAXC,GAAW,EAAXA,KAClD,EAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,MAAOH,IAAQ,MAAOA,IAAS,UAAYI,OAAOC,KAAKL,GAAMM,OAAS,EACpE,eAAC,IAAM,SAAP,WACE,mBAAQ,KAAK,QAAQ,QAAS,iBAAMH,GAAW,KAA/C,SACE,cAAC,IAAD,CAAkB,GAAG,OAAO,eAAe,WAE7C,mBAAQ,MAAO,IAAK,KAAMD,EAAS,QAAS,iBAAMC,GAAW,KAA7D,SACE,kBAAY,UAAZ,UACGC,OAAOC,KAAKL,GAAMO,IAAI,SAACC,EAAD,OACrB,+BACE,cAAC,IAAD,CAAkB,GAAIA,EAAK,eAAgBA,IAD7C,IACqD,qCAAQR,EAAKQ,QAD1DA,YAQhB,cAAC,IAAM,SAAP,KAIEC,EAAsB,UAAM,CAChC,GAAMC,GAAYC,mBACZC,EAAOC,cAEPC,EAAyD,CAC7D,CACEC,MAAO,cAAC,IAAD,CAAkB,GAAG,KAAK,eAAe,OAChDC,UAAW,KACXC,aAAc,GACdC,OAAQ,GACRC,MAAO,QAGT,CACEJ,MAAO,cAAC,IAAD,CAAkB,GAAG,SAAS,eAAe,WACpDC,UAAW,YACXI,eAAgB,SAACC,EAAD,EAAyCC,EAAS,IAAzCC,GAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,cAAkBC,EAAiB,kBAChE,GAAIF,IAAS,OACX,MAAO,MAET,GAAMG,GAAYJ,EAAKK,cAAc,SACrC,MACE,eAAC,IAAD,2BACMF,GADN,IAEE,MAAO,CACLF,KAAMG,OAKdE,OAAQ,SAACC,EAAGC,EAAJ,OACNA,GAAOC,QACPD,EAAOC,OAAOvC,IACZ,cAAC,IAAD,CAAoC,KAAK,sBAAoB,QAASsC,EAAOC,OAAOvC,IAA7D,eAG7B,CACEuB,MAAO,cAAC,IAAD,CAAkB,GAAG,OAAO,eAAe,SAClDC,UAAW,UACXI,eAAgB,SAACC,EAAD,EAAyCC,EAAS,IAAzCC,GAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,cAAkBC,EAAiB,iBAChE,GAAIF,IAAS,OACX,MAAO,MAET,GAAMG,GAAYJ,EAAKK,cAAc,SACrC,MACE,eAAC,IAAD,2BACMF,GADN,IAEE,MAAO,CACLF,KAAMG,OAKdE,OAAQ,SAACC,EAAGC,EAAJ,eACN,IAAAA,EAAOE,QAAP,0BAAaxC,KACX,cAAC,IAAD,CAEE,KAAK,gCACL,QAAO,GAAEsC,EAAOE,QAAT,wBAAE,EAAaxC,IAFjB,UAMb,CACEuB,MAAO,cAAC,IAAD,CAAkB,GAAG,aAAa,eAAe,eACxDC,UAAW,aACXC,aAAc,GACdC,OAAQ,GACRU,OAAQ,SAACC,EAAGC,EAAJ,OACNA,GAAOG,YAAcC,YAAO,GAAIC,MAAKL,EAAOG,YAAaG,OAE7D,CACErB,MAAO,cAAC,IAAD,CAAkB,GAAG,SAAS,eAAe,WACpDC,UAAW,SACXE,OAAQ,GACRmB,UAAW,SACXC,UAAW,CACTC,QAAS,CACPC,KACE,mBAAK,MAAM,aAAX,SACE,cAAC,IAAD,CAAkB,GAAG,UAAU,eAAe,cAGlDC,OAAQ,WAEVC,SAAU,CACRF,KACE,mBAAK,MAAM,UAAX,SACE,cAAC,IAAD,CAAkB,GAAG,WAAW,eAAe,eAGnDC,OAAQ,aAGZb,OAAQ,SAACC,EAAGC,EAAJ,OACNA,GAAOW,SAAW,UAChB,mBACE,KAAK,QACL,KAAK,UACL,QAAS,UAAM,CACbE,EAAoBb,EAAOtC,IAAIG,KAAK,SAACC,EAAa,CAC5CA,EAASC,SACPa,EAAUnB,SACZmB,EAAUnB,QAAQqD,YAP5B,SAaE,cAAC,IAAD,CAAkB,GAAG,UAAU,eAAe,cAGhD,mBAAK,MAAOd,EAAOW,SAAW,WAAa,UAAY,aAAvD,SACE,cAAC,IAAD,CAAkB,GAAIX,EAAOW,OAAQ,eAAgBX,EAAOW,aAIpE,CACE1B,MAAO,cAAC,IAAD,CAAkB,GAAG,aAAa,eAAe,eACxDC,UAAW,OACXC,aAAc,GACdW,OAAQ,SAACC,EAAGC,EAAJ,OAAe,eAAC,EAAD,CAAa,KAAMA,EAAO9B,SAEnD,CACEiB,aAAc,GACdF,MAAO,cAAC,IAAD,CAAkB,GAAG,gCAAgC,eAAe,WAC3EC,UAAW,SACXqB,UAAW,SACXT,OAAQ,SAACC,EAAGC,EAAJ,OAAe,CACrB,mBAEE,MACE,cAAC,IAAD,CACE,GAAG,iBACH,eAAe,wCAGnB,UAAS,+BAAE,6GACarC,EAAaqC,EAAOtC,QADjC,GACHK,EADG,OAELA,GACEa,EAAUnB,SACZmB,EAAUnB,QAAQqD,aAJb,qCAQX,OAAQ,cAAC,IAAD,CAAkB,GAAG,QAC7B,WAAY,cAAC,IAAD,CAAkB,GAAG,OAjBnC,SAmBE,mBAAS,MAAO,cAAC,IAAD,CAAkB,GAAG,SAAS,eAAe,WAA7D,SACE,mBAAQ,KAAK,UAAU,KAAM,cAAC,IAAD,IAAoB,OAAM,QAnBrD,cA0BZ,MACE,eAAC,IAAD,UACE,cAAC,IAAD,CACE,YAAahC,EAAKiC,cAAc,CAC9BrD,GAAI,wBACJsD,eAAgB,4BAElB,OAAQ,CACNC,OAAQ,YAEV,UAAWrC,EACX,OAAO,KACP,QAAS,WAAoDsC,EAAS,IAA1D3D,GAA0D,EAA1DA,SAAUE,EAAgD,EAAhDA,QAAS0D,EAAuC,EAAvCA,UAAWR,EAA4B,EAA5BA,OAAQS,EAAoB,EAApBA,QAC1CC,EAAUH,GAAQ5C,OAAOgD,QAAQJ,GAAM,GAC7C,MAAOK,GAAa,CAClBhE,WACAE,UACA0D,YACAC,UACAT,SACAa,SAAUH,GAAWA,EAAQ,GAC7BI,MAAOJ,EAAWA,EAAQ,KAAO,SAAW,MAAQ,OAAUK,SAC7D7D,KAAK,SAACC,GAAa,CACpB,MAAIA,IAASC,QACJ,CACLG,KAAMJ,GAASI,KACfyD,MAAO7D,GAAS8D,KAAKD,MACrB5D,QAAS,IAGN,MAGX,QAASiB,OAMFL,e,2OClOTkD,EAAa,SAACC,EAAD,OACjBA,GAAIrD,IAAI,SAACc,EAAsD,CAC7D,MAAI,QAAUA,GACL,CACL7B,GAAIqE,OAAOxC,EAAK7B,IAChBsE,KAAMzC,EAAKyC,MAIR,CACLtE,GAAIqE,OAAOxC,EAAK7B,IAChBsE,KAAMzC,EAAKN,MAAQM,EAAKN,MAAQ,OAIzBgD,EAYR,SAAC,EAA8E,IAA5EC,GAA4E,EAA5EA,MAAOC,EAAqE,EAArEA,SAAqE,IAA3DC,WAA2D,WAAhD,GAAgD,EAAzCC,EAAyC,EAAzCA,aAAyC,IAA3BC,YAA2B,WAAf,SAAe,EAClF,EAA8CnE,mBAAgC,IAA9E,mBAAOoE,EAAP,KAAwBC,EAAxB,KACA,EAAgCrE,mBAAS,IAAzC,mBAAOsE,EAAP,KAAiBC,EAAjB,KAEMC,EAAkB9D,mBAElB+D,EAAwBC,sBAC5B,SAAC3F,EAA6C,aAC5C,OAAQoF,OACD,SACH,MAAOQ,aAAW5F,EAAQ,CAAE6F,OAAQJ,GAAF,SAAEA,EAAiBlF,WAAnB,wBAAE,EAA0BsF,aAC3D,UACH,MAAOC,aAAY9F,EAAQ,CAAE6F,OAAQJ,GAAF,SAAEA,EAAiBlF,WAAnB,wBAAE,EAA0BsF,aAC5D,gBACH,MAAOE,aAAiB/F,EAAQ,CAAE6F,OAAQJ,GAAF,SAAEA,EAAiBlF,WAAnB,wBAAE,EAA0BsF,iBAEpE,MAAOD,aAAW5F,EAAQ,CAAE6F,OAAQJ,GAAF,SAAEA,EAAiBlF,WAAnB,wBAAE,EAA0BsF,WAGpE,CAACT,EAAWK,IAERO,EAAoBL,sBACxB,SAACnF,EAAwB,aACvB,OAAQ4E,OACD,SACH,MAAOa,aAAUpB,OAAOrE,GAAK,CAAEqF,OAAM,GAAEJ,EAAgBlF,WAAlB,wBAAE,EAAyBsF,aAC7D,UACH,MAAOK,aAAWrB,OAAOrE,GAAK,CAAEqF,OAAM,GAAEJ,EAAgBlF,WAAlB,wBAAE,EAAyBsF,aAC9D,gBACH,MAAOM,aAAgBtB,OAAOrE,GAAK,CAAEqF,OAAM,GAAEJ,EAAgBlF,WAAlB,wBAAE,EAAyBsF,iBAEtE,MAAOI,aAAUpB,OAAOrE,GAAK,CAAEqF,OAAM,GAAEJ,EAAgBlF,WAAlB,wBAAE,EAAyBsF,WAGtE,CAACT,EAAWK,IAGRW,EAAQT,sBACZ,SAACU,EAAoB,CACnBb,EAAY,IACRC,EAAgBlF,SAClBkF,EAAgBlF,QAAQ+F,QAG1Bb,EAAgBlF,QAAU,GAAIgG,iBAE9Bb,EAAsBW,EAAS,CAAEtE,MAAOsE,GAAW,IAChD1F,KAAK,SAACC,EAAa,CACdA,EAASC,SACXyE,EAAmBX,EAAW/D,EAASI,OAEzCwE,EAAY,MAEbgB,MAAM,iBAAMhB,GAAY,OAE7B,CAACJ,IAGGqB,GAAWd,sBACf,SAACU,EAAmB,CAClBD,EAAMC,IAER,CAACD,IAGHM,2BAAU,UAAM,CACdjB,SAAgBlF,QAAU,GAAIgG,iBAE1BvB,GACFgB,EAAkBnB,OAAOG,IAAQrE,KAAK,SAACC,EAAa,CAC9CA,GACEA,EAASC,SACXyE,EAAmB,SAACqB,EAAD,6BAAqBA,GAArB,YAAqChC,EAAW,CAAC/D,EAASI,aAK9E,UAAM,CACPyE,EAAgBlF,SAClBkF,EAAgBlF,QAAQ+F,UAG3B,CAACtB,EAAOI,IAGT,mBACE,aAAcD,EACd,QAAS,iBAAMiB,MACf,WAAU,GACV,MAAO,CAAEjE,MAAO,QAChB,MAAO6C,EACP,SAAUC,EACV,KAAMC,EAAW,WAAaV,OAC9B,WAAU,GACV,SAAUiC,GACV,YAAa,cAAC,IAAD,CAAkB,GAAG,iBAAiB,eAAe,mBAClE,iBAAiB,WACjB,aAAc,SAACG,EAAOC,EAAW,CAC/B,GAAIA,GAAUA,EAAOC,SAAU,OAC7B,MAAOD,IAAM,MAAN,GAAAA,EAAQC,YAAR,0BAAkBC,WAAWC,cAAcC,QAAQL,EAAMI,iBAAkB,EAEpF,MAAO,IAET,gBAAiBzB,EAAW,mBAAM,KAAK,UAAa,KACpD,gBAAgB,QAnBlB,SAqBGF,EAAgB9D,IAAI,SAAC2F,EAAD,OACnB,mBAAQ,OAAR,CAAkC,MAAOA,EAAU1G,GAAI,MAAO0G,EAAUpC,KAAxE,SACGoC,EAAUpC,MADOoC,EAAU1G","file":"p__CourseAccess.e2fd96ec.async.js","sourcesContent":["import { request } from 'umi';\n\nimport type { RequestOptionsInit } from 'umi-request';\n\n/**  GET /api/admin/course-access-enquiries */\nexport async function courseAccess(\n  params: API.CourseAccessEnquiryListParams,\n  options?: RequestOptionsInit,\n) {\n  return request<API.CourseAccessEnquiryList>(`/api/admin/course-access-enquiries`, {\n    method: 'GET',\n    params: {\n      ...params,\n      per_page: params.pageSize,\n      page: params.current,\n    },\n    ...(options || {}),\n  });\n}\n\n/**  DELETE /api/admin/course-access-enquiries/:id */\nexport async function deleteCourseAccess(id: number, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.CourseAccessEnquiry>>(\n    `/api/admin/course-access-enquiries/${id}`,\n    {\n      method: 'DELETE',\n      ...(options || {}),\n    },\n  );\n}\n\n/**  POST /api/admin/tasks/:id */\nexport async function approveCourseAccess(id: number, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.CourseAccessEnquiry>>(\n    `/api/admin/course-access-enquiries/approve/${id}`,\n    {\n      method: 'POST',\n      ...(options || {}),\n    },\n  );\n}\n","import { DeleteOutlined } from '@ant-design/icons';\nimport { Button, Tooltip, Popconfirm, message, Typography, Drawer, Tag } from 'antd';\nimport React, { useRef, useState } from 'react';\nimport { useIntl, FormattedMessage } from 'umi';\nimport { PageContainer } from '@ant-design/pro-layout';\nimport type { ProColumns, ActionType } from '@ant-design/pro-table';\nimport ProTable from '@ant-design/pro-table';\nimport UserSelect from '@/components/UserSelect';\nimport { format } from 'date-fns';\nimport { DATETIME_FORMAT } from '@/consts/dates';\n\nimport {\n  courseAccess,\n  deleteCourseAccess,\n  approveCourseAccess,\n} from '@/services/escola-lms/course_access';\nimport TypeButtonDrawer from '@/components/TypeButtonDrawer';\nimport { CollectionSelect } from '@/components/CollectionSelect';\n\nconst handleRemove = async (id: number) => {\n  return deleteCourseAccess(id).then((response) => {\n    if (response.success) {\n      message.success(response.message);\n    }\n    return true;\n  });\n};\n\nconst DataDisplay: React.FC<{ data: unknown }> = ({ data }) => {\n  const [visible, setVisible] = useState(false);\n  return data && typeof data === 'object' && Object.keys(data).length > 0 ? (\n    <React.Fragment>\n      <Button size=\"small\" onClick={() => setVisible(true)}>\n        <FormattedMessage id=\"show\" defaultMessage=\"show\" />\n      </Button>\n      <Drawer width={700} open={visible} onClose={() => setVisible(false)}>\n        <Typography.Paragraph>\n          {Object.keys(data).map((key) => (\n            <p key={key}>\n              <FormattedMessage id={key} defaultMessage={key} />:<span> {data[key]}</span>\n            </p>\n          ))}\n        </Typography.Paragraph>\n      </Drawer>\n    </React.Fragment>\n  ) : (\n    <React.Fragment />\n  );\n};\n\nconst TableList: React.FC = () => {\n  const actionRef = useRef<ActionType>();\n  const intl = useIntl();\n\n  const columns: ProColumns<API.CourseAccessEnquiryListItem>[] = [\n    {\n      title: <FormattedMessage id=\"ID\" defaultMessage=\"ID\" />,\n      dataIndex: 'id',\n      hideInSearch: true,\n      sorter: true,\n      width: '80px',\n    },\n\n    {\n      title: <FormattedMessage id=\"course\" defaultMessage=\"course\" />,\n      dataIndex: 'course_id',\n      renderFormItem: (item, { type, defaultRender, ...rest }, form) => {\n        if (type === 'form') {\n          return null;\n        }\n        const stateType = form.getFieldValue('state');\n        return (\n          <CollectionSelect\n            {...rest}\n            state={{\n              type: stateType,\n            }}\n          />\n        );\n      },\n      render: (_, record) =>\n        record.course &&\n        record.course.id && (\n          <TypeButtonDrawer key={'course_id'} type=\"App\\Models\\Course\" type_id={record.course.id} />\n        ),\n    },\n    {\n      title: <FormattedMessage id=\"user\" defaultMessage=\"user\" />,\n      dataIndex: 'user_id',\n      renderFormItem: (item, { type, defaultRender, ...rest }, form) => {\n        if (type === 'form') {\n          return null;\n        }\n        const stateType = form.getFieldValue('state');\n        return (\n          <UserSelect\n            {...rest}\n            state={{\n              type: stateType,\n            }}\n          />\n        );\n      },\n      render: (_, record) =>\n        record.user?.id && (\n          <TypeButtonDrawer\n            key={'user'}\n            type=\"EscolaLms\\Core\\Models\\User\"\n            type_id={record.user?.id}\n          />\n        ),\n    },\n    {\n      title: <FormattedMessage id=\"created_at\" defaultMessage=\"Created at\" />,\n      dataIndex: 'created_at',\n      hideInSearch: true,\n      sorter: true,\n      render: (_, record) =>\n        record.created_at && format(new Date(record.created_at), DATETIME_FORMAT),\n    },\n    {\n      title: <FormattedMessage id=\"status\" defaultMessage=\"Status\" />,\n      dataIndex: 'status',\n      sorter: true,\n      valueType: 'select',\n      valueEnum: {\n        pending: {\n          text: (\n            <Tag color=\"processing\">\n              <FormattedMessage id=\"pending\" defaultMessage=\"pending\" />\n            </Tag>\n          ),\n          status: 'pending',\n        },\n        approved: {\n          text: (\n            <Tag color=\"success\">\n              <FormattedMessage id=\"approved\" defaultMessage=\"approved\" />\n            </Tag>\n          ),\n          status: 'approved',\n        },\n      },\n      render: (_, record) =>\n        record.status === 'pending' ? (\n          <Button\n            size=\"small\"\n            type=\"primary\"\n            onClick={() => {\n              approveCourseAccess(record.id).then((response) => {\n                if (response.success) {\n                  if (actionRef.current) {\n                    actionRef.current.reload();\n                  }\n                }\n              });\n            }}\n          >\n            <FormattedMessage id=\"approve\" defaultMessage=\"Approve\" />\n          </Button>\n        ) : (\n          <Tag color={record.status === 'approved' ? 'success' : 'processing'}>\n            <FormattedMessage id={record.status} defaultMessage={record.status} />\n          </Tag>\n        ),\n    },\n    {\n      title: <FormattedMessage id=\"extra_data\" defaultMessage=\"Extra data\" />,\n      dataIndex: 'data',\n      hideInSearch: true,\n      render: (_, record) => <DataDisplay data={record.data} />,\n    },\n    {\n      hideInSearch: true,\n      title: <FormattedMessage id=\"pages.searchTable.titleOption\" defaultMessage=\"option\" />,\n      dataIndex: 'option',\n      valueType: 'option',\n      render: (_, record) => [\n        <Popconfirm\n          key=\"delete\"\n          title={\n            <FormattedMessage\n              id=\"deleteQuestion\"\n              defaultMessage=\"Are you sure to delete this record?\"\n            />\n          }\n          onConfirm={async () => {\n            const success = await handleRemove(record.id);\n            if (success) {\n              if (actionRef.current) {\n                actionRef.current.reload();\n              }\n            }\n          }}\n          okText={<FormattedMessage id=\"yes\" />}\n          cancelText={<FormattedMessage id=\"no\" />}\n        >\n          <Tooltip title={<FormattedMessage id=\"delete\" defaultMessage=\"delete\" />}>\n            <Button type=\"primary\" icon={<DeleteOutlined />} danger />\n          </Tooltip>\n        </Popconfirm>,\n      ],\n    },\n  ];\n\n  return (\n    <PageContainer>\n      <ProTable<API.CourseAccessEnquiryListItem, API.CourseAccessEnquiryListParams>\n        headerTitle={intl.formatMessage({\n          id: 'courseAccessEnquiries',\n          defaultMessage: 'Course Access Enquiries',\n        })}\n        search={{\n          layout: 'vertical',\n        }}\n        actionRef={actionRef}\n        rowKey=\"id\"\n        request={({ pageSize, current, course_id, status, user_id }, sort) => {\n          const sortArr = sort && Object.entries(sort)[0];\n          return courseAccess({\n            pageSize,\n            current,\n            course_id,\n            user_id,\n            status,\n            order_by: sortArr && sortArr[0],\n            order: sortArr ? (sortArr[1] === 'ascend' ? 'ASC' : 'DESC') : undefined,\n          }).then((response) => {\n            if (response.success) {\n              return {\n                data: response.data,\n                total: response.meta.total,\n                success: true,\n              };\n            }\n            return [];\n          });\n        }}\n        columns={columns}\n      />\n    </PageContainer>\n  );\n};\n\nexport default TableList;\n","import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { Select, Spin } from 'antd';\n\nimport { course as getCourses, getCourse } from '@/services/escola-lms/course';\nimport { webinars as getWebinars, getWebinar } from '@/services/escola-lms/webinars';\nimport {\n  consultations as getConsultations,\n  getConsultation,\n} from '@/services/escola-lms/consultations';\nimport { FormattedMessage } from 'umi';\nimport type { DefaultOptionType, LabeledValue } from 'antd/lib/select';\n\ntype CollectionModelItem = {\n  id: number;\n  name: string;\n};\n\n// this creates a simple state object with typegurad\nconst prepareObj = (arr: (API.Course | API.Webinar | API.Consultation)[]) =>\n  arr.map((item: API.Course | API.Webinar | API.Consultation) => {\n    if ('name' in item) {\n      return {\n        id: Number(item.id),\n        name: item.name,\n      };\n    }\n\n    return {\n      id: Number(item.id),\n      name: item.title ? item.title : '',\n    };\n  });\n\nexport const CollectionSelect: React.FC<{\n  state?: {\n    type: number;\n  };\n  multiple?: boolean;\n  value?: string;\n  onChange?: (\n    value: string | string[] | number | number[] | LabeledValue | LabeledValue[],\n    option: DefaultOptionType | DefaultOptionType[],\n  ) => void;\n  defaultValue?: string | string[] | number | number[] | LabeledValue | LabeledValue[];\n  modelType?: string;\n}> = ({ value, onChange, multiple = false, defaultValue, modelType = 'COURSE' }) => {\n  const [modelCollection, setModelCollection] = useState<CollectionModelItem[]>([]);\n  const [fetching, setFetching] = useState(false);\n\n  const abortController = useRef<AbortController>();\n\n  const modelCollectionMethod = useCallback(\n    (params: Parameters<typeof getCourses>[0]) => {\n      switch (modelType) {\n        case 'COURSE':\n          return getCourses(params, { signal: abortController?.current?.signal });\n        case 'WEBINAR':\n          return getWebinars(params, { signal: abortController?.current?.signal });\n        case 'CONSULTATIONS':\n          return getConsultations(params, { signal: abortController?.current?.signal });\n        default:\n          return getCourses(params, { signal: abortController?.current?.signal });\n      }\n    },\n    [modelType, abortController],\n  );\n  const modelSingleMethod = useCallback(\n    (id: string | number) => {\n      switch (modelType) {\n        case 'COURSE':\n          return getCourse(Number(id), { signal: abortController.current?.signal });\n        case 'WEBINAR':\n          return getWebinar(Number(id), { signal: abortController.current?.signal });\n        case 'CONSULTATIONS':\n          return getConsultation(Number(id), { signal: abortController.current?.signal });\n        default:\n          return getCourse(Number(id), { signal: abortController.current?.signal });\n      }\n    },\n    [modelType, abortController],\n  );\n\n  const fetch = useCallback(\n    (search?: string) => {\n      setFetching(true);\n      if (abortController.current) {\n        abortController.current.abort();\n      }\n\n      abortController.current = new AbortController();\n\n      modelCollectionMethod(search ? { title: search } : {})\n        .then((response) => {\n          if (response.success) {\n            setModelCollection(prepareObj(response.data));\n          }\n          setFetching(false);\n        })\n        .catch(() => setFetching(false));\n    },\n    [modelType],\n  );\n\n  const onSearch = useCallback(\n    (search: string) => {\n      fetch(search);\n    },\n    [fetch],\n  );\n\n  useEffect(() => {\n    abortController.current = new AbortController();\n\n    if (value) {\n      modelSingleMethod(Number(value)).then((response) => {\n        if (response) {\n          if (response.success) {\n            setModelCollection((prevCourses) => [...prevCourses, ...prepareObj([response.data])]);\n          }\n        }\n      });\n    }\n    return () => {\n      if (abortController.current) {\n        abortController.current.abort();\n      }\n    };\n  }, [value, modelType]);\n\n  return (\n    <Select<string | string[] | number | number[] | LabeledValue | LabeledValue[]>\n      defaultValue={defaultValue}\n      onFocus={() => fetch()}\n      allowClear\n      style={{ width: '100%' }}\n      value={value}\n      onChange={onChange}\n      mode={multiple ? 'multiple' : undefined}\n      showSearch\n      onSearch={onSearch}\n      placeholder={<FormattedMessage id=\"select_content\" defaultMessage=\"select_content\" />}\n      optionFilterProp=\"children\"\n      filterOption={(input, option) => {\n        if (option && option.children) {\n          return option?.children?.toString().toLowerCase().indexOf(input.toLowerCase()) >= 0;\n        }\n        return true;\n      }}\n      notFoundContent={fetching ? <Spin size=\"small\" /> : null}\n      optionLabelProp=\"label\"\n    >\n      {modelCollection.map((modelItem: CollectionModelItem) => (\n        <Select.Option key={modelItem.id} value={modelItem.id} label={modelItem.name}>\n          {modelItem.name}\n        </Select.Option>\n      ))}\n    </Select>\n  );\n};\n"],"sourceRoot":""}