{"version":3,"sources":["webpack:///./src/pages/User/components/AuthLayout.tsx","webpack:///./src/pages/User/reset/index.tsx","webpack:///./src/pages/User/components/index.less"],"names":["AuthLayout","children","useModel","initialState","showBackgroundImage","publicConfig","global","showLoginBackgroundImage","color","loginHeaderFontColor","headerBackgroundColor","loginHeaderBackgroundColor","mainBackgroundColor","loginFormBackgroundColor","configLogo","useMemo","logo","logoLogin","includes","window","REACT_APP_API_URL","styles","container","backgroundColor","header","lang","SelectLang","main","Reset","useState","submitting","setSubmitting","location","history","token","query","email","intl","useIntl","handleSubmit","values","passwordReset","msg","success","message","push","error","data","autoLogin","searchConfig","submitText","formatMessage","id","defaultMessage","render","_","dom","pop","submitButtonProps","loading","size","style","width","prefix","prefixIcon","required"],"mappings":"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","file":"p__User__reset.bbbdfb67.async.js","sourcesContent":["import React, { type PropsWithChildren, useMemo } from 'react';\nimport Footer from '@/components/Footer';\nimport styles from './index.less';\nimport { Link, SelectLang, useModel } from 'umi';\n\ndeclare const REACT_APP_API_URL: string;\n\nconst AuthLayout: React.FC<PropsWithChildren> = ({ children }) => {\n  const { initialState } = useModel('@@initialState');\n\n  const showBackgroundImage = initialState?.publicConfig?.global?.showLoginBackgroundImage ?? true;\n\n  const color = initialState?.publicConfig?.global?.loginHeaderFontColor;\n  const headerBackgroundColor = initialState?.publicConfig?.global?.loginHeaderBackgroundColor;\n  const mainBackgroundColor = initialState?.publicConfig?.global?.loginFormBackgroundColor;\n\n  const configLogo = useMemo(() => {\n    const logo = initialState?.publicConfig?.global?.logoLogin;\n\n    if (!logo) {\n      return '';\n    }\n    if (!logo.includes('http')) {\n      return `${window.REACT_APP_API_URL || REACT_APP_API_URL}/storage${logo}`;\n    }\n\n    return logo;\n  }, [initialState?.publicConfig]);\n\n  return (\n    <div\n      className={`${styles.container} ${showBackgroundImage ? styles[`background-image`] : ''}`}\n      style={{ backgroundColor: mainBackgroundColor }}\n    >\n      <header className={styles.header} style={{ backgroundColor: headerBackgroundColor, color }}>\n        <div className={styles.lang}>{SelectLang && <SelectLang />}</div>\n        <div className={styles['logo-wrapper']}>\n          <Link to=\"/\">\n            <img\n              alt=\"logo\"\n              className={configLogo ? styles['custom-logo'] : styles.logo}\n              src={configLogo || '/logo.svg'}\n            />\n          </Link>\n        </div>\n      </header>\n\n      <main className={styles.main}>{children}</main>\n      <Footer />\n    </div>\n  );\n};\n\nexport default AuthLayout;\n","import { LockOutlined } from '@ant-design/icons';\nimport { message } from 'antd';\nimport React, { useState } from 'react';\nimport ProForm, { ProFormText } from '@ant-design/pro-form';\nimport { useIntl, history, FormattedMessage } from 'umi';\n\nimport { reset as passwordReset } from '@/services/escola-lms/auth';\n\nimport styles from '../components/index.less';\nimport AuthLayout from '../components/AuthLayout';\n\nconst Reset: React.FC = () => {\n  const [submitting, setSubmitting] = useState(false);\n  const { location } = history;\n  //   TODO: validate token for future if is not valid redirect\n  const token = location && location.query && location.query.token;\n  const email = location && location.query && location.query.email;\n\n  const intl = useIntl();\n\n  const handleSubmit = async (values: API.ResetPasswordRequest) => {\n    setSubmitting(true);\n    try {\n      const msg = await passwordReset({ ...values });\n      if (msg.success) {\n        message.success(msg.message);\n        history.push('/user/login');\n        return;\n      }\n    } catch (error: any) {\n      message.error(error?.data?.message || 'Error');\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <AuthLayout>\n      <ProForm\n        initialValues={{\n          autoLogin: true,\n        }}\n        submitter={{\n          searchConfig: {\n            submitText: intl.formatMessage({\n              id: 'reset_password',\n              defaultMessage: 'reset_password',\n            }),\n          },\n          render: (_, dom) => dom.pop(),\n          submitButtonProps: {\n            loading: submitting,\n            size: 'large',\n            style: {\n              width: '100%',\n            },\n          },\n        }}\n        onFinish={async (values) => {\n          handleSubmit({ ...values, token, email } as API.ResetPasswordRequest);\n        }}\n      >\n        <>\n          <ProFormText.Password\n            name=\"password\"\n            fieldProps={{\n              size: 'large',\n              prefix: <LockOutlined className={styles.prefixIcon} />,\n            }}\n            placeholder={intl.formatMessage({\n              id: 'pages.login.password.placeholder',\n              defaultMessage: ' ant.design',\n            })}\n            rules={[\n              {\n                required: true,\n                message: (\n                  <FormattedMessage id=\"pages.login.password.required\" defaultMessage=\"required\" />\n                ),\n              },\n            ]}\n          />\n        </>\n      </ProForm>\n    </AuthLayout>\n  );\n};\n\nexport default Reset;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"container___2MqLM\",\"lang\":\"lang___GQeBj\",\"background-image\":\"background-image___3WSx0\",\"logo-wrapper\":\"logo-wrapper___V8scu\",\"header\":\"header___2LHxh\",\"custom-logo\":\"custom-logo___HBLG3\",\"logo\":\"logo___3MAcQ\",\"title\":\"title___3Wr7O\",\"desc\":\"desc___22Mec\",\"main\":\"main___1ht25\",\"icon\":\"icon___ki6v1\",\"other\":\"other___3NR7b\",\"register\":\"register___1-tB1\",\"prefixIcon\":\"prefixIcon___2LycM\"};"],"sourceRoot":""}