{"version":3,"file":"8751.33629044.async.js","mappings":"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","sources":["webpack://ant-design-pro/./src/components/GiftQuizQuestions/ExportQuizQuestionsModal.tsx","webpack://ant-design-pro/./src/components/GiftQuizQuestions/editor/question/Essay.tsx","webpack://ant-design-pro/./src/components/GiftQuizQuestions/editor/question/Matching.tsx","webpack://ant-design-pro/./src/components/GiftQuizQuestions/editor/question/MultipleChoice.tsx","webpack://ant-design-pro/./src/components/GiftQuizQuestions/editor/question/Numerical.tsx","webpack://ant-design-pro/./src/components/GiftQuizQuestions/editor/question/ShortAnswers.tsx","webpack://ant-design-pro/./src/components/GiftQuizQuestions/editor/question/TrueFalse.tsx","webpack://ant-design-pro/./src/components/GiftQuizQuestions/editor/question/index.tsx","webpack://ant-design-pro/./src/components/GiftQuizQuestions/editor/utils.ts","webpack://ant-design-pro/./src/components/GiftQuizQuestions/editor/index.tsx","webpack://ant-design-pro/./src/components/GiftQuizQuestions/table.tsx","webpack://ant-design-pro/./src/pages/CompetencyChallenges/components/CompetencyChallengeCategoryTree.tsx","webpack://ant-design-pro/./src/pages/CompetencyChallenges/context.tsx","webpack://ant-design-pro/./src/services/escola-lms/competency-challenges.ts"],"sourcesContent":["import ProForm, { ModalForm, ProFormSelect } from '@ant-design/pro-form';\nimport { parse } from '@escolalms/gift-pegjs';\nimport React, { useCallback, useMemo } from 'react';\nimport { FormattedMessage, useIntl } from 'umi';\n\nimport { exportQuizQuestions } from '@/services/escola-lms/gift_quiz';\n\ninterface FormData {\n  ids: number[];\n}\ninterface Props {\n  quiz_id: number;\n  quizQuestions: API.QuizQuestion[];\n  visible: boolean;\n  onVisibleChange: (visible: boolean) => void;\n}\n\nexport const ExportQuizQuestionsModal: React.FC<Props> = ({\n  quiz_id,\n  quizQuestions,\n  visible,\n  onVisibleChange,\n}) => {\n  const [form] = ProForm.useForm<FormData>();\n  const intl = useIntl();\n\n  const onFormSubmit = useCallback(\n    async ({ ids }: FormData) => {\n      try {\n        const response = await exportQuizQuestions({ quiz_id, ids });\n        if (response instanceof Blob) {\n          const downloadLink = document.createElement('a');\n\n          downloadLink.href = window.URL.createObjectURL(response);\n          downloadLink.download = `quiz_questions_${quiz_id}.xlsx`;\n          document.body.appendChild(downloadLink);\n          downloadLink.click();\n          document.body.removeChild(downloadLink);\n        }\n      } catch (e) {\n        console.error(e);\n      } finally {\n        onVisibleChange(false);\n      }\n    },\n    [quiz_id],\n  );\n\n  const questionsOptions = useMemo(\n    () =>\n      quizQuestions.map(({ id, value }) => {\n        try {\n          const giftQuestionArr = parse(value);\n\n          if (!giftQuestionArr?.[0] || !('stem' in giftQuestionArr[0])) {\n            return {\n              value: id,\n              label: intl.formatMessage({ id: 'ExportQuestions.questionTitle' }, { id }),\n            };\n          }\n\n          const label = giftQuestionArr[0].stem.text;\n          return { value: id, label };\n        } catch (e) {\n          console.error(e);\n          return {\n            value: id,\n            label: intl.formatMessage({ id: 'ExportQuestions.questionTitle' }, { id }),\n          };\n        }\n      }),\n    [quizQuestions],\n  );\n\n  return (\n    <ModalForm\n      title={<FormattedMessage id=\"exportQuestions\" />}\n      form={form}\n      visible={visible}\n      onVisibleChange={onVisibleChange}\n      onFinish={onFormSubmit}\n    >\n      <ProFormSelect\n        mode=\"multiple\"\n        options={questionsOptions}\n        name=\"ids\"\n        label={<FormattedMessage id=\"questions\" />}\n        required\n        rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n      />\n    </ModalForm>\n  );\n};\n","import { ProFormTextArea } from '@ant-design/pro-form';\nimport React from 'react';\nimport { FormattedMessage } from 'umi';\n\nexport const GiftQuizQuestionEssayEditor: React.FC = () => (\n  <ProFormTextArea\n    name=\"question\"\n    label={<FormattedMessage id=\"question\" />}\n    rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n    required\n  />\n);\n","import ProForm, { ProFormList, ProFormText } from '@ant-design/pro-form';\nimport React from 'react';\nimport { FormattedMessage, useIntl } from 'umi';\n\nconst INITIAL_VALUES = [\n  {\n    firstOfPair: '',\n    secondOfPair: '',\n  },\n];\n\nexport const GiftQuizQuestionMatchingEditor: React.FC = () => {\n  const intl = useIntl();\n\n  return (\n    <>\n      <ProFormText\n        name=\"question\"\n        label={<FormattedMessage id=\"question\" />}\n        rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n        required\n      />\n      <ProFormList\n        name=\"answers\"\n        creatorButtonProps={{\n          creatorButtonText: intl.formatMessage({\n            id: 'Questions.addMatchingPair',\n            defaultMessage: 'Add Matching Pair',\n          }),\n        }}\n        deleteIconProps={{ tooltipText: intl.formatMessage({ id: 'Questions.deletePair' }) }}\n        actionRender={(_f, _a, [, deleteButton]) => [deleteButton]}\n        min={1}\n        initialValue={INITIAL_VALUES}\n      >\n        {(_f, i) => (\n          <ProForm.Group\n            direction=\"horizontal\"\n            align=\"baseline\"\n            size=\"small\"\n            spaceProps={{ style: { flexWrap: 'nowrap' } }}\n            title={\n              <FormattedMessage\n                id=\"Questions.pair\"\n                values={{ ordinalNumber: i + 1 }}\n                defaultMessage={`Pair ${i + 1}`}\n              />\n            }\n          >\n            <ProFormText\n              name=\"firstOfPair\"\n              rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n            />\n            <ProFormText\n              name=\"secondOfPair\"\n              rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n            />\n          </ProForm.Group>\n        )}\n      </ProFormList>\n    </>\n  );\n};\n","import { DeleteOutlined } from '@ant-design/icons';\nimport ProForm, {\n  ProFormCheckbox,\n  ProFormDigit,\n  ProFormList,\n  ProFormText,\n} from '@ant-design/pro-form';\nimport { Button, Tooltip } from 'antd';\nimport React from 'react';\nimport { FormattedMessage, useIntl } from 'umi';\n\nimport { QuestionType } from '@/services/escola-lms/enums';\n\nconst INITIAL_VALUES = {\n  [QuestionType.MULTIPLE_CHOICE]: [\n    { isCorrect: false, value: '', feedback: '' },\n    { isCorrect: false, value: '', feedback: '' },\n  ],\n  [QuestionType.MULTIPLE_CHOICE_WITH_MULTIPLE_RIGHT_ANSWERS]: [\n    { value: '', weight: '' },\n    { value: '', weight: '' },\n  ],\n};\n\ninterface Props {\n  type: QuestionType.MULTIPLE_CHOICE | QuestionType.MULTIPLE_CHOICE_WITH_MULTIPLE_RIGHT_ANSWERS;\n}\n\nexport const GiftQuizQuestionMultipleChoiceEditor: React.FC<Props> = ({ type }) => {\n  const intl = useIntl();\n\n  return (\n    <>\n      <ProFormText\n        name=\"question\"\n        label={<FormattedMessage id=\"question\" />}\n        rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n        required\n      />\n      <ProFormList\n        name=\"answers\"\n        creatorButtonProps={{\n          creatorButtonText: intl.formatMessage({ id: 'Questions.addAnswer' }),\n        }}\n        actionRender={() => []}\n        initialValue={INITIAL_VALUES[type] ?? []}\n      >\n        {(field, i, action, count) => (\n          <ProForm.Group\n            title={\n              <>\n                <FormattedMessage id=\"Questions.answer\" values={{ ordinalNumber: i + 1 }} />\n                {count > 2 && (\n                  <Tooltip title={intl.formatMessage({ id: 'Questions.deleteAnswer' })}>\n                    <Button\n                      type=\"text\"\n                      icon={<DeleteOutlined />}\n                      onClick={() => action.remove(field.name)}\n                    />\n                  </Tooltip>\n                )}\n              </>\n            }\n            titleStyle={{ width: '100%', display: 'flex', justifyContent: 'space-between' }}\n          >\n            {type === QuestionType.MULTIPLE_CHOICE && (\n              <ProFormCheckbox\n                name=\"isCorrect\"\n                label={\n                  <FormattedMessage\n                    id=\"Questions.correctAnswer\"\n                    defaultMessage=\"Is Correct Answer?\"\n                  />\n                }\n                rules={[\n                  ({ getFieldValue }) => ({\n                    validator: () => {\n                      const answers = getFieldValue('answers') ?? [];\n                      if (\n                        answers.filter((answer: { isCorrect: boolean }) => answer?.isCorrect)\n                          .length > 1\n                      ) {\n                        return Promise.reject('Only one answer can be correct');\n                      }\n\n                      return Promise.resolve();\n                    },\n                    message: <FormattedMessage id=\"Questions.onlyOneAnswerIsCorrect\" />,\n                  }),\n                ]}\n              />\n            )}\n            <ProFormText\n              name=\"value\"\n              rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n              label={<FormattedMessage id=\"content\" defaultMessage=\"Content\" />}\n            />\n            {type === QuestionType.MULTIPLE_CHOICE && (\n              <ProFormText\n                name=\"feedback\"\n                label={\n                  <FormattedMessage\n                    id=\"Questions.answerFeedback\"\n                    defaultMessage=\"Answer feedback\"\n                  />\n                }\n              />\n            )}\n            {type === QuestionType.MULTIPLE_CHOICE_WITH_MULTIPLE_RIGHT_ANSWERS && (\n              <ProFormDigit\n                name=\"weight\"\n                rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n                fieldProps={{ min: -Number.MAX_SAFE_INTEGER, addonAfter: '%' }}\n                label={<FormattedMessage id=\"weight\" defaultMessage=\"Weight\" />}\n              />\n            )}\n          </ProForm.Group>\n        )}\n      </ProFormList>\n    </>\n  );\n};\n","import { ProFormDigit, ProFormText } from '@ant-design/pro-form';\nimport React from 'react';\nimport { FormattedMessage } from 'umi';\n\nexport const GiftQuizQuestionNumericalEditor: React.FC = () => (\n  <>\n    <ProFormText\n      name=\"question\"\n      label={<FormattedMessage id=\"question\" />}\n      rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n      required\n    />\n    <ProFormDigit\n      name=\"answer\"\n      label={<FormattedMessage id=\"answer\" />}\n      rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n      required\n    />\n    <ProFormDigit\n      name=\"errorMargin\"\n      fieldProps={{ addonAfter: '+/-' }}\n      label={<FormattedMessage id=\"Questions.errorMargin\" />}\n      rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n      required\n    />\n  </>\n);\n","import { DeleteOutlined } from '@ant-design/icons';\nimport ProForm, { ProFormList, ProFormText } from '@ant-design/pro-form';\nimport { Button, Tooltip } from 'antd';\nimport React from 'react';\nimport { FormattedMessage, useIntl } from 'umi';\n\nconst INITIAL_VALUES = [{ value: '', feedback: '' }];\n\nexport const GiftQuizQuestionShortEditor: React.FC = () => {\n  const intl = useIntl();\n\n  return (\n    <>\n      <ProFormText\n        name=\"question\"\n        label={<FormattedMessage id=\"question\" />}\n        rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n        required\n      />\n      <ProFormList\n        name=\"answers\"\n        creatorButtonProps={{\n          creatorButtonText: intl.formatMessage({ id: 'Questions.addAnswer' }),\n        }}\n        actionRender={() => []}\n        initialValue={INITIAL_VALUES}\n      >\n        {(field, i, action, count) => (\n          <ProForm.Group\n            title={\n              <>\n                <FormattedMessage id=\"Questions.answer\" values={{ ordinalNumber: i + 1 }} />\n                {count > 1 && (\n                  <Tooltip title={intl.formatMessage({ id: 'Questions.deleteAnswer' })}>\n                    <Button\n                      type=\"text\"\n                      icon={<DeleteOutlined />}\n                      onClick={() => action.remove(field.name)}\n                    />\n                  </Tooltip>\n                )}\n              </>\n            }\n            titleStyle={{ width: '100%', display: 'flex', justifyContent: 'space-between' }}\n          >\n            <ProFormText\n              name=\"value\"\n              rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n              label={<FormattedMessage id=\"content\" defaultMessage=\"Content\" />}\n            />\n            <ProFormText\n              name=\"feedback\"\n              label={\n                <FormattedMessage id=\"Questions.answerFeedback\" defaultMessage=\"Answer feedback\" />\n              }\n            />\n          </ProForm.Group>\n        )}\n      </ProFormList>\n    </>\n  );\n};\n","import { ProFormCheckbox, ProFormText } from '@ant-design/pro-form';\nimport React from 'react';\nimport { FormattedMessage } from 'umi';\n\nexport const GiftQuizQuestionTrueFalseEditor: React.FC = () => (\n  <>\n    <ProFormText\n      name=\"question\"\n      label={<FormattedMessage id=\"question\" />}\n      rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n      required\n    />\n    <ProFormCheckbox name=\"isCorrect\" label={<FormattedMessage id=\"Questions.correctAnswer\" />} />\n  </>\n);\n","import React from 'react';\n\nimport { QuestionType } from '@/services/escola-lms/enums';\nimport { GiftQuizQuestionEssayEditor } from './Essay';\nimport { GiftQuizQuestionMatchingEditor } from './Matching';\nimport { GiftQuizQuestionMultipleChoiceEditor } from './MultipleChoice';\nimport { GiftQuizQuestionNumericalEditor } from './Numerical';\nimport { GiftQuizQuestionShortEditor } from './ShortAnswers';\nimport { GiftQuizQuestionTrueFalseEditor } from './TrueFalse';\n\ninterface Props {\n  type: QuestionType | undefined;\n}\n\nexport const GiftQuizQuestion: React.FC<Props> = ({ type }) => {\n  if (!type) return null;\n\n  switch (type) {\n    case QuestionType.MULTIPLE_CHOICE:\n    case QuestionType.MULTIPLE_CHOICE_WITH_MULTIPLE_RIGHT_ANSWERS:\n      return <GiftQuizQuestionMultipleChoiceEditor type={type} />;\n    case QuestionType.TRUE_FALSE:\n      return <GiftQuizQuestionTrueFalseEditor />;\n    case QuestionType.SHORT_ANSWERS:\n      return <GiftQuizQuestionShortEditor />;\n    case QuestionType.MATCHING:\n      return <GiftQuizQuestionMatchingEditor />;\n    case QuestionType.NUMERICAL_QUESTION:\n      return <GiftQuizQuestionNumericalEditor />;\n    case QuestionType.ESSAY:\n    case QuestionType.DESCRIPTION:\n      return <GiftQuizQuestionEssayEditor />;\n    default:\n      return <pre>Unsupported type {type}</pre>;\n  }\n};\n","import type {\n  Description,\n  Essay,\n  Matching,\n  MultipleChoice,\n  Numerical,\n  ShortAnswer,\n  TrueFalse,\n} from '@escolalms/gift-pegjs';\nimport { parse } from '@escolalms/gift-pegjs';\n\nimport { QuestionType } from '@/services/escola-lms/enums';\nimport type {\n  DescriptionFormData,\n  EssayFormData,\n  GiftQuizFormData,\n  MatchingFormData,\n  MultipleChoiceFormData,\n  MultipleChoiceWithMultipleRightAnswersFormData,\n  NumericalFormData,\n  ShortAnswersFormData,\n  TrueFalseFormData,\n} from './types';\n\nconst escapeQuestionSpecialChars = (inputString: string): string => {\n  const charsToEscape = ['~', '=', '#', '{', '}', ':'];\n  let escapedString = '';\n\n  for (let i = 0; i < inputString.length; i++) {\n    const currentChar = inputString[i];\n    if (charsToEscape.includes(currentChar)) {\n      escapedString += `\\\\${currentChar}`;\n    } else {\n      escapedString += currentChar;\n    }\n  }\n\n  return escapedString;\n};\n\nconst parseMultipleChoice = ({ question, answers }: MultipleChoiceFormData): string => {\n  if (answers.length === 0) return `${question}{}`;\n\n  const escapedAnswers = answers.map(({ isCorrect, value, feedback }) => ({\n    isCorrect,\n    feedback: escapeQuestionSpecialChars(feedback ?? ''),\n    value: escapeQuestionSpecialChars(value),\n  }));\n  let giftString = `${question}{`;\n\n  for (const { isCorrect, value, feedback } of escapedAnswers) {\n    const sign = isCorrect ? '=' : '~';\n\n    giftString += feedback ? `${sign}${value}#${feedback}` : `${sign}${value}`;\n  }\n\n  giftString += '}';\n\n  return giftString.trim();\n};\n\nconst parseMultipleChoiceWithMultipleRightAnswers = ({\n  question,\n  answers,\n}: MultipleChoiceWithMultipleRightAnswersFormData): string => {\n  if (answers.length == 0) return `${question}{}`;\n\n  let giftString = `${question}{`;\n\n  const escapedAnswers = answers.map(({ weight, value }) => ({\n    weight,\n    value: escapeQuestionSpecialChars(value),\n  }));\n\n  for (const { value, weight } of escapedAnswers) {\n    giftString += `~%${weight}%${value}`;\n  }\n\n  giftString += '}';\n\n  return giftString.trim();\n};\n\nconst parseTrueFalse = ({ question, isCorrect }: TrueFalseFormData): string =>\n  `${question}{${isCorrect ? 'T' : 'F'}}`;\n\nconst parseShortAnswers = ({ question, answers }: ShortAnswersFormData): string => {\n  if (answers.length === 0) return `${question}{}`;\n\n  let giftString = `${question}{`;\n\n  const escapedAnswers = answers.map(({ value, feedback }) => ({\n    value: escapeQuestionSpecialChars(value),\n    feedback: escapeQuestionSpecialChars(feedback ?? ''),\n  }));\n\n  for (const { value, feedback } of escapedAnswers) {\n    giftString += feedback ? `=${value}#${feedback}` : `=${value}`;\n  }\n\n  giftString += '}';\n\n  return giftString.trim();\n};\n\nconst parseMatching = ({ question, answers }: MatchingFormData): string => {\n  if (answers.length === 0) return `${question}{}`;\n\n  let giftString = `${question}{`;\n\n  const escapedAnswers = answers.map(({ firstOfPair, secondOfPair }) => ({\n    firstOfPair: escapeQuestionSpecialChars(firstOfPair),\n    secondOfPair: escapeQuestionSpecialChars(secondOfPair),\n  }));\n\n  for (const { firstOfPair, secondOfPair } of escapedAnswers) {\n    giftString += `=${firstOfPair}->${secondOfPair}`;\n  }\n\n  giftString += '}';\n\n  return giftString.trim();\n};\n\nconst parseNumerical = ({ question, answer, errorMargin }: NumericalFormData): string =>\n  `${question}{#${answer}:${errorMargin}}`;\n\nconst parseEssay = ({ question }: EssayFormData): string => `${question}{}`;\n\nconst parseDescription = ({ question }: DescriptionFormData): string => question;\n\nexport const parseToGIFT = ({ question, ...formData }: GiftQuizFormData): string => {\n  const safeFormData = { question: escapeQuestionSpecialChars(question), ...formData };\n\n  switch (safeFormData.type) {\n    case QuestionType.MULTIPLE_CHOICE:\n      return parseMultipleChoice(safeFormData);\n    case QuestionType.MULTIPLE_CHOICE_WITH_MULTIPLE_RIGHT_ANSWERS:\n      return parseMultipleChoiceWithMultipleRightAnswers(safeFormData);\n    case QuestionType.TRUE_FALSE:\n      return parseTrueFalse(safeFormData);\n    case QuestionType.SHORT_ANSWERS:\n      return parseShortAnswers(safeFormData);\n    case QuestionType.MATCHING:\n      return parseMatching(safeFormData);\n    case QuestionType.NUMERICAL_QUESTION:\n      return parseNumerical(safeFormData);\n    case QuestionType.ESSAY:\n      return parseEssay(safeFormData);\n    case QuestionType.DESCRIPTION:\n      return parseDescription(safeFormData);\n    default:\n      throw new Error(`Unsupported type: ${(safeFormData as GiftQuizFormData)?.type}`);\n  }\n};\n\nconst parseMultipleChoiceToFormData = (\n  parsedValue: MultipleChoice,\n  { type, score, category_id }: API.QuizQuestion,\n): MultipleChoiceFormData | MultipleChoiceWithMultipleRightAnswersFormData => {\n  const question = parsedValue?.stem.text;\n\n  const isMultipleChoice = parsedValue.choices.every(({ weight }) => weight === null);\n\n  if (isMultipleChoice) {\n    const answers: MultipleChoiceFormData['answers'] = parsedValue.choices.map(\n      ({ isCorrect, text, feedback }) => ({\n        isCorrect,\n        value: text.text,\n        feedback: feedback?.text,\n      }),\n    );\n\n    return { type, score, category_id, question, answers };\n  }\n\n  const answers = parsedValue.choices.reduce<\n    MultipleChoiceWithMultipleRightAnswersFormData['answers']\n  >(\n    (acc, { weight, text }) => (weight !== null ? [...acc, { weight, value: text.text }] : acc),\n    [],\n  );\n\n  return { type, score, category_id, question, answers };\n};\n\nconst parseTrueFalseToFormData = (\n  parsedValue: TrueFalse,\n  { type, score, category_id }: API.QuizQuestion,\n): TrueFalseFormData => {\n  const question = parsedValue?.stem.text;\n  const isCorrect = parsedValue.isTrue;\n\n  return { type, score, category_id, question, isCorrect };\n};\n\nconst parseShortAnswersToFormData = (\n  parsedValue: ShortAnswer,\n  { type, score, category_id }: API.QuizQuestion,\n): ShortAnswersFormData => {\n  const question = parsedValue?.stem.text;\n\n  const answers: ShortAnswersFormData['answers'] = parsedValue.choices.map(\n    ({ text, feedback }) => ({\n      value: text.text,\n      feedback: feedback?.text,\n    }),\n  );\n\n  return { type, score, category_id, question, answers };\n};\n\nconst parseMatchingToFormData = (\n  parsedValue: Matching,\n  { type, score, category_id }: API.QuizQuestion,\n): MatchingFormData => {\n  const question = parsedValue?.stem.text;\n  const answers: MatchingFormData['answers'] = parsedValue.matchPairs.map(\n    ({ subquestion, subanswer }) => ({ firstOfPair: subquestion.text, secondOfPair: subanswer }),\n  );\n\n  return { type, score, category_id, question, answers };\n};\n\nconst parseNumericalToFormData = (\n  parsedValue: Numerical,\n  { type, score, category_id }: API.QuizQuestion,\n): NumericalFormData => {\n  const question = parsedValue?.stem.text;\n\n  // TODO #1012\n  if (Array.isArray(parsedValue?.choices)) {\n    throw new Error('Unsupported choices type: array');\n  }\n\n  const answer = parsedValue?.choices.number;\n  const errorMargin = parsedValue?.choices.range;\n\n  if (answer === undefined || errorMargin === undefined) {\n    throw new Error(`Value undefined - answer: ${answer} errorMargin: ${errorMargin}`);\n  }\n\n  return { type, score, category_id, question, answer, errorMargin };\n};\n\nconst parseDescriptionEssayToFormData = (\n  parsedValue: Description | Essay,\n  { type, score, category_id }: API.QuizQuestion,\n): DescriptionFormData | EssayFormData => {\n  const question = parsedValue?.stem.text;\n\n  return { type, score, category_id, question };\n};\n\nexport function parseToFormData(\n  questionBase: API.QuizQuestion | undefined,\n): GiftQuizFormData | undefined {\n  if (!questionBase) return;\n\n  try {\n    const [parsedValue] = parse(questionBase.value);\n\n    switch (parsedValue.type) {\n      case 'MC':\n        return parseMultipleChoiceToFormData(parsedValue, questionBase);\n      case 'TF':\n        return parseTrueFalseToFormData(parsedValue, questionBase);\n      case 'Short':\n        return parseShortAnswersToFormData(parsedValue, questionBase);\n      case 'Matching':\n        return parseMatchingToFormData(parsedValue, questionBase);\n      case 'Numerical':\n        return parseNumericalToFormData(parsedValue, questionBase);\n      case 'Description':\n      case 'Essay':\n        return parseDescriptionEssayToFormData(parsedValue, questionBase);\n      default:\n        throw new Error(`Unsupported type: ${parsedValue?.type}`);\n    }\n  } catch (e) {\n    console.error(e);\n    return;\n  }\n}\n","import ProForm, { ProFormDigit, ProFormSelect } from '@ant-design/pro-form';\nimport { Divider, Space } from 'antd';\nimport React, { useCallback, useEffect, useMemo } from 'react';\nimport { FormattedMessage, useIntl } from 'umi';\n\nimport {\n  CompetencyChallengeCategoryTree,\n  type CompetencyChallengeCategoryTreeProps,\n} from '@/pages/CompetencyChallenges/components/CompetencyChallengeCategoryTree';\nimport { QuestionType } from '@/services/escola-lms/enums';\nimport { GiftQuizQuestion } from './question';\nimport type { GiftQuizFormData, QuizQuestionSubmitData } from './types';\nimport { parseToFormData, parseToGIFT } from './utils';\n\nconst VALUES_NOT_TO_RESET = ['type', 'score', 'category'];\n\nconst TYPE_OPTIONS = Object.values(QuestionType).reduce<\n  { value: QuestionType; label: React.ReactNode }[]\n>(\n  (acc, q) => (q ? [...acc, { value: q, label: <FormattedMessage id={`gift_type.${q}`} /> }] : acc),\n  [],\n);\n\ninterface Props {\n  onSubmit: (quizQuestion: QuizQuestionSubmitData) => Promise<boolean>;\n  values?: API.QuizQuestion;\n  competencyChallengeCategoryTreeProps?:\n    | boolean\n    | Omit<CompetencyChallengeCategoryTreeProps, 'value' | 'onChange'>;\n}\n\nexport const GiftQuizQuestionEditor: React.FC<Props> = ({\n  onSubmit,\n  values,\n  competencyChallengeCategoryTreeProps = false,\n}) => {\n  const intl = useIntl();\n\n  const [form] = ProForm.useForm<GiftQuizFormData>();\n  const type: QuestionType | undefined = ProForm.useWatch('type', form);\n\n  const initialValues = useMemo(() => parseToFormData(values), [values]);\n\n  const onFinish = useCallback(async (formData: GiftQuizFormData) => {\n    const value = parseToGIFT(formData);\n\n    const { score, category_id } = formData;\n    const status = await onSubmit({\n      value,\n      score: score ?? 0,\n      category_id,\n    });\n\n    if (!status) {\n      return;\n    }\n\n    form.resetFields();\n  }, []);\n\n  useEffect(() => {\n    form.resetFields();\n  }, [initialValues]);\n\n  useEffect(() => {\n    if (type) {\n      const fields = form.getFieldsValue();\n      const fieldsToReset = Object.keys(fields).filter((key) => !VALUES_NOT_TO_RESET.includes(key));\n\n      form.resetFields(fieldsToReset as any);\n    }\n  }, [type]);\n\n  return (\n    <Space direction=\"vertical\" style={{ display: 'flex' }}>\n      <Divider>\n        <FormattedMessage id={initialValues ? 'Questions.edit' : 'addNewQuestion'} />\n      </Divider>\n      <ProForm layout=\"horizontal\" form={form} onFinish={onFinish} initialValues={initialValues}>\n        <ProFormSelect\n          name=\"type\"\n          placeholder={intl.formatMessage({\n            id: 'selectNewQuestionType',\n            defaultMessage: 'Select new question type',\n          })}\n          label={<FormattedMessage id=\"type\" defaultMessage=\"Type:\" />}\n          options={TYPE_OPTIONS}\n          rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n          required\n        />\n        <GiftQuizQuestion type={type} />\n        {type !== QuestionType.DESCRIPTION && (\n          <ProFormDigit\n            name=\"score\"\n            label={<FormattedMessage id=\"Questions.score\" defaultMessage=\"Score\" />}\n            rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n          />\n        )}\n        {competencyChallengeCategoryTreeProps && (\n          <ProForm.Item\n            name=\"category_id\"\n            label={<FormattedMessage id=\"category\" defaultMessage=\"Category\" />}\n            rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n            required\n          >\n            <CompetencyChallengeCategoryTree\n              {...(typeof competencyChallengeCategoryTreeProps === 'object'\n                ? competencyChallengeCategoryTreeProps\n                : {})}\n            />\n          </ProForm.Item>\n        )}\n      </ProForm>\n    </Space>\n  );\n};\n","import { ExportOutlined, MenuOutlined, PlusCircleOutlined } from '@ant-design/icons';\nimport type { ActionType, ProColumns } from '@ant-design/pro-table';\nimport { ProTable } from '@ant-design/pro-table';\nimport { parse } from '@escolalms/gift-pegjs';\nimport { Button, Drawer, message } from 'antd';\nimport { arrayMoveImmutable } from 'array-move';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { SortableContainer, SortableElement, SortableHandle } from 'react-sortable-hoc';\nimport { FormattedMessage, useIntl } from 'umi';\n\nimport SecureUpload from '@/components/SecureUpload';\nimport TypeButtonDrawer from '@/components/TypeButtonDrawer';\nimport type { CompetencyChallengeCategoryTreeProps } from '@/pages/CompetencyChallenges/components/CompetencyChallengeCategoryTree';\nimport { createQuestion, deleteQuestion, updateQuestion } from '@/services/escola-lms/gift_quiz';\nimport { ExportQuizQuestionsModal } from './ExportQuizQuestionsModal';\nimport { GiftQuizQuestionEditor } from './editor';\nimport type { QuizQuestionSubmitData } from './editor/types';\nimport './index.css';\n\nconst DragHandle = SortableHandle(() => <MenuOutlined style={{ cursor: 'grab', color: '#999' }} />);\nconst SortableItem = SortableElement((props: React.HTMLAttributes<HTMLTableRowElement>) => (\n  <tr {...props} />\n));\nconst SortContainer = SortableContainer((props: React.HTMLAttributes<HTMLTableSectionElement>) => (\n  <tbody {...props} />\n));\n\nconst staticColumns: ProColumns<API.QuizQuestion>[] = [\n  {\n    title: <FormattedMessage id=\"sort\" defaultMessage=\"sort\" />,\n    dataIndex: 'id',\n    width: 60,\n    className: 'drag-visible',\n    render: () => <DragHandle />,\n  },\n  {\n    title: <FormattedMessage id=\"type\" defaultMessage=\"Type\" />,\n    dataIndex: 'type',\n    hideInForm: true,\n    hideInSearch: true,\n    hideInSetting: true,\n    render: (_, row) => <FormattedMessage id={`gift_type.${row.type}`} />,\n  },\n  {\n    title: <FormattedMessage id=\"question\" defaultMessage=\"Question\" />,\n    dataIndex: 'question',\n    hideInForm: true,\n    hideInSearch: true,\n    hideInSetting: true,\n    render: (_, row) => {\n      try {\n        const obj = parse(row.value);\n\n        if (obj?.[0] && 'stem' in obj[0]) {\n          return obj[0].stem.text;\n        }\n        return 'question';\n      } catch (e) {\n        console.error(e);\n        return 'question';\n      }\n    },\n  },\n];\n\nconst categoryColumn: ProColumns<API.QuizQuestion> = {\n  title: <FormattedMessage id=\"category\" defaultMessage=\"Category\" />,\n  dataIndex: 'category_id',\n  hideInForm: true,\n  hideInSearch: true,\n  hideInSetting: true,\n  render: (_, row) =>\n    typeof row.category_id === 'number' ? (\n      <TypeButtonDrawer type=\"Category\" type_id={row.category_id} />\n    ) : (\n      '-'\n    ),\n};\n\ninterface OnSortEndParams {\n  oldIndex: number;\n  newIndex: number;\n}\n\ninterface Props {\n  quizId: number;\n  questions: API.QuizQuestion[];\n  onAdded?: () => void;\n  onRemoved?: () => void;\n  onEdited?: () => void;\n  tableHeader?: React.ReactNode;\n  tableLoading?: boolean;\n  questionsCategory?: boolean | Omit<CompetencyChallengeCategoryTreeProps, 'value' | 'onChange'>;\n  customToolbarElements?: React.ReactNode[];\n}\n\nexport const Table: React.FC<Props> = ({\n  questions,\n  onAdded,\n  onRemoved,\n  onEdited,\n  quizId,\n  tableLoading,\n  tableHeader,\n  questionsCategory,\n  customToolbarElements = [],\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [newQuestion, setNewQuestion] = useState(false);\n  const [editQuestion, setEditQuestion] = useState<API.QuizQuestion>();\n  const [exportQuestions, setExportQuestions] = useState(false);\n\n  const [dataSource, setDataSource] = useState(questions);\n\n  const intl = useIntl();\n  const actionRef = useRef<ActionType>();\n\n  useEffect(() => {\n    actionRef.current?.reload();\n    setDataSource(questions);\n  }, [questions]);\n\n  const onSortEnd = ({ oldIndex, newIndex }: OnSortEndParams) => {\n    if (oldIndex !== newIndex) {\n      const newData = arrayMoveImmutable(dataSource.slice(), oldIndex, newIndex)\n        .filter(Boolean)\n        .map((row, index) => ({ ...row, order: index }));\n\n      newData.forEach((newRow, index) => {\n        if (newRow.id !== dataSource[index].id) {\n          updateQuestion(newRow.id, { ...newRow, order: index + 1, topic_gift_quiz_id: quizId });\n        }\n      });\n\n      setDataSource(newData);\n    }\n  };\n\n  // TODO #1011 types & refactor https://react.dev/learn/your-first-component#nesting-and-organizing-components\n  const DraggableContainer = (props: any) => (\n    <SortContainer\n      useDragHandle\n      disableAutoscroll\n      helperClass=\"row-dragging\"\n      onSortEnd={onSortEnd}\n      {...props}\n    />\n  );\n\n  // TODO #1011 types & refactor https://react.dev/learn/your-first-component#nesting-and-organizing-components\n  const DraggableBodyRow = (props: any) => {\n    const { className, style, ...restProps } = props;\n    // function findIndex base on Table rowKey props and should always be a right array index\n    const index = dataSource.findIndex((x) => x.id === restProps['data-row-key']);\n    return <SortableItem index={index} {...restProps} />;\n  };\n\n  const onNewQuestionSubmit = useCallback(\n    async (data: QuizQuestionSubmitData) => {\n      try {\n        setLoading(true);\n\n        const response = await createQuestion({ topic_gift_quiz_id: quizId, ...data });\n        setNewQuestion(false);\n        onAdded?.();\n        return response.success;\n      } catch (err) {\n        console.log(err);\n        return false;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [quizId],\n  );\n\n  const onEditQuestionSubmit = useCallback(\n    async (data: QuizQuestionSubmitData) => {\n      if (editQuestion?.id === undefined) return false;\n\n      try {\n        setLoading(true);\n\n        const response = await updateQuestion(editQuestion.id, {\n          topic_gift_quiz_id: quizId,\n          ...data,\n        });\n        setEditQuestion(undefined);\n        onEdited?.();\n        return response.success;\n      } catch (err) {\n        console.log(err);\n        return false;\n      } finally {\n        setLoading(false);\n      }\n    },\n    [editQuestion?.id, quizId],\n  );\n\n  return (\n    <>\n      <Drawer open={newQuestion} onClose={() => setNewQuestion(false)}>\n        <GiftQuizQuestionEditor\n          onSubmit={onNewQuestionSubmit}\n          competencyChallengeCategoryTreeProps={questionsCategory}\n        />\n      </Drawer>\n      <Drawer open={!!editQuestion} onClose={() => setEditQuestion(undefined)} destroyOnClose>\n        <GiftQuizQuestionEditor\n          onSubmit={onEditQuestionSubmit}\n          competencyChallengeCategoryTreeProps={questionsCategory}\n          values={editQuestion}\n        />\n      </Drawer>\n      <ExportQuizQuestionsModal\n        quiz_id={quizId}\n        quizQuestions={dataSource}\n        visible={exportQuestions}\n        onVisibleChange={setExportQuestions}\n      />\n      <ProTable\n        search={false}\n        cardProps={{ bodyStyle: { padding: 0 } }}\n        loading={tableLoading}\n        headerTitle={tableHeader}\n        toolbar={{ settings: [] }}\n        toolBarRender={() => [\n          <Button\n            key=\"add\"\n            icon={<PlusCircleOutlined />}\n            type=\"primary\"\n            onClick={() => setNewQuestion(true)}\n          >\n            {' '}\n            <FormattedMessage id=\"addNewQuestion\" defaultMessage=\"Add new question\" />\n          </Button>,\n          <SecureUpload\n            key=\"import\"\n            title={intl.formatMessage({\n              id: 'importQuestions',\n            })}\n            hideLabel\n            showUploadList={false}\n            url=\"/api/admin/gift-questions/import\"\n            name=\"file\"\n            accept=\".xlsx\"\n            data={{\n              topic_gift_quiz_id: quizId,\n            }}\n            onChange={(info) => {\n              if (info.file.status === 'done') {\n                if (info.file.response && info.file.response.success) {\n                  message.success(info.file.response.message);\n                  onAdded?.();\n                }\n              }\n              if (info.file.response && info.file.status === 'error') {\n                message.error(info.file.response.message);\n                console.error(info.file.response);\n              }\n            }}\n          />,\n          <Button\n            key=\"export\"\n            icon={<ExportOutlined />}\n            type=\"primary\"\n            onClick={() => setExportQuestions(true)}\n          >\n            {' '}\n            <FormattedMessage id=\"exportQuestions\" />\n          </Button>,\n          ...customToolbarElements,\n        ]}\n        columns={[\n          ...staticColumns,\n          ...(questionsCategory ? [categoryColumn] : []),\n          {\n            title: <FormattedMessage id=\"actions\" defaultMessage=\"Actions\" />,\n            dataIndex: 'address',\n            valueType: 'option',\n            render: (_, row) => [\n              <Button\n                key=\"edit\"\n                size=\"small\"\n                type=\"primary\"\n                onClick={() => {\n                  setEditQuestion(row);\n                }}\n              >\n                <FormattedMessage id=\"Questions.edit\" defaultMessage=\"Edit Question\" />\n              </Button>,\n              <Button\n                loading={loading}\n                key=\"delete\"\n                size=\"small\"\n                danger\n                onClick={() => {\n                  setLoading(true);\n                  deleteQuestion(row.id)\n                    .then(() => {\n                      if (onRemoved) {\n                        onRemoved();\n                      }\n                    })\n                    .finally(() => {\n                      setLoading(false);\n                    });\n                }}\n              >\n                <FormattedMessage id=\"Questions.delete\" defaultMessage=\"Delete Question\" />\n              </Button>,\n            ],\n          },\n        ]}\n        rowKey={(record) => record.id}\n        pagination={false}\n        dataSource={dataSource}\n        components={{\n          body: {\n            wrapper: DraggableContainer,\n            row: DraggableBodyRow,\n          },\n        }}\n      />\n    </>\n  );\n};\n","import { TreeSelect } from 'antd';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { FormattedMessage } from 'umi';\n\nimport { categoryTree } from '@/services/escola-lms/category';\nimport { useCompetencyChallengeContext } from '../context';\n\ntype TreeNodeType = {\n  title: string;\n  value: number;\n  disabled?: boolean;\n  children?: TreeNodeType[];\n};\n\nconst treeConvert = (\n  category: API.Category,\n  disabledNodes: number[],\n  enabledDepth: number,\n  depth: number = 0,\n): TreeNodeType => {\n  return category.subcategories?.length\n    ? {\n        title: category.name,\n        value: category.id,\n        disabled: depth !== enabledDepth || disabledNodes.includes(category.id),\n        children: category.subcategories.map((cat) =>\n          treeConvert(cat, disabledNodes, enabledDepth, depth + 1),\n        ),\n      }\n    : {\n        title: category.name,\n        value: category.id,\n        disabled: depth !== enabledDepth || disabledNodes.includes(category.id),\n      };\n};\n\nexport interface CompetencyChallengeCategoryTreeProps {\n  value?: string | string[] | number | number[];\n  onChange?: (value: string | string[] | number | number[]) => void;\n  type?: 'scale' | 'question';\n  disabledNodes?: number[]; // categories id arr\n  multiple?: boolean;\n}\n\nexport const CompetencyChallengeCategoryTree: React.FC<CompetencyChallengeCategoryTreeProps> = ({\n  value,\n  onChange,\n  type = 'scale',\n  disabledNodes = [],\n  multiple = false,\n}) => {\n  const [categories, setCategories] = useState<API.Category[]>([]);\n  const { categoryDepths, competencyChallenge } = useCompetencyChallengeContext();\n\n  const categoriesToShow = useMemo(\n    () =>\n      competencyChallenge.data?.type === 'simple'\n        ? categories.filter((category) => category.id === competencyChallenge.data?.category?.id)\n        : categories,\n    [categories, competencyChallenge.data?.type, competencyChallenge.data?.category?.id],\n  );\n\n  const treeData = useMemo(\n    () => categoriesToShow.map((cat) => treeConvert(cat, disabledNodes, categoryDepths[type])),\n    [categoriesToShow, disabledNodes, type],\n  );\n\n  useEffect(() => {\n    categoryTree().then((response) => {\n      if (response.success) {\n        setCategories(response.data);\n      }\n    });\n  }, []);\n\n  return (\n    <TreeSelect<string | string[] | number | number[]>\n      loading={categories.length === 0}\n      showSearch\n      multiple={multiple}\n      value={value}\n      dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}\n      placeholder={<FormattedMessage id=\"select\" defaultMessage=\"Please select\" />}\n      allowClear\n      treeDefaultExpandAll\n      onChange={onChange}\n      treeData={treeData}\n      disabled={categories.length === 0}\n    />\n  );\n};\n","import React, { useCallback, useContext, useEffect, useState } from 'react';\nimport { useParams } from 'umi';\n\nimport { getCompetencyChallenge } from '@/services/escola-lms/competency-challenges';\nimport { configs as getConfig } from '@/services/escola-lms/settings';\n\ninterface CategoryDepths {\n  role: number;\n  scale: number;\n  question: number;\n}\n\ninterface CompetencyChallengeContextData {\n  data: API.CompetencyChallenge | null;\n  loading: boolean;\n  error?: unknown;\n}\n\nexport interface CompetencyChallengeContext {\n  categoryDepths: CategoryDepths;\n  competencyChallenge: CompetencyChallengeContextData;\n  refreshData: () => Promise<void>;\n}\n\nconst initialValues: CompetencyChallengeContext = {\n  categoryDepths: { scale: 2, question: 1, role: 0 },\n  competencyChallenge: { data: null, loading: false },\n  refreshData: async () => console.warn('CONTEXT INIT'),\n};\n\nconst Context = React.createContext<CompetencyChallengeContext>(initialValues);\n\nexport const useCompetencyChallengeContext = () => useContext(Context);\n\nexport const CompetencyChallengeContextProvider: React.FC<React.PropsWithChildren> = ({\n  children,\n}) => {\n  const [competencyChallenge, setCompetencyChallenge] = useState<CompetencyChallengeContextData>(\n    initialValues.competencyChallenge,\n  );\n  const [categoryDepths, setCategoryDepths] = useState<CategoryDepths>(\n    initialValues.categoryDepths,\n  );\n\n  const { id } = useParams<{ id?: string }>();\n  const competency_challenge_id = Number(id);\n\n  const refreshData = useCallback(async () => {\n    if (Number.isNaN(competency_challenge_id)) return;\n\n    try {\n      setCompetencyChallenge((prev) => ({ ...prev, loading: true }));\n      const res = await getCompetencyChallenge(competency_challenge_id);\n\n      if (!res.success) {\n        setCompetencyChallenge((prev) => ({ ...prev, error: res.errors }));\n        return;\n      }\n\n      setCompetencyChallenge((prev) => ({ ...prev, data: res.data }));\n    } catch (error) {\n      setCompetencyChallenge((prev) => ({ ...prev, error }));\n    } finally {\n      setCompetencyChallenge((prev) => ({ ...prev, loading: false }));\n    }\n  }, [competency_challenge_id]);\n\n  const fetchCategoryDepths = useCallback(async () => {\n    try {\n      const res = await getConfig();\n      if (!res.success) return;\n\n      const scale = Number(\n        (res.data?.escolalms_competency_challenge as any)?.category?.scale?.depth?.value,\n      );\n      const question = Number(\n        (res.data?.escolalms_competency_challenge as any)?.category?.question?.depth?.value,\n      );\n      const role = Number(\n        (res.data?.escolalms_competency_challenge as any)?.category?.role?.depth?.value,\n      );\n\n      setCategoryDepths({\n        scale: Number.isNaN(scale) ? 2 : scale,\n        question: Number.isNaN(question) ? 1 : question,\n        role: Number.isNaN(role) ? 0 : role,\n      });\n    } catch (e) {\n      console.error(e);\n    }\n  }, []);\n\n  useEffect(() => {\n    refreshData();\n    fetchCategoryDepths();\n  }, [refreshData, fetchCategoryDepths]);\n\n  return (\n    <Context.Provider value={{ categoryDepths, competencyChallenge, refreshData }}>\n      {children}\n    </Context.Provider>\n  );\n};\n","import type { AxiosRequestConfig } from '@umijs/max';\nimport { request } from 'umi';\n\n/**  GET /api/admin/competency-challenges */\nexport async function getCompetencyChallenges(\n  params?: API.CompetencyChallengesParams,\n  options?: AxiosRequestConfig,\n) {\n  return request<API.DefaultMetaResponse<API.CompetencyChallenge>>(\n    `/api/admin/competency-challenges`,\n    {\n      method: 'GET',\n      /* useCache: true */ useCache: false,\n      params,\n      ...(options || {}),\n    },\n  );\n}\n\n/** GET /api/admin/competency-challenges/:competency_challenge_id */\nexport async function getCompetencyChallenge(\n  competency_challenge_id: number,\n  options?: AxiosRequestConfig,\n) {\n  return request<API.DefaultResponse<API.CompetencyChallenge>>(\n    `/api/admin/competency-challenges/${competency_challenge_id}`,\n    {\n      method: 'GET',\n      /* useCache: true */ useCache: false,\n      ...(options || {}),\n    },\n  );\n}\n\n/** POST /api/admin/competency-challenges */\nexport async function createCompetencyChallenge(\n  body: API.CreateCompetencyChallenge,\n  options?: AxiosRequestConfig,\n) {\n  return request<API.DefaultResponse<API.CompetencyChallenge>>(`/api/admin/competency-challenges`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    data: body,\n    ...(options || {}),\n  });\n}\n\n/** PUT /api/admin/competency-challenges/:competency_challenge_id */\nexport async function updateCompetencyChallenge(\n  competency_challenge_id: number,\n  body: API.UpdateCompetencyChallenge,\n  options?: AxiosRequestConfig,\n) {\n  return request<API.DefaultResponse<API.CompetencyChallenge>>(\n    `/api/admin/competency-challenges/${competency_challenge_id}`,\n    {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      data: body,\n      ...(options || {}),\n    },\n  );\n}\n\n/**  DELETE /api/admin/competency-challenges/:competency_challenge_id */\nexport async function deleteCompetencyChallenge(\n  competency_challenge_id: number,\n  options?: AxiosRequestConfig,\n) {\n  return request<API.DeleteResponse>(\n    `/api/admin/competency-challenges/${competency_challenge_id}`,\n    {\n      method: 'DELETE',\n      ...(options || {}),\n    },\n  );\n}\n\n/** POST /api/admin/competency-challenges/scales */\nexport async function createCompetencyChallengeScale(\n  body: API.CreateCompetencyChallengeScale,\n  options?: AxiosRequestConfig,\n) {\n  return request<API.DefaultResponse<API.CompetencyChallengeScale>>(\n    `/api/admin/competency-challenges/scales`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      data: body,\n      ...(options || {}),\n    },\n  );\n}\n\n/** PATCH /api/admin/competency-challenges/scales/:competency_challenge_scale_id */\nexport async function updateCompetencyChallengeScale(\n  competency_challenge_scale_id: number,\n  body: API.CreateCompetencyChallengeScale,\n  options?: AxiosRequestConfig,\n) {\n  return request<API.DefaultResponse<API.CompetencyChallengeScale>>(\n    `/api/admin/competency-challenges/scales/${competency_challenge_scale_id}`,\n    {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      data: body,\n      ...(options || {}),\n    },\n  );\n}\n\n/**  DELETE /api/admin/competency-challenges/scales/:competency_challenge_scale_id */\nexport async function deleteCompetencyChallengeScale(\n  competency_challenge_scale_id: number,\n  options?: AxiosRequestConfig,\n) {\n  return request<API.DeleteResponse>(\n    `/api/admin/competency-challenges/scales/${competency_challenge_scale_id}`,\n    {\n      method: 'DELETE',\n      ...(options || {}),\n    },\n  );\n}\n"],"names":["ExportQuizQuestionsModal","_ref","quiz_id","quizQuestions","visible","onVisibleChange","_ProForm$useForm","ProForm","useForm","_ProForm$useForm2","_slicedToArray","form","intl","useIntl","onFormSubmit","useCallback","_ref3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref2","ids","response","downloadLink","wrap","_context","prev","next","exportQuizQuestions","sent","Blob","document","createElement","href","window","URL","createObjectURL","download","concat","body","appendChild","click","removeChild","t0","console","error","finish","stop","_x","apply","arguments","questionsOptions","useMemo","map","_ref4","id","value","giftQuestionArr","parse","label","formatMessage","stem","text","e","_jsx","ModalForm","title","FormattedMessage","onFinish","children","ProFormSelect","mode","options","name","required","rules","message","GiftQuizQuestionEssayEditor","ProFormTextArea","INITIAL_VALUES","firstOfPair","secondOfPair","GiftQuizQuestionMatchingEditor","_jsxs","_Fragment","ProFormText","ProFormList","creatorButtonProps","creatorButtonText","defaultMessage","deleteIconProps","tooltipText","actionRender","_f","_a","deleteButton","min","initialValue","i","direction","align","size","spaceProps","style","flexWrap","values","ordinalNumber","_defineProperty","QuestionType","MULTIPLE_CHOICE","isCorrect","feedback","MULTIPLE_CHOICE_WITH_MULTIPLE_RIGHT_ANSWERS","weight","GiftQuizQuestionMultipleChoiceEditor","_INITIAL_VALUES$type","type","field","action","count","Tooltip","Button","icon","DeleteOutlined","onClick","remove","titleStyle","width","display","justifyContent","ProFormCheckbox","getFieldValue","validator","_getFieldValue","answers","filter","answer","length","Promise","reject","resolve","ProFormDigit","fieldProps","Number","MAX_SAFE_INTEGER","addonAfter","GiftQuizQuestionNumericalEditor","GiftQuizQuestionShortEditor","GiftQuizQuestionTrueFalseEditor","GiftQuizQuestion","TRUE_FALSE","SHORT_ANSWERS","MATCHING","NUMERICAL_QUESTION","ESSAY","DESCRIPTION","escapeQuestionSpecialChars","inputString","charsToEscape","escapedString","currentChar","includes","parseMultipleChoice","question","escapedAnswers","giftString","_iterator","_createForOfIteratorHelper","_step","s","n","done","_step$value","sign","err","f","trim","parseMultipleChoiceWithMultipleRightAnswers","_iterator2","_step2","_step2$value","parseTrueFalse","_ref5","parseShortAnswers","_ref6","_ref7","_iterator3","_step3","_step3$value","parseMatching","_ref8","_ref9","_iterator4","_step4","_step4$value","parseNumerical","_ref10","errorMargin","parseEssay","_ref11","parseDescription","_ref12","parseToGIFT","_ref13","formData","_objectWithoutProperties","_excluded","safeFormData","_objectSpread","Error","parseMultipleChoiceToFormData","parsedValue","_ref14","score","category_id","isMultipleChoice","choices","every","_ref15","_ref16","reduce","acc","_ref17","_toConsumableArray","parseTrueFalseToFormData","_ref18","isTrue","parseShortAnswersToFormData","_ref19","_ref20","parseMatchingToFormData","_ref21","matchPairs","_ref22","subquestion","subanswer","parseNumericalToFormData","_ref23","Array","isArray","number","range","undefined","parseDescriptionEssayToFormData","_ref24","parseToFormData","questionBase","_parse","_parse2","VALUES_NOT_TO_RESET","TYPE_OPTIONS","Object","q","GiftQuizQuestionEditor","onSubmit","_ref$competencyChalle","competencyChallengeCategoryTreeProps","useWatch","initialValues","status","abrupt","resetFields","useEffect","fields","getFieldsValue","fieldsToReset","keys","key","Space","Divider","layout","placeholder","Item","CompetencyChallengeCategoryTree","_typeof","DragHandle","SortableHandle","MenuOutlined","cursor","color","SortableItem","SortableElement","props","SortContainer","SortableContainer","staticColumns","dataIndex","className","render","hideInForm","hideInSearch","hideInSetting","_","row","obj","categoryColumn","TypeButtonDrawer","type_id","Table","questions","onAdded","onRemoved","onEdited","quizId","tableLoading","tableHeader","questionsCategory","_ref$customToolbarEle","customToolbarElements","_useState","useState","_useState2","loading","setLoading","_useState3","_useState4","newQuestion","setNewQuestion","_useState5","_useState6","editQuestion","setEditQuestion","_useState7","_useState8","exportQuestions","setExportQuestions","_useState9","_useState10","dataSource","setDataSource","actionRef","useRef","_actionRef$current","current","reload","onSortEnd","oldIndex","newIndex","newData","arrayMoveImmutable","slice","Boolean","index","order","forEach","newRow","updateQuestion","topic_gift_quiz_id","DraggableContainer","useDragHandle","disableAutoscroll","helperClass","DraggableBodyRow","restProps","findIndex","x","onNewQuestionSubmit","data","createQuestion","success","log","onEditQuestionSubmit","_callee2","_context2","_x2","Drawer","open","onClose","destroyOnClose","ProTable","search","cardProps","bodyStyle","padding","headerTitle","toolbar","settings","toolBarRender","PlusCircleOutlined","SecureUpload","hideLabel","showUploadList","url","accept","onChange","info","file","ExportOutlined","columns","valueType","danger","deleteQuestion","then","rowKey","record","pagination","components","wrapper","treeConvert","category","disabledNodes","enabledDepth","_category$subcategori","depth","subcategories","disabled","cat","_competencyChallenge$3","_competencyChallenge$4","_ref$type","_ref$disabledNodes","_ref$multiple","multiple","categories","setCategories","_useCompetencyChallen","useCompetencyChallengeContext","categoryDepths","competencyChallenge","categoriesToShow","_competencyChallenge$","_competencyChallenge$2","treeData","categoryTree","TreeSelect","showSearch","dropdownStyle","maxHeight","overflow","allowClear","treeDefaultExpandAll","scale","role","refreshData","_refreshData","warn","Context","React","useContext","CompetencyChallengeContextProvider","setCompetencyChallenge","setCategoryDepths","_useParams","useParams","competency_challenge_id","res","isNaN","getCompetencyChallenge","errors","fetchCategoryDepths","_callee3","_res$data","_res$data2","_res$data3","_context3","getConfig","escolalms_competency_challenge","Provider","getCompetencyChallenges","_getCompetencyChallenges","params","request","method","useCache","_x3","_x4","_getCompetencyChallenge","createCompetencyChallenge","_x5","_x6","_createCompetencyChallenge","headers","updateCompetencyChallenge","_x7","_x8","_x9","_updateCompetencyChallenge","_callee4","_context4","deleteCompetencyChallenge","_x10","_x11","_deleteCompetencyChallenge","_callee5","_context5","createCompetencyChallengeScale","_x12","_x13","_createCompetencyChallengeScale","_callee6","_context6","updateCompetencyChallengeScale","_x14","_x15","_x16","_updateCompetencyChallengeScale","_callee7","competency_challenge_scale_id","_context7","deleteCompetencyChallengeScale","_x17","_x18","_deleteCompetencyChallengeScale","_callee8","_context8"],"sourceRoot":""}