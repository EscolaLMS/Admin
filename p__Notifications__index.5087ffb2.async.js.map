{"version":3,"file":"p__Notifications__index.5087ffb2.async.js","mappings":"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","sources":["webpack://ant-design-pro/./src/pages/Notifications/index.tsx"],"sourcesContent":["import TypeButtonDrawer from '@/components/TypeButtonDrawer';\nimport UserSelect from '@/components/UserSelect';\nimport { DATETIME_FORMAT } from '@/consts/dates';\nimport { getEventTypes, getNotifications } from '@/services/escola-lms/notifications';\nimport { createTableOrderObject } from '@/utils/utils';\nimport { PageContainer } from '@ant-design/pro-layout';\nimport type { ActionType, ProColumns } from '@ant-design/pro-table';\nimport ProTable from '@ant-design/pro-table';\nimport { format } from 'date-fns';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'umi';\n\nimport { getEventType } from '@/components/NoticeIcon/NoticeList';\n\nexport const TableColumns: ProColumns<API.Notification>[] = [\n  {\n    title: <FormattedMessage id=\"created_at\" defaultMessage=\"created_at\" />,\n    dataIndex: 'created_at',\n    hideInSearch: true,\n    sorter: true,\n    render: (_, record) => format(new Date(record.created_at), DATETIME_FORMAT),\n  },\n  {\n    title: <FormattedMessage id=\"user_id\" defaultMessage=\"user_id\" />,\n    dataIndex: 'notifiable_id',\n    hideInSearch: false,\n    sorter: true,\n    valueType: 'select',\n    renderFormItem: (item, { type, defaultRender, ...rest }) => {\n      return <UserSelect {...rest} />;\n    },\n    render: (_, record) =>\n      record.notifiable_id && (\n        <TypeButtonDrawer key={'user'} type=\"App\\Models\\User\" type_id={record.notifiable_id} />\n      ),\n  },\n  {\n    title: <FormattedMessage id=\"dateRange\" defaultMessage=\"Date Range\" />,\n    dataIndex: 'dateRange',\n    hideInSearch: false,\n    hideInForm: true,\n    hideInTable: true,\n    valueType: 'dateRange',\n    fieldProps: {\n      allowEmpty: [true, true],\n    },\n  },\n];\n\nconst NotificationsPage: React.FC = () => {\n  const [eventTypes, setEventTypes] = useState(['']);\n  const actionRef = useRef<ActionType>();\n\n  const intl = useIntl();\n\n  const fetchEventTypes = useCallback(async () => {\n    const request = await getEventTypes();\n    const response = await request;\n\n    if (response.success) {\n      setEventTypes(response.data);\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchEventTypes();\n  }, []);\n\n  const eventsTypeList = useMemo(\n    () =>\n      eventTypes.reduce(\n        (a, value) => ({\n          ...a,\n          [value]: <FormattedMessage id={`notifications.${getEventType(value)}`} />,\n        }),\n        {},\n      ),\n    [eventTypes],\n  );\n\n  return (\n    <PageContainer>\n      <ProTable<API.Notification>\n        headerTitle={intl.formatMessage({\n          id: 'notifications',\n          defaultMessage: 'notifications',\n        })}\n        actionRef={actionRef}\n        rowKey=\"id\"\n        search={{\n          layout: 'vertical',\n        }}\n        request={({ pageSize, current, event, notifiable_id, dateRange }, sort) => {\n          const date_from =\n            dateRange && dateRange[0] ? format(new Date(dateRange[0]), DATETIME_FORMAT) : undefined;\n          const date_to =\n            dateRange && dateRange[1] ? format(new Date(dateRange[1]), DATETIME_FORMAT) : undefined;\n\n          return getNotifications(\n            {\n              per_page: pageSize,\n              page: current,\n              event: event || undefined,\n              date_from,\n              date_to,\n              ...createTableOrderObject(sort, 'created_at'),\n            },\n            notifiable_id,\n          ).then((response) => {\n            if (response.success) {\n              return {\n                data: response.data,\n                total: response.meta.total,\n                success: true,\n              };\n            }\n            return [];\n          });\n        }}\n        columns={[\n          ...TableColumns,\n          {\n            title: <FormattedMessage id=\"event\" defaultMessage=\"event\" />,\n            dataIndex: 'event',\n            hideInSearch: false,\n            sorter: true,\n            render: (_, record) => (\n              <FormattedMessage id={`notifications.${getEventType(record.event)}`} />\n            ),\n            valueType: 'select',\n            valueEnum: eventsTypeList,\n          },\n        ]}\n      />\n    </PageContainer>\n  );\n};\n\nexport default NotificationsPage;\n"],"names":["TableColumns","title","_jsx","FormattedMessage","id","defaultMessage","dataIndex","hideInSearch","sorter","render","_","record","format","Date","created_at","DATETIME_FORMAT","valueType","renderFormItem","item","_ref","type","defaultRender","rest","_objectWithoutProperties","_excluded","UserSelect","_objectSpread","notifiable_id","TypeButtonDrawer","type_id","hideInForm","hideInTable","fieldProps","allowEmpty","NotificationsPage","_useState","useState","_useState2","_slicedToArray","eventTypes","setEventTypes","actionRef","useRef","intl","useIntl","fetchEventTypes","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","request","response","wrap","_context","prev","next","getEventTypes","sent","success","data","stop","useEffect","eventsTypeList","useMemo","reduce","a","value","_defineProperty","concat","getEventType","PageContainer","children","ProTable","headerTitle","formatMessage","rowKey","search","layout","_ref3","sort","pageSize","current","event","dateRange","date_from","undefined","date_to","getNotifications","per_page","page","createTableOrderObject","then","total","meta","columns","valueEnum"],"sourceRoot":""}