{"version":3,"sources":["webpack:///./src/pages/Translations/components/AdminModalForm.tsx","webpack:///./src/pages/Translations/admin.tsx","webpack:///./src/pages/Translations/components/JsonLangEditor.tsx"],"names":["TranslationModalForm","visible","onVisibleChange","onFinish","langKey","defaultValue","intl","useIntl","useForm","form","useEffect","setFieldsValue","key","text","formatMessage","id","defaultMessage","values","TableColumns","title","dataIndex","sorter","valueType","valueEnum","getAllLocales","reduce","acc","local","Translations","useState","Math","random","rndNumber","setRndNumber","actionRef","useRef","editTranslationKey","setEditTranslationKey","getRows","useMemo","rows","langs","Object","keys","localeInfo","lang","messages","forEach","push","value","onEditClick","useCallback","row","layout","sort","sortArr","entries","Promise","resolve","filter","result","includes","console","log","sortByKey","data","success","total","length","width","render","_","record","undefined","txt","addLocale","antd","momentLocale","current","reload","translations","group","t","updateTranslation","createTranslation","curr","JsonLangEditor","onChange","state","setState","obj","JSON","parse","assign","stringify","onLangAdd","prevState","onRowChange","index","newValue","i","map","entry","e","target"],"mappings":"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","file":"p__Translations__admin.115f4ee6.async.js","sourcesContent":["import React, { useEffect } from 'react';\nimport { Form } from 'antd';\nimport ProForm, { ProFormText, ModalForm } from '@ant-design/pro-form';\nimport { useIntl, FormattedMessage } from 'umi';\nimport { JsonLangEditor } from './JsonLangEditor';\n\nexport const TranslationModalForm: React.FC<{\n  langKey?: string;\n  visible: boolean;\n  onVisibleChange: (visible: boolean) => void;\n  onFinish: (formData: API.Translation) => Promise<boolean | void>;\n  defaultValue?: Record<string, string>;\n}> = ({ visible, onVisibleChange, onFinish, langKey, defaultValue }) => {\n  const intl = useIntl();\n\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    form.setFieldsValue({\n      key: langKey,\n      text: defaultValue,\n    });\n  }, [langKey, form]);\n\n  return (\n    <ModalForm\n      form={form}\n      title={intl.formatMessage({\n        id: 'editTranslation',\n        defaultMessage: 'Edit Translation',\n      })}\n      width=\"700px\"\n      visible={visible}\n      onVisibleChange={onVisibleChange}\n      onFinish={(values) => onFinish({ ...values })}\n    >\n      <ProForm.Group>\n        <ProFormText\n          disabled\n          label={<FormattedMessage id=\"group\" defaultMessage=\"group\" />}\n          name=\"group\"\n          initialValue={'Admin'}\n        />\n        <ProFormText\n          disabled\n          name=\"key\"\n          label={<FormattedMessage id=\"key\" />}\n          placeholder={intl.formatMessage({\n            id: 'key',\n          })}\n          required\n        />\n      </ProForm.Group>\n      <ProForm.Item\n        name={'text'}\n        label={<FormattedMessage id={'translationJsonText'} />}\n        tooltip={<FormattedMessage id={'translationJsonText_tooltip'} />}\n        valuePropName=\"value\"\n      >\n        <JsonLangEditor />\n      </ProForm.Item>\n    </ModalForm>\n  );\n};\n\nexport default TranslationModalForm;\n","import React, { useCallback, useMemo, useRef, useState } from 'react';\nimport { useIntl, FormattedMessage } from 'umi';\nimport type { ProColumns, ActionType } from '@ant-design/pro-table';\nimport ProTable from '@ant-design/pro-table';\nimport { PageContainer } from '@ant-design/pro-layout';\nimport { EditOutlined } from '@ant-design/icons';\nimport { Button, Tooltip } from 'antd';\nimport {\n  createTranslation,\n  translations,\n  updateTranslation,\n} from '@/services/escola-lms/translations';\nimport AdminModalForm from './components/AdminModalForm';\nimport { getAllLocales, localeInfo, addLocale } from 'umi';\nimport { sortByKey } from '@/utils/utils';\n\ntype LangRow = { lang: string; key: string; value: string; id: string };\n\nexport const TableColumns: ProColumns<LangRow>[] = [\n  {\n    title: <FormattedMessage id=\"language\" defaultMessage=\"Language\" />,\n    dataIndex: 'lang',\n    sorter: true,\n    valueType: 'select',\n    valueEnum: getAllLocales().reduce(\n      (acc, local) => ({ ...acc, [local]: local }),\n      {} as Record<string, string>,\n    ),\n  },\n  {\n    title: <FormattedMessage id=\"key\" defaultMessage=\"key\" />,\n    dataIndex: 'key',\n    sorter: true,\n  },\n  {\n    title: <FormattedMessage id=\"value\" defaultMessage=\"value\" />,\n    dataIndex: 'value',\n    sorter: true,\n  },\n];\n\nconst Translations: React.FC = () => {\n  const [rndNumber, setRndNumber] = useState(Math.random());\n  const actionRef = useRef<ActionType>();\n  const [editTranslationKey, setEditTranslationKey] = useState<{\n    key: string;\n    defaultValue: Record<string, string>;\n  }>();\n\n  const intl = useIntl();\n\n  const getRows = useMemo(() => {\n    const rows: LangRow[] = [];\n    const langs = Object.keys(localeInfo);\n\n    for (const lang of langs) {\n      const messages: Record<string, string>[] | undefined = localeInfo[lang].messages;\n      if (messages) {\n        Object.keys(messages).forEach((key) => {\n          rows.push({\n            id: `${lang}-${key}`,\n            lang: lang,\n            key: key,\n            value: messages[key],\n          });\n        });\n      }\n    }\n    return rows;\n  }, [rndNumber]);\n\n  const onEditClick = useCallback((key: string) => {\n    const defaultValue = getRows.reduce((acc, row) => {\n      if (row.key === key) {\n        return { ...acc, [row.lang]: row.value };\n      }\n      return acc;\n    }, {} as Record<string, string>);\n    setEditTranslationKey({ key, defaultValue });\n  }, []);\n\n  return (\n    <PageContainer>\n      <ProTable<LangRow>\n        headerTitle={intl.formatMessage({\n          id: 'menu.Configuration.Translations',\n          defaultMessage: 'Translations',\n        })}\n        actionRef={actionRef}\n        search={{\n          layout: 'vertical',\n        }}\n        rowKey=\"id\"\n        request={({ lang, key, value }, sort) => {\n          const sortArr = sort && Object.entries(sort)[0];\n          return new Promise((resolve) => {\n            let rows = getRows.filter((row) => {\n              let result = true;\n              if (result && lang && row.lang !== lang) {\n                result = false;\n              }\n              if (result && key && !row.key.includes(key)) {\n                result = false;\n              }\n              if (\n                result &&\n                value &&\n                typeof row.value === 'string' &&\n                row.value &&\n                !row.value.includes(value)\n              ) {\n                result = false;\n              }\n              return result;\n            });\n\n            if (sortArr) {\n              console.log('rows: ', rows);\n              console.log('sortArr: ', sortArr);\n              rows = rows.sort(\n                sortByKey<LangRow>(sortArr[0], sortArr[1] === 'ascend' ? false : true),\n              );\n            }\n\n            resolve({\n              data: rows,\n              success: true,\n              total: rows.length,\n            });\n          });\n        }}\n        columns={[\n          ...TableColumns,\n          {\n            title: <FormattedMessage id=\"options\" defaultMessage=\"options\" />,\n            dataIndex: 'option',\n            valueType: 'option',\n            width: '10%',\n            render: (_, record) => [\n              <Tooltip key=\"edit\" title={<FormattedMessage id=\"edit\" defaultMessage=\"edit\" />}>\n                <Button\n                  type=\"primary\"\n                  icon={<EditOutlined />}\n                  onClick={() => onEditClick(record.key)}\n                />\n              </Tooltip>,\n              ,\n            ],\n          },\n        ]}\n      />{' '}\n      <AdminModalForm\n        langKey={editTranslationKey?.key}\n        defaultValue={editTranslationKey?.defaultValue}\n        visible={!!editTranslationKey}\n        onVisibleChange={(value) => {\n          return value === false && setEditTranslationKey(undefined);\n        }}\n        onFinish={async (values) => {\n          Object.entries(values.text).forEach((txt) => {\n            if (txt[1]) {\n              addLocale(\n                txt[0],\n                { [values.key]: txt[1] },\n                {\n                  antd: localeInfo[txt[0]].antd,\n                  momentLocale: localeInfo[txt[0]].momentLocale,\n                },\n              );\n            }\n          });\n\n          if (actionRef.current) {\n            setRndNumber(Math.random());\n            actionRef.current.reload();\n          }\n\n          const t = await translations({ group: 'Admin', key: values.key });\n\n          if (t.success) {\n            if (t.data.length > 0 && t.data[0].id) {\n              updateTranslation(t.data[0].id, values);\n            } else {\n              await createTranslation(values);\n            }\n          }\n\n          setEditTranslationKey(undefined);\n\n          return true;\n        }}\n      />\n    </PageContainer>\n  );\n};\n\nexport default Translations;\n","import React, { useState, useCallback, useEffect } from 'react';\nimport { Button, Input, Col, Row } from 'antd';\n\nimport 'jsoneditor-react/es/editor.min.css';\n\nimport { getAllLocales } from 'umi';\nimport { PlusCircleFilled } from '@ant-design/icons';\n\nconst defaultValue = () =>\n  getAllLocales().reduce((acc, curr) => {\n    return { ...acc, [curr]: '' };\n  }, {} as Record<string, string>);\n\nexport const JsonLangEditor: React.FC<{\n  value?: string | object;\n  onChange?: (value: string | object) => void;\n}> = ({ value, onChange }) => {\n  const [state, setState] = useState<Record<string, string>>(defaultValue());\n\n  useEffect(() => {\n    const obj = typeof value === 'object' ? value : JSON.parse(value ?? '{}');\n    setState(Object.assign(defaultValue(), obj));\n  }, [value]);\n\n  useEffect(() => {\n    if (onChange) {\n      if (JSON.stringify(state) !== JSON.stringify(value)) {\n        onChange(state);\n      }\n    }\n  }, [state]);\n\n  const onLangAdd = useCallback(() => {\n    setState((prevState) => ({ ...prevState, lang: '' }));\n  }, []);\n\n  const onRowChange = useCallback((index: number, lang: string, newValue: string) => {\n    setState((prevState) =>\n      Object.entries(prevState).reduce((acc, curr, i) => {\n        if (i === index) {\n          return {\n            ...acc,\n            [lang]: newValue,\n          };\n        }\n        return { ...acc, [curr[0]]: curr[1] };\n      }, {}),\n    );\n  }, []);\n\n  return (\n    <div>\n      {Object.entries(state).map((entry, i) => (\n        <Row key={i}>\n          <Col span={6}>\n            <Input\n              disabled={getAllLocales().includes(entry[0])}\n              value={entry[0]}\n              maxLength={5}\n              onChange={(e) => onRowChange(i, e.target.value, entry[1])}\n            />\n          </Col>\n          <Col span={24 - 6}>\n            <Input value={entry[1]} onChange={(e) => onRowChange(i, entry[0], e.target.value)} />\n          </Col>\n        </Row>\n      ))}\n      <Button onClick={() => onLangAdd()} icon={<PlusCircleFilled />}></Button>\n    </div>\n  );\n};\n\nexport default JsonLangEditor;\n"],"sourceRoot":""}