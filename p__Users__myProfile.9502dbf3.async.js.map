{"version":3,"sources":["webpack:///./src/components/ResponsiveImage/index.tsx","webpack:///./src/components/JsonEditor/index.tsx","webpack:///./src/pages/Users/User/components/AdditionalField.tsx","webpack:///./src/pages/Users/User/components/SettingModal.tsx","webpack:///./src/pages/Users/User/settings.tsx","webpack:///./src/pages/Users/myProfile.tsx","webpack:///./node_modules/@ant-design/pro-form/es/components/Checkbox/index.js"],"names":["ResponsiveImage","path","size","srcSizes","alt","props","src","window","REACT_APP_API_URL","srcSet","map","srcSize","join","JsonEditor","value","onChange","useState","isModalVisible","setIsModalVisible","hideModal","useCallback","mode","setMode","e","target","AdditionalField","field","intl","useIntl","getProperField","f","locale","getLocale","translatedLabel","extra","find","i","type","FieldType","Number","name","formatMessage","id","defaultMessage","step","Boolean","Varchar","Json","Text","SettingsModalForm","visible","onVisibleChange","onFinish","useForm","form","useEffect","resetFields","required","TableList","user","isProfile","actionRef","useRef","modalVisible","setModalVisible","method","setMetod","columns","title","dataIndex","hideInSearch","createEntries","data","arr","Object","entries","entry","key","getUserSettings","then","response","success","isInteger","setUserSettings","request","current","reload","params","useParams","tab","additionalFields","useModelFields","setData","fetch","profile","bio","formPropsGeneral","useMemo","values","updateProfile","message","initialValues","formPropsChangePassword","updateProfilePassword","breadcrumb","routes","breadcrumbName","String","activeKey","history","push","state","list","path_avatar","_excluded","CheckboxGroup","React","forwardRef","_ref","ref","options","fieldProps","proFieldProps","valueEnum","rest","_objectWithoutProperties","_jsx","ProFormField","_objectSpread","valueType","runFunction","undefined","lightProps","labelFormatter","filedConfig","customLightMode","ProFormCheckboxComponents","_ref2","children","_Checkbox","ProFormCheckbox","createField","valuePropName","WrappedProFormCheckbox","Group"],"mappings":"6NAYMA,EAAkD,SAAC,EAMnD,IALJC,GAKI,EALJA,KACAC,EAII,EAJJA,KACAC,EAGI,EAHJA,SAGI,IAFJC,MAEI,WAFE,YAEF,EADDC,EACC,iBACEC,EAAM,GAAH,OAAMC,OAAOC,mBAAqBA,kCAAlC,gCAA2EP,EAA3E,cACPE,EAAWA,EAAS,GAAKD,GAErBO,EACJN,GACAA,EAASO,IACP,SAACC,EAAD,iBAEIJ,OAAOC,mBAAqBA,kCAFhC,gCAG0BP,EAH1B,cAGoCU,EAHpC,YAG+CA,EAH/C,OAMJ,MACE,sBAAK,UAAU,kBAAf,SACE,+BAAO,IAAKL,EAAK,OAAQG,GAAUA,EAAOG,KAAK,KAAM,IAAKR,GAASC,OAK1DL,O,iNC9BFa,EAGR,SAAC,EAAwB,IAAtBC,GAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACb,EAA4CC,mBAAS,IAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KAEMC,EAAYC,sBAAY,UAAM,CAClCF,EAAkB,KACjB,IAEH,EAAwBF,mBAAqB,QAA7C,mBAAOK,EAAP,KAAaC,EAAb,KAEA,MACE,iCACE,mBAAQ,KAAK,UAAU,QAAS,iBAAMJ,GAAkB,KAAO,KAAK,QAApE,SACE,cAAC,IAAD,CAAkB,GAAG,kBAEvB,oBACE,MAAM,OACN,KAAMD,EACN,KAAME,EACN,SAAUA,EACV,eAAc,GALhB,UAOE,mBAAO,MAAP,CAAa,SAAU,SAACI,EAAD,OAAOD,GAAQC,EAAEC,OAAOV,QAAQ,MAAOO,EAA9D,UACE,mBAAO,MAAM,OAAb,kBACA,mBAAO,MAAM,OAAb,kBACA,mBAAO,MAAM,OAAb,kBACA,mBAAO,MAAM,OAAb,kBACA,mBAAO,MAAM,OAAb,qBAEF,cAAC,IAAD,CAAmB,KAAMA,EAAM,MAAOP,EAAO,SAAUC,GAA1CM,UAMNR,O,kCC7Cf,8IAWMY,EAED,SAAC,EAAc,IAAZC,GAAY,EAAZA,MACAC,EAAOC,cACPC,EAAiB,SAACC,EAAsB,SACtCC,EAASC,cACTC,EAAkBH,GAAH,SAAGA,EAAGI,SAAN,qBAAG,EAAUC,KAAK,SAACC,EAAD,OAA+BA,IAA/B,YAA+BA,EAAIL,QAArD,wBAAG,EAA6DA,GAErF,OAAQD,EAAEO,UACHC,KAAUC,OACb,MACE,eAAC,IAAD,CACE,MAAM,KACN,KAAMT,EAAEU,KACR,MAAOP,GAAF,KAAEA,EAAmB,cAAC,IAAD,CAAkB,GAAIH,EAAEU,OAClD,QAAS,cAAC,IAAD,CAAkB,GAAIV,EAAEU,OACjC,YAAab,EAAKc,cAAc,CAC9BC,GAAIZ,EAAEU,KACNG,eAAgBb,EAAEU,OAEpB,IAAK,EACL,IAAK,KACL,WAAY,CAAEI,KAAM,SAGrBN,KAAUO,QACb,MACE,eAAC,IAAD,CAAiB,KAAMf,EAAEU,KAAzB,SACGP,GADH,KACGA,EAAmB,cAAC,IAAD,CAAkB,GAAIH,EAAEU,aAI7CF,KAAUQ,QACb,MACE,eAAC,IAAD,CACE,MAAM,KACN,KAAMhB,EAAEU,KACR,MAAOP,GAAF,KAAEA,EAAmB,cAAC,IAAD,CAAkB,GAAIH,EAAEU,OAClD,QAAS,cAAC,IAAD,CAAkB,GAAIV,EAAEU,OACjC,YAAab,EAAKc,cAAc,CAC9BC,GAAIZ,EAAEU,aAKTF,KAAUS,KACb,MACE,eAAC,IAAQ,KAAT,CACE,KAAMjB,EAAEU,KACR,MAAOP,GAAF,KAAEA,EAAmB,cAAC,IAAD,CAAkB,GAAIH,EAAEU,OAClD,QAAS,cAAC,IAAD,CAAkB,GAAIV,EAAEU,OACjC,cAAc,QAJhB,SAME,cAAC,IAAD,UAIDF,KAAUU,aAEb,MACE,eAAC,IAAD,CACE,MAAM,KACN,KAAMlB,EAAEU,KACR,MAAOP,GAAF,KAAEA,EAAmB,cAAC,IAAD,CAAkB,GAAIH,EAAEU,OAClD,QAAS,cAAC,IAAD,CAAkB,GAAIV,EAAEU,OACjC,YAAab,EAAKc,cAAc,CAC9BC,GAAIZ,EAAEU,WAMlB,MAAO,oCAAGX,EAAeH,MAGZD,O,4XChFFwB,EAKR,SAAC5C,EAAU,CACd,GAAMsB,GAAOC,cAELsB,EAAuC7C,EAAvC6C,QAASC,EAA8B9C,EAA9B8C,gBAAiBC,EAAa/C,EAAb+C,SAElC,EAAe,IAAKC,UAApB,mBAAOC,EAAP,KAEAC,2BAAU,UAAM,CACd,MAAO,WAAM,CACXD,EAAKE,gBAEN,IAGD,cAAC,IAAD,CACE,KAAMF,EACN,MAAO3B,EAAKc,cAAc,CACxBC,GAAI,aACJC,eAAgB,eAElB,MAAM,OACN,QAASO,EACT,gBAAiBC,EACjB,SAAUC,EATZ,SAWE,eAAC,IAAQ,MAAT,WACE,cAAC,IAAD,CACE,MAAO,cAAC,IAAD,CAAkB,GAAG,MAAM,eAAe,QACjD,MAAO,CACL,CACEK,SAAU,KAGd,MAAM,KACN,KAAK,QAEP,cAAC,IAAD,CACE,MAAO,cAAC,IAAD,CAAkB,GAAG,QAAQ,eAAe,UACnD,MAAO,CACL,CACEA,SAAU,KAGd,MAAM,KACN,KAAK,gBAOAR,ICrDTS,EAA4D,SAAC,EAAgC,IAA9BC,GAA8B,EAA9BA,KAA8B,IAAxBC,YAAwB,WAAZ,GAAY,EAC3FC,EAAYC,mBACZnC,EAAOC,cACb,EAAwCZ,mBAAyB,IAAjE,mBAAO+C,EAAP,KAAqBC,EAArB,KACA,EAA2BhD,mBAAS,SAApC,mBAAOiD,EAAP,KAAeC,EAAf,KACMC,EAAyC,CAC7C,CACEC,MAAO,cAAC,IAAD,CAAkB,GAAG,MAAM,eAAe,QACjDC,UAAW,MACXC,aAAc,IAEhB,CACEF,MAAO,cAAC,IAAD,CAAkB,GAAG,QAAQ,eAAe,UACnDC,UAAW,QACXC,aAAc,KAIZC,EAAgBnD,sBACpB,SAACoD,EAA0B,CACzB,GAAMC,GACJD,GACAE,OAAOC,QAAQH,GAAM9D,IAAI,SAACkE,EAAU,CAClC,MAAO,CACLC,IAAKD,EAAM,GACX9D,MAAO8D,EAAM,MAGnB,MAAOH,IAET,CAACd,IAGH,MACE,gBAAC,IAAM,SAAP,WACE,cAAC,IAAD,CACE,YAAahC,EAAKc,cAAc,CAC9BC,GAAI,kBAEN,UAAWmB,EACX,OAAO,KACP,OAAQ,GACR,cACED,EACI,iBAAM,CACJ,oBACE,KAAK,UAEL,QAAS,UAAM,CACbI,EAAgB,IAChBE,EAAS,UALb,UAQE,cAAC,IAAD,IARF,IAQmB,cAAC,IAAD,CAAkB,GAAG,4BANlC,WAQN,oBACE,MAAM,SACN,KAAK,UAEL,QAAS,UAAM,CACbF,EAAgB,IAChBE,EAAS,QANb,UASE,cAAC,IAAD,IATF,IAS0B,cAAC,IAAD,CAAkB,GAAG,8BANzC,aASR,GAEN,QAAS,UAAM,CACb,MAAOY,aAAgBvC,OAAOoB,IAAOoB,KAAK,SAACC,EAAa,CACtD,MAAIA,GAASC,QACJ,CACLT,KAAMD,EAAcS,EAASR,OAG1B,MAGX,QAASL,IAEX,cAAC,EAAD,CACE,GAAIJ,EACJ,QAASxB,OAAO2C,UAAUnB,GAC1B,gBAAiB,SAACjD,EAAU,CAC1B,MAAOA,KAAU,IAASkD,EAAgB,KAE5C,SAAQ,gDAAE,WAAOlD,EAAP,kGACcqE,YAAgB5C,OAAOoB,GAAOM,EAAQnD,OADpD,GACFsE,GADE,OAGJA,GAAQH,SACVjB,GAAgB,IAEZH,EAAUwB,SACZxB,EAAUwB,QAAQC,cAPd,qCAAF,4DAgBD5B,K,0BCnGA,uBAAM,CACnB,GAAM6B,IAASC,cACT7D,EAAOC,cACb,EAA4B2D,GAApBE,MAAR,WAAc,UAAd,EACMC,EAAmBC,YAAe,iCACxC,EAAwB3E,qBAAxB,mBAAOwD,EAAP,KAAaoB,EAAb,KAEArC,oBAAU,UAAM,CACd,GAAMsC,GAAK,gDAAG,6GACWC,kBADX,GACNd,EADM,OAERA,EAASC,SACXW,EAAQ,2BACHZ,EAASR,MADP,IAELuB,IAAKf,EAASR,KAAKuB,KAAO,UALlB,qCAAH,qDAUXF,KACC,IAEH,GAAMG,GAAmBC,kBACvB,iBAAO,CACL7C,SAAU,UAAF,sCAAE,WAAO8C,EAAP,iGACkDC,YAAcD,OADhE,GACFlB,EADE,OAER,IAAQC,QAAQD,EAASoB,aAFjB,qCAAF,yDAIRC,cAAe7B,IAEjB,CAACA,IAGG8B,EAA0BL,kBAC9B,iBAAO,CACL7C,SAAU,UAAF,sCAAE,WAAO8C,EAAP,iGAC4DK,YAClEL,OAFM,GACFlB,EADE,OAIR,IAAQC,QAAQD,EAASoB,aAJjB,qCAAF,yDAMRC,cAAe7B,IAEjB,CAACA,IAGH,MAAKA,GAKH,cAAC,IAAD,CACE,MAAO,cAAC,IAAD,CAAkB,GAAG,eAC5B,OAAQ,CACNgC,WAAY,CACVC,OAAQ,CACN,CACExG,KAAM,aACNyG,eAAgB/E,EAAKc,cAAc,CACjCC,GAAI,gBAGR,CACEzC,KAAM0G,OAAOlB,GACbiB,eAAgB/E,EAAKc,cAAc,CACjCC,GAAIiE,OAAOlB,SAdvB,SAqBE,eAAC,IAAD,CACE,KAAM,CACJpD,KAAM,OACNuE,UAAWnB,EACX1E,SAAU,SAAC8D,EAAD,OAASgC,KAAQC,KAAR,sBAA4BjC,MAJnD,UAOE,cAAC,IAAQ,QAAT,CAA+B,IAAK,cAAC,IAAD,CAAkB,GAAG,YAAzD,SACE,eAAC,IAAD,2BAAamB,GAAb,cACE,eAAC,IAAQ,MAAT,WACE,cAAC,IAAD,CACE,MAAM,KACN,KAAK,aACL,MAAO,cAAC,IAAD,CAAkB,GAAG,eAC5B,QAAS,cAAC,IAAD,CAAkB,GAAG,eAC9B,YAAarE,EAAKc,cAAc,CAC9BC,GAAI,eAEN,SAAQ,KAEV,cAAC,IAAD,CACE,MAAM,KACN,KAAK,YACL,MAAO,cAAC,IAAD,CAAkB,GAAG,cAC5B,QAAS,cAAC,IAAD,CAAkB,GAAG,cAC9B,YAAaf,EAAKc,cAAc,CAC9BC,GAAI,cAEN,SAAQ,QAGZ,cAAC,IAAQ,MAAT,UACGgD,EAAiBqB,QAAU,UAC1BrB,EAAiBsB,KAAKtG,IAAI,SAACgB,EAAD,OACxB,eAAC,KAAD,CAAgC,MAAOA,GAAjBA,EAAMgB,QAIlC,cAAC,IAAQ,MAAT,UACE,eAAC,IAAQ,KAAT,CAAc,KAAK,SAAS,MAAO,cAAC,IAAD,CAAkB,GAAG,WAAxD,UACG8B,EAAKyC,aACJ,cAAC,IAAD,CAAiB,KAAMzC,EAAKyC,YAAa,KAAM,IAAK,MAAO,MAG7D,cAAC,KAAD,CACE,OAAM,kBAAazC,EAAK9B,IACxB,IAAI,6BACJ,KAAK,SACL,OAAO,UACP,SAAU,SAACsC,EAAa,CAClBA,EAASC,qBA3CJ,WAoDrB,cAAC,IAAQ,QAAT,CAAuC,IAAK,cAAC,IAAD,CAAkB,GAAG,oBAAjE,SACE,eAAC,IAAD,2BAAaqB,GAAb,cACE,cAAC,IAAQ,MAAT,UACE,cAAC,IAAY,SAAb,CACE,MAAM,KACN,KAAK,mBACL,MAAO,cAAC,IAAD,CAAkB,GAAG,qBAC5B,YAAa3E,EAAKc,cAAc,CAC9BC,GAAI,qBAEN,SAAQ,OAGZ,eAAC,IAAQ,MAAT,WACE,cAAC,IAAY,SAAb,CACE,MAAM,KACN,KAAK,eACL,MAAO,cAAC,IAAD,CAAkB,GAAG,iBAC5B,YAAaf,EAAKc,cAAc,CAC9BC,GAAI,iBAEN,SAAQ,KAEV,cAAC,IAAY,SAAb,CACE,MAAM,KACN,KAAK,uBACL,MAAO,cAAC,IAAD,CAAkB,GAAG,yBAC5B,YAAaf,EAAKc,cAAc,CAC9BC,GAAI,yBAEN,SAAQ,aA9BK,mBAmCrB,cAAC,IAAQ,QAAT,CAAqC,IAAK,cAAC,IAAD,CAAkB,GAAG,kBAA/D,SACE,cAAC,GAAD,CAAc,KAAMiE,OAAOnC,EAAK9B,IAAK,UAAS,MAD3B,sBAvHlB,wB,kCC3DX,kIAIIwE,EAAY,CAAC,UAAW,aAAc,gBAAiB,aAMvDC,EAA6BC,IAAMC,WAAW,SAAUC,EAAMC,EAAK,CACrE,GAAIC,GAAUF,EAAKE,QACfC,EAAaH,EAAKG,WAClBC,EAAgBJ,EAAKI,cACrBC,EAAYL,EAAKK,UACjBC,EAAOC,YAAyBP,EAAMJ,GAE1C,MAAOY,eAAKC,IAAcC,YAAc,CACtCT,IAAKA,EACLU,UAAW,WACXN,UAAWO,YAAYP,EAAWQ,QAClCV,WAAYO,YAAc,CACxBR,QAASA,GACRC,GACHW,WAAYJ,YAAc,CACxBK,eAAgB,UAA0B,CACxC,MAAOP,eAAKC,IAAcC,YAAc,CACtCT,IAAKA,EACLU,UAAW,WACX5G,KAAM,OACNsG,UAAWO,YAAYP,EAAWQ,QAClCG,YAAa,CACXC,gBAAiB,IAEnBd,WAAYO,YAAc,CACxBR,QAASA,GACRC,GACHC,cAAeA,GACdE,MAEJA,EAAKQ,YACRV,cAAeA,GACdE,MAQDY,EAAyCpB,IAAMC,WAAW,SAAUoB,EAAOlB,EAAK,CAClF,GAAIE,GAAagB,EAAMhB,WACnBiB,EAAWD,EAAMC,SACrB,MAAOZ,eAAKa,IAAWX,YAAcA,YAAc,CACjDT,IAAKA,GACJE,GAAa,GAAI,CAClBiB,SAAUA,OAGVE,EAAkBC,YAAYL,EAA2B,CAC3DM,cAAe,YAEbC,EAAyBH,EAC7BG,EAAuBC,MAAQ7B,EAChB4B","file":"p__Users__myProfile.9502dbf3.async.js","sourcesContent":["import React from 'react';\nimport { Image } from 'antd';\nimport type { ImageProps } from 'antd';\ndeclare const REACT_APP_API_URL: string;\n\ninterface ResponsiveImageProps extends ImageProps {\n  path: string;\n  size?: number;\n  srcSizes?: number[];\n  alt?: string;\n}\n\nconst ResponsiveImage: React.FC<ResponsiveImageProps> = ({\n  path,\n  size,\n  srcSizes,\n  alt = 'LMS Image',\n  ...props\n}) => {\n  const src = `${window.REACT_APP_API_URL || REACT_APP_API_URL}/api/images/img?path=${path}&w=${\n    srcSizes ? srcSizes[0] : size\n  }`;\n  const srcSet =\n    srcSizes &&\n    srcSizes.map(\n      (srcSize) =>\n        `${\n          window.REACT_APP_API_URL || REACT_APP_API_URL\n        }/api/images/img?path=${path}&w=${srcSize} ${srcSize}w`,\n    );\n\n  return (\n    <div className=\"escolalms-image\">\n      <Image src={src} srcSet={srcSet && srcSet.join(',')} alt={alt} {...props} />\n    </div>\n  );\n};\n\nexport default ResponsiveImage;\n","import React, { useState, useCallback } from 'react';\nimport { Modal, Button, Radio } from 'antd';\nimport { JsonEditor as Editor } from 'jsoneditor-react';\nimport { FormattedMessage } from 'umi';\nimport 'jsoneditor-react/es/editor.min.css';\n\ntype EditorMode = 'tree' | 'view' | 'form' | 'code' | 'text';\n\nexport const JsonEditor: React.FC<{\n  value?: string;\n  onChange?: (value: string) => void;\n}> = ({ value, onChange }) => {\n  const [isModalVisible, setIsModalVisible] = useState(false);\n\n  const hideModal = useCallback(() => {\n    setIsModalVisible(false);\n  }, []);\n\n  const [mode, setMode] = useState<EditorMode>('code');\n\n  return (\n    <div>\n      <Button type=\"primary\" onClick={() => setIsModalVisible(true)} size=\"small\">\n        <FormattedMessage id=\"json_editor\" />\n      </Button>\n      <Modal\n        title=\"JSON\"\n        open={isModalVisible}\n        onOk={hideModal}\n        onCancel={hideModal}\n        destroyOnClose\n      >\n        <Radio.Group onChange={(e) => setMode(e.target.value)} value={mode}>\n          <Radio value=\"tree\">tree</Radio>\n          <Radio value=\"view\">view</Radio>\n          <Radio value=\"form\">form</Radio>\n          <Radio value=\"code\">code</Radio>\n          <Radio value=\"text\">text</Radio>\n        </Radio.Group>\n        <Editor key={mode} mode={mode} value={value} onChange={onChange} />\n      </Modal>\n    </div>\n  );\n};\n\nexport default JsonEditor;\n","import JsonEditor from '@/components/JsonEditor';\nimport { FieldType } from '@/services/escola-lms/enums';\nimport ProForm, {\n  ProFormCheckbox,\n  ProFormDigit,\n  ProFormText,\n  ProFormTextArea,\n} from '@ant-design/pro-form';\nimport React from 'react';\nimport { FormattedMessage, getLocale, useIntl } from 'umi';\n\nconst AdditionalField: React.FC<{\n  field: API.ModelField;\n}> = ({ field }) => {\n  const intl = useIntl();\n  const getProperField = (f: API.ModelField) => {\n    const locale = getLocale();\n    const translatedLabel = f?.extra?.find((i: Record<string, string>) => i?.[locale])?.[locale];\n\n    switch (f.type) {\n      case FieldType.Number:\n        return (\n          <ProFormDigit\n            width=\"md\"\n            name={f.name}\n            label={translatedLabel ?? <FormattedMessage id={f.name} />}\n            tooltip={<FormattedMessage id={f.name} />}\n            placeholder={intl.formatMessage({\n              id: f.name,\n              defaultMessage: f.name,\n            })}\n            min={1}\n            max={1024}\n            fieldProps={{ step: 1 }}\n          />\n        );\n      case FieldType.Boolean:\n        return (\n          <ProFormCheckbox name={f.name}>\n            {translatedLabel ?? <FormattedMessage id={f.name} />}\n          </ProFormCheckbox>\n        );\n\n      case FieldType.Varchar:\n        return (\n          <ProFormText\n            width=\"md\"\n            name={f.name}\n            label={translatedLabel ?? <FormattedMessage id={f.name} />}\n            tooltip={<FormattedMessage id={f.name} />}\n            placeholder={intl.formatMessage({\n              id: f.name,\n            })}\n          />\n        );\n\n      case FieldType.Json:\n        return (\n          <ProForm.Item\n            name={f.name}\n            label={translatedLabel ?? <FormattedMessage id={f.name} />}\n            tooltip={<FormattedMessage id={f.name} />}\n            valuePropName=\"value\"\n          >\n            <JsonEditor />\n          </ProForm.Item>\n        );\n\n      case FieldType.Text:\n      default:\n        return (\n          <ProFormTextArea\n            width=\"md\"\n            name={f.name}\n            label={translatedLabel ?? <FormattedMessage id={f.name} />}\n            tooltip={<FormattedMessage id={f.name} />}\n            placeholder={intl.formatMessage({\n              id: f.name,\n            })}\n          />\n        );\n    }\n  };\n  return <>{getProperField(field)}</>;\n};\n\nexport default AdditionalField;\n","import React, { useEffect } from 'react';\nimport { Form } from 'antd';\nimport ProForm, { ProFormText, ModalForm } from '@ant-design/pro-form';\n\nimport { useIntl, FormattedMessage } from 'umi';\n\nexport const SettingsModalForm: React.FC<{\n  id?: number | false;\n  visible: boolean;\n  onVisibleChange: (visible: boolean) => void;\n  onFinish: (formData: API.UserSetting) => Promise<boolean | void>;\n}> = (props) => {\n  const intl = useIntl();\n\n  const { visible, onVisibleChange, onFinish } = props;\n\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    return () => {\n      form.resetFields();\n    };\n  }, []);\n\n  return (\n    <ModalForm\n      form={form}\n      title={intl.formatMessage({\n        id: 'newSetting',\n        defaultMessage: 'newSetting',\n      })}\n      width=\"30vw\"\n      visible={visible}\n      onVisibleChange={onVisibleChange}\n      onFinish={onFinish}\n    >\n      <ProForm.Group>\n        <ProFormText\n          label={<FormattedMessage id=\"key\" defaultMessage=\"key\" />}\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n          width=\"md\"\n          name=\"key\"\n        />\n        <ProFormText\n          label={<FormattedMessage id=\"value\" defaultMessage=\"value\" />}\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n          width=\"md\"\n          name=\"value\"\n        />\n      </ProForm.Group>\n    </ModalForm>\n  );\n};\n\nexport default SettingsModalForm;\n","import React, { useState, useRef, useCallback } from 'react';\nimport { useIntl, FormattedMessage } from 'umi';\nimport type { ProColumns, ActionType } from '@ant-design/pro-table';\nimport ProTable from '@ant-design/pro-table';\nimport { getUserSettings, setUserSettings } from '@/services/escola-lms/user';\nimport { Button } from 'antd';\nimport { PlusOutlined, InteractionOutlined } from '@ant-design/icons';\nimport UserSettingForm from './components/SettingModal';\n\nconst TableList: React.FC<{ user: string; isProfile: boolean }> = ({ user, isProfile = false }) => {\n  const actionRef = useRef<ActionType>();\n  const intl = useIntl();\n  const [modalVisible, setModalVisible] = useState<number | false>(false);\n  const [method, setMetod] = useState('PATCH');\n  const columns: ProColumns<API.UserSetting>[] = [\n    {\n      title: <FormattedMessage id=\"key\" defaultMessage=\"key\" />,\n      dataIndex: 'key',\n      hideInSearch: true,\n    },\n    {\n      title: <FormattedMessage id=\"value\" defaultMessage=\"value\" />,\n      dataIndex: 'value',\n      hideInSearch: true,\n    },\n  ];\n\n  const createEntries = useCallback(\n    (data: API.UserSetting) => {\n      const arr =\n        data &&\n        Object.entries(data).map((entry) => {\n          return {\n            key: entry[0],\n            value: entry[1],\n          };\n        });\n      return arr;\n    },\n    [user],\n  );\n\n  return (\n    <React.Fragment>\n      <ProTable<API.UserSetting, API.PageParams>\n        headerTitle={intl.formatMessage({\n          id: 'menu.settings',\n        })}\n        actionRef={actionRef}\n        rowKey=\"id\"\n        search={false}\n        toolBarRender={\n          isProfile\n            ? () => [\n                <Button\n                  type=\"primary\"\n                  key=\"primary\"\n                  onClick={() => {\n                    setModalVisible(-1);\n                    setMetod('PATCH');\n                  }}\n                >\n                  <PlusOutlined /> <FormattedMessage id=\"pages.searchTable.new\" />\n                </Button>,\n                <Button\n                  color=\"yellow\"\n                  type=\"primary\"\n                  key=\"primary\"\n                  onClick={() => {\n                    setModalVisible(-1);\n                    setMetod('PUT');\n                  }}\n                >\n                  <InteractionOutlined /> <FormattedMessage id=\"user.settings.overwrite\" />\n                </Button>,\n              ]\n            : false\n        }\n        request={() => {\n          return getUserSettings(Number(user)).then((response) => {\n            if (response.success) {\n              return {\n                data: createEntries(response.data),\n              };\n            }\n            return [];\n          });\n        }}\n        columns={columns}\n      />\n      <UserSettingForm\n        id={modalVisible}\n        visible={Number.isInteger(modalVisible)}\n        onVisibleChange={(value) => {\n          return value === false && setModalVisible(false);\n        }}\n        onFinish={async (value) => {\n          const request = await setUserSettings(Number(user), method, value);\n\n          if (request.success) {\n            setModalVisible(false);\n\n            if (actionRef.current) {\n              actionRef.current.reload();\n            }\n          }\n        }}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default TableList;\n","import { useMemo, useState, useEffect } from 'react';\nimport { message, Spin } from 'antd';\nimport ProForm, { ProFormText } from '@ant-design/pro-form';\nimport ProCard from '@ant-design/pro-card';\nimport { profile, updateProfile, updateProfilePassword } from '@/services/escola-lms/user';\nimport useModelFields from '@/hooks/useModelFields';\nimport { PageContainer } from '@ant-design/pro-layout';\nimport ResponsiveImage from '@/components/ResponsiveImage';\nimport { useIntl, useParams, FormattedMessage, history } from 'umi';\nimport UserSettings from './User/settings';\nimport AdditionalField from './User/components/AdditionalField';\nimport SecureUploadBrowser from '@/components/SecureUpload/browser';\n\nexport default () => {\n  const params = useParams<{ tab?: string }>();\n  const intl = useIntl();\n  const { tab = 'general' } = params;\n  const additionalFields = useModelFields('EscolaLms\\\\Auth\\\\Models\\\\User');\n  const [data, setData] = useState<API.UserItem>();\n\n  useEffect(() => {\n    const fetch = async () => {\n      const response = await profile();\n      if (response.success) {\n        setData({\n          ...response.data,\n          bio: response.data.bio || '',\n        });\n      }\n    };\n\n    fetch();\n  }, []);\n\n  const formPropsGeneral = useMemo(\n    () => ({\n      onFinish: async (values: API.UserItem) => {\n        const response: API.DefaultResponse<API.UserItem> = await updateProfile(values);\n        message.success(response.message);\n      },\n      initialValues: data,\n    }),\n    [data],\n  );\n\n  const formPropsChangePassword = useMemo(\n    () => ({\n      onFinish: async (values: API.UserChangePassword) => {\n        const response: API.DefaultResponse<API.UserChangePassword> = await updateProfilePassword(\n          values,\n        );\n        message.success(response.message);\n      },\n      initialValues: data,\n    }),\n    [data],\n  );\n\n  if (!data) {\n    return <Spin />;\n  }\n\n  return (\n    <PageContainer\n      title={<FormattedMessage id=\"my_profile\" />}\n      header={{\n        breadcrumb: {\n          routes: [\n            {\n              path: 'my-profile',\n              breadcrumbName: intl.formatMessage({\n                id: 'my_profile',\n              }),\n            },\n            {\n              path: String(tab),\n              breadcrumbName: intl.formatMessage({\n                id: String(tab),\n              }),\n            },\n          ],\n        },\n      }}\n    >\n      <ProCard\n        tabs={{\n          type: 'card',\n          activeKey: tab,\n          onChange: (key) => history.push(`/my-profile/${key}`),\n        }}\n      >\n        <ProCard.TabPane key=\"general\" tab={<FormattedMessage id=\"general\" />}>\n          <ProForm {...formPropsGeneral}>\n            <ProForm.Group>\n              <ProFormText\n                width=\"md\"\n                name=\"first_name\"\n                label={<FormattedMessage id=\"first_name\" />}\n                tooltip={<FormattedMessage id=\"first_name\" />}\n                placeholder={intl.formatMessage({\n                  id: 'first_name',\n                })}\n                required\n              />\n              <ProFormText\n                width=\"md\"\n                name=\"last_name\"\n                label={<FormattedMessage id=\"last_name\" />}\n                tooltip={<FormattedMessage id=\"last_name\" />}\n                placeholder={intl.formatMessage({\n                  id: 'last_name',\n                })}\n                required\n              />\n            </ProForm.Group>\n            <ProForm.Group>\n              {additionalFields.state === 'loaded' &&\n                additionalFields.list.map((field) => (\n                  <AdditionalField key={field.id} field={field} />\n                ))}\n            </ProForm.Group>\n\n            <ProForm.Group>\n              <ProForm.Item name=\"avatar\" label={<FormattedMessage id=\"avatar\" />}>\n                {data.path_avatar && (\n                  <ResponsiveImage path={data.path_avatar} size={600} width={200} />\n                )}\n\n                <SecureUploadBrowser\n                  folder={`avatars/${data.id}`}\n                  url=\"/api/profile/upload-avatar\"\n                  name=\"avatar\"\n                  accept=\"image/*\"\n                  onUpload={(response) => {\n                    if (response.success) {\n                      // TODO refresh avatar here\n                    }\n                  }}\n                />\n              </ProForm.Item>\n            </ProForm.Group>\n          </ProForm>\n        </ProCard.TabPane>\n        <ProCard.TabPane key=\"change_password\" tab={<FormattedMessage id=\"change_password\" />}>\n          <ProForm {...formPropsChangePassword}>\n            <ProForm.Group>\n              <ProFormText.Password\n                width=\"md\"\n                name=\"current_password\"\n                label={<FormattedMessage id=\"current_password\" />}\n                placeholder={intl.formatMessage({\n                  id: 'current_password',\n                })}\n                required\n              />\n            </ProForm.Group>\n            <ProForm.Group>\n              <ProFormText.Password\n                width=\"md\"\n                name=\"new_password\"\n                label={<FormattedMessage id=\"new_password\" />}\n                placeholder={intl.formatMessage({\n                  id: 'new_password',\n                })}\n                required\n              />\n              <ProFormText.Password\n                width=\"md\"\n                name=\"new_confirm_password\"\n                label={<FormattedMessage id=\"new_confirm_password\" />}\n                placeholder={intl.formatMessage({\n                  id: 'new_confirm_password',\n                })}\n                required\n              />\n            </ProForm.Group>\n          </ProForm>\n        </ProCard.TabPane>\n        <ProCard.TabPane key=\"user_settings\" tab={<FormattedMessage id=\"user.settings\" />}>\n          <UserSettings user={String(data.id)} isProfile />\n        </ProCard.TabPane>\n      </ProCard>\n    </PageContainer>\n  );\n};\n","import \"antd/es/checkbox/style\";\nimport _Checkbox from \"antd/es/checkbox\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"options\", \"fieldProps\", \"proFieldProps\", \"valueEnum\"];\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { runFunction } from '@ant-design/pro-utils';\nimport React from 'react';\nimport { createField } from '../../BaseForm/createField';\nimport ProFormField from '../Field';\nvar CheckboxGroup = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var options = _ref.options,\n      fieldProps = _ref.fieldProps,\n      proFieldProps = _ref.proFieldProps,\n      valueEnum = _ref.valueEnum,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  return _jsx(ProFormField, _objectSpread({\n    ref: ref,\n    valueType: \"checkbox\",\n    valueEnum: runFunction(valueEnum, undefined),\n    fieldProps: _objectSpread({\n      options: options\n    }, fieldProps),\n    lightProps: _objectSpread({\n      labelFormatter: function labelFormatter() {\n        return _jsx(ProFormField, _objectSpread({\n          ref: ref,\n          valueType: \"checkbox\",\n          mode: \"read\",\n          valueEnum: runFunction(valueEnum, undefined),\n          filedConfig: {\n            customLightMode: true\n          },\n          fieldProps: _objectSpread({\n            options: options\n          }, fieldProps),\n          proFieldProps: proFieldProps\n        }, rest));\n      }\n    }, rest.lightProps),\n    proFieldProps: proFieldProps\n  }, rest));\n});\n/**\n * 多选框的\n *\n * @param\n */\n\nvar ProFormCheckboxComponents = /*#__PURE__*/React.forwardRef(function (_ref2, ref) {\n  var fieldProps = _ref2.fieldProps,\n      children = _ref2.children;\n  return _jsx(_Checkbox, _objectSpread(_objectSpread({\n    ref: ref\n  }, fieldProps), {}, {\n    children: children\n  }));\n});\nvar ProFormCheckbox = createField(ProFormCheckboxComponents, {\n  valuePropName: 'checked'\n});\nvar WrappedProFormCheckbox = ProFormCheckbox;\nWrappedProFormCheckbox.Group = CheckboxGroup;\nexport default WrappedProFormCheckbox;"],"sourceRoot":""}