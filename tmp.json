"# Dependency scanning details \n|ID|severity|details|location|\n|------|------|------|------|\n|0|High|body-parser <1.20.3 is vulnerable to denial of service when url encoding is enabled. A malicious actor using a specially crafted payload could flood the server with a large number of requests, resulting in denial of service.|{\"file\":\"yarn.lock\",\"dependency\":{\"package\":{\"name\":\"body-parser\"},\"version\":\"1.20.2\"}}\n|1|High|Versions of the package cross-spawn before 7.0.5 are vulnerable to Regular Expression Denial of Service (ReDoS) due to improper input sanitization. An attacker can increase the CPU usage and crash the program by crafting a very large and well crafted string.|{\"file\":\"yarn.lock\",\"dependency\":{\"package\":{\"name\":\"cross-spawn\"},\"version\":\"7.0.3\"}}\n|2|High|In certain cases, `path-to-regexp` will output a regular expression that can be exploited to cause poor performance.|{\"file\":\"yarn.lock\",\"dependency\":{\"package\":{\"name\":\"path-to-regexp\"},\"version\":\"0.1.7\"}}\n|3|High|In certain cases, `path-to-regexp` will output a regular expression that can be exploited to cause poor performance.|{\"file\":\"yarn.lock\",\"dependency\":{\"package\":{\"name\":\"path-to-regexp\"},\"version\":\"0.2.5\"}}\n|4|High|In certain cases, `path-to-regexp` will output a regular expression that can be exploited to cause poor performance.|{\"file\":\"yarn.lock\",\"dependency\":{\"package\":{\"name\":\"path-to-regexp\"},\"version\":\"3.2.0\"}}\n|5|Medium|In express <4.20.0, passing untrusted user input - even after sanitizing it - to `response.redirect()` may execute untrusted code|{\"file\":\"yarn.lock\",\"dependency\":{\"package\":{\"name\":\"express\"},\"version\":\"4.19.2\"}}\n|6|Medium|The NPM package `micromatch` prior to version 4.0.8 is vulnerable to Regular Expression Denial of Service (ReDoS). The vulnerability occurs in `micromatch.braces()` in `index.js` because the pattern `.*` will greedily match anything. By passing a malicious payload, the pattern matching will keep backtracking to the input while it doesn't find the closing bracket. As the input size increases, the consumption time will also increase until it causes the application to hang or slow down. There was a merged fix but further testing shows the issue persisted prior to https://github.com/micromatch/micromatch/pull/266. This issue should be mitigated by using a safe pattern that won't start backtracking the regular expression due to greedy matching.|{\"file\":\"yarn.lock\",\"dependency\":{\"package\":{\"name\":\"micromatch\"},\"version\":\"4.0.5\"}}\n|7|Medium|passing untrusted user input - even after sanitizing it - to `SendStream.redirect()` may execute untrusted code|{\"file\":\"yarn.lock\",\"dependency\":{\"package\":{\"name\":\"send\"},\"version\":\"0.18.0\"}}\n|8|Medium|passing untrusted user input - even after sanitizing it - to `redirect()` may execute untrusted code|{\"file\":\"yarn.lock\",\"dependency\":{\"package\":{\"name\":\"serve-static\"},\"version\":\"1.15.0\"}}\n|9|Medium|We discovered a DOM Clobbering vulnerability in Webpack’s `AutoPublicPathRuntimeModule`. The DOM Clobbering gadget in the module can lead to cross-site scripting (XSS) in web pages where scriptless attacker-controlled HTML elements (e.g., an `img` tag with an unsanitized `name` attribute) are present.We found the real-world exploitation of this gadget in the Canvas LMS which allows XSS attack happens through an javascript code compiled by Webpack (the vulnerable part is from Webpack). We believe this is a severe issue. If Webpack’s code is not resilient to DOM Clobbering attacks, it could lead to significant security vulnerabilities in any web application using Webpack-compiled code.|{\"file\":\"yarn.lock\",\"dependency\":{\"package\":{\"name\":\"webpack\"},\"version\":\"5.88.2\"}}\n|10|Unknown|The cookie name could be used to set other fields of the cookie, resulting in an unexpected cookie value. For example, `serialize(\"userName=<script>alert('XSS3')</script>; Max-Age=2592000; a\", value)` would result in `\"userName=<script>alert('XSS3')</script>; Max-Age=2592000; a=test\"`, setting `userName` cookie to `<script>` and ignoring `value`.A similar escape can be used for `path` and `domain`, which could be abused to alter other fields of the cookie.|{\"file\":\"yarn.lock\",\"dependency\":{\"package\":{\"name\":\"cookie\"},\"version\":\"0.4.1\"}}\n|11|Unknown|The cookie name could be used to set other fields of the cookie, resulting in an unexpected cookie value. For example, `serialize(\"userName=<script>alert('XSS3')</script>; Max-Age=2592000; a\", value)` would result in `\"userName=<script>alert('XSS3')</script>; Max-Age=2592000; a=test\"`, setting `userName` cookie to `<script>` and ignoring `value`.A similar escape can be used for `path` and `domain`, which could be abused to alter other fields of the cookie.|{\"file\":\"yarn.lock\",\"dependency\":{\"package\":{\"name\":\"cookie\"},\"version\":\"0.6.0\"}}"
"# Dependency scanning details \n|ID|severity|details|location|\n|------|------|------|------|\n|0|High|body-parser <1.20.3 is vulnerable to denial of service when url encoding is enabled. A malicious actor using a specially crafted payload could flood the server with a large number of requests, resulting in denial of service.|{\"file\":\"yarn.lock\",\"dependency\":{\"package\":{\"name\":\"body-parser\"},\"version\":\"1.20.2\"}}\n|1|High|Versions of the package cross-spawn before 7.0.5 are vulnerable to Regular Expression Denial of Service (ReDoS) due to improper input sanitization. An attacker can increase the CPU usage and crash the program by crafting a very large and well crafted string.|{\"file\":\"yarn.lock\",\"dependency\":{\"package\":{\"name\":\"cross-spawn\"},\"version\":\"7.0.3\"}}\n|2|High|In certain cases, `path-to-regexp` will output a regular expression that can be exploited to cause poor performance.|{\"file\":\"yarn.lock\",\"dependency\":{\"package\":{\"name\":\"path-to-regexp\"},\"version\":\"0.1.7\"}}\n|3|High|In certain cases, `path-to-regexp` will output a regular expression that can be exploited to cause poor performance.|{\"file\":\"yarn.lock\",\"dependency\":{\"package\":{\"name\":\"path-to-regexp\"},\"version\":\"0.2.5\"}}\n|4|High|In certain cases, `path-to-regexp` will output a regular expression that can be exploited to cause poor performance.|{\"file\":\"yarn.lock\",\"dependency\":{\"package\":{\"name\":\"path-to-regexp\"},\"version\":\"3.2.0\"}}\n|5|Medium|In express <4.20.0, passing untrusted user input - even after sanitizing it - to `response.redirect()` may execute untrusted code|{\"file\":\"yarn.lock\",\"dependency\":{\"package\":{\"name\":\"express\"},\"version\":\"4.19.2\"}}\n|6|Medium|The NPM package `micromatch` prior to version 4.0.8 is vulnerable to Regular Expression Denial of Service (ReDoS). The vulnerability occurs in `micromatch.braces()` in `index.js` because the pattern `.*` will greedily match anything. By passing a malicious payload, the pattern matching will keep backtracking to the input while it doesn't find the closing bracket. As the input size increases, the consumption time will also increase until it causes the application to hang or slow down. There was a merged fix but further testing shows the issue persisted prior to https://github.com/micromatch/micromatch/pull/266. This issue should be mitigated by using a safe pattern that won't start backtracking the regular expression due to greedy matching.|{\"file\":\"yarn.lock\",\"dependency\":{\"package\":{\"name\":\"micromatch\"},\"version\":\"4.0.5\"}}\n|7|Medium|passing untrusted user input - even after sanitizing it - to `SendStream.redirect()` may execute untrusted code|{\"file\":\"yarn.lock\",\"dependency\":{\"package\":{\"name\":\"send\"},\"version\":\"0.18.0\"}}\n|8|Medium|passing untrusted user input - even after sanitizing it - to `redirect()` may execute untrusted code|{\"file\":\"yarn.lock\",\"dependency\":{\"package\":{\"name\":\"serve-static\"},\"version\":\"1.15.0\"}}\n|9|Medium|We discovered a DOM Clobbering vulnerability in Webpack’s `AutoPublicPathRuntimeModule`. The DOM Clobbering gadget in the module can lead to cross-site scripting (XSS) in web pages where scriptless attacker-controlled HTML elements (e.g., an `img` tag with an unsanitized `name` attribute) are present.We found the real-world exploitation of this gadget in the Canvas LMS which allows XSS attack happens through an javascript code compiled by Webpack (the vulnerable part is from Webpack). We believe this is a severe issue. If Webpack’s code is not resilient to DOM Clobbering attacks, it could lead to significant security vulnerabilities in any web application using Webpack-compiled code.|{\"file\":\"yarn.lock\",\"dependency\":{\"package\":{\"name\":\"webpack\"},\"version\":\"5.88.2\"}}\n|10|Unknown|The cookie name could be used to set other fields of the cookie, resulting in an unexpected cookie value. For example, `serialize(\"userName=<script>alert('XSS3')</script>; Max-Age=2592000; a\", value)` would result in `\"userName=<script>alert('XSS3')</script>; Max-Age=2592000; a=test\"`, setting `userName` cookie to `<script>` and ignoring `value`.A similar escape can be used for `path` and `domain`, which could be abused to alter other fields of the cookie.|{\"file\":\"yarn.lock\",\"dependency\":{\"package\":{\"name\":\"cookie\"},\"version\":\"0.4.1\"}}\n|11|Unknown|The cookie name could be used to set other fields of the cookie, resulting in an unexpected cookie value. For example, `serialize(\"userName=<script>alert('XSS3')</script>; Max-Age=2592000; a\", value)` would result in `\"userName=<script>alert('XSS3')</script>; Max-Age=2592000; a=test\"`, setting `userName` cookie to `<script>` and ignoring `value`.A similar escape can be used for `path` and `domain`, which could be abused to alter other fields of the cookie.|{\"file\":\"yarn.lock\",\"dependency\":{\"package\":{\"name\":\"cookie\"},\"version\":\"0.6.0\"}}"
