{"version":3,"sources":["webpack:///./src/components/H5P/editor.tsx","webpack:///./src/components/H5P/card.tsx","webpack:///./src/services/escola-lms/h5p.ts","webpack:///./src/pages/H5P/form.tsx","webpack:///./src/components/H5P/player.tsx"],"names":["Editor","id","onSubmitted","onLoaded","useState","settings","setEditorSettings","loading","setLoading","error","setError","intl","useIntl","lang","locale","split","useEffect","editorSettings","undefined","then","data","success","message","catch","err","toString","finally","onSubmit","useCallback","updateContent","responseData","console","Card","defaultCard","type","defaultActiveKey","params","options","request","method","url","contentSettings","body","headers","useParams","h5p","title","setTitle","breadcrumb","routes","path","breadcrumbName","formatMessage","contents","history","push","Number","Title","Player","onXAPI","XAPIEvents","setXAPIEvents","event","prevState","overflow","maxHeight"],"mappings":"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","file":"p__H5P__form.eacb2242.async.js","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { editorSettings, updateContent } from '@/services/escola-lms/h5p';\nimport { ContextlessEditor } from '@escolalms/h5p-react';\nimport type { EditorSettings, H5PEditorContent } from '@escolalms/h5p-react';\n\nimport { useIntl, FormattedMessage } from 'umi';\nimport { Col, Row, Spin, Alert, message } from 'antd';\n\nexport const Editor: React.FC<{\n  id: 'new' | number;\n  onSubmitted: (id: number) => void;\n  onLoaded?: (settings: API.H5PObject) => void;\n}> = ({ id, onSubmitted, onLoaded }) => {\n  const [settings, setEditorSettings] = useState<EditorSettings>();\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string>();\n\n  const intl = useIntl();\n  const lang = intl.locale.split('-')[0];\n\n  useEffect(() => {\n    if (id) {\n      setLoading(true);\n      editorSettings(id === 'new' ? undefined : id, lang)\n        .then((data) => {\n          if (data.success) {\n            if (onLoaded) {\n              onLoaded(data.data);\n            }\n            setEditorSettings(data.data);\n          } else {\n            setError(data.message);\n          }\n        })\n        .catch((err: any) => err && setError(err.toString()))\n        .finally(() => setLoading(false));\n    }\n  }, [id]);\n\n  const onSubmit = useCallback((data: H5PEditorContent) => {\n    setLoading(true);\n    updateContent(data, id === 'new' ? undefined : id)\n      .then((responseData) => {\n        if (responseData.success) {\n          onSubmitted(responseData.data.id);\n          message.success(\n            <FormattedMessage\n              id=\"h5p_edited\"\n              defaultMessage=\"H5P Element edited and saved successfully\"\n            />,\n          );\n        } else {\n          setError(responseData.message);\n        }\n      })\n      .catch((err: any) => err && setError(err.toString()))\n      .finally(() => setLoading(false));\n  }, []);\n\n  if (!settings) {\n    return (\n      <Col>\n        <Row justify=\"center\" align=\"middle\">\n          {error && <Alert message={error} type=\"error\" />}\n          <Spin />\n        </Row>\n      </Col>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      {error && <Alert message={error} type=\"error\" />}\n\n      {settings && (\n        <ContextlessEditor\n          onError={(err: unknown) => console.error(err)}\n          state={settings}\n          allowSameOrigin\n          onSubmit={onSubmit}\n          loading={loading}\n          lang={lang}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default Editor;\n","import ProCard from '@ant-design/pro-card';\nimport { FormattedMessage } from 'umi';\n\nimport Editor from './editor';\nimport Player from './player';\n\nconst Card: React.FC<{\n  defaultCard?: 'edit' | 'preview';\n  id: 'new' | number;\n  onSubmit: (id: number) => void;\n  onLoaded?: (settings: API.H5PObject) => void;\n}> = ({ defaultCard = 'edit', id, onSubmit, onLoaded }) => {\n  return (\n    <ProCard\n      tabs={{\n        type: 'card',\n        defaultActiveKey: defaultCard,\n      }}\n    >\n      <ProCard.TabPane key=\"edit\" disabled={!id} tab={<FormattedMessage id=\"edit\" />}>\n        <Editor key={id} id={id} onSubmitted={onSubmit} onLoaded={onLoaded} />\n      </ProCard.TabPane>\n      {id !== 'new' && (\n        <ProCard.TabPane key=\"preview\" disabled={!id} tab={<FormattedMessage id=\"preview\" />}>\n          <Player id={id} onLoaded={onLoaded} />\n        </ProCard.TabPane>\n      )}\n    </ProCard>\n  );\n};\n\nexport default Card;\n","import { request } from 'umi';\nimport type { RequestOptionsInit } from 'umi-request';\n\nexport async function h5p(params: API.H5PListParams, options?: RequestOptionsInit) {\n  return request<API.DefaultMetaResponse<API.H5PContentListItem>>(`/api/admin/hh5p/content`, {\n    method: 'GET',\n    params,\n    ...(options || {}),\n  });\n}\n\nexport async function getH5p(id: number, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.H5PObject>>(`/api/admin/hh5p/content/${id}`, {\n    method: 'GET',\n    ...(options || {}),\n  });\n}\n\nexport const editorSettings = (\n  id?: string | number,\n  lang: string = 'en',\n  options?: RequestOptionsInit,\n) => {\n  let url: string = id ? `/api/admin/hh5p/editor/${id}` : `/api/admin/hh5p/editor`;\n  url = lang ? `${url}?lang=${lang}` : url;\n  return request<API.DefaultResponse<API.H5PObject>>(url, {\n    method: 'GET',\n    ...(options || {}),\n  });\n};\n\nexport const contentSettings = (\n  id?: string | number,\n  lang: string = 'en',\n  options?: RequestOptionsInit,\n) => {\n  let url: string = `/api/admin/hh5p/content/${id}`;\n  url = lang ? `${url}?lang=${lang}` : url;\n  return request<API.DefaultResponse<API.H5PObject>>(url, {\n    method: 'GET',\n    ...(options || {}),\n  });\n};\n\nexport async function updateContent(\n  body: any,\n  id?: number | string | undefined,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<{ id: number }>>(\n    id ? `/api/admin/hh5p/content/${id}` : `/api/admin/hh5p/content`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      data: body,\n      ...(options || {}),\n    },\n  );\n}\n\nexport async function removeH5P(id: number) {\n  return request<API.DefaultResponse<unknown>>(`/api/admin/hh5p/content/${id}`, {\n    method: 'DELETE',\n  });\n}\n\nexport async function allContent(options?: RequestOptionsInit) {\n  return request<API.DefaultMetaResponse<API.H5PContentListItem>>(\n    '/api/admin/hh5p/content?per_page=0',\n    {\n      method: 'GET',\n      ...(options || {}),\n    },\n  );\n}\n","import { useState } from 'react';\nimport { useParams, history } from 'umi';\nimport { FormattedMessage, useIntl } from 'umi';\n\nimport H5PCard from '@/components/H5P/card';\nimport { PageContainer } from '@ant-design/pro-layout';\n\nexport default () => {\n  const params = useParams<{ h5p?: string }>();\n  const intl = useIntl();\n\n  const { h5p } = params;\n  const [title, setTitle] = useState<string>('');\n  return (\n    <PageContainer\n      title={\n        <>\n          {title ? (\n            <FormattedMessage id=\"H5P_edit_content_title\" />\n          ) : (\n            <FormattedMessage id=\"H5P_new_content_title\" />\n          )}\n\n          {` ${title}`}\n        </>\n      }\n      header={{\n        breadcrumb: {\n          routes: [\n            {\n              path: 'h5ps',\n              breadcrumbName: intl.formatMessage({\n                id: 'H5P',\n              }),\n            },\n            {\n              path: title,\n              breadcrumbName: intl.formatMessage({\n                id: 'form',\n              }),\n            },\n          ],\n        },\n      }}\n    >\n      <H5PCard\n        onLoaded={(data) => {\n          const contents = data.contents && data.contents[`cid-${h5p}`];\n          if (contents && contents.title) {\n            setTitle(contents.title);\n          }\n        }}\n        onSubmit={(id) => h5p === 'new' && history.push(`/courses/h5ps/${id}`)}\n        id={h5p === 'new' || !h5p ? 'new' : Number(h5p)}\n      />\n    </PageContainer>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { contentSettings } from '@/services/escola-lms/h5p';\nimport { ContextlessPlayer } from '@escolalms/h5p-react';\nimport type { EditorSettings } from '@escolalms/h5p-react';\nimport { useIntl } from 'umi';\nimport { Col, Row, Spin, Alert } from 'antd';\nimport ReactJson from 'react-json-view';\nimport { Divider, Typography } from 'antd';\nconst { Title } = Typography;\nimport type { XAPIEvent } from '@escolalms/h5p-react';\n\nexport const Player: React.FC<{\n  id: 'new' | number;\n  onXAPI?: (event: XAPIEvent) => void;\n  onLoaded?: (settings: API.H5PObject) => void;\n}> = ({ id, onXAPI, onLoaded }) => {\n  const [settings, setEditorSettings] = useState<EditorSettings>();\n  const [loading, setLoading] = useState<boolean>(false);\n  const [XAPIEvents, setXAPIEvents] = useState<XAPIEvent[]>([]);\n  const [error, setError] = useState<string>();\n\n  const intl = useIntl();\n  const lang = intl.locale.split('-')[0];\n\n  useEffect(() => {\n    if (id) {\n      setLoading(true);\n      contentSettings(id, lang)\n        .then((data) => {\n          if (data.success) {\n            if (onLoaded) {\n              onLoaded(data.data);\n            }\n            setEditorSettings(data.data);\n          } else {\n            setError(data.message);\n          }\n        })\n        .catch((err: any) => err && setError(err.toString()))\n        .finally(() => setLoading(false));\n    }\n  }, [id]);\n\n  if (!settings) {\n    return (\n      <Col>\n        <Row justify=\"center\" align=\"middle\">\n          {error && <Alert message={error} type=\"error\" />}\n          <Spin />\n        </Row>\n      </Col>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      {error && <Alert message={error} type=\"error\" />}\n      <ContextlessPlayer\n        contentId={id}\n        onError={(err: unknown) => console.error(err)}\n        state={settings}\n        allowSameOrigin\n        loading={loading}\n        onXAPI={(event: XAPIEvent) => {\n          if (onXAPI) {\n            onXAPI(event);\n          } else {\n            setXAPIEvents((prevState) => [...prevState, event]);\n          }\n        }}\n      />\n\n      {!onXAPI && (\n        <React.Fragment>\n          <Divider />\n          <div style={{ overflow: 'auto', maxHeight: '400px' }}>\n            <Title level={5}>XAPI Events</Title>\n            <ReactJson src={XAPIEvents} />\n          </div>\n        </React.Fragment>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default Player;\n"],"sourceRoot":""}