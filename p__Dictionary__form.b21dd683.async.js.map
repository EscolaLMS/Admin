{"version":3,"file":"p__Dictionary__form.b21dd683.async.js","mappings":"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","sources":["webpack://ant-design-pro/./src/components/SecureUpload/index.tsx","webpack://ant-design-pro/./src/hooks/usePermissions.ts","webpack://ant-design-pro/./src/pages/Dictionary/components/DictionaryWords/index.tsx","webpack://ant-design-pro/./src/pages/Dictionary/form.tsx"],"sourcesContent":["import { ProFormUploadButton } from '@ant-design/pro-form';\nimport type { FormProps } from 'antd';\nimport { Form } from 'antd';\nimport type { UploadChangeParam } from 'antd/lib/upload';\nimport type { UploadFile } from 'antd/lib/upload/interface';\nimport ConditionalWrap from 'conditional-wrap';\nimport type { PropsWithChildren } from 'react';\nimport { useState } from 'react';\nimport { FormattedMessage, useIntl } from 'umi';\ndeclare const REACT_APP_API_URL: string;\n\nexport type SecureUploadType<T = API.File> = {\n  url: string;\n  name: string;\n  extra?: string;\n  onChange?: (info: UploadChangeParam<UploadFile<API.DefaultResponse<T>>>) => void;\n  onUpload?: (response: API.DefaultResponse<T>) => void;\n  on?: (info: UploadChangeParam<UploadFile<API.DefaultResponse<T>>>) => void;\n  accept?: string;\n  data?: Record<string, any>;\n  wrapInForm?: boolean;\n  title?: string;\n  formProps?: FormProps;\n  maxFiles?: number;\n  clearListAfterUpload?: boolean;\n  hideLabel?: boolean;\n  disabled?: boolean;\n  showUploadList?: boolean;\n};\n\nfunction SecureUpload<Type = API.File>({\n  onChange,\n  onUpload,\n  url,\n  name,\n  extra,\n  accept,\n  data,\n  wrapInForm = true,\n  title,\n  formProps,\n  maxFiles,\n  clearListAfterUpload,\n  hideLabel,\n  disabled,\n  showUploadList,\n}: PropsWithChildren<SecureUploadType<Type>>) {\n  const [infoState, setInfoState] = useState<UploadChangeParam<UploadFile<any>>>();\n  const intl = useIntl();\n\n  if (data && data[name]) {\n    // eslint-disable-next-line no-param-reassign\n    delete data[name];\n  }\n\n  return (\n    <ConditionalWrap\n      condition={wrapInForm}\n      wrap={(children: JSX.Element) => <Form {...formProps}>{children}</Form>}\n    >\n      <ProFormUploadButton\n        title={\n          title\n            ? title\n            : ` ${intl.formatMessage({\n                id: 'upload_click_here',\n              })}`\n        }\n        placeholder={intl.formatMessage({\n          id: 'upload_click_here',\n        })}\n        label={!hideLabel && <FormattedMessage id=\"upload\" />}\n        max={maxFiles ?? 2}\n        fieldProps={{\n          data,\n          accept,\n          name,\n          showUploadList,\n          headers: { Authorization: `Bearer ${localStorage.getItem('TOKEN')}` },\n          onChange: (info) => {\n            setInfoState(info);\n            if (onChange) {\n              onChange(info);\n            }\n            if (info.file.status === 'done') {\n              if (onUpload) {\n                onUpload(info.file.response);\n              }\n              if (clearListAfterUpload) {\n                setInfoState(undefined);\n              }\n            }\n          },\n        }}\n        action={`${window.REACT_APP_API_URL || REACT_APP_API_URL}${url}`}\n        extra={extra}\n        fileList={infoState?.fileList}\n        disabled={disabled}\n      />\n    </ConditionalWrap>\n  );\n}\n\nexport default SecureUpload;\n","import type PERMISSIONS from '@/consts/permissions';\nimport { useCallback } from 'react';\nimport { useModel } from 'umi';\n\nexport const usePermissions = () => {\n  const { initialState } = useModel('@@initialState');\n  const userPermissions = initialState?.currentUser?.permissions || [];\n\n  const checkPermission = useCallback(\n    (userPermission: PERMISSIONS): boolean => {\n      if (Array.isArray(userPermissions)) {\n        return !!userPermissions?.find((role) => role.includes(userPermission));\n      }\n      return false;\n    },\n    [userPermissions],\n  );\n\n  return {\n    checkPermission,\n  };\n};\n","import SecureUpload from '@/components/SecureUpload';\nimport PERMISSIONS from '@/consts/permissions';\nimport { usePermissions } from '@/hooks/usePermissions';\nimport { DictionaryWordsTabNames } from '@/pages/Dictionary/components/DictionaryWords/form';\nimport { deleteDictionaryWord, dictionaryWords } from '@/services/escola-lms/dictionary';\nimport { createTableOrderObject } from '@/utils/utils';\nimport { DeleteOutlined, EditOutlined, PlusOutlined } from '@ant-design/icons';\nimport type { ActionType, ProColumns } from '@ant-design/pro-table';\nimport ProTable from '@ant-design/pro-table';\nimport { Button, Popconfirm, Tag, Tooltip, message } from 'antd';\nimport React, { useRef } from 'react';\nimport { FormattedMessage, Link, useIntl, useParams } from 'umi';\n\nconst handleRemove = async (id: number) => {\n  return deleteDictionaryWord(id).then((response) => {\n    if (response.success) {\n      message.success(response.message);\n    }\n    return true;\n  });\n};\n\nconst DictionaryWordsTableList: React.FC = () => {\n  const actionRef = useRef<ActionType>();\n  const intl = useIntl();\n  const params = useParams<{ dictionaryId?: string; tab?: string }>();\n  const { dictionaryId, tab } = params;\n  const { checkPermission } = usePermissions();\n\n  const columns: ProColumns<API.DictionaryWords>[] = [\n    {\n      title: <FormattedMessage id=\"ID\" defaultMessage=\"ID\" />,\n      dataIndex: 'id',\n      hideInSearch: true,\n      sorter: true,\n      width: '80px',\n    },\n    {\n      title: <FormattedMessage id=\"word\" defaultMessage=\"word\" />,\n      dataIndex: 'word',\n      sorter: true,\n    },\n    {\n      title: <FormattedMessage id=\"categories\" defaultMessage=\"categories\" />,\n      dataIndex: 'categories',\n      sorter: false,\n      hideInSearch: true,\n      render: (_, record) => (\n        <React.Fragment>\n          {record.categories?.map((category) => (\n            <Tag key={category.name}>{category.name}</Tag>\n          ))}\n        </React.Fragment>\n      ),\n    },\n    {\n      hideInSearch: true,\n      title: <FormattedMessage id=\"pages.searchTable.titleOption\" defaultMessage=\"option\" />,\n      dataIndex: 'option',\n      valueType: 'option',\n      width: 100,\n      render: (_, record) => [\n        <Link\n          to={`/other/dictionary/${dictionaryId}/${tab}/${record.id}/${DictionaryWordsTabNames.FORM}`}\n          key=\"edit\"\n        >\n          <Tooltip title={<FormattedMessage id=\"edit\" defaultMessage=\"edit\" />}>\n            <Button type=\"primary\" icon={<EditOutlined />} />\n          </Tooltip>\n        </Link>,\n        <Popconfirm\n          key=\"delete\"\n          title={\n            <FormattedMessage\n              id=\"deleteQuestion\"\n              defaultMessage=\"Are you sure to delete this record?\"\n            />\n          }\n          onConfirm={async () => {\n            const success = await handleRemove(record.id);\n            if (success) {\n              if (actionRef.current) {\n                actionRef.current.reload();\n              }\n            }\n          }}\n          okText={<FormattedMessage id=\"yes\" />}\n          cancelText={<FormattedMessage id=\"no\" />}\n        >\n          <Tooltip title={<FormattedMessage id=\"delete\" defaultMessage=\"delete\" />}>\n            <Button type=\"primary\" icon={<DeleteOutlined />} danger />\n          </Tooltip>\n        </Popconfirm>,\n      ],\n    },\n  ];\n\n  return (\n    <ProTable<API.DictionaryWords, API.DictionaryWordsParams>\n      headerTitle={intl.formatMessage({\n        id: 'words',\n        defaultMessage: 'Words',\n      })}\n      actionRef={actionRef}\n      rowKey=\"id\"\n      search={{\n        layout: 'vertical',\n      }}\n      toolBarRender={() => [\n        <Link\n          to={`/other/dictionary/${dictionaryId}/${tab}/new/${DictionaryWordsTabNames.FORM}`}\n          key=\"new\"\n        >\n          <Button type=\"primary\" key=\"primary\">\n            <PlusOutlined /> <FormattedMessage id=\"new\" defaultMessage=\"new\" />\n          </Button>\n        </Link>,\n        checkPermission(PERMISSIONS.DictionaryImport) ? (\n          <div className=\"import-dictionary\">\n            <SecureUpload\n              title={intl.formatMessage({\n                id: 'import_dictionary',\n                defaultMessage: 'Import dictionary',\n              })}\n              url=\"/api/admin/dictionary-words/import\"\n              name=\"file\"\n              accept=\".csv, .xlsx\"\n              data={{\n                dictionary_id: Number(dictionaryId),\n              }}\n              onChange={(info) => {\n                if (info.file.status === 'done') {\n                  if (info.file.response && info.file.response.success) {\n                    message.success(info.file.response.message);\n                    actionRef.current?.reload();\n                  }\n                }\n                if (info.file.response && info.file.status === 'error') {\n                  message.error(info.file.response.message);\n                  console.error(info.file.response);\n                }\n              }}\n              hideLabel\n              wrapInForm={false}\n              maxFiles={1}\n              clearListAfterUpload\n            />\n          </div>\n        ) : undefined,\n      ]}\n      request={({ pageSize, current, word }, sort) => {\n        return dictionaryWords({\n          per_page: pageSize,\n          page: current,\n          word,\n          dictionary_id: Number(dictionaryId),\n          ...createTableOrderObject(sort, 'created_at'),\n        }).then((response) => {\n          if (response.success) {\n            return {\n              data: response.data,\n              total: response.meta.total,\n              success: true,\n            };\n          }\n          return [];\n        });\n      }}\n      columns={columns}\n    />\n  );\n};\n\nexport default DictionaryWordsTableList;\n","import DictionaryWordsTableList from '@/pages/Dictionary/components/DictionaryWords';\nimport {\n  createDictionary,\n  getDictionary,\n  updateDictionary,\n} from '@/services/escola-lms/dictionary';\nimport ProCard from '@ant-design/pro-card';\nimport ProForm, { ProFormDigit, ProFormText } from '@ant-design/pro-form';\nimport { PageContainer } from '@ant-design/pro-layout';\nimport { Col, Row, Spin, message } from 'antd';\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport { FormattedMessage, history, useIntl, useParams } from 'umi';\n\ntype FormValues = {\n  name: string;\n  free_views_count: number;\n};\n\nexport enum DictionaryTabNames {\n  FORM = 'form',\n  WORDS = 'words',\n}\n\nexport default () => {\n  const intl = useIntl();\n  const params = useParams<{ dictionaryId?: string; tab?: string }>();\n  const { dictionaryId, tab } = params;\n  const isNew = dictionaryId === 'new';\n\n  const [data, setData] = useState<Partial<API.Dictionaries>>();\n  const [loading, setLoading] = useState(false);\n  const [form] = ProForm.useForm();\n\n  const fetchData = useCallback(async () => {\n    setLoading(true);\n    const response = await getDictionary(Number(dictionaryId));\n    if (response.success) {\n      setData(response.data);\n    }\n    setLoading(false);\n  }, [dictionaryId]);\n\n  useEffect(() => {\n    if (dictionaryId === 'new') {\n      setData({});\n      return;\n    }\n\n    fetchData();\n  }, [dictionaryId, fetchData]);\n\n  const formProps = useMemo(\n    () => ({\n      onFinish: async (values: FormValues) => {\n        let response: API.DefaultResponse<API.Dictionaries>;\n\n        if (dictionaryId === 'new') {\n          response = await createDictionary(values);\n          if (response.success) {\n            history.push(`/other/dictionary/${response.data.id}/form`);\n          }\n        } else {\n          response = await updateDictionary(Number(dictionaryId), values);\n        }\n\n        message.success(response.message);\n      },\n      initialValues: data,\n    }),\n    [data, dictionaryId],\n  );\n\n  if (!data) {\n    return <Spin />;\n  }\n\n  return (\n    <PageContainer\n      title={\n        isNew ? <FormattedMessage id=\"new_dictionary\" /> : <FormattedMessage id=\"edit_dictionary\" />\n      }\n    >\n      <ProCard\n        tabs={{\n          type: 'card',\n          activeKey: tab,\n          onChange: (key) => {\n            history.push(`/other/dictionary/${dictionaryId}/${key}`);\n          },\n        }}\n      >\n        <ProCard.TabPane key={DictionaryTabNames.FORM} tab={<FormattedMessage id=\"attributes\" />}>\n          <ProForm {...formProps} form={form}>\n            <Row gutter={[16, 16]}>\n              <Col xs={{ span: 24 }} md={{ span: 12 }}>\n                <ProFormText\n                  name=\"name\"\n                  label={<FormattedMessage id=\"name\" />}\n                  tooltip={<FormattedMessage id=\"name\" />}\n                  placeholder={intl.formatMessage({\n                    id: 'Name',\n                  })}\n                  required\n                />\n              </Col>\n              {!isNew && (\n                <Col xs={{ span: 24 }} md={{ span: 12 }}>\n                  <ProFormText\n                    name=\"slug\"\n                    label={<FormattedMessage id=\"slug\" />}\n                    placeholder={intl.formatMessage({\n                      id: 'slug',\n                    })}\n                    disabled\n                    required\n                  />\n                </Col>\n              )}\n              <Col xs={{ span: 24 }} md={{ span: 12 }}>\n                <ProFormDigit\n                  name=\"free_views_count\"\n                  label={<FormattedMessage id=\"free_views_count\" />}\n                  tooltip={<FormattedMessage id=\"free_views_count_tooltip\" />}\n                  placeholder={intl.formatMessage({\n                    id: 'Free views count',\n                  })}\n                  min={0}\n                />\n              </Col>\n            </Row>\n            {loading && <Spin />}\n          </ProForm>\n        </ProCard.TabPane>\n        <ProCard.TabPane\n          key={DictionaryTabNames.WORDS}\n          tab={<FormattedMessage id=\"words\" />}\n          disabled={isNew}\n        >\n          <DictionaryWordsTableList />\n        </ProCard.TabPane>\n      </ProCard>\n    </PageContainer>\n  );\n};\n"],"names":["SecureUpload","_ref","onChange","onUpload","url","name","extra","accept","data","_ref$wrapInForm","wrapInForm","title","formProps","maxFiles","clearListAfterUpload","hideLabel","disabled","showUploadList","_useState","useState","_useState2","_slicedToArray","infoState","setInfoState","intl","useIntl","_jsx","ConditionalWrap","condition","wrap","children","Form","_objectSpread","ProFormUploadButton","concat","formatMessage","id","placeholder","label","FormattedMessage","max","fieldProps","headers","Authorization","localStorage","getItem","info","file","status","response","undefined","action","window","REACT_APP_API_URL","fileList","usePermissions","_initialState$current","_useModel","useModel","initialState","userPermissions","currentUser","permissions","checkPermission","useCallback","userPermission","Array","isArray","find","role","includes","handleRemove","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_context","prev","next","abrupt","deleteDictionaryWord","then","success","message","stop","_x","apply","arguments","DictionaryWordsTableList","actionRef","useRef","params","useParams","dictionaryId","tab","_usePermissions","columns","defaultMessage","dataIndex","hideInSearch","sorter","width","render","_","record","_record$categories","React","categories","map","category","Tag","valueType","Link","to","DictionaryWordsTabNames","FORM","Tooltip","Button","type","icon","EditOutlined","Popconfirm","onConfirm","_callee2","_context2","sent","current","reload","okText","cancelText","DeleteOutlined","danger","ProTable","headerTitle","rowKey","search","layout","toolBarRender","_jsxs","PlusOutlined","PERMISSIONS","DictionaryImport","className","dictionary_id","Number","_actionRef$current","error","console","request","_ref3","sort","pageSize","word","dictionaryWords","per_page","page","createTableOrderObject","total","meta","DictionaryTabNames","isNew","setData","_useState3","_useState4","loading","setLoading","_ProForm$useForm","ProForm","useForm","_ProForm$useForm2","form","fetchData","getDictionary","useEffect","useMemo","onFinish","_onFinish","values","createDictionary","history","push","updateDictionary","initialValues","PageContainer","ProCard","tabs","activeKey","key","TabPane","Row","gutter","Col","xs","span","md","ProFormText","tooltip","required","ProFormDigit","min","Spin","WORDS"],"sourceRoot":""}