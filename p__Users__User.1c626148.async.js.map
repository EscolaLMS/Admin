{"version":3,"sources":["webpack:///./src/services/escola-lms/fields.ts","webpack:///./src/services/escola-lms/tracker.ts","webpack:///./src/components/LogsWidget/index.tsx","webpack:///./src/services/escola-lms/roles.ts","webpack:///./src/components/ResponsiveImage/index.tsx","webpack:///./src/components/CategoryCheckboxTree/index.tsx","webpack:///./src/hooks/useModelFields.ts","webpack:///./src/components/JsonEditor/index.tsx","webpack:///./src/pages/Users/User/components/AdditionalField.tsx","webpack:///./node_modules/@ant-design/pro-form/es/components/Checkbox/index.js","webpack:///./src/pages/Users/User/form.tsx","webpack:///./src/pages/Users/User/components/Categories.tsx","webpack:///./src/pages/Users/User/index.tsx"],"names":["params","options","request","method","body","data","useCache","per_page","pageSize","page","current","TableColumns","title","dataIndex","hideInSearch","sorter","width","hideInForm","hideInTable","valueType","fieldProps","allowEmpty","valueEnum","GET","POST","PUT","DELETE","PATCH","LogsWidget","useAsWidget","userID","actionRef","useRef","useState","loading","setLoading","intl","useIntl","formatMessage","id","defaultMessage","layout","sort","user_id","dateRange","path","sortArr","Object","entries","date_from","format","Date","DATETIME_FORMAT","undefined","date_to","track","order_by","order","then","response","success","total","meta","key","renderFormItem","item","form","type","defaultRender","rest","stateType","getFieldValue","render","_","record","user","headers","name","ResponsiveImage","size","srcSizes","alt","props","src","window","REACT_APP_API_URL","srcSet","map","srcSize","join","treeConvert","category","subcategories","length","children","cat","CategoryCheckboxTree","value","onChange","multiple","categories","setCategories","useEffect","categoryTree","treeData","useMemo","keys","Array","isArray","checked","checkedKeys","useModelFields","class_type","state","setState","fetchFields","list","JsonEditor","isModalVisible","setIsModalVisible","hideModal","useCallback","mode","setMode","e","target","newValue","AdditionalField","field","getProperField","f","gl","extra","find","getLocale","step","_excluded","CheckboxGroup","React","forwardRef","_ref","ref","proFieldProps","_objectWithoutProperties","_jsx","ProFormField","_objectSpread","runFunction","lightProps","labelFormatter","filedConfig","customLightMode","ProFormCheckboxComponents","_ref2","_Checkbox","ProFormCheckbox","createField","valuePropName","WrappedProFormCheckbox","Group","userGroups","setUserGroups","userGroupsLoading","setUserGroupsLoading","fetchUserGroups","userGroupsTree","handleAddToGroup","group_id","addUserToGroup","handleRemoveFromGroup","removeUserFromGroup","handleClearAllGroups","Promise","all","isNew","setData","useParams","additionalFields","useModel","initialState","baseUrl","config","filter","useUserGroups","roles","setRoles","ProForm","useForm","fetchRoles","getRoles","onDeleteAvatar","deleteUserAvatar","Number","message","prevState","avatar","path_avatar","catch","error","formProps","onFinish","values","postData","password","createUser","history","push","updateUser","initialValues","required","validator","test","reject","Error","resolve","includes","is_active","resendEmail","role","guard_name","info","file","status","UserCategories","updateUserInterests","tab","fetchData","fetchUser","interests","categoriesArrToIds","breadcrumb","routes","breadcrumbName","String","activeKey"],"mappings":"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","file":"p__Users__User.1c626148.async.js","sourcesContent":["import { request } from 'umi';\nimport type { RequestOptionsInit } from 'umi-request';\n\n/**  GET /api/model-fields */\nexport async function fields(\n  params: API.PageParams &\n    API.PaginationParams & {\n      class_type: string;\n    },\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<EscolaLms.ModelFields.Models.Metadata[]>>(\n    `/api/model-fields`,\n    {\n      method: 'GET',\n      params,\n      ...(options || {}),\n    },\n  );\n}\n\n/**  POST /api/aadmin/model-fields */\nexport async function createOrUpdateField(\n  body: EscolaLms.ModelFields.Http.Requests.MetadataCreateOrUpdateRequest,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<EscolaLms.ModelFields.Models.Metadata>>(\n    `/api/admin/model-fields`,\n    {\n      method: 'POST',\n      data: body,\n      ...(options || {}),\n    },\n  );\n}\n\n/**  DELETE /api/admin/model-fields */\nexport async function deleteField(\n  body: EscolaLms.ModelFields.Http.Requests.MetadataDeleteRequest,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<boolean>>(`/api/admin/model-fields`, {\n    method: 'DELETE',\n    data: body,\n    ...(options || {}),\n  });\n}\n","import { request } from 'umi';\nimport type { RequestOptionsInit } from 'umi-request';\n\n/**  GET /api/admin/track/routes */\nexport async function track(\n  params: API.PaginationParams & {\n    current?: number;\n    pageSize?: number;\n    date_from?: string;\n    date_to?: string;\n    user_id?: number;\n    path?: string;\n    method: 'string';\n  },\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultMetaResponse<EscolaLms.Tracker.Models.TrackRoute>>(\n    `/api/admin/tracks/routes`,\n    {\n      method: 'GET',\n      /* useCache: true */ useCache: false,\n      params: {\n        ...params,\n        per_page: params.pageSize,\n        page: params.current,\n      },\n      ...(options || {}),\n    },\n  );\n}\n","import React, { useRef, useState } from 'react';\nimport { useIntl, FormattedMessage } from 'umi';\nimport type { ProColumns, ActionType } from '@ant-design/pro-table';\nimport ProTable from '@ant-design/pro-table';\nimport { format } from 'date-fns/esm';\nimport { DATETIME_FORMAT } from '@/consts/dates';\nimport { track } from '@/services/escola-lms/tracker';\nimport TypeButtonDrawer from '@/components/TypeButtonDrawer';\nimport UserSelect from '@/components/UserSelect';\n\nexport const TableColumns: ProColumns<EscolaLms.Tracker.Models.TrackRoute>[] = [\n  {\n    title: <FormattedMessage id=\"ID\" defaultMessage=\"ID\" />,\n    dataIndex: 'id',\n    hideInSearch: true,\n    sorter: true,\n    width: '80px',\n  },\n  {\n    title: <FormattedMessage id=\"dateRange\" defaultMessage=\"Date Range\" />,\n    dataIndex: 'dateRange',\n    hideInSearch: false,\n    hideInForm: true,\n    hideInTable: true,\n    valueType: 'dateRange',\n    fieldProps: {\n      allowEmpty: [true, true],\n    },\n  },\n  {\n    title: <FormattedMessage id=\"http_method\" defaultMessage=\"http_method\" />,\n    dataIndex: 'method',\n    hideInSearch: false,\n    sorter: true,\n    valueEnum: {\n      GET: 'GET',\n      POST: 'POST',\n      PUT: 'PUT',\n      DELETE: 'DELETE',\n      PATCH: 'PATCH',\n    },\n  },\n  {\n    title: <FormattedMessage id=\"path\" defaultMessage=\"path\" />,\n    dataIndex: 'path',\n    sorter: true,\n    hideInSearch: false,\n  },\n];\n\nconst LogsWidget: React.FC<{ useAsWidget?: boolean; userID?: number }> = ({\n  useAsWidget,\n  userID,\n}) => {\n  const actionRef = useRef<ActionType>();\n  const [loading, setLoading] = useState(false);\n  const intl = useIntl();\n  return (\n    <ProTable<\n      EscolaLms.Tracker.Models.TrackRoute,\n      API.PageParams & {\n        user_id?: number;\n        method: 'string';\n        dateRange: [string, string];\n        path: string;\n      }\n    >\n      headerTitle={intl.formatMessage({\n        id: 'menu.Analytics.Logs',\n        defaultMessage: 'menu.Analytics.Logs',\n      })}\n      loading={loading}\n      actionRef={actionRef}\n      rowKey=\"id\"\n      search={{\n        layout: 'vertical',\n      }}\n      request={({ user_id, method, dateRange, path, pageSize, current }, sort) => {\n        const sortArr = sort && Object.entries(sort)[0];\n        setLoading(true);\n        const date_from =\n          dateRange && dateRange[0] ? format(new Date(dateRange[0]), DATETIME_FORMAT) : undefined;\n        const date_to =\n          dateRange && dateRange[1] ? format(new Date(dateRange[1]), DATETIME_FORMAT) : undefined;\n\n        return track({\n          user_id: useAsWidget ? userID : user_id,\n          method,\n          pageSize,\n          current,\n          path,\n          date_from,\n          date_to,\n          order_by: sortArr && sortArr[0],\n          order: sortArr ? (sortArr[1] === 'ascend' ? 'ASC' : 'DESC') : undefined,\n        }).then((response) => {\n          setLoading(false);\n          if (response.success) {\n            return {\n              data: response.data,\n              total: response.meta.total,\n              success: true,\n            };\n          }\n          return [];\n        });\n      }}\n      columns={[\n        ...TableColumns,\n        {\n          title: <FormattedMessage id=\"user\" defaultMessage=\"user\" />,\n          dataIndex: 'user_id',\n          key: 'user_id',\n          hideInSearch: useAsWidget,\n          sorter: true,\n          renderFormItem: (item, { type, defaultRender, ...rest }, form) => {\n            if (type === 'form') {\n              return null;\n            }\n            const stateType = form.getFieldValue('state');\n            return (\n              <UserSelect\n                {...rest}\n                state={{\n                  type: stateType,\n                }}\n              />\n            );\n          },\n          render: (_, record) =>\n            record.user && <TypeButtonDrawer type={'App\\\\Models\\\\User'} type_id={record.user.id} />,\n        },\n      ]}\n    />\n  );\n};\n\nexport default LogsWidget;\n","import { request } from 'umi';\nimport type { RequestOptionsInit } from 'umi-request';\n\n/**  GET /api/admin/roles */\nexport async function roles(\n  params?: API.CourseParams & {\n    // query\n    current?: number;\n    pageSize?: number;\n    name?: string;\n    search?: string;\n  },\n  options?: RequestOptionsInit,\n) {\n  return request<API.RolesList>(`/api/admin/roles`, {\n    method: 'GET',\n    /* useCache: true */ useCache: false,\n    params,\n    ...(options || {}),\n  });\n}\n\n/**  POST /api/admin/roles */\nexport async function createRole(body?: Partial<API.Role>, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.Role>>(`/api/admin/roles`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    data: body,\n    ...(options || {}),\n  });\n}\n\n/**  DELETE /api/admin/roles/:id */\nexport async function deleteRole(id: string, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.Role>>(`/api/admin/roles/${id}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    ...(options || {}),\n  });\n}\n\n/**  GET /api/admin/roles/:name */\nexport async function permisions(name: string, options?: RequestOptionsInit) {\n  return request<API.RolesList>(`/api/admin/roles/${name}`, {\n    method: 'GET',\n    /* useCache: true */ useCache: false,\n\n    ...(options || {}),\n  });\n}\n\n/**  PATCH /api/admin/roles/:name */\nexport async function setRolePermisions(name: string, body?: any, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.Role>>(`/api/admin/roles/${name}`, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    data: body,\n    ...(options || {}),\n  });\n}\n","import React from 'react';\nimport { Image } from 'antd';\nimport type { ImageProps } from 'antd';\ndeclare const REACT_APP_API_URL: string;\n\ninterface ResponsiveImageProps extends ImageProps {\n  path: string;\n  size?: number;\n  srcSizes?: number[];\n  alt?: string;\n}\n\nconst ResponsiveImage: React.FC<ResponsiveImageProps> = ({\n  path,\n  size,\n  srcSizes,\n  alt = 'LMS Image',\n  ...props\n}) => {\n  const src = `${window.REACT_APP_API_URL || REACT_APP_API_URL}/api/images/img?path=${path}&w=${\n    srcSizes ? srcSizes[0] : size\n  }`;\n  const srcSet =\n    srcSizes &&\n    srcSizes.map(\n      (srcSize) =>\n        `${\n          window.REACT_APP_API_URL || REACT_APP_API_URL\n        }/api/images/img?path=${path}&w=${srcSize} ${srcSize}w`,\n    );\n\n  return (\n    <div className=\"escolalms-image\">\n      <Image src={src} srcSet={srcSet && srcSet.join(',')} alt={alt} {...props} />\n    </div>\n  );\n};\n\nexport default ResponsiveImage;\n","import React, { useState, useEffect, useMemo } from 'react';\nimport { Tree, Spin } from 'antd';\n\nimport { categoryTree } from '@/services/escola-lms/category';\n\ntype TreeNodeType = {\n  title: string;\n  key: string | number;\n  children?: TreeNodeType[];\n};\n\nconst treeConvert = (category: API.Category): TreeNodeType => {\n  return category.subcategories && category.subcategories.length\n    ? {\n        title: category.name,\n        key: category.id,\n        children: category.subcategories.map((cat) => treeConvert(cat)),\n      }\n    : {\n        title: category.name,\n        key: category.id,\n      };\n};\n\nexport const CategoryCheckboxTree: React.FC<{\n  state?: {\n    type: number;\n  };\n  multiple?: boolean;\n  value?: (string | number)[];\n  onChange?: (value: (string | number)[]) => void;\n}> = ({ value, onChange, multiple = true }) => {\n  const [categories, setCategories] = useState<API.Category[]>([]);\n\n  useEffect(() => {\n    categoryTree().then((response) => {\n      if (response.success) {\n        setCategories(response.data);\n      }\n    });\n  }, []);\n\n  const treeData = useMemo(() => {\n    return categories.map((cat) => treeConvert(cat));\n  }, [categories]);\n\n  if (categories.length === 0) {\n    return <Spin />;\n  }\n\n  return (\n    <Tree\n      multiple={multiple}\n      checkable\n      checkStrictly={true}\n      defaultExpandAll\n      style={{ width: '100%' }}\n      checkedKeys={value}\n      onCheck={(keys) => {\n        if (typeof keys === 'object' && !Array.isArray(keys) && keys.checked) {\n          const checkedKeys = keys.checked;\n          return onChange && Array.isArray(checkedKeys) && onChange(checkedKeys);\n        }\n      }}\n      treeData={treeData}\n      disabled={categories.length === 0}\n    />\n  );\n};\n\nexport default CategoryCheckboxTree;\n","import { useState, useEffect } from 'react';\n\nimport { fields as fetchFields } from '@/services/escola-lms/fields';\n\ntype ModelFieldsState =\n  | {\n      state: 'initial';\n    }\n  | {\n      state: 'loading';\n    }\n  | {\n      state: 'loaded';\n      list: EscolaLms.ModelFields.Models.Metadata[];\n    }\n  | {\n      state: 'error';\n      error: string;\n    };\n\nconst useModelFields = (class_type: string): ModelFieldsState => {\n  const [state, setState] = useState<ModelFieldsState>({ state: 'initial' });\n\n  useEffect(() => {\n    setState({ state: 'loading' });\n    fetchFields({ class_type }).then((data) => {\n      if (data.success) {\n        setState({ state: 'loaded', list: data.data });\n      }\n    });\n  }, [class_type]);\n\n  return state;\n};\n\nexport default useModelFields;\n","import React, { useState, useCallback } from 'react';\nimport { Modal, Button, Radio } from 'antd';\nimport { JsonEditor as Editor } from 'jsoneditor-react';\nimport { FormattedMessage } from 'umi';\nimport 'jsoneditor-react/es/editor.min.css';\n\ntype EditorMode = 'tree' | 'view' | 'form' | 'code' | 'text';\n\nexport const JsonEditor: React.FC<{\n  value?: string;\n  onChange?: (value: string) => void;\n}> = ({ value, onChange }) => {\n  const [isModalVisible, setIsModalVisible] = useState(false);\n\n  const hideModal = useCallback(() => {\n    setIsModalVisible(false);\n  }, []);\n\n  const [mode, setMode] = useState<EditorMode>('code');\n\n  return (\n    <div>\n      <Button type=\"primary\" onClick={() => setIsModalVisible(true)} size=\"small\">\n        <FormattedMessage id=\"json_editor\" />\n      </Button>\n      <Modal title=\"JSON\" visible={isModalVisible} onOk={hideModal} onCancel={hideModal}>\n        <Radio.Group onChange={(e) => setMode(e.target.value)} value={mode}>\n          <Radio value={'tree'}>tree</Radio>\n          <Radio value={'view'}>view</Radio>\n          <Radio value={'form'}>form</Radio>\n          <Radio value={'code'}>code</Radio>\n          <Radio value={'text'}>text</Radio>\n        </Radio.Group>\n        <Editor\n          key={mode}\n          mode={mode}\n          value={value}\n          onChange={(newValue: string) => {\n            return onChange && onChange(newValue);\n          }}\n        />\n      </Modal>\n    </div>\n  );\n};\n\nexport default JsonEditor;\n","import JsonEditor from '@/components/JsonEditor';\nimport ProForm, {\n  ProFormCheckbox,\n  ProFormDigit,\n  ProFormText,\n  ProFormTextArea,\n} from '@ant-design/pro-form';\nimport React from 'react';\nimport { FormattedMessage, useIntl } from 'umi';\nimport { getLocale } from 'umi';\n\nconst AdditionalField: React.FC<{\n  field: API.ModelField;\n}> = ({ field }) => {\n  const intl = useIntl();\n  const getProperField = (f: API.ModelField) => {\n    const gl = f && f.extra && f.extra.find((item: Record<string, string>) => item[getLocale()]);\n\n    switch (f.type) {\n      case 'number':\n        return (\n          <ProFormDigit\n            width=\"md\"\n            name={f.name}\n            label={gl ? gl[getLocale()] : <FormattedMessage id={f.name} />}\n            tooltip={<FormattedMessage id={f.name} />}\n            placeholder={intl.formatMessage({\n              id: f.name,\n              defaultMessage: f.name,\n            })}\n            min={1}\n            max={1024}\n            fieldProps={{ step: 1 }}\n          />\n        );\n      case 'boolean':\n        return (\n          <ProFormCheckbox name={f.name}>\n            {gl ? gl[getLocale()] : <FormattedMessage id={f.name} />}\n          </ProFormCheckbox>\n        );\n\n      case 'varchar':\n        return (\n          <ProFormText\n            width=\"md\"\n            name={f.name}\n            label={gl ? gl[getLocale()] : <FormattedMessage id={f.name} />}\n            tooltip={<FormattedMessage id={f.name} />}\n            placeholder={intl.formatMessage({\n              id: f.name,\n            })}\n          />\n        );\n\n      case 'json':\n        return (\n          <ProForm.Item\n            name={f.name}\n            label={gl ? gl[getLocale()] : <FormattedMessage id={f.name} />}\n            tooltip={<FormattedMessage id={f.name} />}\n            valuePropName=\"value\"\n          >\n            <JsonEditor />\n          </ProForm.Item>\n        );\n\n      case 'text':\n      default:\n        return (\n          <ProFormTextArea\n            width=\"md\"\n            name={f.name}\n            label={gl ? gl[getLocale()] : <FormattedMessage id={f.name} />}\n            tooltip={<FormattedMessage id={f.name} />}\n            placeholder={intl.formatMessage({\n              id: f.name,\n            })}\n          />\n        );\n    }\n  };\n  return <>{getProperField(field)}</>;\n};\n\nexport default AdditionalField;\n","import \"antd/es/checkbox/style\";\nimport _Checkbox from \"antd/es/checkbox\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"options\", \"fieldProps\", \"proFieldProps\", \"valueEnum\"];\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { runFunction } from '@ant-design/pro-utils';\nimport React from 'react';\nimport { createField } from '../../BaseForm/createField';\nimport ProFormField from '../Field';\nvar CheckboxGroup = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var options = _ref.options,\n      fieldProps = _ref.fieldProps,\n      proFieldProps = _ref.proFieldProps,\n      valueEnum = _ref.valueEnum,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  return _jsx(ProFormField, _objectSpread({\n    ref: ref,\n    valueType: \"checkbox\",\n    valueEnum: runFunction(valueEnum, undefined),\n    fieldProps: _objectSpread({\n      options: options\n    }, fieldProps),\n    lightProps: _objectSpread({\n      labelFormatter: function labelFormatter() {\n        return _jsx(ProFormField, _objectSpread({\n          ref: ref,\n          valueType: \"checkbox\",\n          mode: \"read\",\n          valueEnum: runFunction(valueEnum, undefined),\n          filedConfig: {\n            customLightMode: true\n          },\n          fieldProps: _objectSpread({\n            options: options\n          }, fieldProps),\n          proFieldProps: proFieldProps\n        }, rest));\n      }\n    }, rest.lightProps),\n    proFieldProps: proFieldProps\n  }, rest));\n});\n/**\n * 多选框的\n *\n * @param\n */\n\nvar ProFormCheckboxComponents = /*#__PURE__*/React.forwardRef(function (_ref2, ref) {\n  var fieldProps = _ref2.fieldProps,\n      children = _ref2.children;\n  return _jsx(_Checkbox, _objectSpread(_objectSpread({\n    ref: ref\n  }, fieldProps), {}, {\n    children: children\n  }));\n});\nvar ProFormCheckbox = createField(ProFormCheckboxComponents, {\n  valuePropName: 'checked'\n});\nvar WrappedProFormCheckbox = ProFormCheckbox;\nWrappedProFormCheckbox.Group = CheckboxGroup;\nexport default WrappedProFormCheckbox;","import React, { useMemo, useState, useEffect } from 'react';\nimport { message, Spin, Form, Button, Space, Typography, Divider, Row } from 'antd';\nimport ProForm, { ProFormText, ProFormSwitch, ProFormCheckbox } from '@ant-design/pro-form';\nimport { updateUser, createUser, resendEmail } from '@/services/escola-lms/user';\nimport SecureUploadBrowser from '@/components/SecureUpload/browser';\nimport ResponsiveImage from '@/components/ResponsiveImage';\nimport UserGroupSelect from '@/components/UserGroupSelect';\nimport { useParams, history, useModel, Link } from 'umi';\nimport { useCallback } from 'react';\nimport { useIntl, FormattedMessage } from 'umi';\nimport { roles as getRoles } from '@/services/escola-lms/roles';\nimport { deleteUserAvatar } from '@/services/escola-lms/user';\nimport {\n  userGroupsTree,\n  addUserToGroup,\n  removeUserFromGroup,\n} from '@/services/escola-lms/user_groups';\nimport useModelFields from '@/hooks/useModelFields';\nimport AdditionalField from './components/AdditionalField';\n\nfunction useUserGroups(user_id: number) {\n  const [userGroups, setUserGroups] = useState<number[]>([]);\n  const [userGroupsLoading, setUserGroupsLoading] = useState(false);\n\n  const fetchUserGroups = useCallback(async () => {\n    try {\n      setUserGroupsLoading(true);\n      const response = await userGroupsTree({ user_id });\n\n      if (response.success) {\n        setUserGroups(response.data.map(({ id }) => id));\n      }\n    } finally {\n      setUserGroupsLoading(false);\n    }\n  }, [user_id]);\n\n  const handleAddToGroup = useCallback(\n    async (group_id: string | number) => {\n      if (typeof group_id === 'string') return;\n      setUserGroupsLoading(true);\n\n      await addUserToGroup(group_id, user_id);\n      await fetchUserGroups();\n\n      setUserGroupsLoading(false);\n    },\n    [user_id],\n  );\n\n  const handleRemoveFromGroup = useCallback(\n    async (group_id: string | number) => {\n      if (typeof group_id === 'string') return;\n      setUserGroupsLoading(true);\n\n      await removeUserFromGroup(group_id, user_id);\n      await fetchUserGroups();\n\n      setUserGroupsLoading(false);\n    },\n    [user_id],\n  );\n\n  const handleClearAllGroups = useCallback(async () => {\n    setUserGroupsLoading(true);\n\n    await Promise.all(userGroups.map((group_id) => removeUserFromGroup(group_id, user_id)));\n    await fetchUserGroups();\n\n    setUserGroupsLoading(false);\n  }, [userGroups]);\n\n  useEffect(() => {\n    fetchUserGroups();\n  }, [fetchUserGroups]);\n\n  return {\n    userGroups,\n    userGroupsLoading,\n    handleAddToGroup,\n    handleRemoveFromGroup,\n    handleClearAllGroups,\n  };\n}\n\nexport default ({\n  isNew,\n  data,\n  setData,\n}: {\n  isNew: boolean;\n  data: Partial<API.UserItem> | undefined;\n  setData: (data: Partial<API.UserItem>) => void;\n}) => {\n  const intl = useIntl();\n  const params = useParams<{ user?: string }>();\n  const { user } = params;\n  const additionalFields = useModelFields('EscolaLms\\\\Auth\\\\Models\\\\User');\n  const { initialState } = useModel('@@initialState');\n  const baseUrl = initialState?.config?.filter((item) => item.key === 'frontURL')[0]?.data;\n\n  const {\n    userGroups,\n    userGroupsLoading,\n    handleAddToGroup,\n    handleRemoveFromGroup,\n    handleClearAllGroups,\n  } = useUserGroups(data?.id ?? 0);\n\n  const [roles, setRoles] = useState<API.Role[]>();\n  const [form] = ProForm.useForm();\n\n  const fetchRoles = useCallback(async () => {\n    const request = await getRoles();\n    const response = await request;\n\n    if (response.success) {\n      setRoles(response.data);\n    }\n  }, [user]);\n\n  const onDeleteAvatar = () => {\n    deleteUserAvatar(Number(user))\n      .then((response) => {\n        if (response.success) {\n          message.success(response.message);\n          // @ts-ignore\n          setData((prevState) => ({\n            ...prevState,\n            avatar: '',\n            path_avatar: '',\n          }));\n        }\n      })\n      .catch((error: any) => {\n        message.error(error.data.message);\n      });\n  };\n\n  useEffect(() => {\n    fetchRoles();\n  }, [user]);\n\n  const formProps = useMemo(\n    () => ({\n      form,\n      onFinish: async (values: Partial<API.UserItem>) => {\n        let response: API.DefaultResponse<API.UserItem>;\n\n        const postData: Partial<API.UserItem> = {\n          ...values,\n        };\n\n        if (!postData.password || postData.password === '') {\n          delete postData.password;\n        }\n\n        if (isNew) {\n          response = await createUser(postData);\n          if (response.success) {\n            history.push(`/users/${response.data.id}/user_info`);\n          }\n        } else {\n          response = await updateUser(Number(user), postData);\n        }\n\n        message.success(response.message);\n      },\n      initialValues: data,\n    }),\n    [data, user],\n  );\n\n  if (!data) {\n    return <Spin />;\n  }\n\n  return (\n    <ProForm {...formProps}>\n      <ProForm.Group>\n        <ProFormText\n          width=\"md\"\n          name=\"first_name\"\n          label={<FormattedMessage id=\"first_name\" />}\n          tooltip={<FormattedMessage id=\"first_name\" />}\n          placeholder={intl.formatMessage({\n            id: 'first_name',\n          })}\n          required\n          rules={[{ required: true, message: intl.formatMessage({ id: 'field_required' }) }]}\n        />\n        <ProFormText\n          width=\"md\"\n          name=\"last_name\"\n          label={<FormattedMessage id=\"last_name\" />}\n          tooltip={<FormattedMessage id=\"last_name\" />}\n          placeholder={intl.formatMessage({\n            id: 'last_name',\n          })}\n          required\n          rules={[{ required: true, message: intl.formatMessage({ id: 'field_required' }) }]}\n        />\n        <ProFormText\n          width=\"md\"\n          name=\"email\"\n          label={<FormattedMessage id=\"email\" />}\n          tooltip={<FormattedMessage id=\"email\" />}\n          placeholder={intl.formatMessage({\n            id: 'email',\n          })}\n          required\n          rules={[{ required: true, message: intl.formatMessage({ id: 'field_required' }) }]}\n        />\n        <ProFormText.Password\n          shouldUpdate\n          width=\"md\"\n          name=\"password\"\n          label={<FormattedMessage id=\"password\" />}\n          tooltip={<FormattedMessage id=\"password\" />}\n          placeholder={intl.formatMessage({\n            id: 'password',\n          })}\n          required={isNew}\n          rules={[\n            {\n              validator(_, value) {\n                if (value && !/(?=.*[!@#$%^&*])[a-zA-Z0-9!@#$%^&*]{8,}$/i.test(value)) {\n                  return Promise.reject(new Error(intl.formatMessage({ id: 'badPassword' })));\n                }\n                return Promise.resolve();\n              },\n            },\n            {\n              required: isNew,\n              message: <FormattedMessage id=\"field_required\" />,\n            },\n          ]}\n        />\n        {additionalFields.state === 'loaded' &&\n          additionalFields.list.map((field: API.ModelField) => (\n            <AdditionalField key={field.id} field={field} />\n          ))}\n      </ProForm.Group>\n      <ProForm.Group>\n        {!isNew && (\n          <Space direction=\"vertical\">\n            {/* if he is an admin, do not display the switch */}\n            {!data.roles?.includes('admin') && (\n              <ProFormSwitch\n                initialValue={data.is_active}\n                name=\"email_verified\"\n                label={<FormattedMessage id=\"is_email_verified\" />}\n              />\n            )}\n\n            <Form.Item noStyle shouldUpdate>\n              {() => {\n                return form.getFieldValue('email_verified') ? (\n                  <React.Fragment />\n                ) : (\n                  <>\n                    {!baseUrl && (\n                      <p>\n                        <FormattedMessage id=\"no_base_url\" />\n                        <Link to=\"/configuration/settings/escola_auth\">Settings</Link>\n                      </p>\n                    )}\n                    <Button\n                      disabled={!baseUrl}\n                      size=\"small\"\n                      onClick={() => {\n                        resendEmail(form.getFieldValue('email'), `${baseUrl}email-verify`).then(\n                          () => {\n                            message.success(\n                              intl.formatMessage({\n                                id: 'email_resend',\n                              }),\n                            );\n                          },\n                        );\n                      }}\n                    >\n                      <FormattedMessage id=\"resend\" />\n                    </Button>\n                  </>\n                );\n              }}\n            </Form.Item>\n          </Space>\n        )}\n\n        <ProFormSwitch name=\"is_active\" label={<FormattedMessage id=\"is_active\" />} />\n\n        {roles && (\n          <ProFormCheckbox.Group\n            name=\"roles\"\n            layout=\"horizontal\"\n            label={<FormattedMessage id=\"roles\" />}\n            options={roles\n              .filter((role: API.Role) => role.guard_name !== 'web')\n              .map((role: API.Role) => role.name)}\n          />\n        )}\n      </ProForm.Group>\n      {!isNew && (\n        <>\n          <ProForm.Group>\n            <ProForm.Item name=\"avatar\" label={<FormattedMessage id=\"avatar\" />}>\n              {data.path_avatar ? (\n                <ResponsiveImage path={data.path_avatar} size={600} width={200} />\n              ) : (\n                <Typography>\n                  <FormattedMessage id=\"avatar_placeholder\" />\n                </Typography>\n              )}\n            </ProForm.Item>\n            <Form.Item noStyle shouldUpdate>\n              {() => (\n                <>\n                  <SecureUploadBrowser\n                    folder={`avatars/${user}`}\n                    wrapInForm={false}\n                    url={`/api/admin/users/${user}/avatar`}\n                    name=\"avatar\"\n                    accept=\"image/*\"\n                    onChange={(info) => {\n                      if (info.file.status === 'done') {\n                        if (info.file.response && info.file.response.success) {\n                          setData(info.file.response.data);\n                        }\n                      }\n                    }}\n                  />\n                  <Button danger onClick={onDeleteAvatar}>\n                    <FormattedMessage id=\"delete\" />\n                  </Button>\n                </>\n              )}\n            </Form.Item>\n          </ProForm.Group>\n          <Row>\n            <Divider />\n            <ProForm.Item\n              style={{ width: '100%' }}\n              label={<FormattedMessage id=\"groups\" defaultMessage=\"Groups\" />}\n            >\n              <UserGroupSelect\n                multiple\n                loading={userGroupsLoading}\n                disabled={userGroupsLoading}\n                value={userGroups}\n                onSelect={handleAddToGroup}\n                onDeselect={handleRemoveFromGroup}\n                onClear={handleClearAllGroups}\n              />\n            </ProForm.Item>\n          </Row>\n        </>\n      )}\n    </ProForm>\n  );\n};\n","import CategoryCheckboxTree from '@/components/CategoryCheckboxTree';\nimport { updateUserInterests } from '@/services/escola-lms/user';\nimport ProForm from '@ant-design/pro-form';\nimport { message } from 'antd';\nimport { useMemo } from 'react';\nimport { FormattedMessage } from 'umi';\n\nconst UserCategories: React.FC<{ data: Partial<API.UserItem> | undefined }> = ({ data }) => {\n  const formProps = useMemo(\n    () => ({\n      onFinish: async (values: Partial<API.UserItem>) => {\n        const postData: Partial<API.UserItem> = {\n          ...values,\n        };\n\n        const response: API.DefaultResponse<Partial<API.UserItem>> = await updateUserInterests(\n          Number(data?.id),\n          postData,\n        );\n\n        message.success(response.message);\n      },\n      initialValues: data,\n    }),\n    [data],\n  );\n\n  return (\n    <ProForm {...formProps}>\n      <ProForm.Item\n        label={<FormattedMessage id=\"categories\" />}\n        name=\"interests\"\n        valuePropName=\"value\"\n      >\n        <CategoryCheckboxTree />\n      </ProForm.Item>\n    </ProForm>\n  );\n};\n\nexport default UserCategories;\n","import ProCard from '@ant-design/pro-card';\nimport { useParams, history } from 'umi';\nimport { PageContainer } from '@ant-design/pro-layout';\nimport { useIntl, FormattedMessage } from 'umi';\nimport UserForm from './form';\n\nimport UserCategories from './components/Categories';\nimport { useCallback, useEffect, useState } from 'react';\nimport { user as fetchUser } from '@/services/escola-lms/user';\nimport { categoriesArrToIds } from '@/utils/utils';\nimport LogsWidget from '@/components/LogsWidget';\n\nexport default () => {\n  const params = useParams<{ user?: string; tab?: string }>();\n  const [data, setData] = useState<Partial<API.UserItem>>();\n  const intl = useIntl();\n  const { tab = 'user_info', user } = params;\n  const isNew = typeof user === 'undefined';\n\n  const fetchData = useCallback(async () => {\n    const response = await fetchUser(Number(user));\n    if (response.success) {\n      setData({\n        ...response.data,\n        interests: response.data.interests.map(categoriesArrToIds),\n      });\n    }\n  }, [user]);\n\n  useEffect(() => {\n    if (isNew) {\n      setData({});\n      return;\n    }\n\n    fetchData();\n  }, [user, fetchData]);\n\n  return (\n    <PageContainer\n      title={<FormattedMessage id={'settings'} />}\n      header={{\n        breadcrumb: {\n          routes: [\n            {\n              path: `/users/${user}/user_info`,\n              breadcrumbName: intl.formatMessage({\n                id: 'menu.Settings',\n              }),\n            },\n\n            {\n              path: String(tab),\n              breadcrumbName: String(tab),\n            },\n          ],\n        },\n      }}\n    >\n      <ProCard\n        tabs={{\n          type: 'card',\n          activeKey: tab,\n          onChange: (key) => history.push(`/users/${user}/${key}`),\n        }}\n      >\n        <ProCard.TabPane\n          key=\"user_info\"\n          tab={isNew ? <FormattedMessage id=\"new_user\" /> : <FormattedMessage id=\"edit_user\" />}\n        >\n          <UserForm isNew={isNew} data={data} setData={setData} />\n        </ProCard.TabPane>\n        {!isNew && (\n          <ProCard.TabPane\n            key={'categories'}\n            tab={\n              <span>\n                <FormattedMessage id=\"categories\" />\n              </span>\n            }\n          >\n            {data?.id && <UserCategories data={data} />}\n          </ProCard.TabPane>\n        )}\n        {/* {!isNew && (\n          <ProCard.TabPane\n            key={'settings'}\n            tab={\n              <span>\n                <FormattedMessage id=\"user.settings\" />\n              </span>\n            }\n          >\n            {user && <Settings user={user} isProfile={false} />}\n          </ProCard.TabPane>\n        )} */}\n        {!isNew && (\n          <ProCard.TabPane\n            key={'logs'}\n            tab={\n              <span>\n                <FormattedMessage id=\"user_logs\" />\n              </span>\n            }\n          >\n            {user && <LogsWidget useAsWidget userID={Number(user)} />}\n          </ProCard.TabPane>\n        )}\n      </ProCard>\n    </PageContainer>\n  );\n};\n"],"sourceRoot":""}