{"version":3,"sources":["webpack:///./node_modules/@ant-design/pro-form/es/components/Radio/index.js","webpack:///./node_modules/antd/es/auto-complete/index.js","webpack:///./src/pages/Settings/components/ModalForm.tsx","webpack:///./src/pages/Settings/user.tsx","webpack:///./src/pages/Settings/components/SettingsValue.tsx","webpack:///./src/pages/Settings/components/PackageModalForm.tsx","webpack:///./src/pages/Settings/package.tsx","webpack:///./src/pages/Settings/index.tsx","webpack:///./src/components/WysiwygMarkdown/index.tsx","webpack:///./src/pages/Settings/global.tsx","webpack:///./node_modules/@ant-design/pro-form/es/components/Checkbox/index.js"],"names":["_excluded","RadioGroup","React","forwardRef","_ref","ref","fieldProps","options","radioType","layout","proFieldProps","valueEnum","rest","_objectWithoutProperties","_jsx","ProField","_objectSpread","valueType","runFunction","undefined","filedConfig","customLightMode","ProFormRadioComponents","_ref2","children","_Radio","ProFormRadio","createField","valuePropName","ignoreWidth","WrappedProFormRadio","Group","Button","displayName","Option","Select","child","type","isSelectOption","isSelectOptGroup","AutoComplete","props","customizePrefixCls","prefixCls","className","popupClassName","dropdownClassName","dataSource","childNodes","toArray","customizeInput","length","isValidElement","isSelectOptionOrSelectOptGroup","_childNodes","_slicedToArray","getInputElement","optionChildren","map","item","_typeof","key","value","optionValue","text","ConfigConsumer","getPrefixCls","_extends","omit","classNames","concat","mode","SECRET_COMBOBOX_MODE_DO_NOT_USE","RefAutoComplete","FilesSelector","onChange","useState","showBrowser","setShowBrowser","file","dir","name","SettingsModalForm","intl","useIntl","visible","onVisibleChange","onFinish","id","initialData","groups","useForm","form","isNew","setType","isGlobalGroup","useCallback","getFieldValue","selectedGroup","setSelectedGroup","useEffect","setFieldsValue","setting","Number","then","response","success","data","group","resetFields","onValuesChange","values","formatMessage","defaultMessage","required","width","inputValue","option","toString","toLowerCase","indexOf","label","JSON","parse","handleUpdate","fields","hide","loading","updateSettings","createSettings","error","handleRemove","deleteSettings","TableList","modalVisible","setModalVisible","setGroups","actionRef","useRef","useModel","setInitialState","settingGroups","filter","columns","title","dataIndex","hideInSearch","sort","reduce","acc","hideInForm","render","_","record","enumerable","public","current","reload","pageSize","settings","per_page","total","meta","isInteger","config","prevState","SettingsValue","field","includes","Text","SettingPackageType","parseValue","Array","isArray","stringify","formatValue","arr","SettingsPackageModalForm","useMemo","rules","String","full_key","updateConfig","getFieldsValue","result","sorter","readonly","Children","Object","keys","join","findNestedFields","obj","searchKey","results","forEach","push","packageName","onValueUpdated","selectedEntry","setSelectedEntry","entries","sortArr","Promise","resolve","newArray","sortArrayByKey","rawPackageName","replaceAll","words","split","capitalizedWords","word","charAt","toUpperCase","slice","tab","NON_PACKAGE_TABS","package","transformPackageName","params","useParams","configs","setConfigs","refetchConfigs","fetchConfigs","initialState","checkGlobalConfigs","getTabNameForBreadcrumbs","breadcrumb","routes","path","breadcrumbName","marginBottom","activeKey","history","pkg","EmbedUploaded","attrs","href","filename","pop","FormWysiwyg","directory","matcher","component","upload","resizePath","resizedImage","url","Error","v","updatedSettings","snakeToCamel","str","replace","m","substr","flatRoutes","curr","route","hideInMenu","courseEditTabsKeys","courseEditAdditionalSettingsKeys","templateTabsKeys","pathToSettingName","topicTypeToSettingName","booleanSettings","TopicType","getRoutes","feature","index","logo","frontURL","maxLessonsNestingInProgram","minTopicNestingInProgram","companyName","companyURL","logoLogin","logoFooter","footerFontColor","showLoginBackgroundImage","loginHeaderBackgroundColor","loginHeaderFontColor","loginFormBackgroundColor","contentBackgroundColor","technicalMaintenance","technicalMaintenanceText","updateConfigDynamically","rows","find","CheckboxGroup","ProFormField","lightProps","labelFormatter","ProFormCheckboxComponents","_Checkbox","ProFormCheckbox","WrappedProFormCheckbox"],"mappings":"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","file":"p__Settings.0e163017.async.js","sourcesContent":["import \"antd/es/radio/style\";\nimport _Radio from \"antd/es/radio\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"fieldProps\", \"options\", \"radioType\", \"layout\", \"proFieldProps\", \"valueEnum\"];\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { runFunction } from '@ant-design/pro-utils';\nimport React from 'react';\nimport { createField } from '../../BaseForm/createField';\nimport ProField from '../Field';\nvar RadioGroup = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var fieldProps = _ref.fieldProps,\n      options = _ref.options,\n      radioType = _ref.radioType,\n      layout = _ref.layout,\n      proFieldProps = _ref.proFieldProps,\n      valueEnum = _ref.valueEnum,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  return _jsx(ProField, _objectSpread(_objectSpread({\n    valueType: radioType === 'button' ? 'radioButton' : 'radio',\n    ref: ref,\n    valueEnum: runFunction(valueEnum, undefined)\n  }, rest), {}, {\n    fieldProps: _objectSpread({\n      options: options,\n      layout: layout\n    }, fieldProps),\n    proFieldProps: proFieldProps,\n    filedConfig: {\n      customLightMode: true\n    }\n  }));\n});\n/**\n * Radio\n *\n * @param\n */\n\nvar ProFormRadioComponents = /*#__PURE__*/React.forwardRef(function (_ref2, ref) {\n  var fieldProps = _ref2.fieldProps,\n      children = _ref2.children;\n  return _jsx(_Radio, _objectSpread(_objectSpread({}, fieldProps), {}, {\n    ref: ref,\n    children: children\n  }));\n});\nvar ProFormRadio = createField(ProFormRadioComponents, {\n  valuePropName: 'checked',\n  ignoreWidth: true\n});\nvar WrappedProFormRadio = ProFormRadio;\nWrappedProFormRadio.Group = RadioGroup;\nWrappedProFormRadio.Button = _Radio.Button; // @ts-ignore\n// eslint-disable-next-line no-param-reassign\n\nWrappedProFormRadio.displayName = 'ProFormComponent';\nexport default WrappedProFormRadio;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n/**\n * TODO: 4.0\n *\n * - Remove `dataSource`\n * - `size` not work with customizeInput\n * - CustomizeInput not feedback `ENTER` key since accessibility enhancement\n */\nimport classNames from 'classnames';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport omit from \"rc-util/es/omit\";\nimport * as React from 'react';\nimport { ConfigConsumer } from '../config-provider';\nimport Select from '../select';\nimport { isValidElement } from '../_util/reactNode';\nimport warning from '../_util/warning';\nvar Option = Select.Option;\nfunction isSelectOptionOrSelectOptGroup(child) {\n  return child && child.type && (child.type.isSelectOption || child.type.isSelectOptGroup);\n}\nvar AutoComplete = function AutoComplete(props, ref) {\n  var customizePrefixCls = props.prefixCls,\n    className = props.className,\n    popupClassName = props.popupClassName,\n    dropdownClassName = props.dropdownClassName,\n    children = props.children,\n    dataSource = props.dataSource;\n  var childNodes = toArray(children);\n  // ============================= Input =============================\n  var customizeInput;\n  if (childNodes.length === 1 && isValidElement(childNodes[0]) && !isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    var _childNodes = _slicedToArray(childNodes, 1);\n    customizeInput = _childNodes[0];\n  }\n  var getInputElement = customizeInput ? function () {\n    return customizeInput;\n  } : undefined;\n  // ============================ Options ============================\n  var optionChildren;\n  // [Legacy] convert `children` or `dataSource` into option children\n  if (childNodes.length && isSelectOptionOrSelectOptGroup(childNodes[0])) {\n    optionChildren = children;\n  } else {\n    optionChildren = dataSource ? dataSource.map(function (item) {\n      if (isValidElement(item)) {\n        return item;\n      }\n      switch (_typeof(item)) {\n        case 'string':\n          return /*#__PURE__*/React.createElement(Option, {\n            key: item,\n            value: item\n          }, item);\n        case 'object':\n          {\n            var optionValue = item.value;\n            return /*#__PURE__*/React.createElement(Option, {\n              key: optionValue,\n              value: optionValue\n            }, item.text);\n          }\n        default:\n          process.env.NODE_ENV !== \"production\" ? warning(false, 'AutoComplete', '`dataSource` is only supports type `string[] | Object[]`.') : void 0;\n          return undefined;\n      }\n    }) : [];\n  }\n  process.env.NODE_ENV !== \"production\" ? warning(!('dataSource' in props), 'AutoComplete', '`dataSource` is deprecated, please use `options` instead.') : void 0;\n  process.env.NODE_ENV !== \"production\" ? warning(!dropdownClassName, 'AutoComplete', '`dropdownClassName` is deprecated which will be removed in next major version. Please use `popupClassName` instead.') : void 0;\n  process.env.NODE_ENV !== \"production\" ? warning(!customizeInput || !('size' in props), 'AutoComplete', 'You need to control style self instead of setting `size` when using customize input.') : void 0;\n  return /*#__PURE__*/React.createElement(ConfigConsumer, null, function (_ref) {\n    var getPrefixCls = _ref.getPrefixCls;\n    var prefixCls = getPrefixCls('select', customizePrefixCls);\n    return /*#__PURE__*/React.createElement(Select, _extends({\n      ref: ref\n    }, omit(props, ['dataSource']), {\n      prefixCls: prefixCls,\n      popupClassName: popupClassName || dropdownClassName,\n      className: classNames(\"\".concat(prefixCls, \"-auto-complete\"), className),\n      mode: Select.SECRET_COMBOBOX_MODE_DO_NOT_USE\n    }, {\n      // Internal api\n      getInputElement: getInputElement\n    }), optionChildren);\n  });\n};\nvar RefAutoComplete = /*#__PURE__*/React.forwardRef(AutoComplete);\nRefAutoComplete.Option = Option;\nexport default RefAutoComplete;","import React, { useEffect, useState, useCallback } from 'react';\nimport { Form, Button, Input, AutoComplete } from 'antd';\nimport ProForm, {\n  ProFormText,\n  ProFormSwitch,\n  ModalForm,\n  ProFormRadio,\n  ProFormTextArea,\n  ProFormCheckbox,\n  ProFormDigit,\n} from '@ant-design/pro-form';\n\nimport { useIntl, FormattedMessage } from 'umi';\nimport { setting } from '@/services/escola-lms/settings';\n\nimport WysiwygMarkdown from '@/components/WysiwygMarkdown';\nimport FilesBrowser from '@/components/FilesBrowser';\nimport ReactJson from 'react-json-view';\nimport { CheckOutlined, CloseOutlined } from '@ant-design/icons';\n\nexport const FilesSelector: React.FC<{\n  value?: string;\n  onChange?: (value: string) => void;\n  type?: 'file' | 'image';\n}> = ({ value, onChange, type = 'file' }) => {\n  const [showBrowser, setShowBrowser] = useState<boolean>(false);\n\n  return (\n    <React.Fragment>\n      <ProForm.Group>\n        <Input value={value} readOnly />\n        <Button size=\"small\" type=\"primary\" onClick={() => setShowBrowser(!showBrowser)}>\n          toggle {type} browser\n        </Button>\n      </ProForm.Group>\n      {showBrowser && (\n        <FilesBrowser onFile={(file, dir) => onChange && onChange(`${dir}/${file.name}`)} />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport const SettingsModalForm: React.FC<{\n  id?: number | Partial<API.Setting> | false;\n  visible: number | boolean | Partial<API.Setting>;\n  onVisibleChange: (visible: boolean) => void;\n  onFinish: (formData: API.Setting) => Promise<boolean | void>;\n  groups: string[];\n  initialData?: Partial<API.Setting>;\n}> = (props) => {\n  const intl = useIntl();\n\n  const { visible, onVisibleChange, onFinish, id, initialData, groups } = props;\n\n  const [form] = Form.useForm();\n\n  const isNew = !id || id === -1;\n\n  const [type, setType] = useState<API.SettingType>('text');\n\n  const isGlobalGroup = useCallback(() => {\n    return !!(form.getFieldValue('group') === 'global' || initialData);\n  }, [form, initialData]);\n\n  const [selectedGroup, setSelectedGroup] = useState<string>('');\n\n  useEffect(() => {\n    // if id id && id !== -1\n\n    if (typeof id === 'object') {\n      form.setFieldsValue(id);\n      setType(id.type ?? 'text');\n    } else if (id && id !== -1) {\n      setting(Number(id)).then((response) => {\n        if (response.success) {\n          form.setFieldsValue(response.data);\n          setType(response.data.type);\n          setSelectedGroup(response.data.group);\n        }\n      });\n    } else {\n      form.resetFields();\n      setType('text');\n    }\n  }, [id, form, initialData]);\n\n  const onValuesChange = useCallback(\n    (values: API.Setting) => {\n      if (values.type && values.type !== type) {\n        setType(values.type);\n      }\n    },\n    [type],\n  );\n\n  return (\n    <ModalForm\n      form={form}\n      title={intl.formatMessage({\n        id: id ? 'editSetting' : 'newSetting',\n        defaultMessage: id ? 'editSetting' : 'newSetting',\n      })}\n      width=\"60vw\"\n      visible={!!visible}\n      onVisibleChange={onVisibleChange}\n      onFinish={onFinish}\n      onValuesChange={onValuesChange}\n    >\n      <ProForm.Group>\n        {initialData ? (\n          <ProFormText\n            label={<FormattedMessage id=\"group\" defaultMessage=\"group\" />}\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n            width=\"md\"\n            name=\"group\"\n            disabled={isGlobalGroup()}\n          />\n        ) : (\n          <ProForm.Item label={<FormattedMessage id=\"group\" defaultMessage=\"group\" />} name=\"group\">\n            <AutoComplete\n              style={{\n                width: '300px',\n              }}\n              autoFocus={true}\n              value={selectedGroup}\n              onChange={(value) => setSelectedGroup(value)}\n              filterOption={(inputValue, option) =>\n                option?.children?.toString().toLowerCase().indexOf(inputValue.toLowerCase()) !== -1\n              }\n            >\n              {groups.map((group) => (\n                <AutoComplete.Option key={group} value={group}>\n                  {group}\n                </AutoComplete.Option>\n              ))}\n            </AutoComplete>\n          </ProForm.Item>\n        )}\n        <ProFormText\n          label={<FormattedMessage id=\"key\" defaultMessage=\"key\" />}\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n          width=\"md\"\n          name=\"key\"\n          disabled={isGlobalGroup()}\n        />\n      </ProForm.Group>\n      <ProForm.Group>\n        <ProFormSwitch\n          name=\"enumerable\"\n          disabled={isGlobalGroup()}\n          label={<FormattedMessage id=\"enumerable\" defaultMessage=\"enumerable\" />}\n        />\n        <ProFormSwitch\n          name=\"public\"\n          disabled={isGlobalGroup()}\n          label={<FormattedMessage id=\"public\" defaultMessage=\"public\" />}\n        />\n      </ProForm.Group>\n      <ProForm.Group>\n        <ProFormRadio.Group\n          disabled={!!(!isNew || initialData)}\n          name=\"type\"\n          label={<FormattedMessage id=\"type\" />}\n          options={[\n            {\n              label: 'text',\n              value: 'text',\n            },\n            {\n              label: 'markdown',\n              value: 'markdown',\n            },\n            {\n              label: 'json',\n              value: 'json',\n            },\n            {\n              label: 'file',\n              value: 'file',\n            },\n            {\n              label: 'image',\n              value: 'image',\n            },\n            {\n              label: 'boolean',\n              value: 'boolean',\n            },\n            {\n              label: 'number',\n              value: 'number',\n            },\n            {\n              label: 'array',\n              value: 'array',\n            },\n          ]}\n        />\n      </ProForm.Group>\n      <div>\n        {type === 'text' && (\n          <ProFormText width=\"lg\" name=\"value\" label={<FormattedMessage id=\"value\" />} />\n        )}\n        {type === 'json' && (\n          <>\n            <ProFormTextArea\n              width=\"lg\"\n              name=\"value\"\n              label={<FormattedMessage id=\"value\" />}\n              tooltip={`${intl.formatMessage({\n                id: 'example_json',\n              })}: {\"name\":\"John\", \"age\":30, \"city\":[\"New York\",\"Warsaw\"]}`}\n            />\n            <ProForm.Item noStyle shouldUpdate>\n              {() => {\n                try {\n                  return <ReactJson src={JSON.parse(form.getFieldValue('value'))} />;\n                } catch {\n                  return <ReactJson src={JSON.parse(`{ \"error\": \"cannot parse this json\" }`)} />;\n                }\n              }}\n            </ProForm.Item>\n          </>\n        )}\n\n        {(type === 'file' || type === 'image') && (\n          <ProForm.Item\n            name=\"value\"\n            label=\"value\"\n            tooltip=\"select file from current repository or upload new one\"\n            valuePropName=\"value\"\n          >\n            <FilesSelector type={type} />\n          </ProForm.Item>\n        )}\n\n        {type === 'markdown' && (\n          <ProForm.Item\n            name=\"value\"\n            label=\"value\"\n            tooltip=\"The editor is WYSIWYG and includes formatting tools whilst retaining the ability to write markdown shortcuts inline and output plain Markdown.\"\n            valuePropName=\"value\"\n          >\n            <WysiwygMarkdown directory={`settings/wysiwyg`} />\n          </ProForm.Item>\n        )}\n\n        {type === 'boolean' ? (\n          <ProFormSwitch\n            name=\"data\"\n            label={<FormattedMessage id=\"value\" />}\n            checkedChildren={<CheckOutlined />}\n            unCheckedChildren={<CloseOutlined />}\n          />\n        ) : (\n          <ProForm.Item noStyle hidden>\n            <ProFormCheckbox name=\"data\" valuePropName=\"data\" />\n          </ProForm.Item>\n        )}\n\n        {type === 'number' && <ProFormDigit name=\"data\" label={<FormattedMessage id=\"value\" />} />}\n\n        {type === 'array' && (\n          <>\n            <ProFormTextArea\n              width=\"lg\"\n              name=\"value\"\n              label={<FormattedMessage id=\"value\" />}\n              tooltip={`${intl.formatMessage({\n                id: 'example_json',\n              })}: ['tutor', 'student']`}\n            />\n            <ProForm.Item noStyle shouldUpdate>\n              {() => {\n                try {\n                  return <ReactJson src={JSON.parse(form.getFieldValue('value'))} />;\n                } catch {\n                  return <ReactJson src={JSON.parse(`{ \"error\": \"cannot parse this json\" }`)} />;\n                }\n              }}\n            </ProForm.Item>\n          </>\n        )}\n      </div>\n    </ModalForm>\n  );\n};\n\nexport default SettingsModalForm;\n","import { PlusOutlined } from '@ant-design/icons';\nimport { Button, message, Tag, Tooltip, Popconfirm } from 'antd';\nimport React, { useState, useRef } from 'react';\nimport { useIntl, FormattedMessage } from 'umi';\nimport type { IntlShape } from 'react-intl';\nimport type { ProColumns, ActionType } from '@ant-design/pro-table';\nimport ProTable from '@ant-design/pro-table';\nimport { useModel } from 'umi';\n\nimport {\n  settings,\n  createSettings,\n  updateSettings,\n  deleteSettings,\n  settingGroups,\n} from '@/services/escola-lms/settings';\n\nimport SettingsModalForm from './components/ModalForm';\nimport { DeleteOutlined, EditOutlined } from '@ant-design/icons';\nimport { useEffect } from 'react';\n\nconst handleUpdate = async (intl: IntlShape, fields: API.Setting, id?: number) => {\n  const hide = message.loading(\n    intl.formatMessage({\n      id: 'loading',\n    }),\n  );\n  try {\n    await (id && id !== -1 ? updateSettings(id, { ...fields }) : createSettings({ ...fields }));\n    hide();\n    message.success(\n      intl.formatMessage({\n        id: 'success',\n      }),\n    );\n\n    return true;\n  } catch (error) {\n    hide();\n    message.error(\n      intl.formatMessage({\n        id: 'error',\n      }),\n    );\n    return false;\n  }\n};\n\nconst handleRemove = async (intl: IntlShape, id: number) => {\n  const hide = message.loading(\n    intl.formatMessage({\n      id: 'loading',\n    }),\n  );\n  try {\n    await deleteSettings(id);\n    hide();\n    message.success(\n      intl.formatMessage({\n        id: 'success',\n      }),\n    );\n    return true;\n  } catch (error) {\n    hide();\n    message.error(\n      intl.formatMessage({\n        id: 'error',\n      }),\n    );\n    return false;\n  }\n};\n\nconst TableList: React.FC = () => {\n  const [modalVisible, setModalVisible] = useState<number | false>(false);\n\n  const [groups, setGroups] = useState<string[]>([]);\n\n  const actionRef = useRef<ActionType>();\n  const intl = useIntl();\n\n  const { setInitialState } = useModel('@@initialState');\n\n  useEffect(() => {\n    settingGroups().then((response) => {\n      if (response.success) {\n        setGroups(response.data.filter((group) => group !== 'global'));\n      }\n    });\n  }, []);\n\n  const columns: ProColumns<API.Setting>[] = [\n    {\n      title: <FormattedMessage id=\"group\" defaultMessage=\"group\" />,\n      dataIndex: 'group',\n      hideInSearch: false,\n      key: 'group',\n      valueType: 'select',\n      width: 100,\n      valueEnum: groups.sort().reduce((acc, group) => ({ ...acc, [group]: group }), {}),\n    },\n    {\n      title: <FormattedMessage id=\"key\" defaultMessage=\"key\" />,\n      dataIndex: 'key',\n      hideInSearch: true,\n    },\n    {\n      title: <FormattedMessage id=\"type\" defaultMessage=\"type\" />,\n      dataIndex: 'type',\n      hideInSearch: true,\n    },\n\n    {\n      title: <FormattedMessage id=\"enumerable\" defaultMessage=\"enumerable\" />,\n      dataIndex: 'enumerable',\n      hideInForm: true,\n      hideInSearch: true,\n      render: (_, record) => (\n        <Tag color={record.enumerable ? 'success' : 'error'}>\n          <FormattedMessage\n            id={record.enumerable ? 'true' : 'false'}\n            defaultMessage={record.enumerable ? 'true' : 'false'}\n          />\n        </Tag>\n      ),\n    },\n\n    {\n      title: <FormattedMessage id=\"public\" defaultMessage=\"public\" />,\n      dataIndex: 'public',\n      hideInForm: true,\n      hideInSearch: true,\n      render: (_, record) => (\n        <Tag color={record.public ? 'success' : 'error'}>\n          <FormattedMessage\n            id={record.public ? 'true' : 'false'}\n            defaultMessage={record.public ? 'true' : 'false'}\n          />\n        </Tag>\n      ),\n    },\n\n    {\n      hideInSearch: true,\n      title: <FormattedMessage id=\"pages.searchTable.titleOption\" defaultMessage=\"操作\" />,\n      dataIndex: 'option',\n      valueType: 'option',\n      render: (_, record) => [\n        <Tooltip key=\"edit\" title={<FormattedMessage id=\"edit\" defaultMessage=\"edit\" />}>\n          <Button\n            type=\"primary\"\n            icon={<EditOutlined />}\n            onClick={() => setModalVisible(record.id)}\n          />\n        </Tooltip>,\n\n        <Popconfirm\n          key=\"delete\"\n          title={\n            <FormattedMessage\n              id=\"deleteQuestion\"\n              defaultMessage=\"Are you sure to delete this record?\"\n            />\n          }\n          onConfirm={async () => {\n            const success = await handleRemove(intl, record.id);\n            if (success) {\n              setModalVisible(false);\n              if (actionRef.current) {\n                actionRef.current.reload();\n              }\n            }\n          }}\n          okText={<FormattedMessage id=\"yes\" defaultMessage=\"Yes\" />}\n          cancelText={<FormattedMessage id=\"no\" defaultMessage=\"No\" />}\n        >\n          <Tooltip title={<FormattedMessage id=\"delete\" defaultMessage=\"delete\" />}>\n            <Button type=\"primary\" icon={<DeleteOutlined />} danger />\n          </Tooltip>\n        </Popconfirm>,\n      ],\n    },\n  ];\n\n  return (\n    <React.Fragment>\n      <ProTable<API.Setting, API.PageParams & { group: string }>\n        headerTitle={intl.formatMessage({\n          id: 'menu.settings',\n        })}\n        actionRef={actionRef}\n        rowKey=\"id\"\n        search={{\n          layout: 'vertical',\n        }}\n        toolBarRender={() => [\n          <Button\n            type=\"primary\"\n            key=\"primary\"\n            onClick={() => {\n              setModalVisible(-1);\n            }}\n          >\n            <PlusOutlined /> <FormattedMessage id=\"pages.searchTable.new\" />\n          </Button>,\n        ]}\n        request={({ pageSize, current, group }) => {\n          return settings({\n            per_page: pageSize,\n            current,\n            group,\n          }).then((response) => {\n            if (response.success) {\n              return {\n                data: response.data.filter((item) => item.group !== 'global'),\n                total: response.meta.total,\n                success: true,\n              };\n            }\n            return [];\n          });\n        }}\n        columns={columns}\n      />\n\n      <SettingsModalForm\n        groups={groups}\n        id={modalVisible}\n        visible={Number.isInteger(modalVisible)}\n        onVisibleChange={(value) => {\n          return !value && setModalVisible(false);\n        }}\n        onFinish={async (value) => {\n          const fields = value as API.Setting;\n          const success = await handleUpdate(intl, fields, Number(modalVisible));\n          if (success) {\n            setModalVisible(false);\n            if (actionRef.current) {\n              actionRef.current.reload();\n            }\n            if (fields.group === 'global') {\n              const config = await settings({ current: 1, per_page: 100, group: 'global' });\n              setInitialState((prevState) => ({\n                ...prevState,\n                config: config.success ? config.data : prevState?.config,\n              }));\n            }\n          }\n        }}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default TableList;\n","import { FormattedMessage } from '@@/plugin-locale/localeExports';\nimport { ProFormSwitch, ProFormText } from '@ant-design/pro-form';\nimport type { StoreValue } from 'antd/lib/form/interface';\nimport React from 'react';\n\ninterface SettingsValueProps {\n  field: StoreValue;\n  name: string;\n}\n\nexport const SettingsValue: React.FC<SettingsValueProps> = (props) => {\n  const { field, name } = props;\n\n  if (field?.includes('boolean')) {\n    return (\n      <ProFormSwitch\n        name={name}\n        checkedChildren={<FormattedMessage id={'true'} />}\n        unCheckedChildren={<FormattedMessage id={'false'} />}\n      />\n    );\n  }\n\n  return <ProFormText width=\"lg\" name={name} />;\n};\n\nexport default SettingsValue;\n","import React, { useEffect, useMemo } from 'react';\nimport { Form } from 'antd';\nimport ProForm, { ProFormSwitch, ModalForm, ProFormTextArea } from '@ant-design/pro-form';\nimport { Typography } from 'antd';\n\nimport { FormattedMessage } from 'umi';\nimport { updateConfig } from '@/services/escola-lms/settings';\nimport ReactJson from 'react-json-view';\nimport { useIntl } from '@@/plugin-locale/localeExports';\nimport SettingsValue from '@/pages/Settings/components/SettingsValue';\n\nconst { Text } = Typography;\n\nenum SettingPackageType {\n  Array = 'array',\n  String = 'string',\n}\n\n// base format -> input format\nconst parseValue = (value: unknown, type: SettingPackageType) => {\n  if (type === SettingPackageType.Array) {\n    return value && Array.isArray(value) ? JSON.stringify(value) : '[]';\n  }\n\n  return value;\n};\n\n// input format -> base format\nconst formatValue = (value: string = '', type: SettingPackageType) => {\n  if (type === SettingPackageType.Array) {\n    const arr = JSON.parse(value);\n    return arr && Array.isArray(arr) ? arr : [];\n  }\n\n  return value;\n};\n\nexport const SettingsPackageModalForm: React.FC<{\n  value: API.ConfigEntry;\n  visible: boolean;\n  onVisibleChange: (visible: boolean) => void;\n  onFinish: (updated: boolean) => Promise<boolean | void>;\n}> = (props) => {\n  const intl = useIntl();\n\n  const { visible, onVisibleChange, onFinish, value } = props;\n\n  const [form] = Form.useForm();\n\n  const type = useMemo(() => {\n    return (value.rules || []).includes(SettingPackageType.Array)\n      ? SettingPackageType.Array\n      : SettingPackageType.String;\n  }, [value.rules]);\n\n  useEffect(() => {\n    form.setFieldsValue({\n      ...value,\n      value: parseValue(value.value, type),\n    });\n  }, [type, value, form]);\n\n  return (\n    <ModalForm\n      form={form}\n      title={value.full_key}\n      width=\"60vw\"\n      visible={visible}\n      onVisibleChange={onVisibleChange}\n      onFinish={async () => {\n        const result = await updateConfig({\n          key: value.full_key,\n          value: formatValue(form.getFieldsValue().value, type),\n        });\n        if (result.success) {\n          onFinish(result.success === true);\n          return result.success;\n        }\n\n        return;\n      }}\n    >\n      <ProForm.Group>\n        <ProFormSwitch\n          disabled\n          name=\"public\"\n          label={<FormattedMessage id=\"public\" defaultMessage=\"public\" />}\n        />\n        <ProFormSwitch\n          disabled\n          name=\"readonly\"\n          label={<FormattedMessage id=\"readonly\" defaultMessage=\"readonly\" />}\n        />\n\n        <ProForm.Item shouldUpdate label={<FormattedMessage id=\"rules\" defaultMessage=\"rules\" />}>\n          {() => <Text code>{JSON.stringify(form.getFieldValue('rules'))}</Text>}\n        </ProForm.Item>\n      </ProForm.Group>\n\n      {type === SettingPackageType.Array ? (\n        <>\n          <ProFormTextArea\n            width=\"lg\"\n            name=\"value\"\n            label={<FormattedMessage id=\"value\" />}\n            tooltip={`${intl.formatMessage({\n              id: 'example_json',\n            })}: [\"first_field_name\", \"second_field_name\"]`}\n          />\n          <ProForm.Item noStyle shouldUpdate>\n            {() => {\n              try {\n                return <ReactJson src={JSON.parse(form.getFieldValue('value'))} />;\n              } catch {\n                return <ReactJson src={JSON.parse(`{ \"error\": \"cannot parse this array\" }`)} />;\n              }\n            }}\n          </ProForm.Item>\n        </>\n      ) : (\n        <>\n          <ProForm.Item shouldUpdate label={<FormattedMessage id=\"value\" />}>\n            {() => <SettingsValue field={form.getFieldValue('rules')} name={'value'} />}\n          </ProForm.Item>\n        </>\n      )}\n    </ModalForm>\n  );\n};\n\nexport default SettingsPackageModalForm;\n","import { Button, Tag, Tooltip } from 'antd';\nimport React, { useState, useMemo } from 'react';\nimport { useIntl, FormattedMessage } from 'umi';\nimport type { ProColumns } from '@ant-design/pro-table';\nimport ProTable from '@ant-design/pro-table';\nimport { EditOutlined } from '@ant-design/icons';\nimport PackageModalForm from './components/PackageModalForm';\nimport { sortArrayByKey } from '@/utils/utils';\n\nconst columns: ProColumns<API.ConfigEntry>[] = [\n  {\n    title: <FormattedMessage id=\"key\" defaultMessage=\"key\" />,\n    dataIndex: 'key',\n    hideInSearch: false,\n    sorter: true,\n  },\n\n  {\n    title: <FormattedMessage id=\"readonly\" defaultMessage=\"readonly\" />,\n    dataIndex: 'readonly',\n    hideInForm: true,\n    hideInSearch: true,\n    sorter: true,\n    render: (_, record) => (\n      <Tag color={record.readonly ? 'success' : 'error'}>\n        <FormattedMessage\n          id={record.readonly ? 'true' : 'false'}\n          defaultMessage={record.readonly ? 'true' : 'false'}\n        />\n      </Tag>\n    ),\n  },\n\n  {\n    title: <FormattedMessage id=\"public\" defaultMessage=\"public\" />,\n    dataIndex: 'public',\n    hideInForm: true,\n    hideInSearch: true,\n    sorter: true,\n    render: (_, record) => (\n      <Tag color={record.public ? 'success' : 'error'}>\n        <FormattedMessage\n          id={record.public ? 'true' : 'false'}\n          defaultMessage={record.public ? 'true' : 'false'}\n        />\n      </Tag>\n    ),\n  },\n\n  {\n    title: <FormattedMessage id=\"value\" defaultMessage=\"value\" />,\n    dataIndex: 'value',\n    hideInForm: true,\n    hideInSearch: true,\n    render: (_, record) =>\n      typeof record.value === 'boolean' ? (\n        <Tag color={record.value ? 'success' : 'error'}>\n          <FormattedMessage\n            id={record.value ? 'true' : 'false'}\n            defaultMessage={record.value ? 'true' : 'false'}\n          />\n        </Tag>\n      ) : Array.isArray(record.value) ? (\n        record.value.map((item) =>\n          typeof item === 'object'\n            ? React.Children.toArray(\n                <p>\n                  {Object.keys(item)\n                    .map((key) => `${key}: ${item[key]}`)\n                    .join(', ')}\n                </p>,\n              )\n            : item,\n        )\n      ) : (\n        record.value\n      ),\n  },\n];\n\nconst findNestedFields = (obj: object, searchKey: string, results: object[] = []) => {\n  if (!obj || typeof obj !== 'object') {\n    return false;\n  } else {\n    Object.keys(obj).forEach((key) => {\n      const value = obj[key];\n\n      if (key === searchKey) {\n        results.push(obj);\n      } else if (typeof value === 'object') {\n        findNestedFields(value, searchKey, results);\n      }\n    });\n  }\n\n  return results;\n};\n\nconst TableList: React.FC<{\n  packageName: keyof API.Configs;\n  values: API.Configs;\n  onValueUpdated: () => void;\n}> = ({ packageName, values, onValueUpdated }) => {\n  const intl = useIntl();\n  const [selectedEntry, setSelectedEntry] = useState<API.ConfigEntry>();\n\n  const entries = useMemo(() => {\n    const data: Record<string, API.Config> = values[packageName];\n\n    return findNestedFields(data, 'rules');\n  }, [values, packageName]);\n\n  return (\n    <React.Fragment>\n      <ProTable<API.ConfigEntry>\n        headerTitle={intl.formatMessage({\n          id: 'menu.settings',\n        })}\n        rowKey=\"key\"\n        search={{\n          layout: 'vertical',\n        }}\n        columns={[\n          ...columns,\n          {\n            hideInSearch: true,\n            title: <FormattedMessage id=\"pages.searchTable.titleOption\" defaultMessage=\"操作\" />,\n            dataIndex: 'option',\n            valueType: 'option',\n            render: (_, record) => [\n              <Tooltip key=\"edit\" title={<FormattedMessage id=\"edit\" defaultMessage=\"edit\" />}>\n                <Button\n                  type=\"primary\"\n                  icon={<EditOutlined />}\n                  onClick={() => setSelectedEntry(record)}\n                />\n              </Tooltip>,\n            ],\n          },\n        ]}\n        request={({ key }, sort) => {\n          const sortArr = sort && Object.entries(sort)[0];\n          return new Promise((resolve) => {\n            let newArray = entries ? [...(entries as API.ConfigEntry[])] : [];\n            if (key) {\n              newArray = newArray.filter((item) =>\n                item.key.toLowerCase().includes(key.toLowerCase()),\n              );\n            }\n            if (sortArr) {\n              newArray = sortArrayByKey<API.ConfigEntry>(\n                newArray,\n                sortArr[0],\n                sortArr[1] === 'ascend' ? false : true,\n              );\n            }\n            resolve({\n              data: newArray,\n              success: true,\n              total: newArray.length,\n            });\n          });\n        }}\n      />\n      {selectedEntry && (\n        <PackageModalForm\n          value={selectedEntry}\n          visible={selectedEntry !== undefined}\n          onVisibleChange={(value) => {\n            return value === false && setSelectedEntry(undefined);\n          }}\n          onFinish={async () => {\n            onValueUpdated();\n          }}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default TableList;\n","import { useState, useEffect, useCallback } from 'react';\nimport type { IntlShape } from 'react-intl';\nimport { useParams, history, useModel, useIntl, FormattedMessage } from 'umi';\nimport { Alert, Spin } from 'antd';\nimport ProCard from '@ant-design/pro-card';\nimport { PageContainer } from '@ant-design/pro-layout';\n\nimport { configs as fetchConfigs } from '@/services/escola-lms/settings';\nimport UserSettings from './user';\nimport PackageForm from './package';\nimport GlobalSettings from './global';\n\nfunction transformPackageName(rawPackageName: string): string {\n  const packageName = rawPackageName.replaceAll('escolalms', '');\n  const words = packageName.split('_');\n  const capitalizedWords = words.map((word) => word.charAt(0).toUpperCase() + word.slice(1));\n\n  return capitalizedWords.join(' ');\n}\n\nfunction getTabNameForBreadcrumbs(tab: string, intl: IntlShape): string {\n  const NON_PACKAGE_TABS = ['global_settings', 'user_settings'];\n\n  return NON_PACKAGE_TABS.includes(tab)\n    ? intl.formatMessage({ id: String(tab) })\n    : intl.formatMessage({ id: 'Settings.package' }, { package: transformPackageName(tab) });\n}\n\nexport default () => {\n  const params = useParams<{ course?: string; tab?: string }>();\n  const intl = useIntl();\n  const { tab = 'user_settings' } = params;\n\n  const [configs, setConfigs] = useState<API.Configs>();\n\n  const refetchConfigs = useCallback(() => {\n    fetchConfigs().then((response) => {\n      if (response.success) {\n        setConfigs(response.data);\n      }\n    });\n  }, []);\n\n  const { initialState } = useModel('@@initialState');\n\n  const checkGlobalConfigs = useCallback(() => {\n    return initialState?.config?.length !== 0;\n  }, [initialState]);\n\n  useEffect(() => {\n    refetchConfigs();\n  }, []);\n\n  if (!configs) {\n    return <Spin />;\n  }\n\n  return (\n    <PageContainer\n      title={getTabNameForBreadcrumbs(tab, intl)}\n      header={{\n        breadcrumb: {\n          routes: [\n            {\n              path: 'settings',\n              breadcrumbName: intl.formatMessage({\n                id: 'menu.Configuration.settings',\n              }),\n            },\n\n            {\n              path: String(tab),\n              breadcrumbName: getTabNameForBreadcrumbs(tab, intl),\n            },\n          ],\n        },\n      }}\n    >\n      {!checkGlobalConfigs() && (\n        <Alert\n          message={\n            <FormattedMessage\n              id=\"global_settings_alert_title\"\n              defaultMessage=\"Add global settings\"\n            />\n          }\n          description={\n            <FormattedMessage\n              id=\"global_settings_alert_description\"\n              defaultMessage=\"Global settings are used to configure the entire LMS. You can add global settings by clicking the button below.\"\n            />\n          }\n          type=\"warning\"\n          showIcon\n          style={{ marginBottom: '20px' }}\n        />\n      )}\n      <ProCard\n        tabs={{\n          type: 'card',\n          activeKey: tab,\n          onChange: (key) => history.push(`/configuration/settings/${key}`),\n        }}\n      >\n        <ProCard.TabPane key=\"user_settings\" tab={<FormattedMessage id=\"user.settings\" />}>\n          <UserSettings />\n        </ProCard.TabPane>\n\n        <ProCard.TabPane key=\"global_settings\" tab={<FormattedMessage id=\"global_settings\" />}>\n          <GlobalSettings />\n        </ProCard.TabPane>\n\n        {Object.keys(configs).map((pkg) => (\n          <ProCard.TabPane\n            key={pkg}\n            tab={\n              <span>\n                <FormattedMessage\n                  id=\"Settings.package\"\n                  values={{ package: transformPackageName(pkg) }}\n                />\n              </span>\n            }\n          >\n            <PackageForm\n              values={configs}\n              packageName={pkg}\n              onValueUpdated={() => refetchConfigs()}\n            />\n            {pkg}\n          </ProCard.TabPane>\n        ))}\n      </ProCard>\n    </PageContainer>\n  );\n};\n","import React from 'react';\nimport RichMarkdownEditor2 from '@escolalms/markdown-editor';\nimport { upload, resizedImage } from '@/services/escola-lms/files';\nimport './index.css';\nimport { useIntl } from 'umi';\n\ninterface FormWysiwygProps {\n  value?: string;\n  defaultValue?: string;\n  onChange?: (value: string) => void;\n  directory?: string;\n}\n\nexport const EmbedUploaded: React.FC<{ attrs: { href: string } }> = ({ attrs }) => {\n  const href = attrs.href;\n  const filename = href.split('/').pop();\n  return (\n    <p>\n      <a rel=\"noreferrer\" href={href} target=\"_blank\">\n        {filename}\n      </a>\n    </p>\n  );\n};\n\nexport const FormWysiwyg: React.FC<FormWysiwygProps> = ({\n  value,\n  onChange,\n  directory = '/wysiwyg',\n}) => {\n  const intl = useIntl();\n\n  return (\n    <div className=\"form-wysiwyg-markdown\">\n      <RichMarkdownEditor2\n        excludeBlockMenuItems={['Sketch']}\n        embeds={[\n          {\n            matcher: () => {\n              return true;\n            },\n            component: EmbedUploaded,\n          },\n        ]}\n        uploadImage={async (file) => {\n          const result = await upload(file, directory);\n\n          if (result.success) {\n            if (file.type.includes('image/')) {\n              const resizePath = result.data[0].name.includes('/')\n                ? result.data[0].name\n                : `${directory}${result.data[0].name}`;\n              return resizedImage(resizePath, 1000);\n            }\n            return result.data[0].url;\n          }\n          throw new Error('Error while uploading');\n        }}\n        defaultValue={value || ''}\n        onChange={(v) => onChange && onChange(v())}\n        placeholder={intl.formatMessage({\n          id: 'wysiwyg_placeholder',\n        })}\n      />\n    </div>\n  );\n};\n\nexport default FormWysiwyg;\n","import { PlusOutlined } from '@ant-design/icons';\nimport { Button, message, Tooltip, Popconfirm } from 'antd';\nimport React, { useState, useRef, Fragment } from 'react';\nimport { useIntl, FormattedMessage, useModel } from 'umi';\nimport type { IntlShape } from 'react-intl';\nimport type { ProColumns, ActionType } from '@ant-design/pro-table';\nimport ProTable from '@ant-design/pro-table';\nimport { TopicType } from '@/services/escola-lms/enums';\n\nimport {\n  settings,\n  createSettings,\n  updateSettings,\n  deleteSettings,\n} from '@/services/escola-lms/settings';\n\nimport SettingsModalForm from './components/ModalForm';\nimport { DeleteOutlined, EditOutlined, InfoCircleOutlined } from '@ant-design/icons';\n\nimport { getRoutes } from '@@/core/routes';\n\nconst handleUpdate = async (intl: IntlShape, fields: API.Setting, id?: number) => {\n  const hide = message.loading(\n    intl.formatMessage({\n      id: 'loading',\n    }),\n  );\n  try {\n    const updatedSettings = await (id && id !== -1\n      ? updateSettings(id, { ...fields })\n      : createSettings({ ...fields }));\n\n    hide();\n    message.success(\n      intl.formatMessage({\n        id: 'success',\n      }),\n    );\n\n    return {\n      success: true,\n      updatedSettings,\n    };\n  } catch (error) {\n    hide();\n    message.error(\n      intl.formatMessage({\n        id: 'error',\n      }),\n    );\n    return { success: false, updateSettings: null };\n  }\n};\n\nconst handleRemove = async (intl: IntlShape, id: number) => {\n  const hide = message.loading(\n    intl.formatMessage({\n      id: 'loading',\n    }),\n  );\n  try {\n    await deleteSettings(id);\n    hide();\n    message.success(\n      intl.formatMessage({\n        id: 'success',\n      }),\n    );\n    return true;\n  } catch (error) {\n    hide();\n    message.error(\n      intl.formatMessage({\n        id: 'error',\n      }),\n    );\n    return false;\n  }\n};\n\ntype InitialDataRecords = Record<\n  'logo' | 'frontURL' | 'maxLessonsNestingInProgram' | 'minTopicNestingInProgram' | string,\n  API.Setting\n>;\n\ntype Route = {\n  path: string;\n  layout: boolean;\n  hideInMenu: boolean;\n  routes: Route[];\n} & any;\n\nconst snakeToCamel = (str: string) =>\n  str.toLowerCase().replace(/(_\\w)/g, (m) => m.toUpperCase().substr(1));\n\nconst flatRoutes = (routes: Route[]): Route[] => {\n  return (\n    routes.reduce((acc, curr) => {\n      return [...acc, ...(curr.routes ? flatRoutes(curr.routes) : []), curr];\n    }, [] as Route[]) as Route[]\n  ).filter((route) => route.layout !== false && route.hideInMenu !== true);\n};\n\nconst courseEditTabsKeys = ['statistics', 'user_submission', 'user_projects'];\nconst courseEditAdditionalSettingsKeys = ['public'];\nconst templateTabsKeys = ['email', 'sms'];\n\nexport const pathToSettingName = (path: string) =>\n  `hideInMenu-${snakeToCamel(path.split('/').join('_'))}`;\n\nexport const topicTypeToSettingName = (type: string) => `disableTopicType-${type}`;\n\nconst booleanSettings = [\n  ...Object.keys(TopicType).map((type) => ({\n    key: topicTypeToSettingName(type),\n    group: 'global',\n    value: 'false',\n    public: true,\n    enumerable: true,\n    sort: 1,\n    type: 'boolean',\n    data: false,\n  })),\n  ...flatRoutes(getRoutes())\n    .filter((route) => route.path && route.path !== '/')\n    .map((route) => ({\n      path: route.path,\n      key: pathToSettingName(route.path),\n      group: 'global',\n      value: 'false',\n      public: true,\n      enumerable: true,\n      sort: 1,\n      type: 'boolean',\n      data: false,\n    })),\n  ...['ECommerce', 'Certificates'].map((feature) => ({\n    key: `disable-${feature}`,\n    group: 'global',\n    value: 'false',\n    public: true,\n    enumerable: true,\n    sort: 1,\n    type: 'boolean',\n    data: false,\n  })),\n  ...courseEditAdditionalSettingsKeys.map((key) => ({\n    key: `showInCourseAdditionalSettings-${key}`,\n    group: 'global',\n    value: 'false',\n    public: true,\n    enumerable: true,\n    sort: 1,\n    type: 'boolean',\n    data: false,\n  })),\n  ...courseEditTabsKeys.map((key) => ({\n    key: `hideInCourseTabs-${key}`,\n    group: 'global',\n    value: 'false',\n    public: true,\n    enumerable: true,\n    sort: 1,\n    type: 'boolean',\n    data: false,\n  })),\n  ...templateTabsKeys.map((key) => ({\n    key: `hideTemplateTab-${key}`,\n    group: 'global',\n    value: 'false',\n    public: true,\n    enumerable: true,\n    sort: 1,\n    type: 'boolean',\n    data: false,\n  })),\n].reduce((acc, curr, index) => {\n  acc[curr.key] = { ...curr, id: -100 * index };\n  return acc;\n}, {});\n\nconst initialData: InitialDataRecords = {\n  logo: {\n    id: -1,\n    key: 'logo',\n    group: 'global',\n    value: '',\n    public: true,\n    enumerable: true,\n    sort: 0,\n    type: 'image',\n    data: 'EscolaLMS',\n  },\n  frontURL: {\n    id: -2,\n    key: 'frontURL',\n    group: 'global',\n    value: '',\n    public: true,\n    enumerable: true,\n    sort: 0,\n    type: 'text',\n    data: 'EscolaLMS',\n  },\n\n  maxLessonsNestingInProgram: {\n    id: -4,\n    key: 'maxLessonsNestingInProgram',\n    group: 'global',\n    value: '0',\n    public: true,\n    enumerable: true,\n    sort: 1,\n    type: 'number',\n    data: 0,\n  },\n\n  minTopicNestingInProgram: {\n    id: -5,\n    key: 'minTopicNestingInProgram',\n    group: 'global',\n    value: '0',\n    public: true,\n    enumerable: true,\n    sort: 1,\n    type: 'number',\n    data: 0,\n  },\n\n  companyName: {\n    id: -6,\n    key: 'companyName',\n    group: 'global',\n    value: 'Wellms',\n    public: true,\n    enumerable: true,\n    sort: 0,\n    type: 'text',\n    data: 'Wellms',\n  },\n  companyURL: {\n    id: -7,\n    key: 'companyURL',\n    group: 'global',\n    value: 'https://www.wellms.io/',\n    public: true,\n    enumerable: true,\n    sort: 0,\n    type: 'text',\n    data: 'https://www.wellms.io/',\n  },\n\n  logoLogin: {\n    id: -8,\n    key: 'logoLogin',\n    group: 'global',\n    value: '',\n    public: true,\n    enumerable: true,\n    sort: 0,\n    type: 'image',\n    data: 'EscolaLMS',\n  },\n  logoFooter: {\n    id: -9,\n    key: 'logoFooter',\n    group: 'global',\n    value: '',\n    public: true,\n    enumerable: true,\n    sort: 0,\n    type: 'image',\n    data: 'EscolaLMS',\n  },\n  footerFontColor: {\n    id: -10,\n    key: 'footerFontColor',\n    group: 'global',\n    value: '#00000072',\n    public: true,\n    enumerable: true,\n    sort: 0,\n    type: 'text',\n    data: 'EscolaLMS',\n  },\n  showLoginBackgroundImage: {\n    id: -11,\n    key: 'showLoginBackgroundImage',\n    group: 'global',\n    value: 'true',\n    public: true,\n    enumerable: true,\n    sort: 0,\n    type: 'boolean',\n    data: 'EscolaLMS',\n  },\n  loginHeaderBackgroundColor: {\n    id: -12,\n    key: 'loginHeaderBackgroundColor',\n    group: 'global',\n    value: '#f0f2f5',\n    public: true,\n    enumerable: true,\n    sort: 0,\n    type: 'text',\n    data: 'EscolaLMS',\n  },\n  loginHeaderFontColor: {\n    id: -13,\n    key: 'loginHeaderFontColor',\n    group: 'global',\n    value: '#000000D8',\n    public: true,\n    enumerable: true,\n    sort: 0,\n    type: 'text',\n    data: 'EscolaLMS',\n  },\n  loginFormBackgroundColor: {\n    id: -14,\n    key: 'loginFormBackgroundColor',\n    group: 'global',\n    value: '#f0f2f5',\n    public: true,\n    enumerable: true,\n    sort: 0,\n    type: 'text',\n    data: 'EscolaLMS',\n  },\n  contentBackgroundColor: {\n    id: -15,\n    key: 'contentBackgroundColor',\n    group: 'global',\n    value: '#f0f2f5',\n    public: true,\n    enumerable: true,\n    sort: 0,\n    type: 'text',\n    data: 'EscolaLMS',\n  },\n  technicalMaintenance: {\n    id: -16,\n    key: 'technicalMaintenance',\n    group: 'global',\n    value: 'false',\n    public: true,\n    enumerable: true,\n    sort: 0,\n    type: 'boolean',\n    data: 'EscolaLMS',\n  },\n  technicalMaintenanceText: {\n    id: -17,\n    key: 'technicalMaintenanceText',\n    group: 'global',\n    value: '',\n    public: true,\n    enumerable: true,\n    sort: 0,\n    type: 'text',\n    data: 'EscolaLMS',\n  },\n  ...booleanSettings,\n};\n\nconst TableList: React.FC = () => {\n  const [modalVisible, setModalVisible] = useState<number | Partial<API.Setting> | false>(false);\n  const actionRef = useRef<ActionType>();\n  const intl = useIntl();\n\n  const { setInitialState, initialState } = useModel('@@initialState');\n\n  const columns: ProColumns<API.Setting>[] = [\n    {\n      title: <FormattedMessage id=\"key\" defaultMessage=\"key\" />,\n      dataIndex: 'key',\n      hideInSearch: true,\n      render: (_, record) => (\n        <Fragment>\n          <Tooltip title={<FormattedMessage id={`Settings.tooltip.${record.key}`} />}>\n            {record.key} <InfoCircleOutlined />\n          </Tooltip>\n        </Fragment>\n      ),\n    },\n    {\n      title: <FormattedMessage id=\"type\" defaultMessage=\"type\" />,\n      dataIndex: 'type',\n      hideInSearch: true,\n    },\n\n    {\n      title: <FormattedMessage id=\"value\" defaultMessage=\"value\" />,\n      dataIndex: 'value',\n      hideInForm: true,\n      hideInSearch: true,\n      render: (_, record) => record.value,\n    },\n    {\n      hideInSearch: true,\n      title: <FormattedMessage id=\"pages.searchTable.titleOption\" defaultMessage=\"操作\" />,\n      dataIndex: 'option',\n      valueType: 'option',\n      render: (_, record) => [\n        record.id > 0 ? (\n          <Tooltip key=\"edit\" title={<FormattedMessage id=\"edit\" defaultMessage=\"edit\" />}>\n            <Button\n              type=\"primary\"\n              icon={<EditOutlined />}\n              onClick={() => setModalVisible(record.id)}\n            />\n          </Tooltip>\n        ) : (\n          <Tooltip key=\"create\" title={<FormattedMessage id=\"create\" defaultMessage=\"create\" />}>\n            <Button\n              type=\"primary\"\n              icon={<PlusOutlined />}\n              onClick={() => {\n                setModalVisible(initialData[record.key] || -1);\n              }}\n            />\n          </Tooltip>\n        ),\n\n        <Popconfirm\n          key=\"delete\"\n          title={\n            <FormattedMessage\n              id=\"deleteQuestion\"\n              defaultMessage=\"Are you sure to delete this record?\"\n            />\n          }\n          onConfirm={async () => {\n            const success = await handleRemove(intl, record.id);\n            if (success) {\n              setModalVisible(false);\n              if (actionRef.current) {\n                actionRef.current.reload();\n              }\n            }\n          }}\n          okText={<FormattedMessage id=\"yes\" defaultMessage=\"Yes\" />}\n          cancelText={<FormattedMessage id=\"no\" defaultMessage=\"No\" />}\n        >\n          {record.id > 0 ? (\n            <Tooltip title={<FormattedMessage id=\"delete\" defaultMessage=\"delete\" />}>\n              <Button type=\"primary\" icon={<DeleteOutlined />} danger />\n            </Tooltip>\n          ) : null}\n        </Popconfirm>,\n      ],\n    },\n  ];\n\n  const updateConfigDynamically = (value: API.Setting) => {\n    if (!value) return;\n    if (!initialState?.config?.length && value) {\n      setInitialState({ ...initialState, config: [value] });\n    }\n    if (!initialState?.config) return;\n    const config = initialState?.config.map((setting) => {\n      if (setting.key === value.key) {\n        return {\n          ...setting,\n          ...value,\n        };\n      }\n      return setting;\n    });\n    setInitialState({ ...initialState, config });\n  };\n\n  return (\n    <React.Fragment>\n      <ProTable<API.Setting, API.PageParams & { group: string }>\n        headerTitle={intl.formatMessage({\n          id: 'menu.settings',\n        })}\n        search={false}\n        toolBarRender={false}\n        actionRef={actionRef}\n        rowKey=\"id\"\n        request={({ pageSize, current }) => {\n          return settings({\n            per_page: pageSize,\n            current,\n            group: 'global',\n          }).then((response) => {\n            if (response.success) {\n              const rows: API.Setting[] = [\n                ...Object.keys(initialData).map(\n                  (key) => response.data.find((item) => item.key === key) || initialData[key],\n                ),\n                ...response.data.filter((item) => !Object.keys(initialData).includes(item.key)),\n              ];\n\n              return {\n                data: rows,\n                total: rows.length,\n                success: true,\n              };\n            }\n            return [];\n          });\n        }}\n        columns={columns}\n      />\n\n      <SettingsModalForm\n        groups={[]}\n        id={modalVisible}\n        visible={modalVisible}\n        initialData={initialData}\n        onVisibleChange={(value) => {\n          return !value && setModalVisible(false);\n        }}\n        onFinish={async (value) => {\n          let fields = value as API.Setting;\n\n          if (fields.type === 'number') {\n            fields = { ...fields, value: String(fields.data) };\n          }\n\n          if (fields.type === 'boolean') {\n            fields = { ...fields, value: fields.data };\n          }\n\n          if (fields.type === 'array') {\n            fields = { ...fields, value: JSON.parse(fields.value) };\n          }\n\n          const { success, updatedSettings } = await handleUpdate(\n            intl,\n            fields,\n            Number(modalVisible),\n          );\n          if (success) {\n            if (updatedSettings?.success) updateConfigDynamically(updatedSettings.data);\n            setModalVisible(false);\n            if (actionRef.current) {\n              actionRef.current.reload();\n            }\n          }\n        }}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default TableList;\n","import \"antd/es/checkbox/style\";\nimport _Checkbox from \"antd/es/checkbox\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"options\", \"fieldProps\", \"proFieldProps\", \"valueEnum\"];\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { runFunction } from '@ant-design/pro-utils';\nimport React from 'react';\nimport { createField } from '../../BaseForm/createField';\nimport ProFormField from '../Field';\nvar CheckboxGroup = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var options = _ref.options,\n      fieldProps = _ref.fieldProps,\n      proFieldProps = _ref.proFieldProps,\n      valueEnum = _ref.valueEnum,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  return _jsx(ProFormField, _objectSpread({\n    ref: ref,\n    valueType: \"checkbox\",\n    valueEnum: runFunction(valueEnum, undefined),\n    fieldProps: _objectSpread({\n      options: options\n    }, fieldProps),\n    lightProps: _objectSpread({\n      labelFormatter: function labelFormatter() {\n        return _jsx(ProFormField, _objectSpread({\n          ref: ref,\n          valueType: \"checkbox\",\n          mode: \"read\",\n          valueEnum: runFunction(valueEnum, undefined),\n          filedConfig: {\n            customLightMode: true\n          },\n          fieldProps: _objectSpread({\n            options: options\n          }, fieldProps),\n          proFieldProps: proFieldProps\n        }, rest));\n      }\n    }, rest.lightProps),\n    proFieldProps: proFieldProps\n  }, rest));\n});\n/**\n * 多选框的\n *\n * @param\n */\n\nvar ProFormCheckboxComponents = /*#__PURE__*/React.forwardRef(function (_ref2, ref) {\n  var fieldProps = _ref2.fieldProps,\n      children = _ref2.children;\n  return _jsx(_Checkbox, _objectSpread(_objectSpread({\n    ref: ref\n  }, fieldProps), {}, {\n    children: children\n  }));\n});\nvar ProFormCheckbox = createField(ProFormCheckboxComponents, {\n  valuePropName: 'checked'\n});\nvar WrappedProFormCheckbox = ProFormCheckbox;\nWrappedProFormCheckbox.Group = CheckboxGroup;\nexport default WrappedProFormCheckbox;"],"sourceRoot":""}