{"version":3,"sources":["webpack:///./src/services/escola-lms/competency-challenges.ts","webpack:///./src/pages/CompetencyChallenges/index.tsx"],"names":["params","options","request","method","useCache","competency_challenge_id","body","headers","data","competency_challenge_scale_id","staticColumns","dataIndex","title","hideInSearch","sorter","render","_n","record","type","format","Date","created_at","DATETIME_FORMAT","updated_at","valueType","fieldProps","value","label","is_active","category","id","quiz_id","_i","action","deleteCompetencyChallenge","response","success","reload","CompetencyChallenges","layout","sort","per_page","page","name","getCompetencyChallenges","createTableOrderObject","total","length"],"mappings":"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","file":"p__CompetencyChallenges.cb13b574.async.js","sourcesContent":["import { request } from 'umi';\nimport type { RequestOptionsInit } from 'umi-request';\n\n/**  GET /api/admin/competency-challenges */\nexport async function getCompetencyChallenges(\n  params?: API.CompetencyChallengesParams,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultMetaResponse<API.CompetencyChallenge>>(\n    `/api/admin/competency-challenges`,\n    {\n      method: 'GET',\n      /* useCache: true */ useCache: false,\n      params,\n      ...(options || {}),\n    },\n  );\n}\n\n/** GET /api/admin/competency-challenges/:competency_challenge_id */\nexport async function getCompetencyChallenge(\n  competency_challenge_id: number,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.CompetencyChallenge>>(\n    `/api/admin/competency-challenges/${competency_challenge_id}`,\n    {\n      method: 'GET',\n      /* useCache: true */ useCache: false,\n      ...(options || {}),\n    },\n  );\n}\n\n/** POST /api/admin/competency-challenges */\nexport async function createCompetencyChallenge(\n  body: API.CreateCompetencyChallenge,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.CompetencyChallenge>>(`/api/admin/competency-challenges`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    data: body,\n    ...(options || {}),\n  });\n}\n\n/** PUT /api/admin/competency-challenges/:competency_challenge_id */\nexport async function updateCompetencyChallenge(\n  competency_challenge_id: number,\n  body: API.UpdateCompetencyChallenge,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.CompetencyChallenge>>(\n    `/api/admin/competency-challenges/${competency_challenge_id}`,\n    {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      data: body,\n      ...(options || {}),\n    },\n  );\n}\n\n/**  DELETE /api/admin/competency-challenges/:competency_challenge_id */\nexport async function deleteCompetencyChallenge(\n  competency_challenge_id: number,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DeleteResponse>(\n    `/api/admin/competency-challenges/${competency_challenge_id}`,\n    {\n      method: 'DELETE',\n      ...(options || {}),\n    },\n  );\n}\n\n/** POST /api/admin/competency-challenges/scales */\nexport async function createCompetencyChallengeScale(\n  body: API.CreateCompetencyChallengeScale,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.CompetencyChallengeScale>>(\n    `/api/admin/competency-challenges/scales`,\n    {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      data: body,\n      ...(options || {}),\n    },\n  );\n}\n\n/** PATCH /api/admin/competency-challenges/scales/:competency_challenge_scale_id */\nexport async function updateCompetencyChallengeScale(\n  competency_challenge_scale_id: number,\n  body: API.CreateCompetencyChallengeScale,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.CompetencyChallengeScale>>(\n    `/api/admin/competency-challenges/scales/${competency_challenge_scale_id}`,\n    {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      data: body,\n      ...(options || {}),\n    },\n  );\n}\n\n/**  DELETE /api/admin/competency-challenges/scales/:competency_challenge_scale_id */\nexport async function deleteCompetencyChallengeScale(\n  competency_challenge_scale_id: number,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DeleteResponse>(\n    `/api/admin/competency-challenges/scales/${competency_challenge_scale_id}`,\n    {\n      method: 'DELETE',\n      ...(options || {}),\n    },\n  );\n}\n","import React from 'react';\nimport { format } from 'date-fns';\nimport { FormattedMessage, Link } from 'umi';\nimport { Button, Popconfirm, Tag, Tooltip } from 'antd';\nimport { DeleteOutlined, EditOutlined, PlusOutlined } from '@ant-design/icons';\nimport { PageContainer } from '@ant-design/pro-layout';\nimport ProTable, { type ProColumns } from '@ant-design/pro-table';\n\nimport { createTableOrderObject } from '@/utils/utils';\nimport { DATETIME_FORMAT } from '@/consts/dates';\nimport {\n  deleteCompetencyChallenge,\n  getCompetencyChallenges,\n} from '@/services/escola-lms/competency-challenges';\nimport TypeButtonDrawer from '@/components/TypeButtonDrawer';\n\nconst staticColumns: ProColumns<API.CompetencyChallenge>[] = [\n  { dataIndex: 'id', title: <FormattedMessage id=\"ID\" />, hideInSearch: true, sorter: true },\n  { dataIndex: 'name', title: <FormattedMessage id=\"name\" />, sorter: true },\n  {\n    dataIndex: 'type',\n    title: <FormattedMessage id=\"type\" />,\n    hideInSearch: true,\n    render: (_n, record) => <FormattedMessage id={`CompetencyChallenges.types.${record.type}`} />,\n  },\n  {\n    dataIndex: 'created_at',\n    title: <FormattedMessage id=\"created_at\" />,\n    render: (_n, record) => format(new Date(record.created_at), DATETIME_FORMAT),\n    hideInSearch: true,\n    sorter: true,\n  },\n  {\n    dataIndex: 'updated_at',\n    title: <FormattedMessage id=\"updated_at\" />,\n    render: (_n, record) => format(new Date(record.updated_at), DATETIME_FORMAT),\n    hideInSearch: true,\n  },\n  {\n    dataIndex: 'is_active',\n    title: <FormattedMessage id=\"is_active\" />,\n    valueType: 'select',\n    fieldProps: {\n      options: [\n        {\n          value: true,\n          label: (\n            <Tag color=\"green\">\n              <FormattedMessage id=\"Active\" defaultMessage=\"Active\" />\n            </Tag>\n          ),\n        },\n        {\n          value: false,\n          label: (\n            <Tag color=\"red\">\n              <FormattedMessage id=\"Inactive\" defaultMessage=\"Inactive\" />\n            </Tag>\n          ),\n        },\n      ],\n    },\n    render: (_n, record) => (\n      <Tag key=\"is_active\" color={record.is_active ? 'green' : 'red'}>\n        <FormattedMessage id={record.is_active ? 'Active' : 'Inactive'} />\n      </Tag>\n    ),\n  },\n  {\n    dataIndex: 'category',\n    title: <FormattedMessage id=\"category\" />,\n    render: (_n, record) =>\n      record.category ? <TypeButtonDrawer type=\"Category\" type_id={record.category.id} /> : '-',\n    hideInSearch: true,\n  },\n  {\n    dataIndex: 'quiz_id',\n    title: <FormattedMessage id=\"CompetencyChallenges.diagnostic-test\" />,\n    render: (_n, record) => (\n      <TypeButtonDrawer type=\"EscolaLms\\TopicTypeGift\\Models\\GiftQuiz\" type_id={record.quiz_id} />\n    ),\n    hideInSearch: true,\n  },\n  {\n    valueType: 'option',\n    title: <FormattedMessage id=\"options\" />,\n    render: (_n, record, _i, action) => [\n      <Tooltip key=\"edit\" title={<FormattedMessage id=\"edit\" defaultMessage=\"edit\" />}>\n        <Link to={`/competency-challenges/${record.id}/main`}>\n          <Button type=\"primary\" icon={<EditOutlined />} />\n        </Link>\n      </Tooltip>,\n      <Popconfirm\n        key=\"delete\"\n        title={\n          <FormattedMessage\n            id=\"deleteQuestion\"\n            defaultMessage=\"Are you sure to delete this record?\"\n          />\n        }\n        onConfirm={async () => {\n          const response = await deleteCompetencyChallenge(record.id);\n          if (response.success) {\n            action?.reload();\n          }\n        }}\n        okText={<FormattedMessage id=\"yes\" defaultMessage=\"Yes\" />}\n        cancelText={<FormattedMessage id=\"no\" defaultMessage=\"No\" />}\n      >\n        <Tooltip title={<FormattedMessage id=\"delete\" defaultMessage=\"delete\" />}>\n          <Button type=\"primary\" icon={<DeleteOutlined />} danger />\n        </Tooltip>\n      </Popconfirm>,\n    ],\n  },\n];\n\nconst CompetencyChallenges: React.FC = () => (\n  <PageContainer>\n    <ProTable<API.CompetencyChallenge, API.CompetencyChallengesParams>\n      rowKey=\"id\"\n      search={{ layout: 'vertical' }}\n      toolBarRender={() => [\n        <Link key=\"addnew\" to=\"/competency-challenges/new/main\">\n          <Button type=\"primary\" key=\"primary\">\n            <PlusOutlined /> <FormattedMessage id=\"new\" defaultMessage=\"new\" />\n          </Button>\n        </Link>,\n      ]}\n      request={async ({ per_page, page, is_active, name }, sort) => {\n        const response = await getCompetencyChallenges({\n          page,\n          per_page,\n          name,\n          is_active,\n          ...createTableOrderObject(sort, 'created_at'),\n        });\n\n        if (!response.success) {\n          return { data: [], total: 0, success: false };\n        }\n\n        return { data: response.data, total: response.data.length, success: true };\n      }}\n      columns={staticColumns}\n    />\n  </PageContainer>\n);\n\nexport default CompetencyChallenges;\n"],"sourceRoot":""}