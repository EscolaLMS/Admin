{"version":3,"sources":["webpack:///./src/pages/Roles/components/ModalForm.tsx","webpack:///./src/pages/Roles/index.tsx","webpack:///./src/services/escola-lms/roles.ts"],"names":["RolesModalForm","props","intl","useIntl","visible","onVisibleChange","onFinish","id","useForm","form","formatMessage","defaultMessage","required","TableColumns","title","dataIndex","hideInSearch","sorter","width","RolesPage","actionRef","useRef","useState","modalVisible","setModalVisible","layout","sort","pageSize","current","name","sortArr","Object","entries","roles","order_by","order","undefined","then","response","success","data","total","meta","valueType","render","_","record","deleteRole","reload","value","createRole","request","history","push","params","options","method","useCache","body","headers"],"mappings":"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","file":"p__Roles.d67cbbe5.async.js","sourcesContent":["import React from 'react';\nimport { Form } from 'antd';\nimport ProForm, { ProFormText, ModalForm } from '@ant-design/pro-form';\n\nimport { useIntl, FormattedMessage } from 'umi';\n\nexport const RolesModalForm: React.FC<{\n  id?: number | false;\n  visible: boolean;\n  onVisibleChange: (visible: boolean) => void;\n  onFinish: (formData: API.Setting) => Promise<boolean | void>;\n}> = (props) => {\n  const intl = useIntl();\n\n  const { visible, onVisibleChange, onFinish, id } = props;\n\n  const [form] = Form.useForm();\n\n  return (\n    <ModalForm\n      form={form}\n      title={intl.formatMessage({\n        id: id ? 'editSetting' : 'newSetting',\n        defaultMessage: id ? 'editSetting' : 'newSetting',\n      })}\n      width=\"30vw\"\n      visible={visible}\n      onVisibleChange={onVisibleChange}\n      onFinish={onFinish}\n    >\n      <ProForm.Group>\n        <ProFormText\n          label={<FormattedMessage id=\"name\" defaultMessage=\"name\" />}\n          rules={[\n            {\n              required: true,\n            },\n          ]}\n          width=\"md\"\n          name=\"name\"\n        />{' '}\n      </ProForm.Group>\n    </ModalForm>\n  );\n};\n\nexport default RolesModalForm;\n","import React, { useState, useRef } from 'react';\nimport { Button, Tooltip, Popconfirm } from 'antd';\nimport { useIntl, FormattedMessage, Link, history } from 'umi';\nimport type { ProColumns, ActionType } from '@ant-design/pro-table';\nimport ProTable from '@ant-design/pro-table';\nimport { PageContainer } from '@ant-design/pro-layout';\nimport { DeleteOutlined, EditOutlined, PlusOutlined } from '@ant-design/icons';\nimport { roles, deleteRole, createRole } from '@/services/escola-lms/roles';\nimport RolesModalForm from './components/ModalForm';\n\nexport const TableColumns: ProColumns<API.Role>[] = [\n  {\n    title: <FormattedMessage id=\"ID\" defaultMessage=\"ID\" />,\n    dataIndex: 'id',\n    hideInSearch: true,\n    sorter: true,\n    width: '80px',\n  },\n  {\n    width: '80%',\n    title: <FormattedMessage id=\"name\" defaultMessage=\"name\" />,\n    dataIndex: 'name',\n    hideInSearch: false,\n    sorter: true,\n  },\n];\n\nconst RolesPage: React.FC = () => {\n  const actionRef = useRef<ActionType>();\n  const [modalVisible, setModalVisible] = useState(false);\n\n  const intl = useIntl();\n\n  return (\n    <PageContainer>\n      <ProTable<API.Role>\n        headerTitle={intl.formatMessage({\n          id: 'menu.Users.Roles',\n          defaultMessage: 'roles',\n        })}\n        actionRef={actionRef}\n        rowKey=\"id\"\n        search={{\n          layout: 'vertical',\n        }}\n        toolBarRender={() => [\n          <Button type=\"primary\" key=\"primary\" onClick={() => setModalVisible(true)}>\n            <PlusOutlined /> <FormattedMessage id=\"new\" defaultMessage=\"new\" />\n          </Button>,\n        ]}\n        request={({ pageSize, current, name }, sort) => {\n          const sortArr = sort && Object.entries(sort)[0];\n          return roles({\n            pageSize,\n            current,\n            name,\n            order_by: sortArr && sortArr[0],\n            order: sortArr ? (sortArr[1] === 'ascend' ? 'ASC' : 'DESC') : undefined,\n          }).then((response) => {\n            if (response.success) {\n              return {\n                data: response.data,\n                total: response.meta.total,\n                success: true,\n              };\n            }\n            return [];\n          });\n        }}\n        columns={[\n          ...TableColumns,\n          {\n            hideInSearch: true,\n            title: <FormattedMessage id=\"pages.searchTable.titleOption\" />,\n            dataIndex: 'option',\n            valueType: 'option',\n            render: (_, record) => [\n              <Link to={`/users/roles/${record.name}`} key=\"new\">\n                <Button type=\"primary\" icon={<EditOutlined />} />\n              </Link>,\n              <Popconfirm\n                key=\"delete\"\n                title={\n                  <FormattedMessage\n                    id=\"deleteQuestion\"\n                    defaultMessage=\"Are you sure to delete this record?\"\n                  />\n                }\n                onConfirm={async () => {\n                  const success = await deleteRole(record.name);\n                  if (success) {\n                    setModalVisible(false);\n                    if (actionRef.current) {\n                      actionRef.current.reload();\n                    }\n                  }\n                }}\n                okText={<FormattedMessage id=\"yes\" />}\n                cancelText={<FormattedMessage id=\"no\" />}\n              >\n                <Tooltip title={<FormattedMessage id=\"delete\" defaultMessage=\"delete\" />}>\n                  <Button type=\"primary\" icon={<DeleteOutlined />} danger />\n                </Tooltip>\n              </Popconfirm>,\n            ],\n          },\n        ]}\n      />\n      <RolesModalForm\n        visible={modalVisible}\n        onVisibleChange={(value) => {\n          return value === false && setModalVisible(false);\n        }}\n        onFinish={async (value) => {\n          const request = await createRole(value);\n          const response = await request;\n\n          if (response.success) {\n            setModalVisible(false);\n            if (actionRef.current) {\n              actionRef.current.reload();\n              history.push(`/users/roles/${response.data.name}`);\n            }\n          }\n        }}\n      />\n    </PageContainer>\n  );\n};\n\nexport default RolesPage;\n","import { request } from 'umi';\nimport type { RequestOptionsInit } from 'umi-request';\n\n/**  GET /api/admin/roles */\nexport async function roles(\n  params?: API.CourseParams & {\n    // query\n    current?: number;\n    pageSize?: number;\n    name?: string;\n    search?: string;\n  },\n  options?: RequestOptionsInit,\n) {\n  return request<API.RolesList>(`/api/admin/roles`, {\n    method: 'GET',\n    /* useCache: true */ useCache: false,\n    params,\n    ...(options || {}),\n  });\n}\n\n/**  POST /api/admin/roles */\nexport async function createRole(body?: Partial<API.Role>, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.Role>>(`/api/admin/roles`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    data: body,\n    ...(options || {}),\n  });\n}\n\n/**  DELETE /api/admin/roles/:id */\nexport async function deleteRole(id: string, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.Role>>(`/api/admin/roles/${id}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    ...(options || {}),\n  });\n}\n\n/**  GET /api/admin/roles/:name */\nexport async function permisions(name: string, options?: RequestOptionsInit) {\n  return request<API.RolesList>(`/api/admin/roles/${name}`, {\n    method: 'GET',\n    /* useCache: true */ useCache: false,\n\n    ...(options || {}),\n  });\n}\n\n/**  PATCH /api/admin/roles/:name */\nexport async function setRolePermisions(name: string, body?: any, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.Role>>(`/api/admin/roles/${name}`, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    data: body,\n    ...(options || {}),\n  });\n}\n"],"sourceRoot":""}