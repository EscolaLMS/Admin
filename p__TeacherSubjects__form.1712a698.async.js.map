{"version":3,"sources":["webpack:///./src/components/CourseStatistics/ExportStatsButton.tsx","webpack:///./src/components/CourseStatistics/userProgress.tsx","webpack:///./src/services/escola-lms/exams.ts","webpack:///./src/pages/TeacherSubjects/components/ConvertGradesModal.tsx","webpack:///./src/pages/TeacherSubjects/components/ExamForm.tsx","webpack:///./src/pages/TeacherSubjects/components/ExamResults.tsx","webpack:///./src/pages/TeacherSubjects/components/Exams.tsx","webpack:///./src/services/escola-lms/chats.ts","webpack:///./src/pages/TeacherSubjects/components/CreateTeamsChatButton.tsx","webpack:///./src/pages/TeacherSubjects/components/Students.tsx","webpack:///./src/services/escola-lms/attendances.ts","webpack:///./src/components/AttendanceCheckbox/utils.ts","webpack:///./src/components/AttendanceCheckbox/index.tsx","webpack:///./src/pages/TeacherSubjects/components/Attendances.tsx","webpack:///./src/services/escola-lms/grades.ts","webpack:///./src/pages/TeacherSubjects/components/GradesScale.tsx","webpack:///./src/services/escola-lms/schedules.ts","webpack:///./src/pages/TeacherSubjects/components/Schedule.tsx","webpack:///./src/pages/TeacherSubjects/components/FinalGradesDetails/utils.ts","webpack:///./src/pages/TeacherSubjects/components/FinalGradesDetails/hooks.ts","webpack:///./src/pages/TeacherSubjects/components/FinalGradesDetails/index.tsx","webpack:///./src/pages/TeacherSubjects/components/FinalGradesList.tsx","webpack:///./src/pages/TeacherSubjects/components/FileExportsHistory.tsx","webpack:///./src/pages/TeacherSubjects/components/FinalGradeSelect.tsx","webpack:///./src/pages/TeacherSubjects/components/ExamGradeInput.tsx","webpack:///./src/pages/TeacherSubjects/components/ClassRegister/utils.tsx","webpack:///./src/pages/TeacherSubjects/components/ClassRegister/index.tsx","webpack:///./src/pages/TeacherSubjects/form.tsx","webpack:///./src/components/ProgramForm/Context/index.tsx","webpack:///./src/services/escola-lms/reports.ts"],"names":["ExportStatsButton","course_id","stat","useState","loading","setLoading","onClickFactory","useCallback","courseId","exportStatForCourse","response","Blob","downloadLink","document","createElement","href","window","URL","createObjectURL","download","body","appendChild","click","removeChild","console","error","findH5PType","topic","topicable","content","contents","Object","values","library","UserProgress","topics","stats","showSeconds","setShowSeconds","columns","useMemo","title","dataIndex","render","id","map","type","topicable_type","split","pop","row","result","minutes","started_at","finished_at","seconds","toFixed","dataSource","userStat","reduce","acc","find","userStatTopic","Number","email","v","x","table","props","maxWidth","UserCourseFinish","UserCourseAttempts","choosenUserEmail","setChoosenUserEmail","choosenAttempt","setChoosenAttempt","intl","useIntl","flatMap","userStats","attempts","dates","attempt","datesValue","date","seconds_total","config","xField","yField","seriesField","isStack","xAxis","label","autoHide","autoRotate","slider","start","end","position","layout","newValue","Set","filter","overflow","minHeight","width","formatMessage","formatter","datum","Math","floor","name","value","isInteger","params","options","request","method","useCache","headers","data","exam_id","user_id","FileExamGradeType","onDataConverted","groupSelectDisabled","useTeacherSubject","semester_subject_id","teacherSubjectData","selectedGroup","setSelectedGroup","groupOptions","groups","reqData","group_id","onUploadFile","success","exam_results","results","length","info","fileList","undefined","ManualExamGradeType","groupUsers","onSelectedGroupChange","currGroup","byId","users","first_name","last_name","academic_teacher_id","FILE_TYPES","ExamGradeType","TeamsLecture","TestPortal","TeamsForms","ConvertGradesModal","open","closeModal","onSuccess","fetchGroupUsers","convertedData","setConvertedData","useEffect","Manual","forEach","disabled","includes","SelectTypeButtonsGroup","onSelect","staticColumns","editable","valueType","formItemProps","rules","required","message","min","max","ExamForm","ProForm","useForm","form","selectedType","setSelectedType","fetching","setFetching","getGroupById","editableKeys","numExamId","resetFields","isNaN","getExam","then","res","weight","passed_at","setFieldsValue","finally","resetState","Boolean","formData","areExamResultsValid","every","createExam","updateExam","history","push","onValuesChange","record","bodyStyle","paddingInline","hideInSearch","ExamResults","setTitle","total","sorter","_","format","Date","DAY_FORMAT","created_at","semester","year","Exams","actionRef","useRef","location","useLocation","query","sort","current","pageSize","sortArr","entries","getExams","per_page","page","order_by","order","meta","deleteExam","reload","CreateTeamsChatButton","student_id","onClick","createTeamsChat","web_url","TableColumns","getGroupsOptions","subjectGroups","getTableData","studentUserGroups","curr","userTable","innerAcc","currentUser","group_name","Students","fetchAllStudentsAndGroups","parent_id","tableData","toLowerCase","hideInTable","filterMultiple","fieldProps","mode","_n","attendances","attendance","attendanceMapped","AttendanceValue","ABSENT","attendanceMap","PRESENT","ch1","ch2","PRESENT_NOT_EXERCISING","EXCUSED_ABSENCE","statusStr","statusMap","true_false","true_true","false_false","false_true","AttendanceCheckbox","groupAttendanceScheduleId","studentId","parseToStatus","status","setStatus","firstMount","handleChangeAttendance","changeStudentAttendance","parseToAttendanceValue","onCh1Change","e","target","checked","onCh2Change","prev","Attendances","dynamicCols","setDynamicCols","selectedGroupName","setSelectedGroupName","defaultValue","allowClear","fixed","defaultMessage","full_name","Promise","all","fetchStudentUserGroup","fetchGroupAttendanceSchedule","studentUserGroupRes","groupAttendanceScheduleRes","String","date_from","align","studentFullName","studentAttendances","groupAttendanceSchedule","studentAttendance","a","b","localeCompare","onChange","tutor_id","s_subject_scale_form_id","final_grade_id","GradeScaleTable","subjectTutorGradeScale","onFormSubmit","setEditableKeys","gradeScaleWithIds","scale","i","setFieldValue","_p","submit","padding","startEditable","saveText","actionRender","_r","_c","dom","save","GradesScale","useModel","initialState","tutors","subjectTutorGrades","setSubjectTutorGrades","selectedTutor","setSelectedTutor","tutorViewing","tutorsSelectOptions","refreshSubjectTutorGrades","getSubjectTutorGrades","onFormSubmitFactory","subjectTutorGradeScales","grade_scale","tutorGradeScale","grade","grade_value","createSubjectTutorGrades","textAlign","Schedule","selectedEvent","setSelectedEvent","eventData","setEventData","now","moment","events","event","group","term_status","toDate","date_to","tutor_name","tutor","tutor_email","subject","ms_teams_join_url","fetchEvents","fetchAllSchedules","date_form","handleEventClick","handleModalClose","checkDate","isSame","isAfter","dateCellRender","filteredEvents","handlePanelChange","startOf","subtract","endOf","add","initialStartDate","initialEndDate","DAYTIME_FORMAT","getStudentExamsFromExams","exams","exam","examResult","getProposedGrade","studentExams","tutorGradeScales","sum","weightsSum","weightedAverage","sortedGradeScales","isWeightedAverageGreater","at","firstFalseIndex","findIndex","getScalesBySubjectScaleFormId","tutorGrades","finalGrades","setFinalGrades","getUserFinalGrades","gradeTerms","setGradeTerms","getGradeTerms","subjectGradeScales","setSubjectGradeScales","getSubjectGradeScales","setTutorGradeScales","userAttendanceSchedules","setUserAttendanceSchedules","fetchUserAttendanceSchedules","filteredSchedules","rest","attendanceItem","setStudentExams","userCourses","setUserCourses","userCoursesStats","setUserCoursesStats","userCoursesTopics","setUserCoursesTopics","course","program","responses","getFlatTopics","lessons","getCourseStats","finishedTopics","attendanceList","tutorGradeScalesColumns","userAttendanceColumns","studentExamsColumns","finalGradesColumns","grade_date","grade_name","TABLE_PAGE_SIZE","FinalGradesDetails","useStudentExams","useFinalGrades","useGradeTerms","useSubjectGradeScales","useTutorGradeScales","useUserAttendanceSchedules","useUserCoursesStats","gradeTermsSelectOptions","gradesSelectOptions","proposedGrade","onFinalGradeSubmit","grade_scale_id","grade_term_id","existingFinalGrade","grades","grade_term","updateFinalGrade","createFinalGrade","lesson_group_user_id","finalGradesTableData","term","areStatisticsLoading","isStatisticDataPresent","fontSize","fontWeight","user","display","flexDirection","paddingTop","flex","gap","FinalGradesList","group_ids","allGroups","getGroupFinalGrades","DownloadButton","url","DATETIME_FORMAT","renderFormItem","item","defaultRender","stateType","getFieldValue","created_by","exported_at","exported_by","FileExportsHistory","getPCGExportsHistory","getGradeScaleId","gradeScales","FinalGradeSelect","defaultFinalGrade","createdGrade","setCreatedGrade","recentGrade","ExamGradeInput","debounce","createExamResult","getAttendanceCols","children","getStudentAttendances","groupAttendanceSchedules","getExamsCols","getStudentExamResults","getFinalGradesCols","final_grades","getStudentFinalGrades","finalGradeItem","getFinalGrades","studentFinalGrade","ClassRegister","fetchGroupFinalGrades","finalGradesRes","fetchExams","fetchSubjectTutorGrades","fetchGradeTerms","fetchSubjectGradeScales","examsRes","tutorGradesRes","gradeTermsRes","subjectGradeScalesRes","attendanceCols","examsCols","finalGradeCols","studentFinalGrades","tutorScales","proposed_grade","studentExamResults","groupName","TeacherSubjectsFormContent","tab","setInitialState","currentUserHasPermissions","isUserHavePermissions","showGradeScale","PERMISSIONS","TeacherListGradeScale","breadcrumb","routes","path","breadcrumbName","activeKey","key","useParams","subjectId","Context","React","createContext","getRandomId","round","random","getFlatLessons","recursiveAddTopicToLessons","lessonId","lesson","recursiveAddLessonToLessons","newLesson","recursiveEditLesson","updatedLesson","appendParentIdToLessons","lessonParentId","recursiveDeleteLesson","recursiveDeleteTopic","topicId","recursiveTopicUploaded","prevTopicId","lesson_id","file","AppContext","state","setState","flatTopics","flatLessons","h5ps","setH5ps","l","getLessons","getLessonIdByTopicId","topic_id","lesson_item","currentEditMode","t","addNewLesson","parentId","isNew","active","prevState","updateLesson","apiCreateLesson","apiUpdateLesson","deleteLesson","apiRemoveLesson","updateTopic","topic_item","apiCreateTopic","apiUpdateTopic","TopicType","Video","setTimeout","deleteTopic","apiRemoveTopic","addNewTopic","newTopic","onTopicUploaded","cloneTopic","apiCloneTopic","cloneLesson","apiCloneLesson","responseType","accept"],"mappings":"8lBAYaA,GAAqC,SAAC,GAG7C,IAFJC,IAEI,GAFJA,UAEI,MADJC,QACI,YADG,oDACH,GACJ,GAA8BC,oBAAS,IAAvC,sBAAOC,GAAP,MAAgBC,GAAhB,MAEMC,GAAiBC,uBACrB,SAACC,EAAD,wCAAsB,mGACpBH,UAAW,IADS,kBAGKI,YAAoBD,EAAU,CACnDN,cAJgB,GAGZQ,GAHY,OAOdA,aAAoBC,OAChBC,IAAeC,SAASC,cAAc,KAC5CF,GAAaG,KAAOC,OAAOC,IAAIC,gBAAgBR,IAC/CE,GAAaO,SAAb,0BAA2ClB,GAA3C,SACAY,SAASO,KAAKC,YAAYT,IAC1BA,GAAaU,QACbT,SAASO,KAAKG,YAAYX,KAbV,gDAgBlBY,QAAQC,MAAR,UAhBkB,qBAkBlBpB,GAAW,IAlBO,4EAqBtB,CAACH,KAGH,MACE,sBAAQ,KAAK,UAAU,QAASE,GAAS,QAASE,GAAeL,IAAjE,UACE,cAAC,IAAD,IADF,IACqB,cAAC,IAAD,CAAkB,GAAG,eC7BxCyB,EAAc,SAACC,GAAwB,CAC3C,MAAIA,IAAMC,UAAUC,QAAQC,SACnBC,OAAOC,OAAOL,GAAMC,UAAUC,QAAQC,UAAU,GAAGG,QAErD,OAGIC,GAIR,SAAC,GAAiC,IAA/BjC,IAA+B,GAA/BA,UAAWkC,GAAoB,GAApBA,OAAQC,GAAY,GAAZA,MACzB,GAAsCjC,oBAAS,IAA/C,sBAAOkC,GAAP,MAAoBC,GAApB,MACMC,GAAuCC,mBAAQ,UAAM,CACzD,MAAO,CACL,CACEC,MAAO,cAAC,IAAD,CAAkB,GAAG,SAC5BC,UAAW,KACXC,OAAQ,SAACC,GAAD,OAAgB,eAAC,KAAD,CAAkB,KAAK,oBAAkB,QAASA,OAE5E,CACEH,MAAO,cAAC,IAAD,CAAkB,GAAG,UAC5BC,UAAW,UARf,mBAUKP,GAAOU,IAAI,SAAClB,GAAU,QACnBmB,GAAwB,IAAGnB,GAAMoB,kBAAT,yBAAG,GAAsBC,MAAM,MAAMC,MAEjE,MAAIH,MAAS,OACXA,IAAOpB,EAAYC,KAGd,CACLgB,OAAQ,SAACO,EAAgD,CACvD,GAAIC,IAAS,EACTC,GAAU,EAUd,OATIF,GACF,CAAIA,EAAIG,YAAcH,EAAII,YACxBH,GAAS,EACAD,EAAIG,YACbF,IAAS,GAEXC,GAAUF,EAAIK,QAAU,IAGlBJ,QACD,GACH,MACE,gCACE,oBAAK,MAAM,UAAX,eACCd,IAAe,kCAAQe,GAAQI,QAAQ,GAAxB,cAGjB,GACH,MACE,gCACE,oBAAK,MAAM,OAAX,eACCnB,IAAe,kCAAQe,GAAQI,QAAQ,GAAxB,cAGjB,WAEH,MACE,eAAC,KAAM,SAAP,UACE,oBAAK,MAAM,QAAX,mBAMVf,MACE,kCACE,6BAAMK,KADR,IACqBnB,GAAMc,SAG7BC,UAAWf,GAAMiB,SAItB,CAACT,GAAQE,KAENoB,EAA+BjB,mBAAQ,UAAM,CACjD,MAAOJ,IAAMS,IAAI,SAACa,GAAD,OACfvB,IAAOwB,OACL,SAACC,GAAKjC,GAAU,CACd,GAAMwB,GAASO,GAASvB,OAAO0B,KAAK,SAACC,EAAD,OAAmBA,GAAclB,KAAOjB,GAAMiB,KAClF,MAAO,8BAAKgB,IAAZ,mBAAkBG,OAAOpC,GAAMiB,IAAMO,GAArC,KAAqCA,EAAU,KAEjD,CAAEa,MAAON,GAASM,MAAOpB,GAAIc,GAASd,QAGzC,CAACR,GAAOD,KAEX,MACE,oBACE,MAAO,iBACL,qBAAK,QAAQ,gBAAgB,MAAM,SAAnC,UACE,+BACE,cAAC,IAAD,CAAkB,GAAG,WAAW,eAAe,cAAe,IAC9D,oBAAK,MAAM,UAAX,eACA,cAAC,IAAD,CAAkB,GAAG,UAAU,eAAe,aAHhD,IAG8D,oBAAK,MAAM,OAAX,eAC5D,cAAC,IAAD,CAAkB,GAAG,aAAa,eAAe,iBAAkB,IACnE,oBAAK,MAAM,QAAX,eACA,cAAC,IAAD,CAAkB,GAAG,cAAc,eAAe,iCAAkC,IACpF,mBAAQ,QAASE,GAAa,SAAU,SAAC4B,GAAD,OAAO3B,IAAe2B,UAEhE,cAAC,GAAD,CAAmB,UAAWhE,SAGlC,QAASsC,GACT,WAAYkB,EACZ,KAAK,QACL,OAAQ,CAAES,EAAG,MACb,WAAY,CACVC,MAAO,SAACC,GAAD,OACL,eAAC,IAAD,CAAiB,WAAY,GAAM,MAAO,CAAEC,SAAU,QAAU,eAAgB,GAAhF,SACE,sCAAWD,YAQVE,GAAuE,SAAC,GAAc,IAAZlC,IAAY,GAAZA,MAC/EG,GAAsEC,mBAAQ,UAAM,CACxF,MAAO,CACL,CACEC,MAAO,OACPC,UAAW,KACXC,OAAQ,SAACC,GAAD,OAAgB,eAAC,KAAD,CAAkB,KAAK,oBAAkB,QAASA,OAE5E,CACEH,MAAO,QACPC,UAAW,SAEb,CACED,MAAO,cAAC,IAAD,CAAkB,GAAG,cAAc,eAAe,gBACzDC,UAAW,iBAGd,IAEGe,GAA8DjB,mBAAQ,UAAM,CAChF,MAAOJ,IAAMS,IAAI,gBAAGD,IAAH,GAAGA,GAAIoB,GAAP,GAAOA,MAAOV,GAAd,GAAcA,YAAd,MAAiC,CAChDV,MACAoB,SACAV,mBAED,CAAClB,KAEJ,MACE,oBACE,MAAO,iBACL,8BACE,cAAC,IAAD,CAAkB,GAAG,kBAAkB,eAAe,gBAG1D,QAASG,GACT,WAAYkB,GACZ,KAAK,QACL,OAAQ,CAAES,EAAG,QAKNK,GAAgE,SAAC,GAAc,IAAZnC,IAAY,GAAZA,MAC9E,GAAgDjC,oBAAwB,MAAxE,sBAAOqE,GAAP,MAAyBC,GAAzB,MACA,GAA4CtE,oBAAwB,MAApE,sBAAOuE,GAAP,MAAuBC,EAAvB,MACMC,GAAOC,cAEPpB,GAAajB,mBAAQ,UAAM,CAC/B,MAAOJ,IAAM0C,QAAQ,SAACC,EAAD,OACnBhD,QAAOC,OAAO+C,EAAUC,UAAUF,QAAQ,WAAwB,IAArBG,IAAqB,EAArBA,MAAOC,GAAc,EAAdA,QAC5CC,GAAapD,OAAOC,OAAOiD,IAAOH,QAAQ,WAA6B,IAA1BM,GAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,cACvD,MAAO,CACLD,OACAF,WACAG,gBACArB,MAAOe,EAAUf,SAIrB,MAAOmB,SAGV,CAAC/C,KAEEkD,GAAc,CAClBC,OAAQ,OACRC,OAAQ,gBACRC,YAAa,UACbC,QAAS,GACTC,MAAO,CACLC,MAAO,CACLC,SAAU,GACVC,WAAY,KAGhBC,OAAQ,CACNC,MAAO,EACPC,IAAK,GAEPL,MAAO,CACLM,SAAU,SACVC,OAAQ,CACN,CACErD,KAAM,4BAER,CACEA,KAAM,yBAER,CACEA,KAAM,mBAMd,MACE,eAAC,KAAD,CACE,MACE,+BACE,cAAC,IAAD,CAAkB,GAAG,qCACrB,oBACE,WAAU,GACV,MAAO0B,GACP,SAAU,SAAC4B,EAAa,CACtB3B,GAAoB2B,GACpBzB,EAAkB,OAEpB,YAAa,cAAC,IAAD,CAAkB,GAAG,gBAAgB,eAAe,oBAPnE,SASGvC,GAAMS,IAAI,eAAGD,GAAH,EAAGA,GAAIoB,GAAP,EAAOA,MAAP,MACT,oBAAQ,OAAR,CAAwB,MAAOA,GAA/B,SACGA,IADiBpB,OAKxB,oBACE,MAAO8B,GACP,SAAU,SAAC0B,EAAD,OAAczB,GAAkByB,IAC1C,SAAU5B,KAAqB,KAC/B,YAAa,cAAC,IAAD,CAAkB,GAAG,iBAAiB,eAAe,mBAJpE,SAMG,YACI,GAAI6B,KACL5C,GACG6C,OAAO,eAAGtC,GAAH,EAAGA,MAAH,MAAeA,KAAUQ,KAChC3B,IAAI,eAAGqC,GAAH,EAAGA,QAAH,MAAiBA,OAE1BrC,IAAI,SAACqC,EAAD,OACJ,qBAAQ,OAAR,CAAe,MAAOA,EAAtB,UACE,cAAC,IAAD,CAAkB,GAAG,UAAU,eAAe,YADhD,IAC8DA,IAD1BA,UAO5C,QAAS,GACT,OAAO,SAxCT,SA0CE,qBAAK,MAAO,CAAEqB,SAAU,OAAQC,UAAW,QAASC,MAAO,QAA3D,SACE,cAAC,KAAD,6BACMnB,IADN,IAEE,QAAS,CACP7C,MAAO,GAAF,OAAKmC,GAAK8B,cAAc,CAAE9D,GAAI,aACnC+D,UAAW,SAACC,EAAU,CACpB,GAAMxD,IAAUyD,KAAKC,MAAM,CAACF,EAAMvB,cAAgB,IAC5C9B,GAAU,CAACqD,EAAMvB,cAAgB,GAAK,CAACuB,EAAMvB,cAAgBjC,GAAU,GAAK,EAElF,MAAO,CACL2D,KAAMH,EAAM1B,QACZ8B,MAAO,GAAF,OAAK5D,GAAL,aAAiBG,GAAjB,QAIX,KAAME,GACH6C,OAAO,eAAGtC,GAAH,EAAGA,MAAH,MAAeA,KAAUQ,KAChC8B,OAAO,eAAGpB,GAAH,EAAGA,QAAH,MACNnB,QAAOkD,UAAUvC,IAAkBQ,IAAYR,GAAiB,c,gZCnSvE,WAAP,oC,qDAAO,WAAwBwC,EAA0BC,EAAlD,oGACEC,YAAO,gCACZC,OAAQ,MACaC,SAAU,GAC/BJ,UACIC,GAAW,UALZ,qC,wBAUA,YAAP,oC,qDAAO,WAA0B/F,EAA8B+F,EAAxD,oGACEC,YAAO,gCACZC,OAAQ,OACRE,QAAS,CACP,eAAgB,oBAElBC,KAAMpG,GACF+F,GAAW,UAPZ,qC,wBAYA,YAAP,uC,uDAAO,WACLvE,EACAxB,EACA+F,EAHK,oGAKEC,YAAO,2BAAoDxE,GAApD,aACZyE,OAAQ,MACRG,KAAMpG,EACekG,SAAU,IAC3BH,GAAW,UATZ,qC,yBAcA,YAAP,qC,uDAAO,WAAuBvE,EAAYuE,EAAnC,oGACEC,YAAO,2BAAoDxE,GAApD,aACZyE,OAAQ,MACaC,SAAU,IAC3BH,GAAW,UAJZ,qC,yBASA,YAAP,qC,uDAAO,WAA0BvE,EAAYuE,EAAtC,oGACEC,YAAO,2BAAqDxE,GAArD,aACZyE,OAAQ,UACJF,GAAW,UAHZ,qC,yBAQA,YAAP,yC,uDAAO,WACLM,EACAC,EACAtG,EACA+F,EAJK,oGAMEC,YAAO,2BAAoDK,EAApD,kBAAqEC,GAArE,aACZL,OAAQ,OACRE,QAAS,CACP,eAAgB,oBAElBC,KAAMpG,GACF+F,GAAW,UAZZ,qC,yBAiBA,YAAP,uC,uDAAO,WACLM,EACAC,EACAP,EAHK,oGAKEC,YAAO,2BAAqDK,EAArD,kBAAsEC,GAAtE,aACZL,OAAQ,UACJF,GAAW,UAPZ,qC,0QCjEDQ,GAID,SAAC,EAAmD,IAAjD7E,GAAiD,EAAjDA,KAAM8E,EAA2C,EAA3CA,gBAAiBC,EAA0B,EAA1BA,oBAC7B,EAAoDC,cAA5CC,EAAR,EAAQA,oBAAqBC,EAA7B,EAA6BA,mBAC7B,EAA0C7H,mBAAwB,MAAlE,mBAAO8H,EAAP,KAAsBC,EAAtB,KAEMC,EAAoC3F,kBACxC,uBACE,IAACwF,GAAD,YAACA,EAAoBI,UAArB,mBAA+B,IAAIvF,IAAI,eAAGD,GAAH,EAAGA,GAAImE,EAAP,EAAOA,KAAP,MAAmB,CACxDnB,MAAOmB,EACPC,MAAOpE,MAGX,IAEIyF,EAAoC,CACxCvF,OACAwF,SAAUL,EACVF,oBAAqBA,GAGjBQ,EAAehI,sBAAY,SAACG,EAA4C,CAC5E,GAAIA,EAAS8H,QAAS,CAGpB,GAAMC,GAAe/H,EAAS8G,KAAKkB,QAAQpC,OAAO,eAAGoB,GAAH,EAAGA,QAAH,MAAiBA,KAAY,OAC/E,GAAI,CAACe,EAAaE,OAAQ,OAE1Bf,EAAgB,CAAEa,eAAcH,SAAU5H,EAAS8G,KAAKc,aAEzD,IAEH,MACE,sCACE,cAAC,IAAQ,KAAT,CAAc,MAAO,cAAC,IAAD,CAAkB,GAAG,UAA1C,SACE,mBACE,SAAUT,EACV,MAAOI,EACP,SAAU,SAAChE,EAAD,OAAOiE,GAAiBjE,IAClC,QAASkE,EACT,YAAa,cAAC,IAAD,CAAkB,GAAG,iBAClC,MAAO,CAAE1B,MAAO,YAGpB,cAAC,IAAD,CACE,KAAK,OACL,IAAI,yBACJ,SAAU8B,EACV,SAAU,SAACK,EAAD,OAAU,CAACA,EAAKC,SAASF,QAAUf,EAAgBkB,SAC7D,SAAU,EACV,KAAMT,EACN,SAAU,CAACJ,QAMbc,GAED,SAAC,EAAwB,IAAtBnB,GAAsB,EAAtBA,gBACN,EAA2CE,cAAnCE,EAAR,EAAQA,mBAAoBgB,EAA5B,EAA4BA,WAC5B,EAA0C7I,mBAAwB,MAAlE,mBAAO8H,EAAP,KAAsBC,EAAtB,KAEMC,EAAoC3F,kBACxC,uBACE,IAACwF,GAAD,YAACA,EAAoBI,UAArB,mBAA+B,IAAIvF,IAAI,eAAGD,GAAH,EAAGA,GAAImE,EAAP,EAAOA,KAAP,MAAmB,CACxDnB,MAAOmB,EACPC,MAAOpE,MAGX,IAGIqG,EAAwB1I,sBAC5B,SAAC+H,EAAqB,OACpBJ,EAAiBI,GACjB,GAAMY,GAAS,GAAGF,EAAWG,QAAd,wBAAG,EAAkBb,GACpC,GAAI,EAACY,EAEL,IAAMT,GAAeS,EAAUE,MAAMzF,OACnC,SAACC,EAAD,EAAoE,IAA5DhB,GAA4D,EAA5DA,GAAIoB,EAAwD,EAAxDA,MAAOqF,EAAiD,EAAjDA,WAAYC,EAAqC,EAArCA,UAAWC,GAA0B,EAA1BA,oBAExC,MAAIA,MAAwB,KAAa3F,EAElC,GAAP,mBACKA,GADL,CAEE,CACEI,QACAqF,aACAC,YACA5B,QAAS9E,EACTO,OAAQ,MAId,IAGFyE,EAAgB,CAAEU,WAAUG,mBAE9B,CAACO,EAAWG,OAGd,MACE,oBACE,MAAOlB,EACP,SAAUgB,EACV,QAASd,EACT,YAAa,cAAC,IAAD,CAAkB,GAAG,iBAClC,MAAO,CAAE1B,MAAO,WAiBhB+C,GAAa,CAACC,KAAcC,aAAcD,KAAcE,WAAYF,KAAcG,YAE3EC,GAAsC,SAAC,EAA0C,IAAxCC,GAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,WAAYC,EAAsB,EAAtBA,UAAWlH,EAAW,EAAXA,KACjF,EAAgDgF,cAAxCE,EAAR,EAAQA,mBAAoBiC,EAA5B,EAA4BA,gBAC5B,EAA0C9J,qBAA1C,mBAAO+J,EAAP,KAAsBC,EAAtB,KAEAC,2BAAU,UAAM,CACd,GAAItH,IAAS2G,KAAcY,QAAUP,EAAM,OACzC9B,GAAkB,MAAlB,GAAAA,EAAoBI,UAApB,oBAA4BkC,QAAQ,eAAG1H,GAAH,EAAGA,GAAH,MAAYqH,GAAgBrH,OAEjE,CAACE,EAAMgH,IAGR,oBACE,MAAO,cAAC,IAAD,CAAkB,GAAE,gCAA2BhH,EAA3B,aAC3B,MAAM,OACN,KAAMgH,EACN,SAAUC,EACV,KAAM,UAAM,CACNG,GACFF,EAAUE,IAGd,cAAe,CAAEK,SAAU,CAACL,GAV9B,UAYGV,GAAWgB,SAAS1H,IACnB,cAAC,GAAD,CACE,KAAMA,EACN,gBAAiBqH,EACjB,oBAAqB,CAAC,CAACD,IAG1BpH,IAAS2G,KAAcY,QAAU,cAAC,GAAD,CAAqB,gBAAiBF,QC9JxEM,GAAgF,SAAC,EAAD,IACpFC,GADoF,EACpFA,SADoF,MAGpF,sBAAK,OAAQ,CAAC,GAAI,IAAlB,UACE,mBAAK,KAAM,GAAX,SACE,oBAAQ,KAAK,UAAU,QAAS,iBAAMA,GAASjB,KAAcG,aAA7D,SACE,cAAC,IAAD,CAAkB,GAAG,0BAA0B,eAAe,gCAGlE,mBAAK,KAAM,GAAX,SACE,oBAAQ,KAAK,UAAU,QAAS,iBAAMc,GAASjB,KAAcE,aAA7D,SACE,cAAC,IAAD,CAAkB,GAAG,wBAAwB,eAAe,8BAGhE,mBAAK,KAAM,GAAX,SACE,oBAAQ,KAAK,UAAU,QAAS,iBAAMe,GAASjB,KAAcC,eAA7D,SACE,cAAC,IAAD,CAAkB,GAAG,qBAAqB,eAAe,2BAG7D,mBAAK,KAAM,GAAX,SACE,oBAAQ,KAAK,UAAU,QAAS,iBAAMgB,GAASjB,KAAcY,SAA7D,SACE,cAAC,IAAD,CAAkB,GAAG,uBAAuB,eAAe,iCAM7DM,GAA8C,CAClD,CAAElI,MAAO,cAAC,IAAD,CAAkB,GAAG,eAAiBC,UAAW,aAAckI,SAAU,IAClF,CAAEnI,MAAO,cAAC,IAAD,CAAkB,GAAG,cAAgBC,UAAW,YAAakI,SAAU,IAChF,CACEnI,MAAO,cAAC,IAAD,CAAkB,GAAG,eAC5BC,UAAW,SACXmI,UAAW,UACXC,cAAe,CACbC,MAAO,CACL,CACEC,SAAU,GACVC,QAAS,cAAC,IAAD,CAAkB,GAAG,oBAEhC,CACEnI,KAAM,SACNoI,IAAK,EACLC,IAAK,IACLF,QAAS,cAAC,IAAD,CAAkB,GAAG,iBAAiB,OAAQ,CAAEC,IAAK,EAAGC,IAAK,YAgBnEC,GAA4B,SAAC,EAAgB,OAAd3D,EAAc,EAAdA,QAC1C,EAAe4D,IAAQC,UAAvB,mBAAOC,EAAP,KACA,EAAwCpL,qBAAxC,mBAAOqL,EAAP,KAAqBC,EAArB,KACA,EAA0CtL,qBAA1C,mBAAO+J,EAAP,KAAsBC,EAAtB,KACA,EAAgChK,mBAAS,IAAzC,mBAAOuL,EAAP,KAAiBC,EAAjB,KACA,EAA8C7D,cAAtCC,EAAR,EAAQA,oBAAqB6D,EAA7B,EAA6BA,aAEvBC,GAAerJ,kBACnB,uBAAM,IAAC0H,GAAD,YAACA,EAAezB,gBAAhB,mBAAgC,IAAI5F,IAAI,eAAG6E,GAAH,EAAGA,QAAH,MAAiBA,MAC/D,CAACwC,GAAD,YAACA,EAAezB,eAGlB2B,oBAAU,UAAM,CACd,GAAM0B,GAAY/H,OAAO0D,GAErBA,IAAY,OACdgE,GAAgB3C,QAChBqB,EAAiBrB,QACjByC,EAAKQ,eAGHtE,IAAY,OAAS,CAAC1D,OAAOiI,MAAMF,IACrCH,GAAY,IACZM,GAAQH,GACLI,KAAK,SAACC,EAAQ,CACb,GAAIA,EAAI3D,QAAS,CACf,MAA8D2D,EAAI3E,KAA1D1E,EAAR,EAAQA,KAAM4F,GAAd,EAAcA,QAASjG,GAAvB,EAAuBA,MAAO2J,EAA9B,EAA8BA,OAAQC,EAAtC,EAAsCA,UAAW/D,EAAjD,EAAiDA,SACjDmD,EAAgB3I,GAChBqH,EAAiB,CAAE7B,WAAUG,aAAcC,KAC3C6C,EAAKe,eAAe,CAAE7J,SAAO2J,SAAQC,iBAGxCE,QAAQ,iBAAMZ,GAAY,QAE9B,CAAClE,IAEJ,GAAM+E,IAAajM,sBAAY,UAAM,CACnCkL,EAAgB3C,QAChBqB,EAAiBrB,SAChB,IAEH,MAAI4C,GACK,uBAIP,qCACGF,GACC,cAAC,GAAD,CACE,KAAMiB,QAAQjB,GAAgB,CAACtB,GAC/B,KAAMsB,EACN,WAAYgB,GACZ,UAAWrC,IAGf,eAAC,IAAD,CACE,KAAMoB,EACN,UAAWC,IAAiB1C,QAAa,CAACoB,EAAgB,GAAQpB,OAClE,SAAQ,gDAAE,WAAO4D,EAAP,4GAEFC,GAAsBzC,GAFpB,SAEoBA,EAAezB,gBAFnC,wBAEoB,EAA6BmE,MACvD,gBAAGzJ,IAAH,GAAGA,OAAH,MAAgB,OAAOA,KAAW,UAAYA,IAAU,GAAKA,IAAU,MAHjE,CAMJ+G,IAAiByC,IAAuB,MAAO5E,IAAwB,UANnE,oBAOEtF,GAA6BiK,EAA7BjK,MAAO4J,EAAsBK,EAAtBL,UAAWD,EAAWM,EAAXN,OACpBN,EAAY/H,OAAO0D,GACjBgB,GAA2ByB,EAA3BzB,aAAcH,GAAa4B,EAAb5B,SAEhBD,GAAiC,CACrCvF,KAAM0I,EACNzD,sBACAtF,SACA4J,YACAD,SACA9D,YACAI,QAASD,IAlBL,CAqBW1E,OAAOiI,MAAMF,GArBxB,iCAsBIe,GAAWxE,QAtBf,wDAuBIyE,GAAWhB,EAAWzD,QAvB1B,wBAqBA3H,GArBA,KAwBFA,GAAS8H,SACXuE,IAAQC,KAAR,4BAAkCjF,EAAlC,eAzBI,6BA4BD,QA5BC,sCAAF,sDA8BR,QAASyE,GAjCX,UAmCE,eAAC,IAAQ,MAAT,WACE,cAAC,KAAD,CACE,MAAO,cAAC,IAAD,CAAkB,GAAG,YAAY,eAAe,cACvD,MAAO,CACL,CACExB,SAAU,GACVC,QAAS,cAAC,IAAD,CAAkB,GAAG,qBAGlC,MAAM,KACN,KAAK,UAEP,cAAC,KAAD,CACE,MAAO,cAAC,IAAD,CAAkB,GAAG,kBAAkB,eAAe,oBAC7D,MAAO,CACL,CACED,SAAU,GACVC,QAAS,cAAC,IAAD,CAAkB,GAAG,qBAGlC,MAAM,KACN,KAAK,cAEP,cAAC,IAAQ,KAAT,CACE,KAAK,SACL,MAAO,cAAC,IAAD,CAAkB,GAAG,iBAAiB,eAAe,mBAC5D,MAAO,CACL,CAAED,SAAU,GAAMC,QAAS,cAAC,IAAD,CAAkB,GAAG,oBAChD,CACEnI,KAAM,SACNoI,IAAK,EACLC,IAAK,IACLF,QAAS,cAAC,IAAD,CAAkB,GAAG,iBAAiB,OAAQ,CAAEC,IAAK,EAAGC,IAAK,SAT5E,SAaE,4BAGHK,GAAgBtB,GACf,cAAC,IAAD,CACE,OAAO,UACP,YAAW,GAAE0B,EAAa1B,EAAc5B,aAA7B,wBAAE,EAAsCvB,KACnD,SAAU,CACRjE,KAAM,SACN+I,gBACAoB,eAAgB,SAACC,EAAQzJ,EAAT,OACd0G,GAAiB,CAAE7B,SAAU4B,EAAc5B,SAAUG,aAAchF,MAEvE,UAAW,CAAE0J,UAAW,CAAEC,cAAe,IACzC,OAAQ,GACR,WAAYlD,EAAczB,aAC1B,QAASkC,KAGZ,CAACT,GAAiB,cAAC,GAAD,CAAwB,SAAUuB,WC7MvDlJ,GAAwC,CAC5C,CAAEE,MAAO,cAAC,IAAD,CAAkB,GAAG,eAAiBC,UAAW,cAC1D,CAAED,MAAO,cAAC,IAAD,CAAkB,GAAG,cAAgBC,UAAW,aACzD,CAAED,MAAO,cAAC,IAAD,CAAkB,GAAG,eAAiBC,UAAW,SAAU2K,aAAc,KAGvEC,GAA+B,SAAC,EAAgB,IAAd7F,GAAc,EAAdA,QAC7C,EAA0BtH,mBAAS,IAAnC,mBAAOsC,EAAP,KAAc8K,EAAd,KAEA,MACE,eAAC,IAAD,CACE,UAAU,mBACV,OAAO,UACP,OAAQ,GACR,YAAa9K,EACb,QAAO,+BAAE,6GACgBwJ,GAAQxE,OADxB,MACD/G,EADC,QAGHA,EAAS8H,QAHN,gBAIL+E,SAAS7M,EAAS8G,KAAK/E,OAJlB,kBAME,CACL+K,MAAO9M,EAAS8G,KAAKkB,QAAQC,OAC7BH,QAAS,GACThB,KAAM9G,EAAS8G,KAAKkB,cATjB,4BAaA,QAbA,qCAeT,QAASnG,MCzBToI,GAAwC,CAC5C,CACElI,MAAO,cAAC,IAAD,CAAkB,GAAG,KAAK,eAAe,OAChDC,UAAW,KACX+K,OAAQ,GACRhH,MAAO,QAET,CACEhE,MAAO,cAAC,IAAD,CAAkB,GAAG,QAAQ,eAAe,UACnDC,UAAW,QACX2K,aAAc,GACdI,OAAQ,IAEV,CACEhL,MAAO,cAAC,IAAD,CAAkB,GAAG,OAAO,eAAe,SAClDC,UAAW,OACX+K,OAAQ,GACR9K,OAAQ,SAAC+K,EAAGR,EAAJ,OAAe,eAAC,IAAD,CAAkB,GAAE,wBAAmBA,EAAOpK,UAEvE,CACEL,MAAO,cAAC,IAAD,CAAkB,GAAG,kCAAkC,eAAe,cAC7EC,UAAW,YACX+K,OAAQ,GACR9K,OAAQ,SAAC+K,EAAGR,EAAJ,OAAeA,GAAOb,WAAasB,aAAO,GAAIC,MAAKV,EAAOb,WAAYwB,OAEhF,CACEpL,MAAO,cAAC,IAAD,CAAkB,GAAG,qCAAqC,eAAe,WAChFC,UAAW,SACX+K,OAAQ,GACR9K,OAAQ,SAAC+K,EAAGR,EAAJ,OAAeA,GAAOd,OAAS,MAEzC,CACE3J,MAAO,cAAC,IAAD,CAAkB,GAAG,aAAa,eAAe,eACxDC,UAAW,aACX+K,OAAQ,GACR9K,OAAQ,SAAC+K,EAAGR,EAAJ,OAAeA,GAAOY,YAAcH,aAAO,GAAIC,MAAKV,EAAOY,YAAaD,OAElF,CACEpL,MAAO,cAAC,IAAD,CAAkB,GAAG,WAAW,eAAe,aACtDC,UAAW,WACX+K,OAAQ,GACR9K,OAAQ,SAAC+K,EAAGR,EAAJ,OACN,eAAC,IAAD,CACE,GAAE,uBAAkBA,EAAOa,SAASjL,MACpC,OAAQ,CAAEkL,KAAMd,EAAOa,SAASC,UAItC,CACEvL,MAAO,cAAC,IAAD,CAAkB,GAAG,QAAQ,eAAe,UACnDC,UAAW,WACX+K,OAAQ,GACR9K,OAAQ,SAAC+K,EAAGR,EAAJ,OACN,eAAC,KAAD,CAAwC,KAAK,WAAW,QAASA,EAAO5E,UAAjD4E,EAAO5E,aAKvB2F,GAAkB,UAAM,SAC7BC,EAAYC,mBAClB,EAAgCrG,cAAxBC,EAAR,EAAQA,oBACFqG,EAAWC,eAEjB,EAA6B7L,kBAC3B,2BAAO,CAAEiF,QAAO,MAAE2G,EAASE,SAAX,wBAAE,EAAgB7G,WAAlB,mBAA6B,KAAMiB,QAAO,GAAE0F,EAASE,SAAX,wBAAE,EAAgB5F,UAC5E,IAAC0F,EAASE,SAAV,wBAAC,EAAgB7G,QAAjB,GAA0B2G,EAASE,SAAnC,wBAA0B,EAAgB5F,UAFpCjB,EAAR,EAAQA,QAASiB,EAAjB,EAAiBA,QAKjB,MAAIA,KAAY,MAAQ,CAAC3E,OAAOiI,MAAMjI,OAAO2E,IACpC,cAAC,GAAD,CAAa,QAAS3E,OAAO2E,KAGlCjB,IAAY,KACP,cAAC,GAAD,CAAU,QAASA,IAI1B,cAAC,IAAD,CACE,UAAU,mBACV,YAAa,cAAC,IAAD,CAAkB,GAAG,UAClC,UAAWyG,EACX,OAAQ,GACR,OAAO,KACP,QAAO,gDAAE,aAA8BK,EAA9B,0FAASC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,SACrB1G,IAAwB,KADrB,yCAEE,CACLP,KAAM,GACNgG,MAAO,EACPhF,QAAS,SALN,GAODkG,SAAUH,GAAQxM,OAAO4M,QAAQJ,GAAM,GAPtC,SASgBK,EAAS,CAC9BC,SAAUJ,EACVK,KAAMN,EACNzG,oBAAsBhE,OAAOiI,MAAMjE,GAA6Ce,OAAtBf,EAC1DgH,SAAUL,GAAWA,EAAQ,GAC7BM,MAAON,GAAYA,GAAQ,KAAO,SAAW,MAAQ,cAdhD,MASDhO,EATC,QAiBHA,EAAS8H,QAjBN,yCAkBE,CACLhB,KAAM9G,EAAS8G,KACfgG,MAAO9M,EAASuO,KAAKzB,MACrBhF,QAAS,SArBN,4BAyBA,CACLhB,KAAM,GACNgG,MAAO,EACPhF,QAAS,SA5BJ,sCAAF,wDA+BP,QAAO,UACFmC,GADE,CAEL,CACElI,MAAO,cAAC,IAAD,CAAkB,GAAG,kCAC5BC,UAAW,SACXmI,UAAW,SACXlI,OAAQ,SAAC+K,EAAGR,EAAJ,OAAe,CACrB,cAAC,KAAD,CACE,GAAE,4BAAuBA,EAAOnF,oBAA9B,0BAAmEmF,EAAOtK,IAD9E,SAIE,oBAAS,MAAO,cAAC,IAAD,CAAkB,GAAG,OAAO,eAAe,SAA3D,SACE,oBAAQ,KAAK,UAAU,KAAM,cAAC,KAAD,SAH3B,QAMN,cAAC,KAAD,CACE,GAAE,4BAAuBsK,EAAOnF,oBAA9B,0BAAmEmF,EAAOtK,IAD9E,SAIE,oBACE,MACE,cAAC,IAAD,CAAkB,GAAG,gCAAgC,eAAe,YAFxE,SAKE,oBAAQ,KAAM,cAAC,KAAD,SAPZ,WAUN,oBAEE,MACE,cAAC,IAAD,CACE,GAAG,iBACH,eAAe,wCAGnB,UAAS,+BAAE,6GACcsM,GAAWhC,EAAOtK,QADhC,GACHlC,EADG,OAGLA,EAAS8H,SAAW0F,EAAUM,SAChCN,EAAUM,QAAQW,aAJX,qCAOX,OAAQ,cAAC,IAAD,CAAkB,GAAG,QAC7B,WAAY,cAAC,IAAD,CAAkB,GAAG,OAhBnC,SAkBE,oBAAS,MAAO,cAAC,IAAD,CAAkB,GAAG,SAAS,eAAe,WAA7D,SACE,oBAAQ,KAAK,UAAU,KAAM,cAAC,KAAD,IAAoB,OAAM,QAlBrD,kB,oDC1JX,YAAP,qC,uDAAO,WACL/N,EACA+F,EAFK,oGAIEC,YAAO,yCACZC,OAAQ,OACRE,QAAS,CACP,eAAgB,oBAElBC,KAAMpG,GACF+F,GAAW,UAVZ,qC,yBCOA,GAAMiI,IAAyC,SAAC,EAAmB,IAAjBC,GAAiB,EAAjBA,WACvD,EAA8BlP,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAEMiP,EAAU/O,sBAAW,+BAAC,6FAC1BF,SAAW,IADe,SAEHkP,GAAgB,CAAE7H,QAAS2H,QAFxB,MAEpB3O,EAFoB,OAGrBA,EAAS8H,QAHY,gBAIxB,YAAQ/G,MAAMf,EAASuK,SACvB5K,EAAW,IALa,0BAS1BW,OAAO8I,KAAKpJ,EAAS8G,KAAKgI,QAAS,SAAU,uBAC7CnP,EAAW,QAVe,sCAWzB,IAEH,MACE,qBAAS,MAAO,cAAC,IAAD,CAAkB,GAAG,UAAU,eAAe,UAA9D,SACE,oBAAQ,QAASD,EAAS,KAAK,UAAU,KAAM,cAAC,KAAD,IAAoB,QAASkP,OCJrEG,GAA6C,CACxD,CACEhN,MAAO,cAAC,IAAD,CAAkB,GAAG,KAAK,eAAe,OAChDC,UAAW,UACX2K,aAAc,GACd5G,MAAO,QAET,CACEhE,MAAO,cAAC,IAAD,CAAkB,GAAG,aAAa,eAAe,eACxDC,UAAW,cAEb,CACED,MAAO,cAAC,IAAD,CAAkB,GAAG,YAAY,eAAe,cACvDC,UAAW,aAEb,CACED,MAAO,cAAC,IAAD,CAAkB,GAAG,QAAQ,eAAe,UACnDC,UAAW,SAEb,CACED,MAAO,cAAC,IAAD,CAAkB,GAAG,YAAY,eAAe,eACvDC,UAAW,aACX2K,aAAc,KAIZqC,GAAmB,SAACC,EAAD,OACvBA,GAAc9M,IAAI,eAAGD,GAAH,EAAGA,GAAImE,EAAP,EAAOA,KAAP,MAAmB,CACnCnB,MAAOmB,EACPC,MAAOpE,MAGLgN,GAAe,SAACC,EAAD,OACnBA,GAAkBlM,OAAyB,SAACC,EAAKkM,EAAS,OAClDC,EAAYD,GAAH,SAAGA,EAAM1G,SAAT,wBAAG,EAAazF,OAC7B,SAACqM,EAAUC,EAAX,OACEA,GAAY1G,sBAAwB,KAChCyG,EADJ,sBAGSA,GAHT,CAIM,CACE1H,SAAUwH,EAAKlN,GACfsN,WAAYJ,EAAK/I,KACjBW,QAASuI,EAAYrN,GACrByG,WAAY4G,EAAY5G,WACxBC,UAAW2G,EAAY3G,UACvBtF,MAAOiM,EAAYjM,UAG7B,IAGF,MAAO,GAAP,mBAAWJ,GAAX,YAAmBmM,KAClB,KAEQI,GAAqB,UAAM,CACtC,MAA+BrI,cAAvBE,EAAR,EAAQA,mBAEFG,EAAe3F,kBACnB,uBAAMkN,IAAgB,GAAC1H,GAAD,YAACA,EAAoBI,UAArB,mBAA+B,KACrD,CAACJ,GAAD,YAACA,EAAoBI,SAGvB,MACE,eAAC,IAAD,CACE,UAAU,mBACV,OAAQ,SAAC8E,EAAD,iBAAeA,EAAO5E,SAAtB,YAAkC4E,EAAOxF,UACjD,OAAQ,CAAEvB,OAAQ,YAClB,QAAO,gDAAE,8GAASiC,SAAT,EAASA,OAAT,IAAiBiB,aAAjB,WAA8B,GAA9B,MAAkCC,YAAlC,WAA8C,GAA9C,MAAkDtF,QAAlD,WAA0D,GAA1D,WACgBoM,aAA0B,CAC/CC,UAAWrI,GAAF,YAAEA,EAAoBM,SAC/B,OAAQF,QAHH,MACD1H,EADC,OAMFA,EAAS8H,QANP,yCAOE,CAAEhB,KAAM,GAAIgG,MAAO,EAAGhF,QAAS,SAPjC,GAUD8H,SAAYV,GAAalP,EAAS8G,MAAMlB,OAC5C,SAAC4G,EAAD,OACEA,GAAO7D,WAAWkH,cAAc/F,SAASnB,EAAWkH,gBACpDrD,EAAO5D,UAAUiH,cAAc/F,SAASlB,EAAUiH,gBAClDrD,EAAOlJ,MAAMuM,cAAc/F,SAASxG,EAAMuM,iBAdvC,kBAiBA,CAAE/I,KAAM8I,EAAW9C,MAAO8C,EAAU3H,OAAQH,QAAS,SAjBrD,qCAAF,sDAmBP,QAAO,CACL,CACE/F,MAAO,cAAC,IAAD,CAAkB,GAAG,SAAS,eAAe,WACpDC,UAAW,SACX8N,YAAa,GACbC,eAAgB,GAChB5F,UAAW,SACX6F,WAAY,CACVvJ,QAASgB,EACTwI,KAAM,cATL,OAYFlB,GAZE,CAaL,CACEpC,aAAc,GACd5K,MAAO,cAAC,IAAD,CAAkB,GAAG,YAC5BC,UAAW,YACXmI,UAAW,SACXlI,OAAQ,SAACiO,EAAI1D,EAAL,OAAgB,CACtB,cAAC,GAAD,CAAuC,WAAYA,EAAOxF,SAA/B,qB,aC/HhC,YAAP,qC,uDAAO,WAAuCY,EAAkBnB,EAAzD,oGACEC,YAAO,sCAA4DkB,GAA5D,aACZjB,OAAQ,MACaC,SAAU,IAC3BH,GAAW,UAJZ,qC,yBAQA,YAAP,yC,uDAAO,WACLvE,EACA8E,EACAV,EACAG,EAJK,oGAMEC,YAAO,+BAAsDxE,EAAtD,6BACZ4E,KAAM,CACJqJ,YAAa,CACX,CACEnJ,UACAV,WAINK,OAAQ,QACJF,GAAW,UAhBZ,qC,iFCTA,YAAuB2J,EAA4C,SAClEC,EAAmBD,IAAe,KAAOE,KAAgBC,OAASH,EAElEI,EAA4B,qBAC/BF,KAAgBG,QAAU,CAAEC,IAAK,GAAMC,IAAK,KADb,eAE/BL,KAAgBM,uBAAyB,CAAEF,IAAK,GAAMC,IAAK,KAF5B,eAG/BL,KAAgBC,OAAS,CAAEG,IAAK,GAAOC,IAAK,KAHb,eAI/BL,KAAgBO,gBAAkB,CAAEH,IAAK,GAAOC,IAAK,KAJtB,GAOlC,SAAOH,EAAcH,MAArB,mBAA0C,CAAEK,IAAK,GAAOC,IAAK,IAGxD,cAAuE,OAArCD,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,IACtCG,EAAY,GAAH,OAAMJ,EAAN,YAAaC,GAEtBI,EAAY,CAChBC,WAAYV,KAAgBG,QAC5BQ,UAAWX,KAAgBM,uBAC3BM,YAAaZ,KAAgBC,OAC7BY,WAAYb,KAAgBO,iBAG9B,SAAOE,EAAUD,MAAjB,mBAA+BR,KAAgBC,OCVjD,GAAMa,IAAwD,SAAC,EAKzD,IAJJC,GAII,EAJJA,0BACAC,EAGI,EAHJA,UACAlB,EAEI,EAFJA,WACA9G,EACI,EADJA,UAEA,EAA4B7J,mBAAiB8R,GAAcnB,IAA3D,mBAAOoB,EAAP,KAAeC,EAAf,KAEA,EAA8BhS,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACM+R,EAAajE,iBAAO,IAEpBkE,EAAyB9R,sBAAY,SAACL,EAAiB,CAC3DG,EAAW,IACXiS,GAAwBP,EAA2BC,EAAWO,GAAuBrS,IAClFgM,KAAK,SAACC,EAAQ,CACTA,EAAI3D,SACNwB,IAAS,MAATA,OAGHuC,QAAQ,iBAAMlM,GAAW,OAC3B,IAEGmS,EAAcjS,sBAClB,SAACkS,EAAD,OACEN,GAAUM,EAAEC,OAAOC,QAAU,CAAEvB,IAAK,GAAMC,IAAK,IAAU,CAAED,IAAK,GAAOC,IAAK,MAC9E,IAGIuB,EAAcrS,sBAClB,SAACkS,EAAD,OAA4BN,GAAU,SAACU,EAAD,oBAAC,eAAeA,GAAhB,IAAsBxB,IAAKoB,EAAEC,OAAOC,aAC1E,IAGFvI,2BAAU,UAAM,CACd,GAAIgI,EAAW5D,QAAS,CACtB4D,EAAW5D,QAAU,GACrB,OAGF6D,EAAuBH,IACtB,CAACA,EAAQG,IAGV,+BACE,oBAAS,MAAO,cAAC,IAAD,CAAkB,GAAG,YAArC,SACE,oBAAU,SAAUjS,EAAS,QAAS8R,EAAOd,IAAK,SAAUoB,MAE9D,oBAAS,MAAO,cAAC,IAAD,CAAkB,GAAIN,EAAOd,IAAM,iBAAmB,oBAAtE,SACE,oBAAU,SAAUhR,EAAS,QAAS8R,EAAOb,IAAK,SAAUuB,UAMrDd,MClDFgB,GAAwB,UAAM,CACzC,MAA+BhL,cAAvBE,EAAR,EAAQA,mBACR,EAAsC7H,mBAA4C,IAAlF,mBAAO4S,EAAP,KAAoBC,EAApB,KACA,EAAkD7S,mBAAS,IAA3D,mBAAO8S,EAAP,KAA0BC,EAA1B,KACMtO,EAAOC,cAEPqJ,EAAYC,mBAEZhG,EAAe3F,kBACnB,uBAAM,IAACwF,GAAD,YAACA,EAAoBI,UAArB,mBAA+B,IAAIvF,IAAI,eAAGD,GAAH,EAAGA,GAAImE,EAAP,EAAOA,KAAP,MAAmB,CAAEC,MAAOpE,EAAIgD,MAAOmB,MACpF,CAACiB,GAAD,YAACA,EAAoBI,SAGjB7F,EAA6CC,kBACjD,wBACE,CACEC,MAAO,cAAC,IAAD,CAAkB,GAAG,UAC5BC,UAAW,WACX8N,YAAa,GACb3F,UAAW,SACX6F,WAAY,CACVvJ,QAASgB,EACTgL,aAAchL,GAAF,SAAEA,EAAe,MAAjB,wBAAE,EAAmBnB,MACjCoM,WAAY,KAGhB,CACE3Q,MAAO,cAAC,IAAD,CAAkB,GAAG,iBAAiB,eAAe,qBAC5DC,UAAW,YACX2Q,MAAO,SAfX,mBAiBKN,KAEL,CAAC5K,EAAc4K,IAGjB,MACE,eAAC,IAAD,CACE,UAAU,mBACV,YAAW,UAAKnO,EAAK8B,cAAc,CACjC9D,GAAI,cACJ0Q,eAAgB,gBAFP,aAGJL,EAHI,KAIX,QAAO,gDAAE,gIAAS3K,WAAT,WAAoBH,GAApB,SAAoBA,EAAe,MAAnC,wBAAoB,EAAmBnB,MAAvC,MAA8CuM,aAA9C,WAA0D,GAA1D,WACyDC,QAAQC,IAAI,CAC1EC,aAAsBpL,GACtBqL,GAA6BrL,SAHxB,oCACAsL,EADA,KACqBC,EADrB,KAKD5L,EAAgBE,EAAatE,KAAK,eAAGmD,GAAH,EAAGA,MAAH,MAAeA,KAAUsB,IAL1D,CAOH,EAACsL,EAAoBpL,SAAW,CAACqL,EAA2BrL,SAAW,CAACP,GAPrE,0CAQE,CAAET,KAAM,GAAIgG,MAAO,EAAGhF,QAAS,SARjC,OAUFqL,EAA2BrM,KAAKmB,OAV9B,iBAWL,YAAQlH,MACNmD,EAAK8B,cAAc,CACjB9D,GAAI,uBACJ0Q,eAAgB,8CAdf,kBAkBE,CAAE9L,KAAM,GAAIgG,MAAO,EAAGhF,QAAS,SAlBjC,IAqBP0K,SAAqBjL,EAAcrC,OACnCoN,EACEa,EAA2BrM,KAAK7D,OAC9B,SAACC,EAAKkM,EAAN,6BACKlM,GADL,CAEE,CACEnB,MAAOqR,OAAOnG,aAAO,GAAIC,MAAKkC,EAAKiE,WAAYlG,MAC/CnL,UAAWoR,OAAOhE,EAAKiE,WACvB1G,aAAc,GACd5G,MAAO,IACPuN,MAAO,SACPrR,OAAQ,SAAC+K,GAAGR,GAAJ,OACN,eAAC,GAAD,CACE,0BAA2B4C,EAAKlN,GAChC,WAAYsK,GAAO,GAAD,OAAI4C,GAAJ,YAAIA,EAAMiE,YAC5B,UAAW7G,GAAOtK,UAK1B,KAIE4E,GAAOoM,EAAoBpM,KAAK4B,MACnCzF,OACC,SAACC,EAAD,EAA6D,IAArDhB,IAAqD,EAArDA,GAAI2G,GAAiD,EAAjDA,oBAAqBF,GAA4B,EAA5BA,WAAYC,GAAgB,EAAhBA,UACrC2K,EAAkB,GAAH,OAAM3K,GAAN,YAAmBD,IAExC,GACEE,KAAwB,MACxB,CAAC0K,EAAgB1D,cAAc/F,SAAS+I,GAAUhD,eAElD,MAAO3M,GAET,GAAMsQ,GAAqBL,EAA2BrM,KAAK7D,OAEzD,SAACqM,GAAUmE,GAA4B,CACvC,GAAMC,IAAoBD,GAAwBtD,YAAYhN,KAC5D,SAACiN,GAAD,OAAgBA,IAAWpJ,UAAY9E,KAEzC,MAAKwR,IAEE,2BACFpE,IADL,6BAEMmE,GAAwBJ,WAAcK,GAAkBpN,QAJ/BgJ,IAM9B,IAEH,MAAO,GAAP,mBAAWpM,GAAX,cAAkBhB,MAAI2Q,UAAWU,GAAoBC,MAEvD,IAED3F,KAAK,SAAC8F,EAAGC,EAAJ,OAAUD,GAAEd,UAAUgB,cAAcD,EAAEf,aA1EvC,kBA4EA,CAAE/L,QAAMgG,MAAOhG,GAAKmB,OAAQH,QAAS,SA5ErC,sCAAF,sDA8EP,QAASjG,EACT,OAAQ,CAAE4D,OAAQ,YAClB,WAAY,CAAEqO,SAAU,0BAAMtG,EAAUM,WAAhB,wBAAM,EAAmBW,WACjD,OAAQ,CAAEjL,EAAG,MACb,UAAWgK,EACX,OAAO,Q,8EC9IN,YAAP,uC,uDAAO,WACLnG,EACA0M,EACAtN,EAHK,oGAKEC,YAAO,uCACoBW,EADpB,mBACkD0M,EADlD,wBAGVpN,OAAQ,MACaC,SAAU,IAC3BH,GAAW,UAVd,qC,yBAgBA,YAAP,yC,uDAAO,WACLY,EACA0M,EACArT,EACA+F,EAJK,oGAMEC,YAAO,uCACoBW,EADpB,mBACkD0M,EADlD,wBAGVpN,OAAQ,OACRG,KAAMpG,GACF+F,GAAW,UAXd,qC,yBAiBA,YAAP,qC,uDAAO,WACLmB,EACAnB,EAFK,oGAIEC,YAAO,6CACZC,OAAQ,MACRH,OAAQ,CAAE,WAAYoB,GACDhB,SAAU,IAC3BH,GAAW,UARZ,qC,yBAaA,YAAP,uC,uDAAO,WACLmB,EACAZ,EACAP,EAHK,oGAKEC,YAAO,+CAC4BkB,EAD5B,kBAC8CZ,GAD9C,aAGVL,OAAQ,MACaC,SAAU,IAC3BH,GAAW,UAVd,qC,yBAgBA,YAAP,mC,uDAAO,WAA6BA,EAA7B,oGACEC,YAAO,sCACZC,OAAQ,MACaC,SAAU,IAC3BH,GAAW,UAJZ,qC,yBASA,YAAP,qC,uDAAO,WACLuN,EACAvN,EAFK,oGAIEC,YAAO,kCACesN,GADf,aAGVrN,OAAQ,MACaC,SAAU,IAC3BH,GAAW,UATd,qC,yBAeA,YAAP,qC,uDAAO,WACL/F,EACA+F,EAFK,oGAIEC,YAAO,uCACZC,OAAQ,OACRG,KAAMpG,GACF+F,GAAW,UAPZ,qC,yBAYA,YAAP,uC,uDAAO,WACLwN,EACAvT,EACA+F,EAHK,oGAKEC,YAAO,kCACeuN,GADf,aAGVtN,OAAQ,QACRG,KAAMpG,GACF+F,GAAW,UAVd,qC,yBCrFP,GAAMwD,IAA+C,CACnD,CACElI,MAAO,cAAC,IAAD,CAAkB,GAAG,UAC5BC,UAAW,QACXkI,SAAU,IAEZ,CACEnI,MAAO,cAAC,IAAD,CAAkB,GAAG,WAC5BC,UAAW,OACXkI,SAAU,IAEZ,CACEnI,MAAO,cAAC,IAAD,CAAkB,GAAG,gBAC5BC,UAAW,cACXmI,UAAW,UACXC,cAAe,CACbC,MAAO,CACL,CACEC,SAAU,GACVC,QAAS,cAAC,IAAD,CAAkB,GAAG,oBAEhC,CACEnI,KAAM,SACNoI,IAAK,EACLC,IAAK,IACLF,QAAS,cAAC,IAAD,CAAkB,GAAG,iBAAiB,OAAQ,CAAEC,IAAK,EAAGC,IAAK,YAY1EyJ,GAAkD,SAAC,EAGnD,IAFJC,GAEI,EAFJA,uBACAC,EACI,EADJA,aAEA,EAAwC3U,mBAAsB,IAA9D,mBAAO0L,EAAP,KAAqBkJ,EAArB,KACM7G,EAAYC,mBAElB,EAAe9C,IAAQC,UAAvB,mBAAOC,EAAP,KAEAnB,2BAAU,UAAM,OACR4K,EAAoB,IAACH,EAAuBI,SAAxB,mBAAiC,IAAIpS,IAAI,SAACb,EAAQkT,EAAT,oBAAC,eAC/DlT,GAD8D,IAEjEY,GAAIkR,OAAQoB,GAAI,GAAK,SAGvB3J,EAAK4J,cAAc,QAASH,IAC3B,IAGD,cAAC,IAAD,CACE,KAAMzJ,EACN,SAAUuJ,EACV,UAAW,CAAEnS,OAAQ,SAACyS,EAAD,0BAAQC,EAAR,WAAoB,CAACA,KAH5C,SAKE,cAAC,KAAD,CACE,KAAK,QACL,OAAO,KACP,UAAWnH,EACX,cAAe,CAAEtI,MAAO,cAAC,IAAD,CAAkB,GAAG,kBAC7C,UAAW,CAAEuH,UAAW,CAAEmI,QAAS,IACnC,mBAAoB,GACpB,QAAO,UACF3K,GADE,CAEL,CACElI,MAAO,cAAC,IAAD,CAAkB,GAAG,YAC5BoI,UAAW,SACXlI,OAAQ,SAACiO,EAAI1N,EAAL,OACN,qBACE,KAAK,UACL,QAAS,0BAAMgL,EAAUM,WAAhB,wBAAM,EAAmB+G,cAAcrS,EAAIN,KACpD,KAAM,cAAC,KAAD,UAKd,SAAU,CACR2I,OACAzI,KAAM,WACN+I,eACA2J,SAAU,oBAAQ,KAAK,UAAU,KAAM,cAAC,KAAD,MACvChB,SAAUO,EACVU,aAAc,SAACC,EAAIC,EAAIC,EAAT,OAAiB,CAACA,EAAIC,aAOjCC,GAAwB,UAAM,SACzC,EAAyBC,YAAS,kBAA1BC,EAAR,EAAQA,aACR,EAAwClO,cAAhCC,EAAR,EAAQA,oBAAqBkO,EAA7B,EAA6BA,OAE7B,EAAoD9V,qBAApD,mBAAO+V,EAAP,KAA2BC,EAA3B,KACA,EAA8BhW,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0CF,mBAAwB,MAAlE,mBAAOiW,EAAP,KAAsBC,EAAtB,KAEMC,EAAe9T,kBACnB,iBAAM,CAAC,CAACyT,EAAOzO,KAAK3D,KAAK,kBAAGjB,EAAH,EAAGA,GAAH,MAAYA,KAAOoT,IAAA,MAAL,GAAKA,EAAc/F,eAAnB,wBAAK,EAA2BrN,OACvE,CAACqT,EAAOzO,KAAMwO,GAAd,SAAcA,EAAc/F,eAA5B,wBAAc,EAA2BrN,KAErC2T,EAAsB/T,kBAC1B,iBACEyT,GAAOzO,KAAK3E,IAAI,eAAGD,GAAH,EAAGA,GAAIyG,EAAP,EAAOA,WAAYC,EAAnB,EAAmBA,UAAnB,MAAoC,CAClD1D,MAAO,GAAF,OAAKyD,EAAL,YAAmBC,GACxBtC,MAAOpE,MAEX,CAACqT,EAAOzO,OAGJgP,GAA4BjW,sBAAY,UAAM,CAC9CwH,IAAwB,MAAQqO,IAAkB,MAEtD/V,GAAW,IACX8V,EAAsBrN,QACtB2N,GAAsB1O,EAAqBqO,GACxClK,KAAK,SAACxL,EAAa,CACdA,EAAS8H,SACX2N,EAAsBzV,EAAS8G,QAGlC+E,QAAQ,UAAM,CACblM,EAAW,QAEd,CAAC0H,EAAqBqO,IAEnBM,GAAsBnW,sBAC1B,SAACoW,EAAuDjC,EAAxD,wDACE,WAAOhI,GAAP,wFACM3E,KAAwB,MAAQqO,IAAkB,MADxD,iDAGQQ,UAAcD,EAAwBhT,OAC1C,SAACC,GAAKiT,GAAN,OACEA,IAAgBnC,0BAA4BA,EAA5C,sBAES9Q,IAFT,CAGM,CACE8Q,0BACAO,MAAOvI,GAASvI,MAAMtB,IAAI,gBAAGkE,IAAH,GAAGA,KAAM+P,EAAT,GAASA,MAAOC,EAAhB,GAAgBA,YAAhB,MAAmC,CAC3DhQ,QACA+P,QACAC,oBARV,sBAYQnT,IAZR,CAYaiT,MACf,IAlBJ,SAqBoBG,GAAyBjP,EAAqBqO,EAAe,CAC7EQ,qBAtBJ,GAqBQzK,EArBR,OAyBMA,EAAI3D,SACNgO,SA1BJ,qCADF,uDA8BA,CAACJ,EAAerO,IAkBlB,MAfAqC,qBAAU,UAAM,SACd,GAAI,CAACkM,GAAgB,CAACN,IAAD,SAACA,EAAc/F,eAAf,kBAAC,EAA2BrN,IAAI,OACnD,MAAIqT,EAAOzO,QAAX,kBAAI,EAAc,GAAI,OACpB6O,EAAgB,GAACJ,EAAOzO,QAAR,wBAAC,EAAc,GAAG5E,IAEpC,OAGFyT,EAAiBL,GAAD,SAACA,EAAc/F,eAAf,wBAAC,EAA2BrN,KAC3C,CAACoT,GAAD,SAACA,EAAc/F,eAAf,wBAAC,EAA2BrN,GAAI0T,IAEnClM,oBAAU,UAAM,CACdoM,MACC,CAACA,KAEAP,EAAO7V,QACF,uBAIP,qCACE,cAAC,IAAQ,KAAT,CAAc,MAAO,cAAC,IAAD,CAAkB,GAAG,iBAA1C,SACE,mBACE,SAAUkW,EACV,YAAa,cAAC,IAAD,CAAkB,GAAG,WAClC,QAASC,EACT,MAAOH,EACP,SAAU,SAACnS,EAAD,OAAOoS,GAAiBpS,QAGtC,uBACC7D,GAAW,CAAC8V,GAAsB,uBAClCA,GAAkB,MAAlBA,EAAoBU,YACnBV,EAAmBU,YAAY/T,IAAI,SAACgS,EAAwBK,EAAzB,aACjC,gBAAC,KAAM,SAAP,WACGA,EAAI,GAAK,uBACV,cAAC,GAAD,CACE,uBAAwBL,EACxB,aAAc6B,GAAmB,GAC/BR,EAAmBU,eADY,mBACG,GAClC/B,EAAuBH,6BANRG,EAAuBH,2BAY9C,mBAAY,UAAZ,CAAsB,MAAO,CAAEuC,UAAW,UAA1C,SACE,cAAC,IAAD,CAAkB,GAAG,8B,4ECnOxB,YAAP,qC,uDAAO,WACL/P,EASAC,EAVK,oGAYEC,YAAO,oCACZF,SACAG,OAAQ,MACaC,SAAU,IAC3BH,GAAW,UAhBZ,qC,0CCqBM+P,GAAqB,UAAM,CACtC,MAA0C/W,mBAAoC,MAA9E,mBAAOgX,EAAP,KAAsBC,EAAtB,KACA,EAAkCjX,mBAA6B,IAA/D,mBAAOkX,EAAP,KAAkBC,EAAlB,KACA,EAAgCxP,cAAxBC,EAAR,EAAQA,oBACFwP,EAAMC,OAENC,EAA+BjV,kBACnC,iBACE6U,GAAUxU,IAAI,SAAC6U,EAAD,OAAY,CACxB9U,GAAI8U,EAAM9U,GACVH,MAAO,GAAF,OAAKiV,EAAMC,MAAM5Q,KAAjB,aAA0B2Q,EAAME,YAAY7Q,KAA5C,KACLf,MAAOwR,KAAOE,EAAM3D,WAAW8D,SAC/B5R,IAAKuR,KAAOE,EAAMI,SAASD,SAC3BE,WAAY,GAAF,OAAKL,EAAMM,MAAM3O,WAAjB,YAA+BqO,EAAMM,MAAM1O,WACrD2O,YAAaP,EAAMM,MAAMhU,MACzB+J,SAAU2J,EAAM3J,SAAShH,KACzB4Q,MAAOD,EAAMC,MAAM5Q,KACnBmR,QAASR,EAAMQ,QAAQnR,KACvBoR,kBAAmBT,EAAMS,sBAE7B,CAACd,IAGGe,EAAc7X,sBAClB,SAACyF,EAAsBC,EAAuB,CAC5CoS,GAAkB,CAChBtQ,oBAAqBA,EACrBuQ,UAAWtS,EAAM6R,SACjBC,QAAS7R,EAAI4R,WACZ3L,KAAK,SAACxL,EAAa,CAChBA,EAAS8H,SACX8O,EAAa5W,EAAS8G,SAI5B,CAACO,IAGGwQ,EAAmBhY,sBAAY,SAACmX,EAA8B,CAClEN,EAAiBM,IAChB,IAEGc,EAAmBjY,sBAAY,UAAM,CACzC6W,EAAiB,OAChB,IAEGqB,EAAYlY,sBAAY,SAAC6E,EAAwB,CACrD,MAAIA,GAAKsT,OAAOnB,EAAK,OACZ,UAEFnS,EAAKuT,QAAQpB,EAAK,OAAS,UAAY,SAC7C,IAEGqB,EAAiBrY,sBACrB,SAAC6E,EAAwB,CACvB,GAAMyT,GAAiBpB,EAAOnR,OAAO,SAACoR,EAAD,OAAWF,MAAOE,EAAM1R,OAAO0S,OAAOtT,EAAM,SAEjF,MACE,qBAAI,UAAU,SAAd,SACGyT,EAAehW,IAAI,SAAC6U,EAAD,OAClB,qBAAmB,QAAS,iBAAMa,GAAiBb,IAAnD,SACE,oBAAO,OAAQe,EAAUjB,KAAOE,EAAM1R,QAAS,KAAM0R,EAAMjV,SADpDiV,EAAM9U,SAOvB,CAACyU,IAGGyB,EAAoBvY,sBAAY,SAAC6E,EAAqBuL,EAAuB,CACjF,GAAM3K,GAAQwR,KAAOpS,GAAM2T,QAAQpI,GAAMqI,SAAS,EAAG,SAC/C/S,GAAMuR,KAAOpS,GAAM6T,MAAMtI,GAAMuI,IAAI,EAAG,SAC5Cd,EAAYpS,EAAOC,KAClB,IAEHmE,2BAAU,UAAM,CACd,GAAM+O,GAAmB3B,OAASuB,QAAQ,SACpCK,EAAiB5B,OAASyB,MAAM,SACtCb,EAAYe,EAAkBC,IAC7B,IAED,qCACE,mBAAY,MAAZ,CAAkB,MAAO,EAAzB,SACE,cAAC,IAAD,CAAkB,GAAG,WAAW,eAAe,eAGjD,oBAAU,eAAgBR,EAAgB,cAAeE,IAEzD,oBACE,KAAM3B,IAAkB,KACxB,MAAK,UAAKA,GAAL,YAAKA,EAAee,QAApB,aAAgCf,GAAhC,YAAgCA,EAAe1U,OACpD,SAAU+V,EACV,OAAQ,KAJV,UAME,oBAAY,UAAZ,WACE,cAAC,IAAD,CAAkB,GAAG,YAAY,eAAe,UADlD,KAC+DrB,GAD/D,YAC+DA,EAAeY,cAE9E,oBAAY,UAAZ,WACE,cAAC,IAAD,CAAkB,GAAG,QAAQ,eAAe,UAD9C,KAC2DZ,GAD3D,YAC2DA,EAAec,eAE1E,oBAAY,UAAZ,WACE,cAAC,IAAD,CAAkB,GAAG,QAAQ,eAAe,UAD9C,KAC2Dd,GAD3D,YAC2DA,EAAeQ,SAE1E,oBAAY,UAAZ,WACE,cAAC,IAAD,CAAkB,GAAG,WAAW,eAAe,aADjD,KACiER,GADjE,YACiEA,EAAepJ,YAEhF,oBAAY,UAAZ,WACE,cAAC,IAAD,CAAkB,GAAG,aAAa,eAAe,eADnD,IAEGoJ,GAAiBK,KAAOL,EAAcnR,OAAO2H,OAAO0L,QAEvD,oBAAY,UAAZ,WACE,cAAC,IAAD,CAAkB,GAAG,SAAS,eAAe,aAD/C,IAEGlC,GAAiBK,KAAOL,EAAclR,KAAK0H,OAAO0L,QAEpDlC,IAAa,KAAb,OAAAA,EAAegB,oBACd,mBAAY,UAAZ,UACE,mBACE,KAAMhB,EAAcgB,kBACpB,OAAO,SACP,IAAI,aAHN,SAME,oBAAQ,KAAK,UAAb,SACE,cAAC,IAAD,CAAkB,GAAG,eAHnB,sB,gFC/ILmB,GAA2B,SAACC,EAAmBlK,EAApB,OACtCkK,GAAM5V,OAAsB,SAACC,EAAD,EAA+B,IAAvB8E,GAAuB,EAAvBA,QAAY8Q,EAAW,mBACnDrW,EAASuF,EAAQ7E,KAAK,SAAC4V,EAAD,OAAgBA,GAAW/R,UAAY2H,IACnE,MAAKlM,GAEE,GAAP,mBAAWS,GAAX,4BAAqB4V,GAArB,IAA2BrW,aAFPS,GAGnB,KAEQ8V,GAAmB,SAC9BC,EACAC,EACW,OACX,EAA0BD,EAAahW,OACrC,SAACC,EAAD,MAAQT,GAAR,EAAQA,OAAQiJ,EAAhB,EAAgBA,OAAhB,MAA6B,CAACxI,EAAI,GAAKT,EAAOA,OAASiJ,EAAQxI,EAAI,GAAKwI,IACxE,CAAC,EAAG,IAFN,mBAAOyN,EAAP,KAAYC,EAAZ,KAIMC,EAAkBhW,OAAOiI,MAAM6N,EAAMC,GAAc,EAAID,EAAMC,EAE7DE,EAAoBJ,EACvBrL,KAAK,SAAC8F,EAAGC,EAAJ,OAAUD,GAAE0C,YAAczC,EAAEyC,cACjCpT,OACC,SAACC,EAAKkM,EAAN,6BACKlM,GADL,aAAC,eAGMkM,GAHP,IAIImK,yBAA0BF,GAAmBjK,EAAKiH,iBAGtD,IAGJ,GAAIiD,EAAkBpN,MAAM,eAAGqN,GAAH,EAAGA,yBAAH,MAAkCA,KAA2B,SACvF,YAAOD,EAAkBE,GAAG,OAA5B,wBAAO,EAA0BnT,QAAjC,mBAAyC,GAG3C,GAAMoT,GAAkBH,EAAkBI,UACxC,eAAGH,GAAH,EAAGA,yBAAH,MAAkC,CAACA,IAErC,MAAIE,GAAkB,EAAU,GAEhC,GAAOH,EAAkBG,EAAkB,MAA3C,wBAAO,EAAwCpT,MAGpCsT,GAAgC,SAC3C3F,EACA4F,EAF2C,gBAI3CA,EAAYzW,KACV,SAACgR,EAAD,OACEA,GAAuBH,0BAA4BA,OANZ,wBAI3C,EAGGO,O,mBCtCE,YAAwB3M,EAAkBZ,EAAiB,CAChE,MAAsCvH,mBAA0C,CAC9EC,QAAS,KADX,mBAAOma,EAAP,KAAoBC,EAApB,KAIApQ,2BAAU,UAAM,CACdoQ,EAAe,SAAC3H,EAAD,oBAAC,eAAeA,GAAhB,IAAsBzS,QAAS,OAC9Cqa,GAAmBnS,EAAUZ,GAC1BwE,KAAK,SAACxL,EAAa,CACdA,EAAS8H,SACXgS,EAAe,SAAC3H,EAAD,oBAAC,eAAeA,GAAhB,IAAsBrL,KAAM9G,EAAS8G,WAGvD+E,QAAQ,UAAM,CACbiO,EAAe,SAAC3H,EAAD,oBAAC,eAAeA,GAAhB,IAAsBzS,QAAS,UAEjD,CAACsH,EAASY,IAEN,CAAEiS,eAGJ,aAAyB,CAC9B,MAAoCpa,mBAAuC,CAAEC,QAAS,KAAtF,mBAAOsa,EAAP,KAAmBC,EAAnB,KAEAvQ,2BAAU,UAAM,CACduQ,EAAc,SAAC9H,EAAD,oBAAC,eAAeA,GAAhB,IAAsBzS,QAAS,OAC7Cwa,KACG1O,KAAK,SAACxL,EAAa,CACdA,EAAS8H,SACXmS,EAAc,SAAC9H,EAAD,oBAAC,eAAeA,GAAhB,IAAsBrL,KAAM9G,EAAS8G,WAGtD+E,QAAQ,UAAM,CACboO,EAAc,SAAC9H,EAAD,oBAAC,eAAeA,GAAhB,IAAsBzS,QAAS,UAEhD,IAEI,CAAEsa,cAGJ,YAA+BhG,EAA6C,CACjF,MAAoDvU,mBAElD,CACAC,QAAS,KAHX,mBAAOya,EAAP,KAA2BC,EAA3B,KAMA1Q,2BAAU,UAAM,CACVsK,IAA4B5L,QAEhCgS,GAAsB,SAACjI,EAAD,oBAAC,eAAeA,GAAhB,IAAsBzS,QAAS,OACrD2a,GAAsBrG,GACnBxI,KAAK,SAACxL,EAAa,CACdA,EAAS8H,SACXsS,EAAsB,SAACjI,EAAD,oBAAC,eAAeA,GAAhB,IAAsBrL,KAAM9G,EAAS8G,WAG9D+E,QAAQ,UAAM,CACbuO,EAAsB,SAACjI,EAAD,oBAAC,eAAeA,GAAhB,IAAsBzS,QAAS,WAExD,CAACsU,IAEG,CAAEmG,sBAGJ,YACL9S,EACA0M,EACAC,EACA,CACA,MAAgDvU,mBAAwC,CACtFC,QAAS,KADX,mBAAOwZ,EAAP,KAAyBoB,EAAzB,KAIA5Q,2BAAU,UAAM,CAEZ,MAAOrC,IAAwB,UAC/B,MAAO0M,IAAa,UACpB,MAAOC,IAA4B,UAIrCsG,GAAoB,SAACnI,EAAD,oBAAC,eAAeA,GAAhB,IAAsBzS,QAAS,OACnDqW,GAAsB1O,EAAqB0M,GACxCvI,KAAK,SAACxL,EAAa,CACdA,EAAS8H,SACXwS,EAAoB,SAACnI,EAAD,4BAAC,eAChBA,GADe,IAElBrL,KAAI,GAAE6S,GACJ3F,EADiC,GAEjChU,EAAS8G,KAAKoP,eAFmB,mBAEJ,OAF3B,wBAAE,EAGH/T,IAAI,SAACoB,EAAGiR,EAAJ,oBAAC,eAAejR,GAAhB,IAAmBrB,GAAIsS,YAInC3I,QAAQ,UAAM,CACbyO,EAAoB,SAACnI,EAAD,oBAAC,eAAeA,GAAhB,IAAsBzS,QAAS,WAEtD,CAAC2H,EAAqB0M,IAElB,CAAEmF,oBAGJ,YAAoCtR,EAAkBZ,EAAiB,CAC5E,MAA8DvH,mBAE5D,CAAEC,QAAS,KAFb,mBAAO6a,EAAP,KAAgCC,EAAhC,KAIMC,EAA+B5a,sBAAY,UAAM,CACrD2a,EAA2B,SAACrI,EAAD,oBAAC,eAAeA,GAAhB,IAAsBzS,QAAS,OAC1D+T,GAAwB7L,GACrB4D,KAAK,SAACxL,EAAa,CAClB,GAAIA,EAAS8H,QAAS,CACpB,GAAM4S,GAAoB1a,EAAS8G,KAAK7D,OACtC,SAACC,EAAD,EAAmC,IAA3BiN,GAA2B,EAA3BA,YAAgBwK,EAAW,mBAC3BvK,EAAaD,EAAYhN,KAC7B,SAACyX,EAAD,OAAoBA,GAAe5T,UAAYA,IAGjD,MAAKoJ,GAEE,GAAP,mBAAWlN,GAAX,4BAAqByX,GAArB,IAA2BvK,iBAFHlN,GAI1B,IAGFsX,EAA2B,SAACrI,EAAD,oBAAC,eAAeA,GAAhB,IAAsBrL,KAAM4T,SAG1D7O,QAAQ,UAAM,CACb2O,EAA2B,SAACrI,EAAD,oBAAC,eAAeA,GAAhB,IAAsBzS,QAAS,UAE7D,CAACkI,EAAUZ,IAEd0C,2BAAU,UAAM,CACd+Q,KACC,CAACA,IAEG,CAAEF,0BAAyBE,gCAG7B,YAAyB9L,EAAoBtH,EAAoC,CACtF,MAAwC5H,mBAAqC,CAAEC,QAAS,KAAxF,mBAAOuZ,EAAP,KAAqB4B,EAArB,KAEAnR,2BAAU,UAAM,CACV,CAACrC,GACLwT,GAAgB,SAAC1I,EAAD,oBAAC,eAAeA,GAAhB,IAAsBzS,QAAS,OAC/CwO,EAAS,CAAES,aAAYtH,wBACpBmE,KAAK,SAACxL,EAAa,CAClB,GAAIA,EAAS8H,QAAS,CACpB,GAAMhB,GAAO8R,GAAyB5Y,EAAS8G,KAAM6H,GAErDkM,EAAgB,SAAC1I,EAAD,oBAAC,eAAeA,GAAhB,IAAsBrL,cAGzC+E,QAAQ,UAAM,CACbgP,EAAgB,SAAC1I,EAAD,oBAAC,eAAeA,GAAhB,IAAsBzS,QAAS,WAElD,CAACiP,EAAYtH,IAET,CAAE4R,gBAGJ,YAA6BrR,EAAkBZ,EAAiB,CACrE,MAAsCvH,mBAAoC,CACxEC,QAAS,KADX,mBAAOob,EAAP,KAAoBC,EAApB,KAGA,EAAgDtb,mBAO9C,CAAEC,QAAS,KAPb,mBAAOsb,EAAP,KAAyBC,EAAzB,KAQA,EAAkDxb,mBAEhD,CAAEC,QAAS,KAFb,mBAAOwb,EAAP,KAA0BC,EAA1B,KAIAzR,2BAAU,UAAM,CACdqR,EAAe,SAAC5I,EAAD,oBAAC,eAAeA,GAAhB,IAAsBzS,QAAS,OAC9C0b,aAAO,CAAExT,aACN4D,KAAK,SAACxL,EAAa,CACdA,EAAS8H,SACXiT,EAAe,SAAC5I,EAAD,oBAAC,eAAeA,GAAhB,IAAsBrL,KAAM9G,EAAS8G,WAGvD+E,QAAQ,UAAM,CACbkP,EAAe,SAAC5I,EAAD,oBAAC,eAAeA,GAAhB,IAAsBzS,QAAS,UAEjD,CAACkI,IAEJ8B,oBAAU,UAAM,CACV,CAACoR,EAAYhU,MAEjBqU,GAAqB,SAAChJ,EAAD,oBAAC,eAAeA,GAAhB,IAAsBzS,QAAS,OACpDoT,QAAQC,IAAI+H,EAAYhU,KAAK3E,IAAI,eAAGD,GAAH,EAAGA,GAAH,MAAYmZ,cAAQhY,OAAOnB,OACzDsJ,KAAK,SAAC8P,EAAc,CACnBA,EAAU1R,QAAQ,SAAC5J,EAAa,CAC1BA,EAAS8H,SACXqT,EAAqB,SAAChJ,EAAD,oBAAC,eACjBA,GADgB,IAEnBrL,KAAM,2BACDqL,EAAKrL,MADN,mBAEDzD,OAAOrD,EAAS8G,KAAK5E,IAAMqZ,aAAcvb,EAAS8G,KAAK0U,mBAMjE3P,QAAQ,UAAM,CACbsP,EAAqB,SAAChJ,EAAD,oBAAC,eAAeA,GAAhB,IAAsBzS,QAAS,SAGxDub,EAAoB,SAAC9I,EAAD,oBAAC,eAAeA,GAAhB,IAAsBzS,QAAS,OACnDoT,QAAQC,IACN+H,EAAYhU,KAAK3E,IAAI,eAAGD,GAAH,EAAGA,GAAH,MACnBuZ,cAAepY,OAAOnB,GAAK,CACzB,oDACA,sDACCsJ,KAAK,SAACxL,EAAa,CACpB,GAAIA,EAAS8H,QAAS,SACd4T,EAAiB,IACrB1b,EAAS8G,KAAK,wDADO,mBACiD,IACtElB,OAAO,SAAC5C,EAAD,OAAcA,GAASd,KAAO8E,IAEjC2U,EAAc,GAClB3b,EAAS8G,KAAK,wDADI,mBACoD,GAExEmU,EAAoB,SAAC9I,EAAD,oBAAC,eAChBA,GADe,IAElBrL,KAAM,2BACDqL,EAAKrL,MADN,mBAEDzD,OAAOnB,GAAM,CAAEwZ,iBAAgBC,8BAM1C9P,QAAQ,iBAAMoP,GAAoB,SAAC9I,EAAD,oBAAC,eAAeA,GAAhB,IAAsBzS,QAAS,WAClE,CAACob,EAAYhU,KAAME,IAEf,CAAE8T,cAAaE,mBAAkBE,qBC3N1C,GAAMU,IAAwD,CAC5D,CACE7Z,MAAO,cAAC,IAAD,CAAkB,GAAG,UAC5BC,UAAW,SAEb,CACED,MAAO,cAAC,IAAD,CAAkB,GAAG,WAC5BC,UAAW,QAEb,CACED,MAAO,cAAC,IAAD,CAAkB,GAAG,gBAC5BC,UAAW,cACXmI,UAAW,YAIT0R,GAAkE,CACtE,CACE9Z,MAAO,cAAC,IAAD,CAAkB,GAAG,SAC5BC,UAAW,YACXC,OAAQ,SAACiO,EAAI1N,EAAL,OAAayK,cAAO,GAAIC,MAAK1K,EAAI6Q,WAAYlG,QAInD2O,GAAiD,CACrD,CACE/Z,MAAO,cAAC,IAAD,CAAkB,GAAG,SAC5BC,UAAW,SAEb,CACED,MAAO,cAAC,IAAD,CAAkB,GAAG,qCAAqC,eAAe,WAChFC,UAAW,SACXmI,UAAW,WAEb,CACEpI,MAAO,cAAC,IAAD,CAAkB,GAAG,aAAa,eAAe,eACxDC,UAAW,aACXC,OAAQ,SAACiO,EAAI1N,EAAL,OAAayK,cAAO,GAAIC,MAAK1K,EAAI4K,YAAaD,OAExD,CACEpL,MAAO,cAAC,IAAD,CAAkB,GAAG,UAC5BC,UAAW,SACXC,OAAQ,SAACiO,EAAI1N,EAAL,iBAAgBA,EAAIC,OAAOA,OAA3B,QAINsZ,GAAwD,CAC5D,CACEha,MAAO,cAAC,IAAD,CAAkB,GAAG,SAC5BC,UAAW,QAEb,CACED,MAAO,cAAC,IAAD,CAAkB,GAAG,cAC5BC,UAAW,QACXC,OAAQ,SAACiO,EAAI1N,EAAL,eACN,GAAAA,EAAI4T,SAAJ,oBAAW4F,WAAa/O,aAAO,GAAIC,MAAJ,GAAS1K,EAAI4T,SAAb,wBAAS,EAAW4F,YAAa7O,KAAc,MAElF,CACEpL,MAAO,cAAC,IAAD,CAAkB,GAAG,UAC5BC,UAAW,QACXC,OAAQ,SAACiO,EAAI1N,EAAL,qBAAaA,EAAI4T,SAAjB,wBAAa,EAAW6F,cAAxB,mBAAsC,OAI5CC,GAAkB,EAEXC,GAAsC,SAAC,EAA0B,aAAxBnV,EAAwB,EAAxBA,QAASY,EAAe,EAAfA,SAC7D,EAAgCR,cAAxBC,EAAR,EAAQA,oBACR,EAAyB+U,GAAgBpV,EAASK,GAA1C4R,EAAR,EAAQA,aACR,EAAwBoD,GAAezU,EAAUZ,GAAzC6S,EAAR,EAAQA,YACR,EAAuByC,KAAftC,EAAR,EAAQA,WACR,EAA+BuC,GAAqB,GAAC1C,EAAY/S,QAAb,wBAAC,EAAkBkN,yBAA/DmG,EAAR,EAAQA,mBACR,EAA6BqC,GAC3BnV,EAD8C,GAE9CwS,EAAY/S,QAFkC,wBAE9C,EAAkBiN,SAF4B,GAG9C8F,EAAY/S,QAHkC,wBAG9C,EAAkBkN,yBAHZkF,EAAR,EAAQA,iBAKR,EAAkEuD,GAChE7U,EACAZ,GAFMuT,EAAR,EAAQA,wBAAyBE,GAAjC,EAAiCA,6BAIjC,GAA6DiC,GAC3D9U,EACAZ,GAFM8T,EAAR,GAAQA,YAAaE,EAArB,GAAqBA,iBAAkBE,EAAvC,GAAuCA,kBAKvC,EAAevQ,IAAQC,UAAvB,oBAAOC,GAAP,MAEM8R,EAA0B7a,kBAC9B,uBAAM,IAACkY,EAAWlT,QAAZ,mBAAoB,IAAI3E,IAAI,eAAGD,IAAH,EAAGA,GAAImE,GAAP,EAAOA,KAAP,MAAmB,CAAEnB,MAAOmB,GAAMC,MAAOpE,OAC3E,CAAC8X,EAAWlT,OAGR8V,EAAsB9a,kBAC1B,uBACE,IAACqY,EAAmBrT,QAApB,mBAA4B,IAAI3E,IAAI,eAAGkE,IAAH,EAAGA,KAAMnE,GAAT,EAASA,GAAT,MAAmB,CACrDgD,MAAOmB,GACPC,MAAOpE,OAEX,CAACiY,EAAmBrT,OAGhB+V,EAAgB/a,kBACpB,yBAAMkX,IAAgB,GAACC,EAAanS,QAAd,mBAAsB,GAAtB,GAA0BoS,EAAiBpS,QAA3C,mBAAmD,KACzE,CAACmS,EAAanS,KAAMoS,EAAiBpS,OAGjCgW,GAAqBjd,sBAAW,gDACpC,wHAASkd,GAAT,GAASA,eAAgBC,GAAzB,GAAyBA,cACnB,KAAAnD,EAAY/S,QAAZ,4BAAkB5E,MAAOkG,OAD/B,sDAGQ6U,GAHR,IAG6BpD,EAAY/S,QAHzC,yBAG6B,GAAkBoW,OAAO/Z,KAClD,gBAAGga,IAAH,GAAGA,WAAH,MAAoBA,IAAWjb,KAAO8a,KAJ1C,CAOMC,GAPN,mCAQ2BG,GAAiBH,GAAmB/a,GAAI,CAAE6a,wBARrE,GAQU/c,UARV,QAUI,GAAQ,EAAAA,GAAS8H,QAAU,UAAY,SAAS9H,GAASuK,SACrDvK,GAAS8H,SACXuE,IAAQC,KAAR,4BAAkCjF,EAAlC,kBAZN,8CAiByBgW,GAAiB,CACtCN,kBACAC,iBACAM,qBAAsBzD,EAAY/S,KAAK5E,SApB3C,IAiBQlC,GAjBR,QAuBE,GAAQ,EAAAA,GAAS8H,QAAU,UAAY,SAAS9H,GAASuK,SAErDvK,GAAS8H,SACXuE,IAAQC,KAAR,4BAAkCjF,EAAlC,sBA1BJ,uCADoC,sDA8BpC,CAACwS,EAAY/S,KAAMO,IAGfkW,GAA8Czb,kBAClD,uBACE,IAACkY,EAAWlT,QAAZ,mBAAoB,IAAI3E,IAAI,SAACqb,EAAD,2BAAC,eACxBA,GADuB,IAE1BpH,MAAK,IAAEyD,EAAY/S,QAAd,yBAAE,GAAkBoW,OAAO/Z,KAAK,gBAAGga,IAAH,GAAGA,WAAH,MAAoBA,IAAWjb,KAAOsb,EAAKtb,UAEpF,CAAC2X,EAAY/S,KAAMkT,EAAWlT,OAG1B2W,GACH3C,EAAYpb,SAAW,CAACob,EAAYhU,MACpCkU,EAAiBtb,SAAW,CAACsb,EAAiBlU,MAC9CoU,EAAkBxb,SAAW,CAACwb,EAAkBpU,KAE7C4W,GAAyB3R,QAC7B+O,EAAYhU,MAAQkU,EAAiBlU,MAAQoU,EAAkBpU,MAGjE,MAAI+S,GAAYna,QACP,uBAIP,qCACGma,EAAY/S,MACX,qCACE,mBAAY,KAAZ,CAAiB,MAAO,CAAE6W,SAAU,OAAQC,WAAY,KAAxD,SACE,cAAC,IAAD,CACE,GAAG,sCACH,OAAQ/D,EAAY/S,KAAK+W,SAG7B,0BAGJ,qBAAK,OAAQ,CAAC,GAAI,IAAK,QAAQ,gBAA/B,UACE,mBAAK,KAAM,GAAX,SACE,cAAC,IAAD,CACE,OAAO,KACP,YAAa,cAAC,IAAD,CAAkB,GAAG,qDAClC,OAAQ,GACR,WAAY,CAAE9P,SAAUmO,IACxB,WAAYjD,EAAanS,KACzB,QAASmS,EAAavZ,QACtB,QAASoc,GACT,QAAS,GACT,UAAW,CAAErP,UAAW,CAAEmI,QAAS,QAGvC,mBAAK,KAAM,GAAX,SACE,cAAC,IAAD,CACE,OAAO,KACP,YAAa,cAAC,IAAD,CAAkB,GAAG,4CAClC,OAAQ,GACR,WAAY,CAAE7G,SAAUmO,IACxB,WAAYqB,GACZ,QAAS1D,EAAYna,SAAWsa,EAAWta,QAC3C,QAASqc,GACT,QAAS,GACT,UAAW,CAAEtP,UAAW,CAAEmI,QAAS,QAGvC,mBAAK,KAAM,GAAX,SACE,cAAC,IAAD,CACE,OAAO,KACP,YAAa,cAAC,IAAD,CAAkB,GAAG,4CAClC,OAAQ,GACR,QAAS,GACT,WAAY,CAAE7G,SAAUmO,IACxB,UAAW,CAAEzP,UAAW,CAAEmI,QAAS,IACnC,WAAY2F,EAAwBzT,KACpC,QAASyT,EAAwB7a,QACjC,QAAO,UACFmc,GADE,CAEL,CACE9Z,MAAO,cAAC,IAAD,CAAkB,GAAG,2CAC5BC,UAAW,aACXC,OAAQ,SAACiO,EAAI1N,GAAL,OACN,eAAC,GAAD,CACE,0BAA2BA,GAAIN,GAC/B,UAAW8E,EACX,WAAYxE,GAAI4N,WAAW9J,MAC3B,UAAWmU,aAOvB,mBAAK,KAAM,GAAX,SACE,cAAC,IAAD,CACE,OAAO,KACP,YAAa,cAAC,IAAD,CAAkB,GAAG,4CAClC,OAAQ,GACR,QAAS,GACT,WAAY,CAAE1M,SAAUmO,IACxB,UAAW,CAAEzP,UAAW,CAAEmI,QAAS,IACnC,WAAYsE,EAAiBpS,KAC7B,QAASoS,EAAiBxZ,QAC1B,QAASkc,OAGZ6B,IAAwB,uBACxBC,IAAsB,IACrB5C,EAAYhU,QADS,wBACrB,EAAkB3E,IAAI,uCAAGD,GAAH,EAAGA,GAAIH,GAAP,EAAOA,MAAP,MACpB,qBAAc,KAAM,GAApB,UACE,mBAAY,KAAZ,CAAiB,MAAO,CAAE4b,SAAU,OAAQC,WAAY,KAAxD,SACG7b,KAEH,cAAC,KAAD,CACE,UAAWsB,OAAOnB,IAClB,OAAM,OAAEgZ,EAAkBpU,QAApB,yBAAE,GAAyBzD,OAAOnB,QAAlC,mBAA0C,GAChD,MAAK,QAAE8Y,EAAiBlU,QAAnB,uBAAE,GAAwBzD,OAAOnB,QAAjC,yBAAE,GAAqCwZ,kBAAvC,qBAAyD,KAEhE,cAAC,KAAD,CACE,MAAK,QAAEV,EAAiBlU,QAAnB,uBAAE,GAAwBzD,OAAOnB,QAAjC,yBAAE,GAAqCyZ,kBAAvC,qBAAyD,OAVxDzZ,UAehB,cAAC,IAAD,CAAmB,KAAM2I,GAAM,SAAUiS,GAAzC,SACE,eAAC,IAAQ,MAAT,CACE,MAAO,CAAEgB,QAAS,OAAQC,cAAe,SAAUC,WAAY,QAC/D,MAAO,cAAC,IAAD,CAAkB,GAAG,gDAC5B,WAAY,CAAEC,KAAM,SACpB,MAAM,SAJR,UAME,cAAC,KAAD,CACE,KAAK,gBACL,MAAO,CAAC,CAAE3T,SAAU,GAAMC,QAAS,cAAC,IAAD,CAAkB,GAAG,qBACxD,MAAO,cAAC,IAAD,CAAkB,GAAG,0CAC5B,QAASoS,EACT,MAAM,KACN,WAAY,CAAEjd,QAASsa,EAAWta,WAEpC,cAAC,KAAD,CACE,KAAK,iBACL,MAAO,CAAC,CAAE4K,SAAU,GAAMC,QAAS,cAAC,IAAD,CAAkB,GAAG,qBACxD,MAAO,cAAC,IAAD,CAAkB,GAAG,2CAC5B,QAASqS,EACT,WAAY,CAAEld,QAASma,EAAYna,SAAWya,EAAmBza,WAEnE,cAAC,IAAQ,KAAT,UACE,cAAC,IAAD,CACE,GAAG,4CACH,OAAQ,CAAE0W,MAAOyG,gBC/SzB5S,GAAkD,CACtD,CACElI,MAAO,cAAC,IAAD,CAAkB,GAAG,eAC5BC,UAAW,aACXC,OAAQ,SAACiO,EAAI1N,EAAL,OAAaA,GAAIqb,KAAKlV,aAEhC,CACE5G,MAAO,cAAC,IAAD,CAAkB,GAAG,cAC5BC,UAAW,YACXC,OAAQ,SAACiO,EAAI1N,EAAL,OAAaA,GAAIqb,KAAKjV,YAEhC,CACE7G,MAAO,cAAC,IAAD,CAAkB,GAAG,UAC5B4K,aAAc,GACd3K,UAAW,SACXC,OAAQ,SAACiO,EAAI1N,EAAL,OACN,sBAAK,MAAO,CAAEsb,QAAS,OAAQC,cAAe,SAAUG,IAAK,OAA7D,SACG1b,EAAI0a,OAAOjV,OACRzF,EAAI0a,OAAO/a,IAAI,eAAG8Z,GAAH,EAAGA,WAAYkB,EAAf,EAAeA,WAAYjb,EAA3B,EAA2BA,GAA3B,MACb,qBAAY,KAAZ,WACGib,EAAW9W,KADd,KACsB4V,IADA/Z,KAIxB,SAMCic,GAA4B,UAAM,SACvCzQ,EAAWC,eACjB,EAA8B7L,kBAC5B,6BAAO,CACLkF,QAAS3D,OAAOiI,MAAMjI,OAAM,GAACqK,EAASE,SAAV,wBAAC,EAAgB5G,UACzC,KACA3D,OAAM,GAACqK,EAASE,SAAV,wBAAC,EAAgB5G,SAC3BY,SAAUvE,OAAOiI,MAAMjI,OAAM,GAACqK,EAASE,SAAV,wBAAC,EAAgBhG,WAC1C,KACAvE,OAAM,GAACqK,EAASE,SAAV,wBAAC,EAAgBhG,YAG7B,IAAC8F,EAASE,SAAV,wBAAC,EAAgB5G,QAAjB,GAA0B0G,EAASE,SAAnC,wBAA0B,EAAgBhG,WAVpCZ,EAAR,EAAQA,QAASY,EAAjB,EAAiBA,SAajB,EAAoDR,cAA5CE,EAAR,EAAQA,mBAAoBD,EAA5B,EAA4BA,oBAEtBI,EAAe3F,kBACnB,uBAAM,IAACwF,GAAD,YAACA,EAAoBI,UAArB,mBAA+B,IAAIvF,IAAI,eAAGD,GAAH,EAAGA,GAAImE,EAAP,EAAOA,KAAP,MAAmB,CAAEnB,MAAOmB,EAAMC,MAAOpE,MACtF,CAACoF,GAAD,YAACA,EAAoBI,SAGvB,MAAIV,KAAY,MAAQY,IAAa,KAC5B,cAAC,GAAD,CAAoB,QAASZ,EAAS,SAAUY,IAIvD,cAAC,IAAD,CACE,UAAU,mBACV,OAAO,KACP,OAAQ,CAAEnC,OAAQ,YAClB,QAAO,gDAAE,6HAASmC,SAAUwW,EAAnB,WAA+B,GAA/B,MAAmCzV,aAAnC,WAAgD,GAAhD,MAAoDC,YAApD,WAAgE,GAAhE,EACDyV,EAAY,IAAC/W,GAAD,YAACA,EAAoBI,UAArB,mBAA+B,IAAIvF,IAAI,eAAGD,GAAH,EAAGA,GAAH,MAAYA,KAD9D,SAGgBoc,GAAoBF,EAAUnW,SAAW,EAAIoW,EAAYD,OAHzE,MAGDpe,GAHC,OAKFA,GAAS8H,QALP,yCAME,CAAEA,QAAS,GAAOgF,MAAO,EAAGhG,KAAM,SANpC,GAUDA,UAAO9G,GAAS8G,KAAKlB,OACzB,eAAGiY,GAAH,EAAGA,KAAH,MACEA,GAAKlV,WAAWkH,cAAc/F,SAASnB,EAAWkH,gBAClDgO,EAAKjV,UAAUiH,cAAc/F,SAASlB,EAAUiH,iBAb7C,kBAgBA,CAAE/H,QAAS,GAAMgF,MAAOhG,GAAKmB,OAAQnB,cAhBrC,qCAAF,sDAkBP,QAAO,CACL,CACE/E,MAAO,cAAC,IAAD,CAAkB,GAAG,UAC5BC,UAAW,WACXmI,UAAW,SACX6F,WAAY,CACVvJ,QAASgB,EACTwI,KAAM,YAERhO,OAAQ,SAACiO,EAAI1N,EAAL,OACN,eAAC,KAAD,CAAqC,KAAK,WAAW,QAASA,EAAIoF,UAA3CpF,EAAIoF,aAV1B,OAaFqC,GAbE,CAcL,CACElI,MAAO,cAAC,IAAD,CAAkB,GAAG,YAC5B4K,aAAc,GACd1K,OAAQ,SAACiO,EAAI1N,EAAL,OAAa,CACnB,cAAC,KAAD,CAEE,GAAE,4BAAuB6E,EAAvB,iCAAmE7E,EAAIqb,KAAK3b,GAA5E,qBAA2FM,EAAIoF,UAFnG,SAIE,oBAAS,MAAO,cAAC,IAAD,CAAkB,GAAG,SAArC,SACE,oBAAQ,KAAK,UAAU,KAAM,cAAC,KAAD,SAJ3B,gB,+FCtGZ2W,GAA4C,SAAC,EAAD,IAAGC,GAAH,EAAGA,IAAH,MAChD,qBAAS,MAAO,cAAC,IAAD,CAAkB,GAAG,aAArC,SACE,oBACE,KAAK,UACL,QAAS,UAAM,CACble,OAAO8I,KAAKoV,EAAK,SAAU,wBAE7B,KAAM,cAAC,KAAD,SAKNvU,GAA6D,CACjE,CACElI,MAAO,cAAC,IAAD,CAAkB,GAAG,OAC5BC,UAAW,KACX2K,aAAc,IAEhB,CACE5K,MAAO,cAAC,IAAD,CAAkB,GAAG,eAC5BC,UAAW,aACX2K,aAAc,GACd1K,OAAQ,SAACiO,EAAI1D,EAAL,OAAgBS,cAAO,GAAIC,MAAKV,EAAOY,YAAaqR,OAE9D,CACE1c,MAAO,cAAC,IAAD,CAAkB,GAAG,eAC5BC,UAAW,aACX0c,eAAgB,SAACC,EAAD,EAAyC9T,EAAS,IAAzCzI,GAAyC,EAAzCA,KAAMwc,EAAmC,EAAnCA,cAAkBjE,EAAiB,mBAChE,GAAIvY,IAAS,OACX,MAAO,MAET,GAAMyc,GAAYhU,EAAKiU,cAAc,SACrC,MACE,eAAC,KAAD,2BACMnE,GADN,IAEE,MAAO,CACLvY,KAAMyc,OAKd5c,OAAQ,SAACiO,EAAI1D,EAAL,OACN,eAAC,KAAD,CAEE,KAAK,gCACL,QAASA,EAAOuS,WAAW7c,IAFtBsK,EAAOuS,WAAW7c,MAM7B,CACEH,MAAO,cAAC,IAAD,CAAkB,GAAG,gBAC5BC,UAAW,cACX2K,aAAc,GACd1K,OAAQ,SAACiO,EAAI1D,EAAL,OAAgBS,cAAO,GAAIC,MAAKV,EAAOwS,aAAcP,OAE/D,CACE1c,MAAO,cAAC,IAAD,CAAkB,GAAG,gBAC5BC,UAAW,cACX0c,eAAgB,SAACC,EAAD,EAAyC9T,EAAS,IAAzCzI,GAAyC,EAAzCA,KAAMwc,EAAmC,EAAnCA,cAAkBjE,EAAiB,mBAChE,GAAIvY,IAAS,OACX,MAAO,MAET,GAAMyc,GAAYhU,EAAKiU,cAAc,SACrC,MACE,eAAC,KAAD,2BACMnE,GADN,IAEE,MAAO,CACLvY,KAAMyc,OAKd5c,OAAQ,SAACiO,EAAI1D,EAAL,OACN,eAAC,KAAD,CAEE,KAAK,gCACL,QAASA,EAAOyS,YAAY/c,IAFvBsK,EAAOyS,YAAY/c,MAM9B,CACEH,MAAO,cAAC,IAAD,CAAkB,GAAG,YAC5BC,UAAW,UACX2K,aAAc,IAEhB,CACE5K,MAAO,cAAC,IAAD,CAAkB,GAAG,YAC5BoI,UAAW,SACXlI,OAAQ,SAACiO,EAAI1D,EAAL,OAAgB,CAAC,cAAC,GAAD,CAA+B,IAAKA,EAAOgS,KAAvB,gBAIpCU,GAA+B,UAAM,SAChD,EAA+B9X,cAAvBE,EAAR,EAAQA,mBAEFG,EAAe3F,kBACnB,uBAAM,IAACwF,GAAD,YAACA,EAAoBI,UAArB,mBAA+B,IAAIvF,IAAI,eAAGD,GAAH,EAAGA,GAAImE,EAAP,EAAOA,KAAP,MAAmB,CAAEC,MAAOpE,EAAIgD,MAAOmB,MACpF,CAACiB,GAAD,YAACA,EAAoBI,SAGjB7F,EAAuDC,kBAC3D,0BACE,CACEC,MAAO,cAAC,IAAD,CAAkB,GAAG,UAC5BC,UAAW,WACX8N,YAAa,GACb3F,UAAW,SACX6F,WAAY,CACVvJ,QAASgB,EACTgL,aAAcnL,GAAF,SAAEA,EAAoBI,UAAtB,qBAAE,EAA6B,MAA/B,wBAAE,EAAiCxF,GAC/CwQ,WAAY,MATlB,OAYKzI,KAEL,CAAC3C,GAAD,SAACA,EAAoBI,UAArB,qBAAC,EAA6B,MAA9B,wBAAC,EAAiCxF,GAAIuF,IAGxC,MACE,eAAC,IAAD,CACE,UAAU,mBACV,QAAO,gDAAE,qHACPG,WADO,WACIN,GADJ,SACIA,EAAoBI,UADxB,qBACI,EAA6B,MADjC,wBACI,EAAiCxF,GADrC,EAEP6c,EAFO,EAEPA,WACAE,EAHO,EAGPA,YAHO,SAKgBE,aAAqB,CAAEvX,WAAUmX,aAAYE,oBAL7D,MAKDjf,EALC,OAOFA,EAAS8H,QAPP,yCAQE,CAAEA,QAAS,GAAOhB,KAAM,GAAIgG,MAAO,QARrC,4BAWA,CAAEhF,QAAS,GAAMhB,KAAM9G,EAAS8G,KAAMgG,MAAO9M,EAAS8G,KAAKmB,aAX3D,qCAAF,sDAaP,QAASpG,EACT,OAAQ,CAAE4D,OAAQ,YAClB,OAAQ,CAAEjC,EAAG,SCzIb4b,GAAkB,SACtBC,EACAhZ,EAFsB,gBAGCgZ,EAAYlc,KAAK,SAACoR,EAAD,OAAWA,GAAMlO,OAASA,OAH5C,wBAGC,EAAkDnE,IAE9Dod,GAAoC,SAAC,EAK5C,IAJJ9B,GAII,EAJJA,KACA6B,EAGI,EAHJA,YACAE,EAEI,EAFJA,kBACA1F,EACI,EADJA,YAEA,EAAwCpa,mBAAS8f,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAEA,EAA8BhgB,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAEM8G,EAAU3E,kBACd,iBAAMud,GAAYld,IAAI,eAAGkE,GAAH,EAAGA,KAAMnE,EAAT,EAASA,GAAT,MAAmB,CAAEoE,MAAOpE,EAAIgD,MAAOmB,MAC7D,CAACgZ,IAGGvL,EAAWjU,sBACf,SAACkd,EAA2B,CAC1B,GAAI,EAAClD,IAAD,MAACA,EAAa3X,IAElB,IAAIsd,EAAc,CAChB7f,EAAW,IACXyd,GAAiBoC,EAAatd,GAAI,CAChC6a,mBACClR,QAAQ,iBAAMlM,GAAW,MAC5B,OAGFA,EAAW,IACX0d,GAAiB,CACfL,cAAeQ,EAAKtb,GACpB6a,iBACAO,qBAAsBzD,EAAY3X,KAEjCsJ,KAAK,SAACC,EAAQ,CACb,GAAIA,EAAI3D,QAAS,CACf,GAAM4X,GAAcjU,EAAI3E,KAAKoW,OAAO/Z,KAAK,SAACiT,EAAD,OAAWA,GAAM+G,WAAWjb,KAAOsb,EAAKtb,KACjFud,EAAgBC,MAGnB7T,QAAQ,iBAAMlM,GAAW,QAE9B,CAAC6f,EAAchC,EAAKtb,GAAI2X,GAAxB,YAAwBA,EAAa3X,KAGvC,MAAK2X,GAGH,mBACE,QAASna,EACT,SAAUA,EACV,YAAa,cAAC,IAAD,CAAkB,GAAG,uBAClC,MAAO,CAAEqG,MAAO,QAChB,SAAU+N,EACV,QAASrN,EACT,aAAc2Y,GAAgBC,EAAaE,GAAd,YAAcA,EAAmBtD,cAVzC,M,aCjDd0D,GAAkC,SAAC,EAA+C,IAA7C5Y,GAA6C,EAA7CA,QAAStE,EAAoC,EAApCA,OAAQkM,EAA4B,EAA5BA,WAAYrF,EAAgB,EAAhBA,UACvEwK,EAAWjU,sBACf+f,oBAAS,SAACtZ,EAAyB,CACjCuZ,GAAiB9Y,EAAS4H,EAAY,CAAElM,OAAQ6D,GAAF,KAAEA,EAAS,IAAKkF,KAAK,SAACC,EAAQ,CACtEA,EAAI3D,SACNwB,IAAS,MAATA,EAAYmC,EAAI3E,UAGnB,KACH,CAACC,EAAStE,EAAQkM,IAGpB,MAAO,qBAAa,KAAK,SAAS,IAAK,EAAG,IAAK,IAAK,SAAUmF,EAAU,aAAcrR,KCP3Eqd,GAAoB,SAC/BrM,EACuC,CACvC,GAAMpB,GAAcoB,EAAwBxQ,OAC1C,SAACC,EAAKkM,EAAN,6BACKlM,GADL,CAEE,CACEnB,MAAOkL,aAAO,GAAIC,MAAKkC,EAAKiE,WAAYlG,KACxCnL,UAAW,cAAF,OAAgBoN,EAAKiE,WAC9B1G,aAAc,GACd5G,MAAO,IACPuN,MAAO,SACPrR,OAAQ,SAAC+K,EAAGR,EAAJ,OACN,eAAC,GAAD,CACE,0BAA2B4C,EAAKlN,GAChC,WAAYsK,EAAO,cAAD,OAAe4C,GAAf,YAAeA,EAAMiE,YACvC,UAAW7G,EAAOtK,UAK1B,IAGF,MAAKmQ,GAAYpK,OAGV,CACLlG,MAAO,cAAC,IAAD,CAAkB,GAAG,eAC5B4K,aAAc,GACdoT,SAAU1N,GALH,CAAEtQ,MAAO,cAAC,IAAD,CAAkB,GAAG,eAAiB4K,aAAc,GAAMmD,YAAa,KAS9EkQ,GAAwB,SACnCC,EACAtR,EAFmC,OAInCsR,GAAyBhd,OAAO,SAACqM,EAAUmE,EAA4B,CACrE,GAAMC,GAAoBD,EAAwBtD,YAAYhN,KAC5D,SAACiN,EAAD,OAAgBA,GAAWpJ,UAAY2H,IAEzC,MAAK+E,GAEE,2BACFpE,GADL,wCAEiBmE,EAAwBJ,WAAcK,EAAkBpN,QAJ1CgJ,GAM9B,KAGQ4Q,GAAe,SAACrH,EAA0D,CACrF,GAAMxG,GAAcwG,EAAM5V,OACxB,SAACC,EAAK4V,EAAN,6BACK5V,GADL,CAEE,CACElB,UAAW,QAAF,OAAU8W,EAAK5W,IACxBH,MAAO,cAAC,IAAD,CAAkB,GAAG,sBAAsB,OAAQ+W,IAC1DnM,aAAc,GACd5G,MAAO,IACP9D,OAAQ,SAACiO,EAAI1D,EAAL,aACNA,IAAM,MAAN,GAAAA,EAAM,eAAWsM,EAAK5W,QAAtB,0BAA6BO,UAAW2F,OACtC,cAAC,GAAD,CACE,OAAQoE,GAAF,YAAEA,EAAM,eAAWsM,EAAK5W,KAAMO,OACpC,QAASqW,EAAK5W,GACd,WAAYsK,EAAOtK,KAGrB,SAIR,IAGF,MAAKmQ,GAAYpK,OAGV,CAAElG,MAAO,cAAC,IAAD,CAAkB,GAAG,UAAY4K,aAAc,GAAMoT,SAAU1N,GAFtE,CAAEtQ,MAAO,cAAC,IAAD,CAAkB,GAAG,UAAY4K,aAAc,GAAMmD,YAAa,KAKzEqQ,GAAwB,SACnClH,EADmC,OAGnCA,GAAahW,OACX,SAACqM,EAAD,MAAa7M,GAAb,EAAaA,OAAYsE,EAAzB,EAAqB7E,GAArB,mBAAC,eACIoN,GADL,kCAEWvI,GAAYtE,KAEvB,KAIS2d,GAAqB,SAChCpG,EACAG,EAFgC,OAGQ,CACxCpY,MAAO,cAAC,IAAD,CAAkB,GAAG,iBAC5B4K,aAAc,GACdoT,SAAU/F,EAAW7X,IAAI,SAACqb,EAAD,OAAW,CAClCzb,MAAOyb,EAAKnX,KACZsG,aAAc,GACd5G,MAAO,IACPuN,MAAO,SACPrR,OAAQ,SAACiO,EAAI1D,EAAL,OACN,eAAC,GAAD,CACE,kBAAmBA,EAAO,eAAD,OAAgBgR,EAAKtb,KAC9C,YAAasK,EAAO6T,aACpB,KAAM7C,EACN,YAAarD,UAMRmG,GAAwB,SACnCzG,EACAlL,EAFmC,OAInCkL,GAAY1W,KAAK,SAACod,EAAD,OAAoBA,GAAe1C,KAAK3b,KAAOyM,KAErD6R,GAAiB,SAC5BC,EAD4B,aAG5B,IAACA,GAAD,YAACA,EAAmBvD,UAApB,mBAA8B,IAAIja,OAChC,SAACC,EAAKkT,EAAN,oBAAC,eAAqBlT,GAAtB,yCAA2CkT,EAAM+G,WAAWjb,IAAOkU,KACnE,KChHSsK,GAA0B,UAAM,SAC3C,EAAoDtZ,cAA5CE,EAAR,EAAQA,mBAAoBD,EAA5B,EAA4BA,oBAC5B,EAAsC5H,mBAA+C,IAArF,mBAAO4S,EAAP,KAAoBC,EAApB,KACA,EAAkD7S,mBAAS6H,GAAD,SAACA,EAAoBI,UAArB,qBAAC,EAA6B,MAA9B,wBAAC,EAAiCrB,MAA5F,mBAAOkM,EAAP,KAA0BC,EAA1B,KACMtO,EAAOC,cAEPsD,EAAe3F,kBACnB,uBAAM,IAACwF,GAAD,YAACA,EAAoBI,UAArB,mBAA+B,IAAIvF,IAAI,eAAGD,GAAH,EAAGA,GAAImE,EAAP,EAAOA,KAAP,MAAmB,CAAEC,MAAOpE,EAAIgD,MAAOmB,MACpF,CAACiB,GAAD,YAACA,EAAoBI,SAGjB8F,EAAYC,mBAEZ5L,EAAwBC,kBAC5B,wBACE,CACEC,MAAO,cAAC,IAAD,CAAkB,GAAG,UAC5BC,UAAW,WACX8N,YAAa,GACb3F,UAAW,SACX6F,WAAY,CACVvJ,QAASgB,EACTgL,aAAchL,GAAF,SAAEA,EAAe,MAAjB,wBAAE,EAAmBnB,MACjCoM,WAAY,KAGhB,CACE3Q,MAAO,cAAC,IAAD,CAAkB,GAAG,iBAAiB,eAAe,qBAC5DC,UAAW,YACX2Q,MAAO,SAfX,mBAiBKN,KAEL,CAAC5K,EAAc4K,IAGjB,MACE,eAAC,IAAD,CACE,UAAU,mBACV,QAAO,gDAAE,qKAASzK,WAAT,cAAoBH,EAAa,MAAjC,wBAAoB,EAAiBnB,MAArC,OAA4CuM,aAA5C,YAAwD,GAAxD,aACsB8N,GAAsB/Y,OAD5C,MACDgZ,EADC,QAEDrZ,EAAgBE,EAAatE,KAAK,gBAAGmD,IAAH,GAAGA,MAAH,MAAeA,MAAUsB,IAF1D,CAIL,EAACgZ,EAAe9Y,SAChB8Y,EAAe9Z,KAAK,KAAOsB,QAC3Bf,IAAwB,MANnB,iBAQL,YAAQtG,MACNmD,EAAK8B,cAAc,CAAE9D,GAAI,oBAAsB,CAAEsN,WAAYjI,GAAF,YAAEA,EAAerC,SATzE,mBAYE,CAAE4B,KAAM,GAAIgG,MAAO,EAAGhF,QAAS,SAZjC,qBAsBGgL,QAAQC,IAAI,CACpBC,aAAsBpL,GACtBqL,GAA6BrL,GAC7BiZ,EAAW,CAAEjZ,WAAUuG,SAAU,KACjC2S,GAAwBzZ,EAAD,IAAsBuZ,EAAe9Z,QAArC,uBAAsB,GAAsB,MAA5C,yBAAsB,GAA0BiN,UACvEgN,KACAC,GAAuB,GAACJ,EAAe9Z,QAAhB,qBAAC,EAAsB,MAAvB,wBAAC,EAA0BkN,+BA5B7C,qCAgBLd,GAhBK,MAiBLC,GAjBK,MAkBL8N,GAlBK,MAmBLC,EAnBK,MAoBLC,EApBK,MAqBLC,GArBK,OAgCL,EAAClO,GAAoBpL,SACrB,CAACqL,GAA2BrL,SAC5B,CAACmZ,GAASnZ,SACV,CAACoZ,EAAepZ,SAChB,CAACqZ,EAAcrZ,SACf,CAACsZ,GAAsBtZ,SACvB,CAACP,GAtCI,kBAwCL,YAAQxG,MACNmD,EAAK8B,cAAc,CAAE9D,GAAI,oBAAsB,CAAEsN,WAAYjI,GAAF,YAAEA,EAAerC,SAzCzE,mBA4CE,CAAE4B,KAAM,GAAIgG,MAAO,EAAGhF,QAAS,SA5CjC,IA8CP0K,SAAqBjL,EAAcrC,OAG7Bmc,GAAiBvB,GAAkB3M,GAA2BrM,MAC9Dwa,GAAYpB,GAAae,GAASna,MAClCya,GAAiBnB,GAAmBe,EAAcra,KAAMsa,GAAsBta,MAEpFwL,EAAe,CACb+O,GACAC,GACAC,GACA,CACExf,MAAO,cAAC,IAAD,CAAkB,GAAG,mBAC5B4K,aAAc,GACd3K,UAAW,iBACXsR,MAAO,SACPvN,MAAO,OAILe,GAAOoM,GAAoBpM,KAAK4B,MACnCzF,OACC,SAACC,GAAD,GAA6D,cAArDhB,GAAqD,GAArDA,GAAI2G,GAAiD,GAAjDA,oBAAqBF,GAA4B,GAA5BA,WAAYC,GAAgB,GAAhBA,UACrC2K,GAAkB,GAAH,OAAM3K,GAAN,YAAmBD,IAExC,GACEE,KAAwB,MACxB,CAAC0K,GAAgB1D,cAAc/F,SAAS+I,GAAUhD,eAElD,MAAO3M,IAET,GAAMsQ,IAAqBwM,GAAsB7M,GAA2BrM,KAAM5E,IAE5E+W,GAAeL,GAAyBqI,GAASna,KAAM5E,IAEvDsf,GAAqBlB,GAAsBM,EAAe9Z,KAAM5E,IAEhEuf,GAAW,IACf9H,GAA6B,IAC3B6H,IAD2B,YAC3BA,GAAoBxN,2BADO,qBACoB,EADpB,IAE3BkN,EAAepa,KAAKoP,eAFO,qBAEQ,OAHtB,qBAIV,GAEDwL,GAAiB1I,GAAiBC,GAAcwI,IAEhDE,GAAqBxB,GAAsBlH,IAE3CY,GAAc2G,GAAegB,IAEnC,MAAO,GAAP,mBACKte,IADL,kDAGIhB,MACA2Q,UAAWU,IACRC,IACAmO,IACA9H,IAPP,IAQI6H,kBACArB,aAAcmB,QAIpB,IAGD3T,KAAK,SAAC8F,GAAGC,GAAJ,OAAUD,IAAEd,UAAUgB,cAAcD,GAAEf,aA/GvC,mBAiHA,CAAE/L,QAAMgG,MAAOhG,GAAKmB,OAAQH,QAAS,SAjHrC,uCAAF,sDAmHP,QAASjG,EACT,YACE,cAAC,IAAD,CACE,GAAG,kCACH,OAAQ,CAAE+f,UAAWrP,KAGzB,OAAQ,CAAE9M,OAAQ,YAClB,OAAQ,CAAEjC,EAAG,MACb,UAAWgK,EACX,WAAY,CAAEsG,SAAU,0BAAMtG,EAAUM,WAAhB,wBAAM,EAAmBW,WACjD,OAAO,QClLPoT,GAAwD,SAAC,EAAY,SAAVC,EAAU,EAAVA,IACzD5d,EAAOC,cACb,EAA0CkR,YAAS,kBAA3C0M,EAAR,EAAQA,gBAAiBzM,EAAzB,EAAyBA,aACzB,EAA4DlO,cAApDE,EAAR,EAAQA,mBAAoBD,EAA5B,EAA4BA,oBAAqBkO,EAAjD,EAAiDA,OAE3CyM,EAA4BniB,sBAChCoiB,aAAsB3M,GAAD,YAACA,EAAc/F,aACpC,CAAC+F,GAAD,YAACA,EAAc/F,cAGX2S,EAAiBpgB,kBACrB,iBACE,CAAC,CAACyT,EAAOzO,KAAK3D,KAAK,kBAAGjB,EAAH,EAAGA,GAAH,MAAYA,KAAOoT,IAAA,MAAL,GAAKA,EAAc/F,eAAnB,wBAAK,EAA2BrN,OACjE8f,EAA0BG,KAAYC,wBACxC,IAGF,MAAK9a,GAKH,cAAC,KAAD,CACE,MACE,qCACE,cAAC,IAAD,CAAkB,GAAIA,GAAF,SAAEA,EAAoBkQ,WAAtB,wBAAE,EAA6BnR,OAClD,KACD,cAAC,IAAD,CAAkB,GAAIyb,OAG1B,mBACE,qBAAK,MAAO,CAAEhE,QAAS,OAAQlJ,QAAS,OAAQsJ,IAAK,QAArD,SACE,cAAC,KAAD,CAAM,GAAE,4BAAuB7W,EAAvB,sBAAR,SACE,oBAAQ,KAAK,UAAb,SACE,cAAC,IAAD,CAAkB,GAAG,eAAe,eAAe,uBAK3D,OAAQ,CACNgb,WAAY,CACVC,OAAQ,CACN,CACEC,KAAM,UACNC,eAAgBte,EAAK8B,cAAc,CACjC9D,GAAI,kBAGR,CACEqgB,KAAM,WACNC,eAAgBte,EAAK8B,cAAc,CACjC9D,GAAI,2BAGR,CACEqgB,KAAMnP,OAAO/L,GACbmb,eAAgBpP,OAAM,GAAC9L,EAAmBkQ,WAApB,wBAAC,EAA4BnR,OAErD,CACEkc,KAAMnP,OAAO0O,GACbU,eAAgBte,EAAK8B,cAAc,CAAE9D,GAAI4f,EAAKlP,eAAgBQ,OAAO0O,SAtC/E,SA4CE,eAAC,KAAD,CACE,UAAW,CAAElN,QAAS,QACtB,KAAM,CACJxS,KAAM,OACNqgB,UAAWX,EACXhO,SAAU,SAAC4O,EAAQ,CACjBX,EAAgB,eACXzM,IAGLjJ,IAAQC,KAAR,4BAAkCjF,EAAlC,YAAyDqb,MAV/D,UAcE,cAAC,KAAQ,QAAT,CAA8B,IAAK,cAAC,IAAD,CAAkB,GAAG,WAAxD,SACE,cAAC,KAAD,KADmB,UAGrB,cAAC,KAAQ,QAAT,CAAgC,IAAK,cAAC,IAAD,CAAkB,GAAG,aAA1D,SACE,cAAC,GAAD,KADmB,YAGrB,cAAC,KAAQ,QAAT,CAA6B,IAAK,cAAC,IAAD,CAAkB,GAAG,UAAvD,SACE,cAAC,GAAD,KADmB,SAGrB,cAAC,KAAQ,QAAT,CAAgC,IAAK,cAAC,IAAD,CAAkB,GAAG,aAA1D,SACE,cAAC,GAAD,KADmB,YAGrB,cAAC,KAAQ,QAAT,CAAsC,IAAK,cAAC,IAAD,CAAkB,GAAG,mBAAhE,SACE,cAAC,GAAD,KADmB,kBAGrB,cAAC,KAAQ,QAAT,CAAkC,IAAK,cAAC,IAAD,CAAkB,GAAG,eAA5D,SACE,cAAC,GAAD,KADmB,cAGpBR,GACC,cAAC,KAAQ,QAAT,CAAoC,IAAK,cAAC,IAAD,CAAkB,GAAG,iBAA9D,SACE,cAAC,GAAD,KADmB,gBAIvB,cAAC,KAAQ,QAAT,CAAoC,IAAK,cAAC,IAAD,CAAkB,GAAG,iBAA9D,SACE,cAAC,GAAD,KADmB,gBAGrB,cAAC,KAAQ,QAAT,CAEE,IAAK,cAAC,IAAD,CAAkB,GAAG,yBAF5B,SAIE,cAAC,GAAD,KAHI,6BAzFH,wBAmGI,wBAAM,CACnB,GAAM1b,GAASmc,eACPC,EAA8Bpc,EAA9Boc,UAAR,EAAsCpc,EAAnBsb,MAAnB,WAAyB,SAAzB,EAEA,MACE,eAAC,IAAD,CAA+B,oBAAqBze,OAAOuf,GAA3D,SACE,cAAC,GAAD,CAA4B,IAAKd,Q,8SC/F1Be,GAAUC,KAAMC,cAA8B,IAErDC,EAAc,UAAG,CAAH,MAAM7c,MAAK8c,MAAM9c,KAAK+c,SAAW,QAE/CC,GAAiB,YAAC3H,EAAwC,CAC9D,MAAOA,GAAQvY,OAAO,SAACC,EAAKkM,EAAS,CACnC,MAAO,GAAP,oBAAWlM,GAAX,aAAoBkM,EAAKoM,QAAU2H,GAAe/T,EAAKoM,SAAW,IAAlE,CAAuEpM,KACtE,KAGQmM,GAAgB,YAACC,EAAuC,CACnE,MAAOA,GAAQvY,OAAO,SAACC,EAAKkM,EAAS,OACnC,MAAO,GAAP,oBAAWlM,GAAX,aAAoBkM,EAAKoM,QAAUD,GAAcnM,EAAKoM,SAAW,IAAjE,gBAA0EpM,EAAK3N,UAA/E,mBAAyF,MACxF,KAGC2hB,GAA6B,YACjC5H,EACA6H,EACApiB,EACiB,CACjB,MAAOua,GAAQrZ,IAAI,SAACmhB,EAAD,6BAAC,eACfA,GADc,IAEjB9H,QAAS8H,EAAO9H,QAAU4H,GAA2BE,EAAO9H,QAAS6H,EAAUpiB,GAAS,GACxFQ,OAAQ6hB,EAAOphB,KAAOmhB,EAAd,2BAA8BC,EAAO7hB,UAArC,qBAA+C,IAA/C,CAAoDR,IAApD,GAA6DqiB,EAAO7hB,UAApE,mBAA8E,QAiBpF8hB,GAA8B,YAClC/H,EACAgI,EACAH,EACiB,CACjB,MAAKA,GAGE7H,EAAQrZ,IAAI,SAACmhB,EAAD,oBAAC,eACfA,GADc,IAEjB9H,QAAS,GAAF,oBACD8H,EAAO9H,QAAU+H,GAA4BD,EAAO9H,QAASgI,EAAWH,GAAY,IADnF,aAEDC,EAAOphB,KAAOmhB,EAAW,CAACG,GAAa,SANtC,GAAP,oBAAWhI,GAAX,CAAoBgI,KAWlBC,GAAsB,YAC1BjI,EACA6H,EACAK,EACiB,CACjB,MAAOlI,GAAQrZ,IAAI,SAACmhB,EAAD,oBAAC,eACdA,EAAOphB,KAAOmhB,EAAWK,EAAgBJ,GAD5B,IAEjB9H,QAAS8H,EAAO9H,QAAUiI,GAAoBH,EAAO9H,QAAS6H,EAAUK,GAAiB,QAIvFC,EAA0B,YAACnI,EAAuBoI,EAA0C,CAChG,MAAOpI,GAAQrZ,IAAI,SAACmhB,EAAD,oBAAC,eACfA,GADc,IAEjB3T,UAAWiU,EACXpI,QAAS8H,EAAO9H,QAAUmI,GAAwBL,EAAO9H,QAAS8H,EAAOphB,IAAM,QAI7E2hB,EAAwB,YAACrI,EAAuB6H,EAAmC,CACvF,MAAO7H,GACJ5V,OAAO,SAAC0d,EAAD,OAAYA,GAAOphB,KAAOmhB,IACjClhB,IAAI,SAACmhB,EAAD,oBAAC,eACDA,GADA,IAEH9H,QAAS8H,EAAO9H,QAAUqI,GAAsBP,EAAO9H,QAAS6H,GAAY,QAI5ES,GAAuB,YAACtI,EAAuBuI,EAAkC,CACrF,MAAOvI,GAAQrZ,IAAI,SAACmhB,EAAD,oBAAC,eACfA,GADc,IAEjB9H,QAAS8H,EAAO9H,QAAUsI,GAAqBR,EAAO9H,QAASuI,GAAW,GAC1EtiB,OAAQ6hB,EAAO7hB,OAAS6hB,EAAO7hB,OAAOmE,OAAO,SAAC3E,EAAD,OAAWA,GAAMiB,KAAO6hB,IAAW,QAI9EC,GAAyB,YAC7BC,EACA/b,EACAgc,EACA1I,EACiB,CACjB,MAAOA,IAAP,YAAOA,EAASrZ,IAAI,SAACmhB,GAAW,CAC9B,GAAIA,GAAOphB,KAAOgiB,EAAW,OAC3B,MAAO,4BACFZ,IADL,IAEE7hB,OAAM,GAAE6hB,GAAO7hB,UAAT,wBAAE,EAAeU,IAAI,SAAClB,GAAU,CACpC,MAAIA,IAAMiB,KAAO+hB,EACR/b,EAAKic,KAAKnkB,SAAS8G,KAErB7F,eAGFqiB,GAAO9H,QAChB,MAAO,4BACF8H,IADL,IAEE9H,QAASwI,GAAuBC,EAAa/b,EAAMgc,EAAWZ,GAAO9H,SAAW,MAGpF,MAAO8H,OAIEc,GAAkE,SAAC,EAG1E,IAFJrE,GAEI,EAFJA,SACA7d,EACI,EADJA,GAEA,EAA0BzC,qBAA1B,qBAAO4kB,EAAP,MAAcC,GAAd,MACMpgB,GAAOC,cAEPogB,GAA0BziB,kBAAQ,UAAM,CAC5C,MAAOuiB,IAASA,EAAM7I,QAAUD,GAAc8I,EAAM7I,SAAW,IAC9D,CAAC6I,IAEEG,GAA4B1iB,kBAAQ,UAAM,CAC9C,MAAOuiB,IAASA,EAAM7I,QAAU2H,GAAekB,EAAM7I,SAAW,IAC/D,CAAC6I,IAEJ,GAAwB5kB,mBAAS,IAAjC,sBAAOglB,GAAP,MAAaC,GAAb,MAEMC,GAAIhX,eAEVjE,oBAAU,UAAM,CACdgb,GAAQ,KACP,IAaH,GAAME,IAAa/kB,sBAAY,UAAM,CACnCwb,aAAQnZ,GAAIsJ,KAAK,SAAC1E,EAAS,CACzB,MACEA,GAAKgB,SACLwc,GAAS,2BACJxd,EAAKA,MADF,IAEN0U,QAASmI,EAAwB7c,EAAKA,KAAK0U,eAIhD,CAACtZ,IAEJwH,oBAAU,UAAM,CACdkb,MACC,CAACA,KAEJ,GAAMC,IAAuBhlB,sBAC3B,SAACilB,EAAqB,CACpB,GAAMxB,GAASkB,GAAYrhB,KAAK,SAAC4hB,EAAD,aAC9BA,IAD8B,SAC9BA,EAAatjB,UADiB,wBAC9B,EAAqB0B,KAAK,SAAClC,EAAD,OAAWA,GAAMiB,KAAO4iB,MAEpD,MAAOxB,GAASA,EAAOphB,GAAK,MAE9B,CAACsiB,KAGGQ,GAAkBljB,kBAAyB,UAAM,SACrD,SAAI6iB,GAAE/W,SAAN,kBAAI,EAAS0V,OACJ,CACLrT,KAAM,SACN/N,GAAImB,OAAOshB,GAAE/W,MAAM0V,QACnBhd,MAAOke,GAAYrhB,KAAK,SAACmgB,EAAD,OAAYA,GAAOphB,KAAOmB,OAAOshB,GAAE/W,MAAM0V,WAGrE,GAAIqB,GAAE/W,SAAN,kBAAI,EAAS3M,MACJ,CACLgP,KAAM,QACN/N,GAAImB,OAAOshB,GAAE/W,MAAM3M,OACnBqF,MAAOie,GAAWphB,KAAK,SAAC8hB,EAAD,OAAOA,GAAE/iB,KAAOmB,OAAOshB,GAAE/W,MAAM3M,UAGnD,CAAEgP,KAAM,SACd,CAAC0U,GAAE/W,MAAOyW,EAAOG,GAAaD,KAE3BW,GAAerlB,sBACnB,SAACslB,EAAsB,CACrB,GAAM3B,GAAwB,CAC5BjkB,UAAW2C,EACXT,OAAQ,GACR2jB,MAAO,GACPljB,GAAImiB,EAAQA,EAAM7I,QAAQvT,OAAS,EAAI+a,IACvC1U,MAAO,EACPvM,MAAOmC,GAAK8B,cAAc,CAAE9D,GAAI,mBAChCmjB,OAAQ,GACR1V,UAAWwV,GAGbb,UAAS,SAACgB,EAAD,0BAAC,eACLA,GADI,IAEP9J,QAAS+H,GAA2B,GAAC+B,GAAD,YAACA,EAAW9J,WAAZ,mBAAuB,GAAIgI,EAAW2B,OAIrE3B,GAET,CAACthB,EAAImiB,IAGDkB,EAAe1lB,sBACnB,SAACqkB,EAAmBlY,EAAuB,CACzC,GAAMwX,GAAYgB,GAAYrhB,KAAK,SAACmgB,EAAD,OAAYA,GAAOphB,KAAOgiB,IACvDkB,EAAQ5B,GAAaA,EAAU4B,MAErC,MAAQA,GAAQI,aAAgBxZ,GAAYyZ,aAAgBvB,EAAWlY,IAAWR,KAChF,SAAC1E,EAAS,CACR,YAAQgB,QAAQhB,EAAKyD,SACrBqa,KAEE9d,EAAKgB,SACLwc,GAAS,SAACgB,EAAD,0BAAC,eACLA,GADI,IAEP9J,QAASiI,GAAmB,GAAC6B,GAAD,YAACA,EAAW9J,WAAZ,mBAAuB,GAAI0I,EAA3B,YAAC,eACxBpd,EAAKA,MADkB,IAE1Bse,MAAO,aAqBnB,CAACf,IAGGqB,GAAe7lB,sBACnB,SAACqkB,EAAsB,CACrB,GAAMZ,GAASkB,GAAYrhB,KAAK,SAAC4hB,EAAD,OAAiBA,GAAY7iB,KAAOgiB,IACpE,GAAI,EAACZ,EAGL,IAAQ8B,GAAU9B,EAAV8B,MAEJA,EACFd,GAAS,SAACgB,EAAD,0BAAC,eACLA,GADI,IAEP9J,QAASqI,EAAqB,GAACyB,GAAD,YAACA,EAAW9J,WAAZ,mBAAuB,GAAI0I,OAG3DyB,aAAgBzB,GAAW1Y,KAAK,SAAC1E,EAAS,CACpCA,EAAKgB,SACP,MAAQA,QAAQhB,EAAKyD,SACrB+Z,GAAS,SAACgB,EAAD,0BAAC,eACLA,GADI,IAEP9J,QAASqI,EAAqB,GAACyB,GAAD,YAACA,EAAW9J,WAAZ,mBAAuB,GAAI0I,YAMnE,CAACG,IAGGuB,GAAc/lB,sBAClB,SAACilB,EAAkB9Y,EAAuB,OAClCkY,EAAYW,GAAqBC,GAEjCxB,EAASkB,GAAYrhB,KAAK,SAAC4hB,GAAD,OAAiBA,IAAY7iB,KAAOgiB,IAE9DjjB,EAAQqiB,GAAM,IAAIA,EAAO7hB,UAAX,wBAAI,EAAe0B,KAAK,SAAC0iB,GAAD,OAAgBA,IAAW3jB,KAAO4iB,KAExEM,EAAQnkB,GAAH,YAAGA,EAAOmkB,MAErB,MAAQA,GAAQU,aAAe9Z,GAAY+Z,aAAejB,EAAU9Y,IAAWR,KAC7E,SAAC1E,GAAS,CACJA,GAAKgB,SACP,MAAQA,QAAQhB,GAAKyD,SACrBqa,KAEAvY,IAAQC,KAAR,wBAA8BpK,EAA9B,2BAAmD4E,GAAKA,KAAK5E,KAEzDjB,IAAK,KAAL,OAAAA,EAAOoB,kBAAmB2jB,KAAUC,OACtCC,WAAW,UAAM,CACftB,MACC,SAMb,CAACC,GAAsBR,EAAOO,KAG1BuB,GAActmB,sBAClB,SAACilB,EAAqB,CACpB,GAAMZ,GAAYW,GAAqBC,GAEjCxB,EAASkB,GAAYrhB,KAAK,SAAC4hB,EAAD,OAAiBA,GAAY7iB,KAAOgiB,IACpE,GAAI,EAACZ,EAIL,IAAMriB,GAAQsjB,IAAH,YAAGA,GAAYphB,KAAK,SAAC0iB,EAAD,OAAgBA,GAAW3jB,KAAO4iB,IAE3DM,EAAQnkB,GAAH,YAAGA,EAAOmkB,MACjBA,GAAS,CAACnkB,EAAMC,UAClBojB,GAAS,SAACgB,EAAD,0BAAC,eACLA,GADI,IAEP9J,QAASsI,GAAoB,GAACwB,GAAD,YAACA,EAAW9J,WAAZ,mBAAuB,GAAIsJ,OAG1DsB,aAAetB,GAAUtZ,KAAK,SAAC1E,EAAS,CAClCA,EAAKgB,SACP,MAAQA,QAAQhB,EAAKyD,SACrB+Z,GAAS,SAACgB,EAAD,2BAAC,eACLA,GADI,IAEP9J,QAASsI,GAAoB,IAACwB,GAAD,YAACA,EAAW9J,WAAZ,qBAAuB,GAAIsJ,YA0BlE,CAACT,EAAOQ,KA+GJwB,EAAcxmB,sBAAY,SAACqkB,EAAmB9hB,EAAwB,CAC1E,GAAMkkB,GAAsB,CAC1BpC,YACAkB,MAAO,GACPljB,GAAI8gB,IACJjhB,MAAOmC,GAAK8B,cAAc,CAAE9D,GAAI,mBAChCmjB,OAAQ,GACRhjB,eAAgBD,GAGlBkiB,UAAS,SAACgB,EAAD,0BAAC,eACLA,GADI,IAEP9J,QAAS4H,GAA0B,GAACkC,GAAD,YAACA,EAAW9J,WAAZ,mBAAuB,GAAI0I,EAAWoC,OAEpEA,GACN,IAEGC,EAAkB,SAACtC,EAAqB/b,EAA4B,CACxE,GAAMgc,GAAYW,GAAqBZ,GACvCK,GAAS,SAACgB,EAAD,oBAAC,eACLA,GADI,IAEP9J,QAAS8J,EACLtB,GAAuBC,EAAa/b,EAAMgc,EAAWoB,EAAU9J,SAAW,IAC1E,OAKNnP,IAAQC,KAAR,wBAA8BpK,EAA9B,2BAAmDgG,EAAKic,KAAKnkB,SAAS8G,KAAK5E,MAGvEskB,GAAa3mB,sBACjB,SAACilB,EAAqB,CACpB,MAAO2B,cAAc3B,GAAUtZ,KAAK,SAACxL,EAAa,CAChD,GAAIA,EAAS8H,QAAS,CACpB,KAAQA,QAAQ9H,EAASuK,SACzB,GAAM2Z,GAAYW,GAAqBC,GAEvCR,GAAS,SAACgB,EAAD,0BAAC,eACLA,GADI,IAEP9J,QAAS8J,EAAS,GACdA,EAAU9J,WADI,wBACd,EAAmBrZ,IAAI,SAACmhB,EAAW,CACjC,GAAIA,EAAOphB,KAAOgiB,EAAW,CAC3B,GAAMziB,GAAS6hB,EAAO7hB,QAAU,GAChC,MAAO,4BACF6hB,GADL,IAEE7hB,OAAQ,GAAF,oBAAMA,GAAN,CAAczB,EAAS8G,SAGjC,MAAOwc,KAET,WAKZ,CAACe,EAAOQ,KAGJ6B,GAAc7mB,sBAAY,SAACqkB,EAAsB,CACrD,MAAOyC,cAAezC,GAAW1Y,KAAK,SAACxL,EAAa,CAC9CA,EAAS8H,SACX,MAAQA,QAAQ9H,EAASuK,SAEzB+Z,GAAS,SAACgB,EAAD,oBAAC,eACLA,GADI,IAEP9J,QAAS8J,EAAY,GAAH,oBAAOA,EAAU9J,SAAjB,CAA0Bxb,EAAS8G,OAAQ,WAIlE,IAEGR,GAAQ,CACZ+d,QACAI,QAEAviB,KACAgjB,gBACAK,eACAK,eAGAF,gBAEAW,cACAF,eACAI,kBACAC,cACAE,eACA1B,mBACAJ,eAGF,MAAO,gBAAC,GAAQ,SAAT,CAAkB,MAAOte,GAAzB,SAAiCyZ,M,kMCzmBnC,YAAP,sC,sDAAO,YACLvZ,GAMAC,GAPK,oGASEC,YAAwB,4BAAjB,cACZF,UACAG,OAAQ,MACaC,SAAU,IAC3BH,IAAW,UAbZ,sC,wBAkBA,YAAP,yC,sDAAO,YACLlH,GACAiH,GACAC,GAHK,wGAKEC,YAAO,kCAA6DnH,GAA7D,yBACZiH,UACAG,OAAQ,MACaC,SAAU,GAC/BggB,aAAc,OACd/f,QAAS,CACPggB,OAAQ,6BAENpgB,IAAW,UAbZ,uC,wBAkBA,YAAP,0C,wDAAO,YACLqe,GACAtlB,GACAiH,GAHK,wGAKEC,YAAO,iCAA4Doe,GAA5D,yBACZne,OAAQ,MACaC,SAAU,GAC/BJ,OAAQ,CAAEhH,SACVonB,aAAc,OACd/f,QAAS,CACPggB,OAAQ,6BAENpgB,IAAW,UAbZ,uC","file":"p__TeacherSubjects__form.1712a698.async.js","sourcesContent":["import React, { useCallback, useState } from 'react';\nimport { FormattedMessage } from 'umi';\nimport { Button } from 'antd';\nimport { ExportOutlined } from '@ant-design/icons';\n\nimport { exportStatForCourse } from '@/services/escola-lms/reports';\n\ninterface Props {\n  course_id: number;\n  stat?: API.ExportStatForCourseStat;\n}\n\nexport const ExportStatsButton: React.FC<Props> = ({\n  course_id,\n  stat = 'EscolaLms\\\\Reports\\\\Stats\\\\Course\\\\FinishedTopics',\n}) => {\n  const [loading, setLoading] = useState(false);\n\n  const onClickFactory = useCallback(\n    (courseId: number) => async () => {\n      setLoading(true);\n      try {\n        const response = await exportStatForCourse(courseId, {\n          stat,\n        });\n\n        if (response instanceof Blob) {\n          const downloadLink = document.createElement('a');\n          downloadLink.href = window.URL.createObjectURL(response);\n          downloadLink.download = `finished_topics_${course_id}.xlsx`;\n          document.body.appendChild(downloadLink);\n          downloadLink.click();\n          document.body.removeChild(downloadLink);\n        }\n      } catch (error) {\n        console.error(error);\n      } finally {\n        setLoading(false);\n      }\n    },\n    [stat],\n  );\n\n  return (\n    <Button type=\"primary\" loading={loading} onClick={onClickFactory(course_id)}>\n      <ExportOutlined /> <FormattedMessage id=\"export\" />\n    </Button>\n  );\n};\n","import React, { useMemo, useState } from 'react';\nimport { Row, Select, Space, Switch, Table, Tag } from 'antd';\nimport type { ColumnsType } from 'antd/es/table';\nimport ProCard from '@ant-design/pro-card';\nimport { Column } from '@ant-design/plots';\nimport { FormattedMessage, useIntl } from 'umi';\nimport ScrollContainer from 'react-indiana-drag-scroll';\n\nimport TypeButtonDrawer from '../TypeButtonDrawer';\nimport { ExportStatsButton } from './ExportStatsButton';\n\ntype UserStatColumn = Record<string, number | string | API.FinishedTopicsUserStat> & {\n  email: string;\n  id: number;\n};\n\nconst findH5PType = (topic: API.TopicH5P) => {\n  if (topic.topicable.content.contents) {\n    return Object.values(topic.topicable.content.contents)[0].library;\n  }\n  return 'H5P';\n};\n\nexport const UserProgress: React.FC<{\n  course_id: number;\n  topics: API.Topic[];\n  stats: API.FinishedTopicsUserStats[];\n}> = ({ course_id, topics, stats }) => {\n  const [showSeconds, setShowSeconds] = useState(false);\n  const columns: ColumnsType<UserStatColumn> = useMemo(() => {\n    return [\n      {\n        title: <FormattedMessage id=\"user\" />,\n        dataIndex: 'id',\n        render: (id: number) => <TypeButtonDrawer type=\"App\\Models\\User\" type_id={id} />,\n      },\n      {\n        title: <FormattedMessage id=\"email\" />,\n        dataIndex: 'email',\n      },\n      ...topics.map((topic) => {\n        let type: string | undefined = topic.topicable_type?.split('\\\\').pop();\n\n        if (type === 'H5P') {\n          type = findH5PType(topic as API.TopicH5P);\n        }\n\n        return {\n          render: (row: API.FinishedTopicsUserStat | undefined) => {\n            let result = 0;\n            let minutes = 0;\n            if (row) {\n              if (row.started_at && row.finished_at) {\n                result = 1;\n              } else if (row.started_at) {\n                result = 2;\n              }\n              minutes = row.seconds / 60;\n            }\n\n            switch (result) {\n              case 1:\n                return (\n                  <Space>\n                    <Tag color=\"success\">F</Tag>\n                    {showSeconds && <small>{minutes.toFixed(2)}m</small>}\n                  </Space>\n                );\n              case 2:\n                return (\n                  <Space>\n                    <Tag color=\"blue\">S</Tag>\n                    {showSeconds && <small>{minutes.toFixed(2)}m</small>}\n                  </Space>\n                );\n              case 0:\n              default:\n                return (\n                  <React.Fragment>\n                    <Tag color=\"error\">N</Tag>\n                  </React.Fragment>\n                );\n            }\n          },\n\n          title: (\n            <small>\n              <Tag>{type}</Tag> {topic.title}\n            </small>\n          ),\n          dataIndex: topic.id,\n        };\n      }),\n    ];\n  }, [topics, showSeconds]);\n\n  const dataSource: UserStatColumn[] = useMemo(() => {\n    return stats.map((userStat) =>\n      topics.reduce(\n        (acc, topic) => {\n          const result = userStat.topics.find((userStatTopic) => userStatTopic.id === topic.id);\n          return { ...acc, [Number(topic.id)]: result ?? 0 };\n        },\n        { email: userStat.email, id: userStat.id } as UserStatColumn,\n      ),\n    );\n  }, [stats, topics]);\n\n  return (\n    <Table\n      title={() => (\n        <Row justify=\"space-between\" align=\"middle\">\n          <Space>\n            <FormattedMessage id=\"Finished\" defaultMessage=\"Finished:\" />{' '}\n            <Tag color=\"success\">F</Tag>\n            <FormattedMessage id=\"Started\" defaultMessage=\"Started:\" /> <Tag color=\"blue\">S</Tag>\n            <FormattedMessage id=\"NotStarted\" defaultMessage=\"Not Started:\" />{' '}\n            <Tag color=\"error\">N</Tag>\n            <FormattedMessage id=\"ShowMinutes\" defaultMessage=\"Show minutes spent on topic:\" />{' '}\n            <Switch checked={showSeconds} onChange={(v) => setShowSeconds(v)} />\n          </Space>\n          <ExportStatsButton course_id={course_id} />\n        </Row>\n      )}\n      columns={columns}\n      dataSource={dataSource}\n      size=\"small\"\n      scroll={{ x: 1500 }}\n      components={{\n        table: (props: React.HTMLAttributes<HTMLTableElement>) => (\n          <ScrollContainer horizontal={true} style={{ maxWidth: 'auto' }} hideScrollbars={false}>\n            <table {...props} />\n          </ScrollContainer>\n        ),\n      }}\n    />\n  );\n};\n\nexport const UserCourseFinish: React.FC<{ stats: API.FinishedCourseUserStats[] }> = ({ stats }) => {\n  const columns: ColumnsType<{ email: string; finished_at: Date | string }> = useMemo(() => {\n    return [\n      {\n        title: 'user',\n        dataIndex: 'id',\n        render: (id: number) => <TypeButtonDrawer type=\"App\\Models\\User\" type_id={id} />,\n      },\n      {\n        title: 'email',\n        dataIndex: 'email',\n      },\n      {\n        title: <FormattedMessage id=\"finished_at\" defaultMessage=\"Finished at\" />,\n        dataIndex: 'finished_at',\n      },\n    ];\n  }, []);\n\n  const dataSource: { email: string; finished_at: Date | string }[] = useMemo(() => {\n    return stats.map(({ id, email, finished_at }) => ({\n      id,\n      email,\n      finished_at,\n    }));\n  }, [stats]);\n\n  return (\n    <Table\n      title={() => (\n        <Space>\n          <FormattedMessage id=\"course.finished\" defaultMessage=\"Finished\" />\n        </Space>\n      )}\n      columns={columns}\n      dataSource={dataSource}\n      size=\"small\"\n      scroll={{ x: 500 }}\n    />\n  );\n};\n\nexport const UserCourseAttempts: React.FC<{ stats: API.CourseAttempts[] }> = ({ stats }) => {\n  const [choosenUserEmail, setChoosenUserEmail] = useState<string | null>(null);\n  const [choosenAttempt, setChoosenAttempt] = useState<number | null>(null);\n  const intl = useIntl();\n\n  const dataSource = useMemo(() => {\n    return stats.flatMap((userStats) =>\n      Object.values(userStats.attempts).flatMap(({ dates, attempt }) => {\n        const datesValue = Object.values(dates).flatMap(({ date, seconds_total }) => {\n          return {\n            date,\n            attempt,\n            seconds_total,\n            email: userStats.email,\n          };\n        });\n\n        return datesValue;\n      }),\n    );\n  }, [stats]);\n\n  const config: any = {\n    xField: 'date',\n    yField: 'seconds_total',\n    seriesField: 'attempt',\n    isStack: true,\n    xAxis: {\n      label: {\n        autoHide: true,\n        autoRotate: false,\n      },\n    },\n    slider: {\n      start: 0,\n      end: 1,\n    },\n    label: {\n      position: 'middle',\n      layout: [\n        {\n          type: 'interval-adjust-position',\n        },\n        {\n          type: 'interval-hide-overlap',\n        },\n        {\n          type: 'adjust-color',\n        },\n      ],\n    },\n  };\n\n  return (\n    <ProCard\n      title={\n        <Space>\n          <FormattedMessage id=\"course.interactions_time_in_days\" />\n          <Select\n            showSearch\n            value={choosenUserEmail}\n            onChange={(newValue) => {\n              setChoosenUserEmail(newValue);\n              setChoosenAttempt(null);\n            }}\n            placeholder={<FormattedMessage id=\"select_person\" defaultMessage=\"Select a person\" />}\n          >\n            {stats.map(({ id, email }) => (\n              <Select.Option key={id} value={email}>\n                {email}\n              </Select.Option>\n            ))}\n          </Select>\n          <Select\n            value={choosenAttempt}\n            onChange={(newValue) => setChoosenAttempt(newValue)}\n            disabled={choosenUserEmail === null}\n            placeholder={<FormattedMessage id=\"select_attempt\" defaultMessage=\"Select attempt\" />}\n          >\n            {[\n              ...new Set(\n                dataSource\n                  .filter(({ email }) => email === choosenUserEmail)\n                  .map(({ attempt }) => attempt),\n              ),\n            ].map((attempt) => (\n              <Select.Option value={attempt} key={attempt}>\n                <FormattedMessage id=\"attempt\" defaultMessage=\"Attempt\" /> {attempt}\n              </Select.Option>\n            ))}\n          </Select>\n        </Space>\n      }\n      colSpan={12}\n      layout=\"center\"\n    >\n      <div style={{ overflow: 'auto', minHeight: '400px', width: '100%' }}>\n        <Column\n          {...config}\n          tooltip={{\n            title: `${intl.formatMessage({ id: 'attempt' })}`,\n            formatter: (datum) => {\n              const minutes = Math.floor(+datum.seconds_total / 60);\n              const seconds = +datum.seconds_total > 60 ? +datum.seconds_total - minutes * 60 : 0;\n\n              return {\n                name: datum.attempt,\n                value: `${minutes}m ${seconds}s`,\n              };\n            },\n          }}\n          data={dataSource\n            .filter(({ email }) => email === choosenUserEmail)\n            .filter(({ attempt }) =>\n              Number.isInteger(choosenAttempt) ? attempt === choosenAttempt : true,\n            )}\n        />\n      </div>\n    </ProCard>\n  );\n};\n","import { request } from 'umi';\nimport type { RequestOptionsInit } from 'umi-request';\n\n/**  GET /api/admin/exams */\nexport async function getExams(params?: API.ExamsParams, options?: RequestOptionsInit) {\n  return request<API.DefaultMetaResponse<API.Exam>>(`/api/admin/exams`, {\n    method: 'GET',\n    /* useCache: true */ useCache: false,\n    params,\n    ...(options || {}),\n  });\n}\n\n/**  POST /api/admin/exams */\nexport async function createExam(body?: API.CreateExamRequest, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.Exam>>(`/api/admin/exams`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    data: body,\n    ...(options || {}),\n  });\n}\n\n/**  PUT /api/admin/exams/:id */\nexport async function updateExam(\n  id: number,\n  body: API.CreateExamRequest,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.Exam>>(`/api/admin/exams/${id}`, {\n    method: 'PUT',\n    data: body,\n    /* useCache: true */ useCache: false,\n    ...(options || {}),\n  });\n}\n\n/**  GET /api/admin/exams/:id */\nexport async function getExam(id: number, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.Exam>>(`/api/admin/exams/${id}`, {\n    method: 'GET',\n    /* useCache: true */ useCache: false,\n    ...(options || {}),\n  });\n}\n\n/**  DELETE /api/admin/exams/:id */\nexport async function deleteExam(id: number, options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<undefined>>(`/api/admin/exams/${id}`, {\n    method: 'DELETE',\n    ...(options || {}),\n  });\n}\n\n/**  POST /api/admin/exams/:id/users/:user_id */\nexport async function createExamResult(\n  exam_id: number,\n  user_id: number,\n  body: API.CreateExamResultRequest,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.Exam>>(`/api/admin/exams/${exam_id}/users/${user_id}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    data: body,\n    ...(options || {}),\n  });\n}\n\n/**  DELETE /api/admin/exams/:id/users/:user_id */\nexport async function deleteExamResult(\n  exam_id: number,\n  user_id: number,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<undefined>>(`/api/admin/exams/${exam_id}/users/${user_id}`, {\n    method: 'DELETE',\n    ...(options || {}),\n  });\n}\n","import ProForm from '@ant-design/pro-form';\nimport React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { FormattedMessage } from 'umi';\nimport { Modal, Select } from 'antd';\nimport type { DefaultOptionType } from 'antd/lib/select';\n\nimport SecureUpload from '@/components/SecureUpload';\nimport { ExamGradeType } from '@/services/escola-lms/enums';\nimport { useTeacherSubject } from '../context';\nconst FileExamGradeType: React.FC<{\n  type: ExamGradeType;\n  groupSelectDisabled: boolean;\n  onDataConverted: (data: ConvertedData | undefined) => void;\n}> = ({ type, onDataConverted, groupSelectDisabled }) => {\n  const { semester_subject_id, teacherSubjectData } = useTeacherSubject();\n  const [selectedGroup, setSelectedGroup] = useState<number | null>(null);\n\n  const groupOptions: DefaultOptionType[] = useMemo(\n    () =>\n      (teacherSubjectData?.groups ?? []).map(({ id, name }) => ({\n        label: name,\n        value: id,\n      })),\n\n    [],\n  );\n  const reqData: API.ParseExamFileRequest = {\n    type,\n    group_id: selectedGroup!,\n    semester_subject_id: semester_subject_id!,\n  };\n\n  const onUploadFile = useCallback((response: API.DefaultResponse<API.Exam>) => {\n    if (response.success) {\n      // TODO error handling\n      // filter out users that are not in selected group\n      const exam_results = response.data.results.filter(({ user_id }) => user_id !== null);\n      if (!exam_results.length) return;\n\n      onDataConverted({ exam_results, group_id: response.data.group_id });\n    }\n  }, []);\n\n  return (\n    <>\n      <ProForm.Item label={<FormattedMessage id=\"group\" />}>\n        <Select\n          disabled={groupSelectDisabled}\n          value={selectedGroup}\n          onChange={(v) => setSelectedGroup(v)}\n          options={groupOptions}\n          placeholder={<FormattedMessage id=\"select_group\" />}\n          style={{ width: '100%' }}\n        />\n      </ProForm.Item>\n      <SecureUpload\n        name=\"file\"\n        url=\"/api/admin/exams/parse\"\n        onUpload={onUploadFile}\n        onChange={(info) => !info.fileList.length && onDataConverted(undefined)}\n        maxFiles={1}\n        data={reqData}\n        disabled={!selectedGroup}\n      />\n    </>\n  );\n};\n\nconst ManualExamGradeType: React.FC<{\n  onDataConverted: (convertedData: ConvertedData) => void;\n}> = ({ onDataConverted }) => {\n  const { teacherSubjectData, groupUsers } = useTeacherSubject();\n  const [selectedGroup, setSelectedGroup] = useState<number | null>(null);\n\n  const groupOptions: DefaultOptionType[] = useMemo(\n    () =>\n      (teacherSubjectData?.groups ?? []).map(({ id, name }) => ({\n        label: name,\n        value: id,\n      })),\n\n    [],\n  );\n\n  const onSelectedGroupChange = useCallback(\n    (group_id: number) => {\n      setSelectedGroup(group_id);\n      const currGroup = groupUsers.byId?.[group_id];\n      if (!currGroup) return;\n\n      const exam_results = currGroup.users.reduce<API.ExamResult[]>(\n        (acc, { id, email, first_name, last_name, academic_teacher_id }) => {\n          // filter out tutors\n          if (academic_teacher_id !== null) return acc;\n\n          return [\n            ...acc,\n            {\n              email,\n              first_name,\n              last_name,\n              user_id: id,\n              result: 0,\n            },\n          ];\n        },\n        [],\n      );\n\n      onDataConverted({ group_id, exam_results });\n    },\n    [groupUsers.byId],\n  );\n\n  return (\n    <Select\n      value={selectedGroup}\n      onChange={onSelectedGroupChange}\n      options={groupOptions}\n      placeholder={<FormattedMessage id=\"select_group\" />}\n      style={{ width: '100%' }}\n    />\n  );\n};\n\nexport interface ConvertedData {\n  group_id: number;\n  exam_results: API.ExamResult[];\n}\n\ninterface Props {\n  open: boolean;\n  closeModal: () => void;\n  onSuccess: (convertedData: ConvertedData) => void;\n  type: ExamGradeType;\n}\n\nconst FILE_TYPES = [ExamGradeType.TeamsLecture, ExamGradeType.TestPortal, ExamGradeType.TeamsForms];\n\nexport const ConvertGradesModal: React.FC<Props> = ({ open, closeModal, onSuccess, type }) => {\n  const { teacherSubjectData, fetchGroupUsers } = useTeacherSubject();\n  const [convertedData, setConvertedData] = useState<ConvertedData>();\n\n  useEffect(() => {\n    if (type === ExamGradeType.Manual && open) {\n      teacherSubjectData?.groups?.forEach(({ id }) => fetchGroupUsers(id));\n    }\n  }, [type, open]);\n\n  return (\n    <Modal\n      title={<FormattedMessage id={`TeacherSubjects.Exams.${type}Convert`} />}\n      width=\"40vw\"\n      open={open}\n      onCancel={closeModal}\n      onOk={() => {\n        if (convertedData) {\n          onSuccess(convertedData);\n        }\n      }}\n      okButtonProps={{ disabled: !convertedData }}\n    >\n      {FILE_TYPES.includes(type) && (\n        <FileExamGradeType\n          type={type}\n          onDataConverted={setConvertedData}\n          groupSelectDisabled={!!convertedData}\n        />\n      )}\n      {type === ExamGradeType.Manual && <ManualExamGradeType onDataConverted={setConvertedData} />}\n    </Modal>\n  );\n};\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { FormattedMessage, history } from 'umi';\nimport { Button, Col, InputNumber, Row, Spin } from 'antd';\nimport ProTable, { ProColumns } from '@ant-design/pro-table';\nimport ProForm, { ProFormDatePicker, ProFormText } from '@ant-design/pro-form';\nimport { ExamGradeType } from '@/services/escola-lms/enums';\nimport { createExam, getExam, updateExam } from '@/services/escola-lms/exams';\n\nimport { ConvertGradesModal, type ConvertedData } from './ConvertGradesModal';\nimport { useTeacherSubject } from '../context';\n\nconst SelectTypeButtonsGroup: React.FC<{ onSelect: (type: ExamGradeType) => void }> = ({\n  onSelect,\n}) => (\n  <Row gutter={[16, 16]}>\n    <Col span={12}>\n      <Button type=\"primary\" onClick={() => onSelect(ExamGradeType.TeamsForms)}>\n        <FormattedMessage id=\"uploadFile.MsTeamsForms\" defaultMessage=\"uploadFile.MsTeamsForms\" />\n      </Button>\n    </Col>\n    <Col span={12}>\n      <Button type=\"primary\" onClick={() => onSelect(ExamGradeType.TestPortal)}>\n        <FormattedMessage id=\"uploadFile.TestPortal\" defaultMessage=\"uploadFile.TestPortal\" />\n      </Button>\n    </Col>\n    <Col span={12}>\n      <Button type=\"primary\" onClick={() => onSelect(ExamGradeType.TeamsLecture)}>\n        <FormattedMessage id=\"uploadFile.MsTeams\" defaultMessage=\"uploadFile.MsTeams\" />\n      </Button>\n    </Col>\n    <Col span={12}>\n      <Button type=\"primary\" onClick={() => onSelect(ExamGradeType.Manual)}>\n        <FormattedMessage id=\"uploadGradesManually\" defaultMessage=\"uploadGradesManually\" />\n      </Button>\n    </Col>\n  </Row>\n);\n\nconst staticColumns: ProColumns<API.ExamResult>[] = [\n  { title: <FormattedMessage id=\"first_name\" />, dataIndex: 'first_name', editable: false },\n  { title: <FormattedMessage id=\"last_name\" />, dataIndex: 'last_name', editable: false },\n  {\n    title: <FormattedMessage id=\"examResult\" />,\n    dataIndex: 'result',\n    valueType: 'percent',\n    formItemProps: {\n      rules: [\n        {\n          required: true,\n          message: <FormattedMessage id=\"field_required\" />,\n        },\n        {\n          type: 'number',\n          min: 0,\n          max: 100,\n          message: <FormattedMessage id=\"number_between\" values={{ min: 0, max: 100 }} />,\n        },\n      ],\n    },\n  },\n];\n\ninterface ExamFormValues {\n  title: string;\n  weight: number;\n  passed_at: Date | string;\n}\n\ninterface Props {\n  exam_id: string;\n}\nexport const ExamForm: React.FC<Props> = ({ exam_id }) => {\n  const [form] = ProForm.useForm<ExamFormValues>();\n  const [selectedType, setSelectedType] = useState<ExamGradeType>();\n  const [convertedData, setConvertedData] = useState<ConvertedData>();\n  const [fetching, setFetching] = useState(false);\n  const { semester_subject_id, getGroupById } = useTeacherSubject();\n\n  const editableKeys = useMemo(\n    () => (convertedData?.exam_results ?? []).map(({ user_id }) => user_id),\n    [convertedData?.exam_results],\n  );\n\n  useEffect(() => {\n    const numExamId = Number(exam_id);\n\n    if (exam_id === 'new') {\n      setSelectedType(undefined);\n      setConvertedData(undefined);\n      form.resetFields();\n    }\n\n    if (exam_id !== 'new' && !Number.isNaN(numExamId)) {\n      setFetching(true);\n      getExam(numExamId)\n        .then((res) => {\n          if (res.success) {\n            const { type, results, title, weight, passed_at, group_id } = res.data;\n            setSelectedType(type);\n            setConvertedData({ group_id, exam_results: results });\n            form.setFieldsValue({ title, weight, passed_at });\n          }\n        })\n        .finally(() => setFetching(false));\n    }\n  }, [exam_id]);\n\n  const resetState = useCallback(() => {\n    setSelectedType(undefined);\n    setConvertedData(undefined);\n  }, []);\n\n  if (fetching) {\n    return <Spin />;\n  }\n\n  return (\n    <>\n      {selectedType && (\n        <ConvertGradesModal\n          open={Boolean(selectedType && !convertedData)}\n          type={selectedType}\n          closeModal={resetState}\n          onSuccess={setConvertedData}\n        />\n      )}\n      <ProForm\n        form={form}\n        submitter={selectedType === undefined || !convertedData ? false : undefined}\n        onFinish={async (formData: ExamFormValues) => {\n          // Validation since table has other form instance\n          const areExamResultsValid = convertedData?.exam_results?.every(\n            ({ result }) => typeof result === 'number' && result >= 0 && result <= 100,\n          );\n\n          if (convertedData && areExamResultsValid && typeof semester_subject_id === 'number') {\n            const { title, passed_at, weight } = formData;\n            const numExamId = Number(exam_id);\n            const { exam_results, group_id } = convertedData;\n\n            const reqData: API.CreateExamRequest = {\n              type: selectedType!,\n              semester_subject_id,\n              title,\n              passed_at,\n              weight,\n              group_id,\n              results: exam_results,\n            };\n\n            const response = Number.isNaN(numExamId)\n              ? await createExam(reqData)\n              : await updateExam(numExamId, reqData);\n            if (response.success) {\n              history.push(`/teacher/subjects/${semester_subject_id}/exams`);\n            }\n          }\n          return true;\n        }}\n        onReset={resetState}\n      >\n        <ProForm.Group>\n          <ProFormText\n            label={<FormattedMessage id=\"examTitle\" defaultMessage=\"examTitle\" />}\n            rules={[\n              {\n                required: true,\n                message: <FormattedMessage id=\"field_required\" />,\n              },\n            ]}\n            width=\"lg\"\n            name=\"title\"\n          />\n          <ProFormDatePicker\n            label={<FormattedMessage id=\"datePassingExam\" defaultMessage=\"datePassingExam\" />}\n            rules={[\n              {\n                required: true,\n                message: <FormattedMessage id=\"field_required\" />,\n              },\n            ]}\n            width=\"lg\"\n            name=\"passed_at\"\n          />\n          <ProForm.Item\n            name=\"weight\"\n            label={<FormattedMessage id=\"examImportance\" defaultMessage=\"examImportance\" />}\n            rules={[\n              { required: true, message: <FormattedMessage id=\"field_required\" /> },\n              {\n                type: 'number',\n                min: 1,\n                max: 100,\n                message: <FormattedMessage id=\"number_between\" values={{ min: 1, max: 100 }} />,\n              },\n            ]}\n          >\n            <InputNumber />\n          </ProForm.Item>\n        </ProForm.Group>\n        {selectedType && convertedData && (\n          <ProTable\n            rowKey=\"user_id\"\n            headerTitle={getGroupById(convertedData.group_id)?.name}\n            editable={{\n              type: 'single',\n              editableKeys,\n              onValuesChange: (record, dataSource) =>\n                setConvertedData({ group_id: convertedData.group_id, exam_results: dataSource }),\n            }}\n            cardProps={{ bodyStyle: { paddingInline: 0 } }}\n            search={false}\n            dataSource={convertedData.exam_results}\n            columns={staticColumns}\n          />\n        )}\n        {!convertedData && <SelectTypeButtonsGroup onSelect={setSelectedType} />}\n      </ProForm>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport type { ProColumns } from '@ant-design/pro-table';\nimport ProTable from '@ant-design/pro-table';\nimport { FormattedMessage } from 'umi';\n\nimport { getExam } from '@/services/escola-lms/exams';\n\ninterface Props {\n  exam_id: number;\n}\n\nconst columns: ProColumns<API.ExamResult>[] = [\n  { title: <FormattedMessage id=\"first_name\" />, dataIndex: 'first_name' },\n  { title: <FormattedMessage id=\"last_name\" />, dataIndex: 'last_name' },\n  { title: <FormattedMessage id=\"examResult\" />, dataIndex: 'result', hideInSearch: true },\n];\n\nexport const ExamResults: React.FC<Props> = ({ exam_id }) => {\n  const [title, setTitle] = useState('');\n\n  return (\n    <ProTable<API.ExamResult>\n      className=\"table-standalone\"\n      rowKey=\"user_id\"\n      search={false}\n      headerTitle={title}\n      request={async () => {\n        const response = await getExam(exam_id);\n\n        if (response.success) {\n          setTitle(response.data.title);\n\n          return {\n            total: response.data.results.length,\n            success: true,\n            data: response.data.results,\n          };\n        }\n\n        return [];\n      }}\n      columns={columns}\n    />\n  );\n};\n","import React, { useMemo, useRef } from 'react';\nimport { format } from 'date-fns';\nimport type { Location } from 'history';\nimport { FormattedMessage, Link, useLocation } from 'umi';\nimport { Button, Popconfirm, Tooltip } from 'antd';\nimport { DeleteOutlined, EditOutlined, LineChartOutlined } from '@ant-design/icons';\nimport ProTable from '@ant-design/pro-table';\nimport type { ActionType, ProColumns } from '@ant-design/pro-table';\n\nimport { DAY_FORMAT } from '@/consts/dates';\nimport { getExams, deleteExam } from '@/services/escola-lms/exams';\nimport TypeButtonDrawer from '@/components/TypeButtonDrawer';\nimport { ExamForm } from './ExamForm';\nimport { ExamResults } from './ExamResults';\nimport { useTeacherSubject } from '../context';\n\nconst staticColumns: ProColumns<API.Exam>[] = [\n  {\n    title: <FormattedMessage id=\"ID\" defaultMessage=\"ID\" />,\n    dataIndex: 'id',\n    sorter: true,\n    width: '80px',\n  },\n  {\n    title: <FormattedMessage id=\"title\" defaultMessage=\"title\" />,\n    dataIndex: 'title',\n    hideInSearch: true,\n    sorter: true,\n  },\n  {\n    title: <FormattedMessage id=\"type\" defaultMessage=\"type\" />,\n    dataIndex: 'type',\n    sorter: true,\n    render: (_, record) => <FormattedMessage id={`ExamGradeType.${record.type}`} />,\n  },\n  {\n    title: <FormattedMessage id=\"TeacherSubjects.Exams.exam_date\" defaultMessage=\"Exam date\" />,\n    dataIndex: 'passed_at',\n    sorter: true,\n    render: (_, record) => record.passed_at && format(new Date(record.passed_at), DAY_FORMAT),\n  },\n  {\n    title: <FormattedMessage id=\"TeacherSubjects.Exams.grade_weight\" defaultMessage=\"Weight\" />,\n    dataIndex: 'weight',\n    sorter: true,\n    render: (_, record) => record.weight + '%',\n  },\n  {\n    title: <FormattedMessage id=\"created_at\" defaultMessage=\"Created at\" />,\n    dataIndex: 'created_at',\n    sorter: true,\n    render: (_, record) => record.created_at && format(new Date(record.created_at), DAY_FORMAT),\n  },\n  {\n    title: <FormattedMessage id=\"semester\" defaultMessage=\"Semester\" />,\n    dataIndex: 'semester',\n    sorter: true,\n    render: (_, record) => (\n      <FormattedMessage\n        id={`SemesterType.${record.semester.type}`}\n        values={{ year: record.semester.year }}\n      />\n    ),\n  },\n  {\n    title: <FormattedMessage id=\"group\" defaultMessage=\"Group\" />,\n    dataIndex: 'group_id',\n    sorter: true,\n    render: (_, record) => (\n      <TypeButtonDrawer key={record.group_id} type=\"Students\" type_id={record.group_id} />\n    ),\n  },\n];\n\nexport const Exams: React.FC = () => {\n  const actionRef = useRef<ActionType>();\n  const { semester_subject_id } = useTeacherSubject();\n  const location = useLocation() as Location & { query: { exam_id?: string; results?: string } };\n\n  const { exam_id, results } = useMemo(\n    () => ({ exam_id: location.query?.exam_id ?? null, results: location.query?.results }),\n    [location.query?.exam_id, location.query?.results],\n  );\n\n  if (results !== null && !Number.isNaN(Number(results))) {\n    return <ExamResults exam_id={Number(results)} />;\n  }\n\n  if (exam_id !== null) {\n    return <ExamForm exam_id={exam_id} />;\n  }\n\n  return (\n    <ProTable<API.Exam, API.ExamsParams>\n      className=\"table-standalone\"\n      headerTitle={<FormattedMessage id=\"exams\" />}\n      actionRef={actionRef}\n      search={false}\n      rowKey=\"id\"\n      request={async ({ current, pageSize }, sort) => {\n        if (semester_subject_id === null)\n          return {\n            data: [],\n            total: 0,\n            success: false,\n          };\n        const sortArr = sort && Object.entries(sort)[0];\n\n        const response = await getExams({\n          per_page: pageSize,\n          page: current,\n          semester_subject_id: !Number.isNaN(semester_subject_id) ? semester_subject_id : undefined,\n          order_by: sortArr && sortArr[0],\n          order: sortArr && (sortArr[1] === 'ascend' ? 'ASC' : 'DESC'),\n        });\n\n        if (response.success) {\n          return {\n            data: response.data,\n            total: response.meta.total,\n            success: true,\n          };\n        }\n\n        return {\n          data: [],\n          total: 0,\n          success: false,\n        };\n      }}\n      columns={[\n        ...staticColumns,\n        {\n          title: <FormattedMessage id=\"pages.searchTable.titleOption\" />,\n          dataIndex: 'option',\n          valueType: 'option',\n          render: (_, record) => [\n            <Link\n              to={`/teacher/subjects/${record.semester_subject_id}/exams?exam_id=${record.id}`}\n              key=\"edit\"\n            >\n              <Tooltip title={<FormattedMessage id=\"edit\" defaultMessage=\"edit\" />}>\n                <Button type=\"primary\" icon={<EditOutlined />} />\n              </Tooltip>\n            </Link>,\n            <Link\n              to={`/teacher/subjects/${record.semester_subject_id}/exams?results=${record.id}`}\n              key=\"results\"\n            >\n              <Tooltip\n                title={\n                  <FormattedMessage id=\"TeacherSubjects.Exams.results\" defaultMessage=\"results\" />\n                }\n              >\n                <Button icon={<LineChartOutlined />} />\n              </Tooltip>\n            </Link>,\n            <Popconfirm\n              key=\"delete\"\n              title={\n                <FormattedMessage\n                  id=\"deleteQuestion\"\n                  defaultMessage=\"Are you sure to delete this record?\"\n                />\n              }\n              onConfirm={async () => {\n                const response = await deleteExam(record.id);\n\n                if (response.success && actionRef.current) {\n                  actionRef.current.reload();\n                }\n              }}\n              okText={<FormattedMessage id=\"yes\" />}\n              cancelText={<FormattedMessage id=\"no\" />}\n            >\n              <Tooltip title={<FormattedMessage id=\"delete\" defaultMessage=\"delete\" />}>\n                <Button type=\"primary\" icon={<DeleteOutlined />} danger />\n              </Tooltip>\n            </Popconfirm>,\n          ],\n        },\n      ]}\n    />\n  );\n};\n","import { request } from 'umi';\nimport type { RequestOptionsInit } from 'umi-request';\n\n/**  POST /api/admin/chats/ms-teams */\nexport async function createTeamsChat(\n  body: API.CreateTeamsChatRequest,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.TeamsChat>>(`/api/admin/chats/ms-teams`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    data: body,\n    ...(options || {}),\n  });\n}\n","import React, { useCallback, useState } from 'react';\nimport { FormattedMessage } from 'umi';\nimport { Button, message, Tooltip } from 'antd';\nimport { ExportOutlined } from '@ant-design/icons';\n\nimport { createTeamsChat } from '@/services/escola-lms/chats';\n\ninterface Props {\n  student_id: number;\n}\n\nexport const CreateTeamsChatButton: React.FC<Props> = ({ student_id }) => {\n  const [loading, setLoading] = useState(false);\n\n  const onClick = useCallback(async () => {\n    setLoading(true);\n    const response = await createTeamsChat({ user_id: student_id });\n    if (!response.success) {\n      message.error(response.message);\n      setLoading(false);\n      return;\n    }\n\n    window.open(response.data.web_url, '_blank', 'noopener noreferrer');\n    setLoading(false);\n  }, []);\n\n  return (\n    <Tooltip title={<FormattedMessage id=\"msTeams\" defaultMessage=\"teams\" />}>\n      <Button loading={loading} type=\"primary\" icon={<ExportOutlined />} onClick={onClick} />\n    </Tooltip>\n  );\n};\n","import React, { useMemo } from 'react';\nimport { FormattedMessage } from 'umi';\nimport type { DefaultOptionType } from 'antd/lib/select';\nimport ProTable, { type ProColumns } from '@ant-design/pro-table';\n\nimport { allStudentsAndGroups as fetchAllStudentsAndGroups } from '@/services/escola-lms/student_user_groups';\nimport { useTeacherSubject } from '../context';\nimport { CreateTeamsChatButton } from './CreateTeamsChatButton';\n\ninterface TableDataProps {\n  group_id: number;\n  group_name: string;\n  user_id: number;\n  first_name: string;\n  last_name: string;\n  email: string;\n}\n\ninterface TableParams {\n  groups: number[];\n  first_name: string;\n  last_name: string;\n  email: string;\n}\n\nexport const TableColumns: ProColumns<TableDataProps>[] = [\n  {\n    title: <FormattedMessage id=\"ID\" defaultMessage=\"ID\" />,\n    dataIndex: 'user_id',\n    hideInSearch: true,\n    width: '80px',\n  },\n  {\n    title: <FormattedMessage id=\"first_name\" defaultMessage=\"First name\" />,\n    dataIndex: 'first_name',\n  },\n  {\n    title: <FormattedMessage id=\"last_name\" defaultMessage=\"Last name\" />,\n    dataIndex: 'last_name',\n  },\n  {\n    title: <FormattedMessage id=\"email\" defaultMessage=\"email\" />,\n    dataIndex: 'email',\n  },\n  {\n    title: <FormattedMessage id=\"groupName\" defaultMessage=\"Group name\" />,\n    dataIndex: 'group_name',\n    hideInSearch: true,\n  },\n];\n\nconst getGroupsOptions = (subjectGroups: API.SubjectGroups[]): DefaultOptionType[] =>\n  subjectGroups.map(({ id, name }) => ({\n    label: name,\n    value: id,\n  }));\n\nconst getTableData = (studentUserGroups: API.StudentUserGroup[]): TableDataProps[] =>\n  studentUserGroups.reduce<TableDataProps[]>((acc, curr) => {\n    const userTable = curr?.users?.reduce<TableDataProps[]>(\n      (innerAcc, currentUser) =>\n        currentUser.academic_teacher_id !== null\n          ? innerAcc\n          : [\n              ...innerAcc,\n              {\n                group_id: curr.id,\n                group_name: curr.name,\n                user_id: currentUser.id,\n                first_name: currentUser.first_name,\n                last_name: currentUser.last_name,\n                email: currentUser.email,\n              },\n            ],\n      [],\n    );\n\n    return [...acc, ...userTable];\n  }, []);\n\nexport const Students: React.FC = () => {\n  const { teacherSubjectData } = useTeacherSubject();\n\n  const groupOptions = useMemo(\n    () => getGroupsOptions(teacherSubjectData?.groups ?? []),\n    [teacherSubjectData?.groups],\n  );\n\n  return (\n    <ProTable<TableDataProps, TableParams>\n      className=\"table-standalone\"\n      rowKey={(record) => `${record.group_id}-${record.user_id}`}\n      search={{ layout: 'vertical' }}\n      request={async ({ groups, first_name = '', last_name = '', email = '' }) => {\n        const response = await fetchAllStudentsAndGroups({\n          parent_id: teacherSubjectData?.group_id,\n          'id[]': groups,\n        });\n\n        if (!response.success) {\n          return { data: [], total: 0, success: false };\n        }\n\n        const tableData = getTableData(response.data).filter(\n          (record) =>\n            record.first_name.toLowerCase().includes(first_name.toLowerCase()) &&\n            record.last_name.toLowerCase().includes(last_name.toLowerCase()) &&\n            record.email.toLowerCase().includes(email.toLowerCase()),\n        );\n\n        return { data: tableData, total: tableData.length, success: true };\n      }}\n      columns={[\n        {\n          title: <FormattedMessage id=\"groups\" defaultMessage=\"Groups\" />,\n          dataIndex: 'groups',\n          hideInTable: true,\n          filterMultiple: true,\n          valueType: 'select',\n          fieldProps: {\n            options: groupOptions,\n            mode: 'multiple',\n          },\n        },\n        ...TableColumns,\n        {\n          hideInSearch: true,\n          title: <FormattedMessage id=\"msTeams\" />,\n          dataIndex: 'teamsLink',\n          valueType: 'option',\n          render: (_n, record) => [\n            <CreateTeamsChatButton key=\"teamsChat\" student_id={record.user_id} />,\n          ],\n        },\n      ]}\n    />\n  );\n};\n","import type { RequestOptionsInit } from 'umi-request';\nimport type { AttendanceValue } from './enums';\nimport { request } from 'umi';\n\nexport async function groupAttendanceSchedule(group_id: number, options?: RequestOptionsInit) {\n  return request<API.AttendanceScheduleList>(`/api/admin/schedules/groups/${group_id}`, {\n    method: 'GET',\n    /* useCache: true */ useCache: false,\n    ...(options || {}),\n  });\n}\n\nexport async function changeStudentAttendance(\n  id: number,\n  user_id: number,\n  value: AttendanceValue,\n  options?: RequestOptionsInit,\n) {\n  return request<API.ChangeStudentAttendance>(`/api/admin/schedules/${id}/attendances`, {\n    data: {\n      attendances: [\n        {\n          user_id,\n          value,\n        },\n      ],\n    },\n    method: 'POST',\n    ...(options || {}),\n  });\n}\n","import { AttendanceValue } from '@/services/escola-lms/enums';\nimport type { AttendanceMap, Status } from './types';\n\nexport function parseToStatus(attendance: AttendanceValue | null): Status {\n  const attendanceMapped = attendance === null ? AttendanceValue.ABSENT : attendance;\n\n  const attendanceMap: AttendanceMap = {\n    [AttendanceValue.PRESENT]: { ch1: true, ch2: false },\n    [AttendanceValue.PRESENT_NOT_EXERCISING]: { ch1: true, ch2: true },\n    [AttendanceValue.ABSENT]: { ch1: false, ch2: false },\n    [AttendanceValue.EXCUSED_ABSENCE]: { ch1: false, ch2: true },\n  };\n\n  return attendanceMap[attendanceMapped] ?? { ch1: false, ch2: false };\n}\n\nexport function parseToAttendanceValue({ ch1, ch2 }: Status): AttendanceValue {\n  const statusStr = `${ch1}_${ch2}`;\n\n  const statusMap = {\n    true_false: AttendanceValue.PRESENT,\n    true_true: AttendanceValue.PRESENT_NOT_EXERCISING,\n    false_false: AttendanceValue.ABSENT,\n    false_true: AttendanceValue.EXCUSED_ABSENCE,\n  };\n\n  return statusMap[statusStr] ?? AttendanceValue.ABSENT;\n}\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { FormattedMessage } from 'umi';\nimport { Checkbox, Space, Tooltip } from 'antd';\nimport type { CheckboxChangeEvent } from 'antd/es/checkbox';\nimport { changeStudentAttendance } from '@/services/escola-lms/attendances';\n\nimport type { Status } from './types';\nimport { parseToAttendanceValue, parseToStatus } from './utils';\n\ninterface AttendanceCheckboxProps {\n  groupAttendanceScheduleId: number;\n  studentId: number;\n  attendance: API.AttendanceValue | null;\n  onSuccess?: () => void;\n}\n\nconst AttendanceCheckbox: React.FC<AttendanceCheckboxProps> = ({\n  groupAttendanceScheduleId,\n  studentId,\n  attendance,\n  onSuccess,\n}) => {\n  const [status, setStatus] = useState<Status>(parseToStatus(attendance));\n\n  const [loading, setLoading] = useState(false);\n  const firstMount = useRef(true);\n\n  const handleChangeAttendance = useCallback((stat: Status) => {\n    setLoading(true);\n    changeStudentAttendance(groupAttendanceScheduleId, studentId, parseToAttendanceValue(stat))\n      .then((res) => {\n        if (res.success) {\n          onSuccess?.();\n        }\n      })\n      .finally(() => setLoading(false));\n  }, []);\n\n  const onCh1Change = useCallback(\n    (e: CheckboxChangeEvent) =>\n      setStatus(e.target.checked ? { ch1: true, ch2: false } : { ch1: false, ch2: false }),\n    [],\n  );\n\n  const onCh2Change = useCallback(\n    (e: CheckboxChangeEvent) => setStatus((prev) => ({ ...prev, ch2: e.target.checked })),\n    [],\n  );\n\n  useEffect(() => {\n    if (firstMount.current) {\n      firstMount.current = false;\n      return;\n    }\n\n    handleChangeAttendance(status);\n  }, [status, handleChangeAttendance]);\n\n  return (\n    <Space>\n      <Tooltip title={<FormattedMessage id=\"present\" />}>\n        <Checkbox disabled={loading} checked={status.ch1} onChange={onCh1Change} />\n      </Tooltip>\n      <Tooltip title={<FormattedMessage id={status.ch1 ? 'not_exercising' : 'excused_absence'} />}>\n        <Checkbox disabled={loading} checked={status.ch2} onChange={onCh2Change} />\n      </Tooltip>\n    </Space>\n  );\n};\n\nexport default AttendanceCheckbox;\n","import React, { useMemo, useRef, useState } from 'react';\nimport { format } from 'date-fns';\nimport { FormattedMessage, useIntl } from 'umi';\nimport { message } from 'antd';\nimport ProTable from '@ant-design/pro-table';\nimport type { ProColumns, ActionType } from '@ant-design/pro-table';\n\nimport { DAY_FORMAT } from '@/consts/dates';\nimport { groupAttendanceSchedule as fetchGroupAttendanceSchedule } from '@/services/escola-lms/attendances';\nimport { studentUserGroup as fetchStudentUserGroup } from '@/services/escola-lms/student_user_groups';\nimport AttendanceCheckbox from '@/components/AttendanceCheckbox';\nimport { useTeacherSubject } from '../context';\n\ntype AttendanceTableItem = { id: number; full_name: string } & Record<string, API.AttendanceValue>;\n\ninterface AttendanceTableFilters {\n  full_name?: string;\n  group_id?: number;\n}\n\nexport const Attendances: React.FC = () => {\n  const { teacherSubjectData } = useTeacherSubject();\n  const [dynamicCols, setDynamicCols] = useState<ProColumns<AttendanceTableItem>[]>([]);\n  const [selectedGroupName, setSelectedGroupName] = useState('');\n  const intl = useIntl();\n\n  const actionRef = useRef<ActionType>();\n\n  const groupOptions = useMemo(\n    () => (teacherSubjectData?.groups ?? []).map(({ id, name }) => ({ value: id, label: name })),\n    [teacherSubjectData?.groups],\n  );\n\n  const columns: ProColumns<AttendanceTableItem>[] = useMemo(\n    () => [\n      {\n        title: <FormattedMessage id=\"group\" />,\n        dataIndex: 'group_id',\n        hideInTable: true,\n        valueType: 'select',\n        fieldProps: {\n          options: groupOptions,\n          defaultValue: groupOptions?.[0]?.value,\n          allowClear: false,\n        },\n      },\n      {\n        title: <FormattedMessage id=\"nameAndSurname\" defaultMessage=\"Name and surname\" />,\n        dataIndex: 'full_name',\n        fixed: 'left',\n      },\n      ...dynamicCols,\n    ],\n    [groupOptions, dynamicCols],\n  );\n\n  return (\n    <ProTable<AttendanceTableItem, AttendanceTableFilters>\n      className=\"table-standalone\"\n      headerTitle={`${intl.formatMessage({\n        id: 'attendances',\n        defaultMessage: 'Attendances',\n      })} (${selectedGroupName})`}\n      request={async ({ group_id = groupOptions?.[0]?.value, full_name = '' }) => {\n        const [studentUserGroupRes, groupAttendanceScheduleRes] = await Promise.all([\n          fetchStudentUserGroup(group_id),\n          fetchGroupAttendanceSchedule(group_id),\n        ]);\n        const selectedGroup = groupOptions.find(({ value }) => value === group_id);\n\n        if (!studentUserGroupRes.success || !groupAttendanceScheduleRes.success || !selectedGroup)\n          return { data: [], total: 0, success: false };\n\n        if (!groupAttendanceScheduleRes.data.length) {\n          message.error(\n            intl.formatMessage({\n              id: 'noAttendanceSchedule',\n              defaultMessage: 'No attendance schedule for this group...',\n            }),\n          );\n\n          return { data: [], total: 0, success: false };\n        }\n\n        setSelectedGroupName(selectedGroup.label);\n        setDynamicCols(\n          groupAttendanceScheduleRes.data.reduce<ProColumns<AttendanceTableItem>[]>(\n            (acc, curr) => [\n              ...acc,\n              {\n                title: String(format(new Date(curr.date_from), DAY_FORMAT)),\n                dataIndex: String(curr.date_from),\n                hideInSearch: true,\n                width: 100,\n                align: 'center',\n                render: (_, record) => (\n                  <AttendanceCheckbox\n                    groupAttendanceScheduleId={curr.id}\n                    attendance={record[`${curr?.date_from}`]}\n                    studentId={record.id}\n                  />\n                ),\n              },\n            ],\n            [],\n          ),\n        );\n\n        const data = studentUserGroupRes.data.users\n          .reduce<AttendanceTableItem[]>(\n            (acc, { id, academic_teacher_id, first_name, last_name }) => {\n              const studentFullName = `${last_name} ${first_name}`;\n              // filter out tutor & first name and second name filter\n              if (\n                academic_teacher_id !== null ||\n                !studentFullName.toLowerCase().includes(full_name.toLowerCase())\n              )\n                return acc;\n\n              const studentAttendances = groupAttendanceScheduleRes.data.reduce<\n                Record<string, API.AttendanceValue>\n              >((innerAcc, groupAttendanceSchedule) => {\n                const studentAttendance = groupAttendanceSchedule.attendances.find(\n                  (attendance) => attendance.user_id === id,\n                );\n                if (!studentAttendance) return innerAcc;\n\n                return {\n                  ...innerAcc,\n                  [`${groupAttendanceSchedule.date_from}`]: studentAttendance.value,\n                };\n              }, {});\n\n              return [...acc, { id, full_name: studentFullName, ...studentAttendances }];\n            },\n            [],\n          )\n          .sort((a, b) => a.full_name.localeCompare(b.full_name));\n\n        return { data, total: data.length, success: true };\n      }}\n      columns={columns}\n      search={{ layout: 'vertical' }}\n      pagination={{ onChange: () => actionRef.current?.reload() }}\n      scroll={{ x: 1500 }}\n      actionRef={actionRef}\n      rowKey=\"id\"\n    />\n  );\n};\n","import { request } from 'umi';\nimport type { RequestOptionsInit } from 'umi-request';\n\n/**  GET /api/admin/semester-subjects/:semester_subject_id/tutors/:tutor_id/grades */\nexport async function getSubjectTutorGrades(\n  semester_subject_id: number,\n  tutor_id: number,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.SubjectTutorGrades>>(\n    `/api/admin/semester-subjects/${semester_subject_id}/tutors/${tutor_id}/grades`,\n    {\n      method: 'GET',\n      /* useCache: true */ useCache: false,\n      ...(options || {}),\n    },\n  );\n}\n\n/**  POST /api/admin/semester-subjects/:semester_subject_id/tutors/:tutor_id/grades */\nexport async function createSubjectTutorGrades(\n  semester_subject_id: number,\n  tutor_id: number,\n  body: API.CreateSubjectTutorGradesRequest,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.GradeScale[]>>(\n    `/api/admin/semester-subjects/${semester_subject_id}/tutors/${tutor_id}/grades`,\n    {\n      method: 'POST',\n      data: body,\n      ...(options || {}),\n    },\n  );\n}\n\n/**  GET /api/admin/lesson-group-users */\nexport async function getGroupFinalGrades(\n  group_id: number | number[],\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.FinalGradeItem[]>>(`/api/admin/lesson-group-users`, {\n    method: 'GET',\n    params: { 'groups[]': group_id },\n    /* useCache: true */ useCache: false,\n    ...(options || {}),\n  });\n}\n\n/**  GET /api/admin/lesson-group-users/groups/:group_id/users/:user_id */\nexport async function getUserFinalGrades(\n  group_id: number,\n  user_id: number,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.FinalGradeItem>>(\n    `/api/admin/lesson-group-users/groups/${group_id}/users/${user_id}`,\n    {\n      method: 'GET',\n      /* useCache: true */ useCache: false,\n      ...(options || {}),\n    },\n  );\n}\n\n/** GET /api/admin/grade-terms */\nexport async function getGradeTerms(options?: RequestOptionsInit) {\n  return request<API.DefaultResponse<API.GradeTerm[]>>(`/api/admin/grade-terms`, {\n    method: 'GET',\n    /* useCache: true */ useCache: false,\n    ...(options || {}),\n  });\n}\n\n/** GET /api/admin/grade-scales/:s_subject_scale_form_id */\nexport async function getSubjectGradeScales(\n  s_subject_scale_form_id: number,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.SubjectGradeScale[]>>(\n    `/api/admin/grade-scales/${s_subject_scale_form_id}`,\n    {\n      method: 'GET',\n      /* useCache: true */ useCache: false,\n      ...(options || {}),\n    },\n  );\n}\n\n/** POST /api/admin/final-grades */\nexport async function createFinalGrade(\n  body: API.CreateFinalGradeRequest,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.FinalGradeItem>>(`/api/admin/final-grades`, {\n    method: 'POST',\n    data: body,\n    ...(options || {}),\n  });\n}\n\n/** PATCH /api/admin/final-grades/:id */\nexport async function updateFinalGrade(\n  final_grade_id: number,\n  body: API.UpdateFinalGradeRequest,\n  options?: RequestOptionsInit,\n) {\n  return request<API.DefaultResponse<API.FinalGradeItem>>(\n    `/api/admin/final-grades/${final_grade_id}`,\n    {\n      method: 'PATCH',\n      data: body,\n      ...(options || {}),\n    },\n  );\n}\n","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { FormattedMessage, useModel } from 'umi';\nimport { Button, Divider, Select, Spin, Typography } from 'antd';\nimport ProForm from '@ant-design/pro-form';\nimport { EditableProTable } from '@ant-design/pro-table';\nimport type { ProColumns, ActionType } from '@ant-design/pro-table';\nimport { CheckOutlined, EditOutlined } from '@ant-design/icons';\n\nimport { createSubjectTutorGrades, getSubjectTutorGrades } from '@/services/escola-lms/grades';\nimport { useTeacherSubject } from '../context';\n\ntype TableGradeScale = API.GradeScale & { id: string };\n\ninterface FormData {\n  table: TableGradeScale[];\n}\n\nconst staticColumns: ProColumns<TableGradeScale>[] = [\n  {\n    title: <FormattedMessage id=\"grade\" />,\n    dataIndex: 'grade',\n    editable: false,\n  },\n  {\n    title: <FormattedMessage id=\"degree\" />,\n    dataIndex: 'name',\n    editable: false,\n  },\n  {\n    title: <FormattedMessage id=\"min_percent\" />,\n    dataIndex: 'grade_value',\n    valueType: 'percent',\n    formItemProps: {\n      rules: [\n        {\n          required: true,\n          message: <FormattedMessage id=\"field_required\" />,\n        },\n        {\n          type: 'number',\n          min: 0,\n          max: 100,\n          message: <FormattedMessage id=\"number_between\" values={{ min: 0, max: 100 }} />,\n        },\n      ],\n    },\n  },\n];\n\ninterface GradeScaleTableProps {\n  subjectTutorGradeScale: API.SubjectTutorGradeScale;\n  onFormSubmit: (formData: FormData) => Promise<void>;\n}\n\nconst GradeScaleTable: React.FC<GradeScaleTableProps> = ({\n  subjectTutorGradeScale,\n  onFormSubmit,\n}) => {\n  const [editableKeys, setEditableKeys] = useState<React.Key[]>([]);\n  const actionRef = useRef<ActionType>();\n\n  const [form] = ProForm.useForm<FormData>();\n\n  useEffect(() => {\n    const gradeScaleWithIds = (subjectTutorGradeScale.scale ?? []).map((values, i) => ({\n      ...values,\n      id: String((i + 1) * 100),\n    }));\n\n    form.setFieldValue('table', gradeScaleWithIds);\n  }, []);\n\n  return (\n    <ProForm<FormData>\n      form={form}\n      onFinish={onFormSubmit}\n      submitter={{ render: (_p, [, submit]) => [submit] }}\n    >\n      <EditableProTable<TableGradeScale>\n        name=\"table\"\n        rowKey=\"id\"\n        actionRef={actionRef}\n        formItemProps={{ label: <FormattedMessage id=\"grades-scale\" /> }}\n        cardProps={{ bodyStyle: { padding: 0 } }}\n        recordCreatorProps={false}\n        columns={[\n          ...staticColumns,\n          {\n            title: <FormattedMessage id=\"options\" />,\n            valueType: 'option',\n            render: (_n, row) => (\n              <Button\n                type=\"primary\"\n                onClick={() => actionRef.current?.startEditable(row.id)}\n                icon={<EditOutlined />}\n              />\n            ),\n          },\n        ]}\n        editable={{\n          form,\n          type: 'multiple',\n          editableKeys,\n          saveText: <Button type=\"primary\" icon={<CheckOutlined />} />,\n          onChange: setEditableKeys,\n          actionRender: (_r, _c, dom) => [dom.save],\n        }}\n      />\n    </ProForm>\n  );\n};\n\nexport const GradesScale: React.FC = () => {\n  const { initialState } = useModel('@@initialState');\n  const { semester_subject_id, tutors } = useTeacherSubject();\n\n  const [subjectTutorGrades, setSubjectTutorGrades] = useState<API.SubjectTutorGrades>();\n  const [loading, setLoading] = useState(false);\n  const [selectedTutor, setSelectedTutor] = useState<number | null>(null);\n\n  const tutorViewing = useMemo(\n    () => !!tutors.data.find(({ id }) => id === initialState?.currentUser?.id),\n    [tutors.data, initialState?.currentUser?.id],\n  );\n  const tutorsSelectOptions = useMemo(\n    () =>\n      tutors.data.map(({ id, first_name, last_name }) => ({\n        label: `${first_name} ${last_name}`,\n        value: id,\n      })),\n    [tutors.data],\n  );\n\n  const refreshSubjectTutorGrades = useCallback(() => {\n    if (semester_subject_id === null || selectedTutor === null) return;\n\n    setLoading(true);\n    setSubjectTutorGrades(undefined);\n    getSubjectTutorGrades(semester_subject_id, selectedTutor)\n      .then((response) => {\n        if (response.success) {\n          setSubjectTutorGrades(response.data);\n        }\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, [semester_subject_id, selectedTutor]);\n\n  const onFormSubmitFactory = useCallback(\n    (subjectTutorGradeScales: API.SubjectTutorGradeScale[], s_subject_scale_form_id: number) =>\n      async (formData: FormData) => {\n        if (semester_subject_id === null || selectedTutor === null) return;\n\n        const grade_scale = subjectTutorGradeScales.reduce<API.SubjectTutorGradeScale[]>(\n          (acc, tutorGradeScale) =>\n            tutorGradeScale.s_subject_scale_form_id === s_subject_scale_form_id\n              ? [\n                  ...acc,\n                  {\n                    s_subject_scale_form_id,\n                    scale: formData.table.map(({ name, grade, grade_value }) => ({\n                      name,\n                      grade,\n                      grade_value,\n                    })),\n                  },\n                ]\n              : [...acc, tutorGradeScale],\n          [],\n        );\n\n        const res = await createSubjectTutorGrades(semester_subject_id, selectedTutor, {\n          grade_scale,\n        });\n\n        if (res.success) {\n          refreshSubjectTutorGrades();\n        }\n      },\n    [selectedTutor, semester_subject_id],\n  );\n\n  useEffect(() => {\n    if (!tutorViewing || !initialState?.currentUser?.id) {\n      if (tutors.data?.[0]) {\n        setSelectedTutor(tutors.data?.[0].id);\n      }\n      return;\n    }\n\n    setSelectedTutor(initialState?.currentUser?.id);\n  }, [initialState?.currentUser?.id, tutorViewing]);\n\n  useEffect(() => {\n    refreshSubjectTutorGrades();\n  }, [refreshSubjectTutorGrades]);\n\n  if (tutors.loading) {\n    return <Spin />;\n  }\n\n  return (\n    <>\n      <ProForm.Item label={<FormattedMessage id=\"menu.Teacher\" />}>\n        <Select\n          disabled={tutorViewing}\n          placeholder={<FormattedMessage id=\"select\" />}\n          options={tutorsSelectOptions}\n          value={selectedTutor}\n          onChange={(v) => setSelectedTutor(v)}\n        />\n      </ProForm.Item>\n      <Divider />\n      {loading && !subjectTutorGrades && <Spin />}\n      {subjectTutorGrades?.grade_scale ? (\n        subjectTutorGrades.grade_scale.map((subjectTutorGradeScale, i) => (\n          <React.Fragment key={subjectTutorGradeScale.s_subject_scale_form_id}>\n            {i > 0 && <Divider />}\n            <GradeScaleTable\n              subjectTutorGradeScale={subjectTutorGradeScale}\n              onFormSubmit={onFormSubmitFactory(\n                subjectTutorGrades.grade_scale ?? [],\n                subjectTutorGradeScale.s_subject_scale_form_id,\n              )}\n            />\n          </React.Fragment>\n        ))\n      ) : (\n        <Typography.Paragraph style={{ textAlign: 'center' }}>\n          <FormattedMessage id=\"gradesScalesMissing\" />\n        </Typography.Paragraph>\n      )}\n    </>\n  );\n};\n","import type { RequestOptionsInit } from 'umi-request';\nimport { request } from 'umi';\n\nexport async function allSchedules(\n  params: API.PageParams &\n    API.PaginationParams & {\n      // query\n      semester_subject_id?: number | null;\n      date_form?: Date;\n      date_to?: Date;\n      group_id?: number;\n      term_status_id?: number;\n    },\n  options?: RequestOptionsInit,\n) {\n  return request<API.ScheduleList>(`/api/admin/schedules`, {\n    params,\n    method: 'GET',\n    /* useCache: true */ useCache: false,\n    ...(options || {}),\n  });\n}\n","import React, { useCallback, useEffect, useState, useMemo } from 'react';\nimport moment from 'moment';\nimport { FormattedMessage } from 'umi';\nimport { Badge, Button, Modal, Typography, Calendar } from 'antd';\nimport type { CalendarMode } from 'antd/lib/calendar/generateCalendar';\n\nimport { DAYTIME_FORMAT } from '@/consts/dates';\nimport { allSchedules as fetchAllSchedules } from '@/services/escola-lms/schedules';\nimport { useTeacherSubject } from '../context';\nimport './index.css';\n\ninterface EventCalendarProps {\n  id: number;\n  title: string;\n  start: Date | string;\n  end: Date | string;\n  tutor_name: string;\n  tutor_email: string;\n  group: string;\n  semester: string;\n  subject: string;\n  ms_teams_join_url: string | null;\n}\n\nexport const Schedule: React.FC = () => {\n  const [selectedEvent, setSelectedEvent] = useState<EventCalendarProps | null>(null);\n  const [eventData, setEventData] = useState<API.ScheduleData[]>([]);\n  const { semester_subject_id } = useTeacherSubject();\n  const now = moment();\n\n  const events: EventCalendarProps[] = useMemo(\n    () =>\n      eventData.map((event) => ({\n        id: event.id,\n        title: `${event.group.name} (${event.term_status.name})`,\n        start: moment(event.date_from).toDate(),\n        end: moment(event.date_to).toDate(),\n        tutor_name: `${event.tutor.first_name} ${event.tutor.last_name}`,\n        tutor_email: event.tutor.email,\n        semester: event.semester.name,\n        group: event.group.name,\n        subject: event.subject.name,\n        ms_teams_join_url: event.ms_teams_join_url,\n      })),\n    [eventData],\n  );\n\n  const fetchEvents = useCallback(\n    (start: moment.Moment, end: moment.Moment) => {\n      fetchAllSchedules({\n        semester_subject_id: semester_subject_id,\n        date_form: start.toDate(),\n        date_to: end.toDate(),\n      }).then((response) => {\n        if (response.success) {\n          setEventData(response.data);\n        }\n      });\n    },\n    [semester_subject_id],\n  );\n\n  const handleEventClick = useCallback((event: EventCalendarProps) => {\n    setSelectedEvent(event);\n  }, []);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedEvent(null);\n  }, []);\n\n  const checkDate = useCallback((date: moment.Moment) => {\n    if (date.isSame(now, 'day')) {\n      return 'warning';\n    }\n    return date.isAfter(now, 'day') ? 'success' : 'error';\n  }, []);\n\n  const dateCellRender = useCallback(\n    (date: moment.Moment) => {\n      const filteredEvents = events.filter((event) => moment(event.start).isSame(date, 'day'));\n\n      return (\n        <ul className=\"events\">\n          {filteredEvents.map((event) => (\n            <li key={event.id} onClick={() => handleEventClick(event)}>\n              <Badge status={checkDate(moment(event.start))} text={event.title} />\n            </li>\n          ))}\n        </ul>\n      );\n    },\n    [eventData],\n  );\n\n  const handlePanelChange = useCallback((date: moment.Moment, mode: CalendarMode) => {\n    const start = moment(date).startOf(mode).subtract(1, 'month');\n    const end = moment(date).endOf(mode).add(1, 'month');\n    fetchEvents(start, end);\n  }, []);\n\n  useEffect(() => {\n    const initialStartDate = moment().startOf('month');\n    const initialEndDate = moment().endOf('month');\n    fetchEvents(initialStartDate, initialEndDate);\n  }, []);\n  return (\n    <>\n      <Typography.Title level={4}>\n        <FormattedMessage id=\"schedule\" defaultMessage=\"Schedule\" />\n      </Typography.Title>\n\n      <Calendar dateCellRender={dateCellRender} onPanelChange={handlePanelChange} />\n\n      <Modal\n        open={selectedEvent !== null}\n        title={`${selectedEvent?.subject}: ${selectedEvent?.title}`}\n        onCancel={handleModalClose}\n        footer={null}\n      >\n        <Typography.Paragraph>\n          <FormattedMessage id=\"tutorName\" defaultMessage=\"Tutor\" />: {selectedEvent?.tutor_name}\n        </Typography.Paragraph>\n        <Typography.Paragraph>\n          <FormattedMessage id=\"email\" defaultMessage=\"Email\" />: {selectedEvent?.tutor_email}\n        </Typography.Paragraph>\n        <Typography.Paragraph>\n          <FormattedMessage id=\"group\" defaultMessage=\"Group\" />: {selectedEvent?.group}\n        </Typography.Paragraph>\n        <Typography.Paragraph>\n          <FormattedMessage id=\"semester\" defaultMessage=\"Semester\" />: {selectedEvent?.semester}\n        </Typography.Paragraph>\n        <Typography.Paragraph>\n          <FormattedMessage id=\"started_at\" defaultMessage=\"Start date\" />:\n          {selectedEvent && moment(selectedEvent.start).format(DAYTIME_FORMAT)}\n        </Typography.Paragraph>\n        <Typography.Paragraph>\n          <FormattedMessage id=\"end_at\" defaultMessage=\"End date\" />:\n          {selectedEvent && moment(selectedEvent.end).format(DAYTIME_FORMAT)}\n        </Typography.Paragraph>\n        {selectedEvent?.ms_teams_join_url && (\n          <Typography.Paragraph>\n            <a\n              href={selectedEvent.ms_teams_join_url}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              key=\"teamsLink\"\n            >\n              <Button type=\"primary\">\n                <FormattedMessage id=\"msTeams\" />\n              </Button>\n            </a>\n          </Typography.Paragraph>\n        )}\n      </Modal>\n    </>\n  );\n};\n","import type { StudentExam } from './types';\n\nexport const getStudentExamsFromExams = (exams: API.Exam[], student_id: number): StudentExam[] =>\n  exams.reduce<StudentExam[]>((acc, { results, ...exam }) => {\n    const result = results.find((examResult) => examResult.user_id === student_id);\n    if (!result) return acc;\n\n    return [...acc, { ...exam, result }];\n  }, []);\n\nexport const getProposedGrade = (\n  studentExams: StudentExam[],\n  tutorGradeScales: API.GradeScale[],\n): string => {\n  const [sum, weightsSum] = studentExams.reduce<[number, number]>(\n    (acc, { result, weight }) => [acc[0] + result.result * weight, acc[1] + weight],\n    [0, 0],\n  );\n  const weightedAverage = Number.isNaN(sum / weightsSum) ? 0 : sum / weightsSum;\n\n  const sortedGradeScales = tutorGradeScales\n    .sort((a, b) => a.grade_value - b.grade_value)\n    .reduce<(API.GradeScale & { isWeightedAverageGreater: boolean })[]>(\n      (acc, curr) => [\n        ...acc,\n        {\n          ...curr,\n          isWeightedAverageGreater: weightedAverage >= curr.grade_value,\n        },\n      ],\n      [],\n    );\n\n  if (sortedGradeScales.every(({ isWeightedAverageGreater }) => isWeightedAverageGreater)) {\n    return sortedGradeScales.at(-1)?.name ?? '';\n  }\n\n  const firstFalseIndex = sortedGradeScales.findIndex(\n    ({ isWeightedAverageGreater }) => !isWeightedAverageGreater,\n  );\n  if (firstFalseIndex < 0) return '';\n\n  return sortedGradeScales[firstFalseIndex - 1]?.name;\n};\n\nexport const getScalesBySubjectScaleFormId = (\n  s_subject_scale_form_id: number,\n  tutorGrades: API.SubjectTutorGradeScale[],\n): API.GradeScale[] | undefined =>\n  tutorGrades.find(\n    (subjectTutorGradeScale) =>\n      subjectTutorGradeScale.s_subject_scale_form_id === s_subject_scale_form_id,\n  )?.scale;\n","import { useCallback, useEffect, useState } from 'react';\nimport { groupAttendanceSchedule } from '@/services/escola-lms/attendances';\nimport {\n  getGradeTerms,\n  getUserFinalGrades,\n  getSubjectGradeScales,\n  getSubjectTutorGrades,\n} from '@/services/escola-lms/grades';\nimport { getExams } from '@/services/escola-lms/exams';\nimport { course, getCourseStats, program } from '@/services/escola-lms/course';\nimport { getFlatTopics } from '@/components/ProgramForm/Context';\nimport { getScalesBySubjectScaleFormId, getStudentExamsFromExams } from './utils';\nimport type { FetchedData, StudentExam } from './types';\n\nexport function useFinalGrades(group_id: number, user_id: number) {\n  const [finalGrades, setFinalGrades] = useState<FetchedData<API.FinalGradeItem>>({\n    loading: false,\n  });\n\n  useEffect(() => {\n    setFinalGrades((prev) => ({ ...prev, loading: true }));\n    getUserFinalGrades(group_id, user_id)\n      .then((response) => {\n        if (response.success) {\n          setFinalGrades((prev) => ({ ...prev, data: response.data }));\n        }\n      })\n      .finally(() => {\n        setFinalGrades((prev) => ({ ...prev, loading: false }));\n      });\n  }, [user_id, group_id]);\n\n  return { finalGrades };\n}\n\nexport function useGradeTerms() {\n  const [gradeTerms, setGradeTerms] = useState<FetchedData<API.GradeTerm[]>>({ loading: false });\n\n  useEffect(() => {\n    setGradeTerms((prev) => ({ ...prev, loading: true }));\n    getGradeTerms()\n      .then((response) => {\n        if (response.success) {\n          setGradeTerms((prev) => ({ ...prev, data: response.data }));\n        }\n      })\n      .finally(() => {\n        setGradeTerms((prev) => ({ ...prev, loading: false }));\n      });\n  }, []);\n\n  return { gradeTerms };\n}\n\nexport function useSubjectGradeScales(s_subject_scale_form_id: number | undefined) {\n  const [subjectGradeScales, setSubjectGradeScales] = useState<\n    FetchedData<API.SubjectGradeScale[]>\n  >({\n    loading: false,\n  });\n\n  useEffect(() => {\n    if (s_subject_scale_form_id === undefined) return;\n\n    setSubjectGradeScales((prev) => ({ ...prev, loading: true }));\n    getSubjectGradeScales(s_subject_scale_form_id)\n      .then((response) => {\n        if (response.success) {\n          setSubjectGradeScales((prev) => ({ ...prev, data: response.data }));\n        }\n      })\n      .finally(() => {\n        setSubjectGradeScales((prev) => ({ ...prev, loading: false }));\n      });\n  }, [s_subject_scale_form_id]);\n\n  return { subjectGradeScales };\n}\n\nexport function useTutorGradeScales(\n  semester_subject_id: number | undefined | null,\n  tutor_id: number | undefined | null,\n  s_subject_scale_form_id: number | undefined | null,\n) {\n  const [tutorGradeScales, setTutorGradeScales] = useState<FetchedData<API.GradeScale[]>>({\n    loading: false,\n  });\n\n  useEffect(() => {\n    if (\n      typeof semester_subject_id !== 'number' ||\n      typeof tutor_id !== 'number' ||\n      typeof s_subject_scale_form_id !== 'number'\n    )\n      return;\n\n    setTutorGradeScales((prev) => ({ ...prev, loading: true }));\n    getSubjectTutorGrades(semester_subject_id, tutor_id)\n      .then((response) => {\n        if (response.success) {\n          setTutorGradeScales((prev) => ({\n            ...prev,\n            data: getScalesBySubjectScaleFormId(\n              s_subject_scale_form_id,\n              response.data.grade_scale ?? [],\n            )?.map((v, i) => ({ ...v, id: i })),\n          }));\n        }\n      })\n      .finally(() => {\n        setTutorGradeScales((prev) => ({ ...prev, loading: false }));\n      });\n  }, [semester_subject_id, tutor_id]);\n\n  return { tutorGradeScales };\n}\n\nexport function useUserAttendanceSchedules(group_id: number, user_id: number) {\n  const [userAttendanceSchedules, setUserAttendanceSchedules] = useState<\n    FetchedData<API.UserAttendanceSchedule[]>\n  >({ loading: false });\n\n  const fetchUserAttendanceSchedules = useCallback(() => {\n    setUserAttendanceSchedules((prev) => ({ ...prev, loading: true }));\n    groupAttendanceSchedule(group_id)\n      .then((response) => {\n        if (response.success) {\n          const filteredSchedules = response.data.reduce<API.UserAttendanceSchedule[]>(\n            (acc, { attendances, ...rest }) => {\n              const attendance = attendances.find(\n                (attendanceItem) => attendanceItem.user_id === user_id,\n              );\n\n              if (!attendance) return acc;\n\n              return [...acc, { ...rest, attendance }];\n            },\n            [],\n          );\n\n          setUserAttendanceSchedules((prev) => ({ ...prev, data: filteredSchedules }));\n        }\n      })\n      .finally(() => {\n        setUserAttendanceSchedules((prev) => ({ ...prev, loading: false }));\n      });\n  }, [group_id, user_id]);\n\n  useEffect(() => {\n    fetchUserAttendanceSchedules();\n  }, [fetchUserAttendanceSchedules]);\n\n  return { userAttendanceSchedules, fetchUserAttendanceSchedules };\n}\n\nexport function useStudentExams(student_id: number, semester_subject_id: number | null) {\n  const [studentExams, setStudentExams] = useState<FetchedData<StudentExam[]>>({ loading: false });\n\n  useEffect(() => {\n    if (!semester_subject_id) return;\n    setStudentExams((prev) => ({ ...prev, loading: true }));\n    getExams({ student_id, semester_subject_id })\n      .then((response) => {\n        if (response.success) {\n          const data = getStudentExamsFromExams(response.data, student_id);\n\n          setStudentExams((prev) => ({ ...prev, data }));\n        }\n      })\n      .finally(() => {\n        setStudentExams((prev) => ({ ...prev, loading: false }));\n      });\n  }, [student_id, semester_subject_id]);\n\n  return { studentExams };\n}\n\nexport function useUserCoursesStats(group_id: number, user_id: number) {\n  const [userCourses, setUserCourses] = useState<FetchedData<API.Course[]>>({\n    loading: false,\n  });\n  const [userCoursesStats, setUserCoursesStats] = useState<\n    FetchedData<\n      Record<\n        string,\n        { finishedTopics: API.FinishedTopicsUserStats[]; attendanceList: API.CourseAttempts[] }\n      >\n    >\n  >({ loading: false });\n  const [userCoursesTopics, setUserCoursesTopics] = useState<\n    FetchedData<Record<string, API.Topic[]>>\n  >({ loading: false });\n\n  useEffect(() => {\n    setUserCourses((prev) => ({ ...prev, loading: true }));\n    course({ group_id })\n      .then((response) => {\n        if (response.success) {\n          setUserCourses((prev) => ({ ...prev, data: response.data }));\n        }\n      })\n      .finally(() => {\n        setUserCourses((prev) => ({ ...prev, loading: false }));\n      });\n  }, [group_id]);\n\n  useEffect(() => {\n    if (!userCourses.data) return;\n\n    setUserCoursesTopics((prev) => ({ ...prev, loading: true }));\n    Promise.all(userCourses.data.map(({ id }) => program(Number(id))))\n      .then((responses) => {\n        responses.forEach((response) => {\n          if (response.success) {\n            setUserCoursesTopics((prev) => ({\n              ...prev,\n              data: {\n                ...prev.data,\n                [Number(response.data.id)]: getFlatTopics(response.data.lessons),\n              },\n            }));\n          }\n        });\n      })\n      .finally(() => {\n        setUserCoursesTopics((prev) => ({ ...prev, loading: false }));\n      });\n\n    setUserCoursesStats((prev) => ({ ...prev, loading: true }));\n    Promise.all(\n      userCourses.data.map(({ id }) =>\n        getCourseStats(Number(id), [\n          'EscolaLms\\\\Reports\\\\Stats\\\\Course\\\\FinishedTopics',\n          'EscolaLms\\\\Reports\\\\Stats\\\\Course\\\\AttendanceList',\n        ]).then((response) => {\n          if (response.success) {\n            const finishedTopics = (\n              response.data['EscolaLms\\\\Reports\\\\Stats\\\\Course\\\\FinishedTopics'] ?? []\n            ).filter((userStat) => userStat.id === user_id);\n\n            const attendanceList =\n              response.data['EscolaLms\\\\Reports\\\\Stats\\\\Course\\\\AttendanceList'] ?? [];\n\n            setUserCoursesStats((prev) => ({\n              ...prev,\n              data: {\n                ...prev.data,\n                [Number(id)]: { finishedTopics, attendanceList },\n              },\n            }));\n          }\n        }),\n      ),\n    ).finally(() => setUserCoursesStats((prev) => ({ ...prev, loading: false })));\n  }, [userCourses.data, user_id]);\n\n  return { userCourses, userCoursesStats, userCoursesTopics };\n}\n","import React, { useCallback, useMemo } from 'react';\nimport { FormattedMessage, history } from 'umi';\nimport { format } from 'date-fns';\nimport { Col, Divider, message, Row, Spin, Typography } from 'antd';\nimport ProForm, { ProFormSelect } from '@ant-design/pro-form';\nimport ProTable from '@ant-design/pro-table';\nimport type { ProColumns } from '@ant-design/pro-table';\n\nimport { DAY_FORMAT } from '@/consts/dates';\nimport { createFinalGrade, updateFinalGrade } from '@/services/escola-lms/grades';\nimport AttendanceCheckbox from '@/components/AttendanceCheckbox';\nimport { UserCourseAttempts, UserProgress } from '@/components/CourseStatistics/userProgress';\nimport { useTeacherSubject } from '../../context';\nimport {\n  useFinalGrades,\n  useSubjectGradeScales,\n  useGradeTerms,\n  useUserAttendanceSchedules,\n  useStudentExams,\n  useTutorGradeScales,\n  useUserCoursesStats,\n} from './hooks';\nimport type { StudentExam } from './types';\nimport { getProposedGrade } from './utils';\n\ninterface Props {\n  user_id: number;\n  group_id: number;\n}\n\ninterface FormData {\n  grade_term_id: number;\n  grade_scale_id: number;\n}\n\ntype FinalGradeTableItem = API.GradeTerm & { grade?: API.FinalGradeItemGrade };\n\nconst tutorGradeScalesColumns: ProColumns<API.GradeScale>[] = [\n  {\n    title: <FormattedMessage id=\"grade\" />,\n    dataIndex: 'grade',\n  },\n  {\n    title: <FormattedMessage id=\"degree\" />,\n    dataIndex: 'name',\n  },\n  {\n    title: <FormattedMessage id=\"min_percent\" />,\n    dataIndex: 'grade_value',\n    valueType: 'percent',\n  },\n];\n\nconst userAttendanceColumns: ProColumns<API.UserAttendanceSchedule>[] = [\n  {\n    title: <FormattedMessage id=\"date\" />,\n    dataIndex: 'date_from',\n    render: (_n, row) => format(new Date(row.date_from), DAY_FORMAT),\n  },\n];\n\nconst studentExamsColumns: ProColumns<StudentExam>[] = [\n  {\n    title: <FormattedMessage id=\"name\" />,\n    dataIndex: 'title',\n  },\n  {\n    title: <FormattedMessage id=\"TeacherSubjects.Exams.grade_weight\" defaultMessage=\"Weight\" />,\n    dataIndex: 'weight',\n    valueType: 'percent',\n  },\n  {\n    title: <FormattedMessage id=\"created_at\" defaultMessage=\"Created at\" />,\n    dataIndex: 'created_at',\n    render: (_n, row) => format(new Date(row.created_at), DAY_FORMAT),\n  },\n  {\n    title: <FormattedMessage id=\"grade\" />,\n    dataIndex: 'result',\n    render: (_n, row) => `${row.result.result}%`,\n  },\n];\n\nconst finalGradesColumns: ProColumns<FinalGradeTableItem>[] = [\n  {\n    title: <FormattedMessage id=\"name\" />,\n    dataIndex: 'name',\n  },\n  {\n    title: <FormattedMessage id=\"issued_at\" />,\n    dataIndex: 'grade',\n    render: (_n, row) =>\n      row.grade?.grade_date ? format(new Date(row.grade?.grade_date), DAY_FORMAT) : '-',\n  },\n  {\n    title: <FormattedMessage id=\"grade\" />,\n    dataIndex: 'grade',\n    render: (_n, row) => row.grade?.grade_name ?? '-',\n  },\n];\n\nconst TABLE_PAGE_SIZE = 6;\n\nexport const FinalGradesDetails: React.FC<Props> = ({ user_id, group_id }) => {\n  const { semester_subject_id } = useTeacherSubject();\n  const { studentExams } = useStudentExams(user_id, semester_subject_id);\n  const { finalGrades } = useFinalGrades(group_id, user_id);\n  const { gradeTerms } = useGradeTerms();\n  const { subjectGradeScales } = useSubjectGradeScales(finalGrades.data?.s_subject_scale_form_id);\n  const { tutorGradeScales } = useTutorGradeScales(\n    semester_subject_id,\n    finalGrades.data?.tutor_id,\n    finalGrades.data?.s_subject_scale_form_id,\n  );\n  const { userAttendanceSchedules, fetchUserAttendanceSchedules } = useUserAttendanceSchedules(\n    group_id,\n    user_id,\n  );\n  const { userCourses, userCoursesStats, userCoursesTopics } = useUserCoursesStats(\n    group_id,\n    user_id,\n  );\n\n  const [form] = ProForm.useForm<FormData>();\n\n  const gradeTermsSelectOptions = useMemo(\n    () => (gradeTerms.data ?? []).map(({ id, name }) => ({ label: name, value: id })),\n    [gradeTerms.data],\n  );\n\n  const gradesSelectOptions = useMemo(\n    () =>\n      (subjectGradeScales.data ?? []).map(({ name, id }) => ({\n        label: name,\n        value: id,\n      })),\n    [subjectGradeScales.data],\n  );\n\n  const proposedGrade = useMemo(\n    () => getProposedGrade(studentExams.data ?? [], tutorGradeScales.data ?? []),\n    [studentExams.data, tutorGradeScales.data],\n  );\n\n  const onFinalGradeSubmit = useCallback(\n    async ({ grade_scale_id, grade_term_id }: FormData) => {\n      if (finalGrades.data?.id === undefined) return;\n\n      const existingFinalGrade = finalGrades.data?.grades.find(\n        ({ grade_term }) => grade_term.id === grade_term_id,\n      );\n\n      if (existingFinalGrade) {\n        const response = await updateFinalGrade(existingFinalGrade.id, { grade_scale_id });\n\n        message[response.success ? 'success' : 'error'](response.message);\n        if (response.success) {\n          history.push(`/teacher/subjects/${semester_subject_id}/final-grades`);\n        }\n        return;\n      }\n\n      const response = await createFinalGrade({\n        grade_scale_id,\n        grade_term_id,\n        lesson_group_user_id: finalGrades.data.id,\n      });\n\n      message[response.success ? 'success' : 'error'](response.message);\n\n      if (response.success) {\n        history.push(`/teacher/subjects/${semester_subject_id}/final-grades`);\n      }\n    },\n    [finalGrades.data, semester_subject_id],\n  );\n\n  const finalGradesTableData: FinalGradeTableItem[] = useMemo(\n    () =>\n      (gradeTerms.data ?? []).map((term) => ({\n        ...term,\n        grade: finalGrades.data?.grades.find(({ grade_term }) => grade_term.id === term.id),\n      })),\n    [finalGrades.data, gradeTerms.data],\n  );\n\n  const areStatisticsLoading =\n    (userCourses.loading && !userCourses.data) ||\n    (userCoursesStats.loading && !userCoursesStats.data) ||\n    (userCoursesTopics.loading && !userCoursesTopics.data);\n\n  const isStatisticDataPresent = Boolean(\n    userCourses.data && userCoursesStats.data && userCoursesTopics.data,\n  );\n\n  if (finalGrades.loading) {\n    return <Spin />;\n  }\n\n  return (\n    <>\n      {finalGrades.data && (\n        <>\n          <Typography.Text style={{ fontSize: '16px', fontWeight: 500 }}>\n            <FormattedMessage\n              id=\"TeacherSubjects.FinalGrades.Student\"\n              values={finalGrades.data.user}\n            />\n          </Typography.Text>\n          <Divider />\n        </>\n      )}\n      <Row gutter={[48, 48]} justify=\"space-between\">\n        <Col span={12}>\n          <ProTable\n            rowKey=\"id\"\n            headerTitle={<FormattedMessage id=\"TeacherSubjects.FinalGrades.StudentPartialGrades\" />}\n            search={false}\n            pagination={{ pageSize: TABLE_PAGE_SIZE }}\n            dataSource={studentExams.data}\n            loading={studentExams.loading}\n            columns={studentExamsColumns}\n            options={false}\n            cardProps={{ bodyStyle: { padding: 0 } }}\n          />\n        </Col>\n        <Col span={12}>\n          <ProTable\n            rowKey=\"id\"\n            headerTitle={<FormattedMessage id=\"TeacherSubjects.FinalGrades.FinalGrades\" />}\n            search={false}\n            pagination={{ pageSize: TABLE_PAGE_SIZE }}\n            dataSource={finalGradesTableData}\n            loading={finalGrades.loading || gradeTerms.loading}\n            columns={finalGradesColumns}\n            options={false}\n            cardProps={{ bodyStyle: { padding: 0 } }}\n          />\n        </Col>\n        <Col span={12}>\n          <ProTable<API.UserAttendanceSchedule>\n            rowKey=\"id\"\n            headerTitle={<FormattedMessage id=\"TeacherSubjects.FinalGrades.Attendances\" />}\n            search={false}\n            options={false}\n            pagination={{ pageSize: TABLE_PAGE_SIZE }}\n            cardProps={{ bodyStyle: { padding: 0 } }}\n            dataSource={userAttendanceSchedules.data}\n            loading={userAttendanceSchedules.loading}\n            columns={[\n              ...userAttendanceColumns,\n              {\n                title: <FormattedMessage id=\"TeacherSubjects.FinalGrades.Attendance\" />,\n                dataIndex: 'attendance',\n                render: (_n, row) => (\n                  <AttendanceCheckbox\n                    groupAttendanceScheduleId={row.id}\n                    studentId={user_id}\n                    attendance={row.attendance.value}\n                    onSuccess={fetchUserAttendanceSchedules}\n                  />\n                ),\n              },\n            ]}\n          />\n        </Col>\n        <Col span={12}>\n          <ProTable<API.GradeScale>\n            rowKey=\"id\"\n            headerTitle={<FormattedMessage id=\"TeacherSubjects.FinalGrades.GradesScale\" />}\n            search={false}\n            options={false}\n            pagination={{ pageSize: TABLE_PAGE_SIZE }}\n            cardProps={{ bodyStyle: { padding: 0 } }}\n            dataSource={tutorGradeScales.data}\n            loading={tutorGradeScales.loading}\n            columns={tutorGradeScalesColumns}\n          />\n        </Col>\n        {areStatisticsLoading && <Spin />}\n        {isStatisticDataPresent &&\n          userCourses.data?.map(({ id, title }) => (\n            <Col key={id} span={24}>\n              <Typography.Text style={{ fontSize: '16px', fontWeight: 500 }}>\n                {title}\n              </Typography.Text>\n              <UserProgress\n                course_id={Number(id)}\n                topics={userCoursesTopics.data?.[Number(id)] ?? []}\n                stats={userCoursesStats.data?.[Number(id)]?.finishedTopics ?? []}\n              />\n              <UserCourseAttempts\n                stats={userCoursesStats.data?.[Number(id)]?.attendanceList ?? []}\n              />\n            </Col>\n          ))}\n      </Row>\n      <ProForm<FormData> form={form} onFinish={onFinalGradeSubmit}>\n        <ProForm.Group\n          style={{ display: 'flex', flexDirection: 'column', paddingTop: '48px' }}\n          title={<FormattedMessage id=\"TeacherSubjects.FinalGrades.IssueAssessment\" />}\n          titleStyle={{ flex: 'unset' }}\n          align=\"center\"\n        >\n          <ProFormSelect\n            name=\"grade_term_id\"\n            rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n            label={<FormattedMessage id=\"TeacherSubjects.FinalGrades.GradeTerm\" />}\n            options={gradeTermsSelectOptions}\n            width=\"sm\"\n            fieldProps={{ loading: gradeTerms.loading }}\n          />\n          <ProFormSelect\n            name=\"grade_scale_id\"\n            rules={[{ required: true, message: <FormattedMessage id=\"field_required\" /> }]}\n            label={<FormattedMessage id=\"TeacherSubjects.FinalGrades.FinalGrade\" />}\n            options={gradesSelectOptions}\n            fieldProps={{ loading: finalGrades.loading || subjectGradeScales.loading }}\n          />\n          <ProForm.Item>\n            <FormattedMessage\n              id=\"TeacherSubjects.FinalGrades.ProposedGrade\"\n              values={{ grade: proposedGrade }}\n            />\n          </ProForm.Item>\n        </ProForm.Group>\n      </ProForm>\n    </>\n  );\n};\n","import React, { useMemo } from 'react';\nimport type { Location } from 'history';\nimport { FormattedMessage, Link, useLocation } from 'umi';\nimport { Button, Tooltip, Typography } from 'antd';\nimport ProTable from '@ant-design/pro-table';\nimport type { ProColumns } from '@ant-design/pro-table';\nimport { EditOutlined } from '@ant-design/icons';\n\nimport TypeButtonDrawer from '@/components/TypeButtonDrawer';\nimport { getGroupFinalGrades } from '@/services/escola-lms/grades';\nimport { FinalGradesDetails } from './FinalGradesDetails';\nimport { useTeacherSubject } from '../context';\n\ninterface TableParams {\n  group_id?: number[];\n  first_name?: string;\n  last_name?: string;\n}\n\nconst staticColumns: ProColumns<API.FinalGradeItem>[] = [\n  {\n    title: <FormattedMessage id=\"first_name\" />,\n    dataIndex: 'first_name',\n    render: (_n, row) => row.user.first_name,\n  },\n  {\n    title: <FormattedMessage id=\"last_name\" />,\n    dataIndex: 'last_name',\n    render: (_n, row) => row.user.last_name,\n  },\n  {\n    title: <FormattedMessage id=\"grade\" />,\n    hideInSearch: true,\n    dataIndex: 'grades',\n    render: (_n, row) => (\n      <div style={{ display: 'flex', flexDirection: 'column', gap: '4px' }}>\n        {row.grades.length\n          ? row.grades.map(({ grade_name, grade_term, id }) => (\n              <Typography.Text key={id}>\n                {grade_term.name}: {grade_name}\n              </Typography.Text>\n            ))\n          : '-'}\n      </div>\n    ),\n  },\n];\n\nexport const FinalGradesList: React.FC = () => {\n  const location = useLocation() as Location & { query: { user_id?: string; group_id?: string } };\n  const { user_id, group_id } = useMemo(\n    () => ({\n      user_id: Number.isNaN(Number(location.query?.user_id))\n        ? null\n        : Number(location.query?.user_id),\n      group_id: Number.isNaN(Number(location.query?.group_id))\n        ? null\n        : Number(location.query?.group_id),\n    }),\n\n    [location.query?.user_id, location.query?.group_id],\n  );\n\n  const { teacherSubjectData, semester_subject_id } = useTeacherSubject();\n\n  const groupOptions = useMemo(\n    () => (teacherSubjectData?.groups ?? []).map(({ id, name }) => ({ label: name, value: id })),\n    [teacherSubjectData?.groups],\n  );\n\n  if (user_id !== null && group_id !== null) {\n    return <FinalGradesDetails user_id={user_id} group_id={group_id} />;\n  }\n\n  return (\n    <ProTable<API.FinalGradeItem, TableParams>\n      className=\"table-standalone\"\n      rowKey=\"id\"\n      search={{ layout: 'vertical' }}\n      request={async ({ group_id: group_ids = [], first_name = '', last_name = '' }) => {\n        const allGroups = (teacherSubjectData?.groups ?? []).map(({ id }) => id);\n\n        const response = await getGroupFinalGrades(group_ids.length === 0 ? allGroups : group_ids);\n\n        if (!response.success) {\n          return { success: false, total: 0, data: [] };\n        }\n\n        // TODO backend filter\n        const data = response.data.filter(\n          ({ user }) =>\n            user.first_name.toLowerCase().includes(first_name.toLowerCase()) &&\n            user.last_name.toLowerCase().includes(last_name.toLowerCase()),\n        );\n\n        return { success: true, total: data.length, data };\n      }}\n      columns={[\n        {\n          title: <FormattedMessage id=\"group\" />,\n          dataIndex: 'group_id',\n          valueType: 'select',\n          fieldProps: {\n            options: groupOptions,\n            mode: 'multiple',\n          },\n          render: (_n, row) => (\n            <TypeButtonDrawer key={row.group_id} type=\"Students\" type_id={row.group_id} />\n          ),\n        },\n        ...staticColumns,\n        {\n          title: <FormattedMessage id=\"options\" />,\n          hideInSearch: true,\n          render: (_n, row) => [\n            <Link\n              key=\"edit\"\n              to={`/teacher/subjects/${semester_subject_id}/final-grades?user_id=${row.user.id}&group_id=${row.group_id}`}\n            >\n              <Tooltip title={<FormattedMessage id=\"edit\" />}>\n                <Button type=\"primary\" icon={<EditOutlined />} />\n              </Tooltip>\n            </Link>,\n          ],\n        },\n      ]}\n    />\n  );\n};\n","import React, { useMemo } from 'react';\nimport { format } from 'date-fns';\nimport { FormattedMessage } from 'umi';\nimport { Button, Tooltip } from 'antd';\nimport type { ProColumns } from '@ant-design/pro-table';\nimport ProTable from '@ant-design/pro-table';\nimport { DownloadOutlined } from '@ant-design/icons';\n\nimport { DATETIME_FORMAT } from '@/consts/dates';\nimport { getPCGExportsHistory } from '@/services/escola-lms/pcg-export';\nimport TypeButtonDrawer from '@/components/TypeButtonDrawer';\nimport UserSelect from '@/components/UserSelect';\nimport { useTeacherSubject } from '../context';\n\nconst DownloadButton: React.FC<{ url: string }> = ({ url }) => (\n  <Tooltip title={<FormattedMessage id=\"download\" />}>\n    <Button\n      type=\"primary\"\n      onClick={() => {\n        window.open(url, '_blank', 'noopener noreferrer');\n      }}\n      icon={<DownloadOutlined />}\n    />\n  </Tooltip>\n);\n\nconst staticColumns: ProColumns<API.PCGFileExportsHistoryItem>[] = [\n  {\n    title: <FormattedMessage id=\"ID\" />,\n    dataIndex: 'id',\n    hideInSearch: true,\n  },\n  {\n    title: <FormattedMessage id=\"created_at\" />,\n    dataIndex: 'created_at',\n    hideInSearch: true,\n    render: (_n, record) => format(new Date(record.created_at), DATETIME_FORMAT),\n  },\n  {\n    title: <FormattedMessage id=\"created_by\" />,\n    dataIndex: 'created_by',\n    renderFormItem: (item, { type, defaultRender, ...rest }, form) => {\n      if (type === 'form') {\n        return null;\n      }\n      const stateType = form.getFieldValue('state');\n      return (\n        <UserSelect\n          {...rest}\n          state={{\n            type: stateType,\n          }}\n        />\n      );\n    },\n    render: (_n, record) => (\n      <TypeButtonDrawer\n        key={record.created_by.id}\n        type=\"EscolaLms\\Core\\Models\\User\"\n        type_id={record.created_by.id}\n      />\n    ),\n  },\n  {\n    title: <FormattedMessage id=\"exported_at\" />,\n    dataIndex: 'exported_at',\n    hideInSearch: true,\n    render: (_n, record) => format(new Date(record.exported_at), DATETIME_FORMAT),\n  },\n  {\n    title: <FormattedMessage id=\"exported_by\" />,\n    dataIndex: 'exported_by',\n    renderFormItem: (item, { type, defaultRender, ...rest }, form) => {\n      if (type === 'form') {\n        return null;\n      }\n      const stateType = form.getFieldValue('state');\n      return (\n        <UserSelect\n          {...rest}\n          state={{\n            type: stateType,\n          }}\n        />\n      );\n    },\n    render: (_n, record) => (\n      <TypeButtonDrawer\n        key={record.exported_by.id}\n        type=\"EscolaLms\\Core\\Models\\User\"\n        type_id={record.exported_by.id}\n      />\n    ),\n  },\n  {\n    title: <FormattedMessage id=\"version\" />,\n    dataIndex: 'version',\n    hideInSearch: true,\n  },\n  {\n    title: <FormattedMessage id=\"options\" />,\n    valueType: 'option',\n    render: (_n, record) => [<DownloadButton key=\"download\" url={record.url} />],\n  },\n];\n\nexport const FileExportsHistory: React.FC = () => {\n  const { teacherSubjectData } = useTeacherSubject();\n\n  const groupOptions = useMemo(\n    () => (teacherSubjectData?.groups ?? []).map(({ id, name }) => ({ value: id, label: name })),\n    [teacherSubjectData?.groups],\n  );\n\n  const columns: ProColumns<API.PCGFileExportsHistoryItem>[] = useMemo(\n    () => [\n      {\n        title: <FormattedMessage id=\"group\" />,\n        dataIndex: 'group_id',\n        hideInTable: true,\n        valueType: 'select',\n        fieldProps: {\n          options: groupOptions,\n          defaultValue: teacherSubjectData?.groups?.[0]?.id,\n          allowClear: false,\n        },\n      },\n      ...staticColumns,\n    ],\n    [teacherSubjectData?.groups?.[0]?.id, groupOptions],\n  );\n\n  return (\n    <ProTable<API.PCGFileExportsHistoryItem, API.PCGFileExportsHistoryParams>\n      className=\"table-standalone\"\n      request={async ({\n        group_id = teacherSubjectData?.groups?.[0]?.id,\n        created_by,\n        exported_by,\n      }) => {\n        const response = await getPCGExportsHistory({ group_id, created_by, exported_by });\n\n        if (!response.success) {\n          return { success: false, data: [], total: 0 };\n        }\n\n        return { success: true, data: response.data, total: response.data.length };\n      }}\n      columns={columns}\n      search={{ layout: 'vertical' }}\n      scroll={{ x: 1500 }}\n    />\n  );\n};\n","import React, { useCallback, useMemo, useState } from 'react';\nimport { FormattedMessage } from 'umi';\nimport { Select } from 'antd';\n\nimport { createFinalGrade, updateFinalGrade } from '@/services/escola-lms/grades';\n\ninterface Props {\n  term: API.GradeTerm;\n  gradeScales: API.SubjectGradeScale[];\n  defaultFinalGrade?: API.FinalGradeItemGrade;\n  finalGrades?: API.FinalGradeItem;\n}\n\nconst getGradeScaleId = (\n  gradeScales: API.SubjectGradeScale[],\n  name: string | undefined,\n): number | undefined => gradeScales.find((scale) => scale.name === name)?.id;\n\nexport const FinalGradeSelect: React.FC<Props> = ({\n  term,\n  gradeScales,\n  defaultFinalGrade,\n  finalGrades,\n}) => {\n  const [createdGrade, setCreatedGrade] = useState(defaultFinalGrade);\n\n  const [loading, setLoading] = useState(false);\n\n  const options = useMemo(\n    () => gradeScales.map(({ name, id }) => ({ value: id, label: name })),\n    [gradeScales],\n  );\n\n  const onChange = useCallback(\n    (grade_scale_id: number) => {\n      if (!finalGrades?.id) return;\n\n      if (createdGrade) {\n        setLoading(true);\n        updateFinalGrade(createdGrade.id, {\n          grade_scale_id,\n        }).finally(() => setLoading(false));\n        return;\n      }\n\n      setLoading(true);\n      createFinalGrade({\n        grade_term_id: term.id,\n        grade_scale_id,\n        lesson_group_user_id: finalGrades.id,\n      })\n        .then((res) => {\n          if (res.success) {\n            const recentGrade = res.data.grades.find((grade) => grade.grade_term.id === term.id);\n            setCreatedGrade(recentGrade);\n          }\n        })\n        .finally(() => setLoading(false));\n    },\n    [createdGrade, term.id, finalGrades?.id],\n  );\n\n  if (!finalGrades) return null;\n\n  return (\n    <Select\n      loading={loading}\n      disabled={loading}\n      placeholder={<FormattedMessage id=\"select_final_grade\" />}\n      style={{ width: '100%' }}\n      onChange={onChange}\n      options={options}\n      defaultValue={getGradeScaleId(gradeScales, defaultFinalGrade?.grade_name)}\n    />\n  );\n};\n","import React, { useCallback } from 'react';\nimport { InputNumber } from 'antd';\nimport { debounce } from 'lodash';\n\nimport { createExamResult } from '@/services/escola-lms/exams';\n\ninterface Props {\n  exam_id: number;\n  result: number;\n  student_id: number;\n  onSuccess?: (exam: API.Exam) => void;\n}\n\nexport const ExamGradeInput: React.FC<Props> = ({ exam_id, result, student_id, onSuccess }) => {\n  const onChange = useCallback(\n    debounce((value: number | null) => {\n      createExamResult(exam_id, student_id, { result: value ?? 0 }).then((res) => {\n        if (res.success) {\n          onSuccess?.(res.data);\n        }\n      });\n    }, 300),\n    [exam_id, result, student_id],\n  );\n\n  return <InputNumber type=\"number\" min={0} max={100} onChange={onChange} defaultValue={result} />;\n};\n","import { FormattedMessage } from 'umi';\nimport { format } from 'date-fns';\nimport type { ProColumns } from '@ant-design/pro-table';\n\nimport { DAY_FORMAT } from '@/consts/dates';\nimport AttendanceCheckbox from '@/components/AttendanceCheckbox';\n\nimport type { StudentExam } from '../FinalGradesDetails/types';\nimport { FinalGradeSelect } from '../FinalGradeSelect';\nimport { ExamGradeInput } from '../ExamGradeInput';\nimport type {\n  ClassRegisterTableItemAttendance,\n  ClassRegisterTableItemFinalGrade,\n  ClassRegisterTableItem,\n  ClassRegisterTableItemExamResult,\n} from './types';\n\n/* Attendance */\nexport const getAttendanceCols = (\n  groupAttendanceSchedule: API.GroupAttendanceSchedule[],\n): ProColumns<ClassRegisterTableItem> => {\n  const dynamicCols = groupAttendanceSchedule.reduce<ProColumns<ClassRegisterTableItem>[]>(\n    (acc, curr) => [\n      ...acc,\n      {\n        title: format(new Date(curr.date_from), DAY_FORMAT),\n        dataIndex: `attendance-${curr.date_from}`,\n        hideInSearch: true,\n        width: 100,\n        align: 'center',\n        render: (_, record) => (\n          <AttendanceCheckbox\n            groupAttendanceScheduleId={curr.id}\n            attendance={record[`attendance-${curr?.date_from}`]}\n            studentId={record.id}\n          />\n        ),\n      },\n    ],\n    [],\n  );\n\n  if (!dynamicCols.length)\n    return { title: <FormattedMessage id=\"attendance\" />, hideInSearch: true, hideInTable: true };\n\n  return {\n    title: <FormattedMessage id=\"attendance\" />,\n    hideInSearch: true,\n    children: dynamicCols,\n  };\n};\n\nexport const getStudentAttendances = (\n  groupAttendanceSchedules: API.GroupAttendanceSchedule[],\n  student_id: number,\n): ClassRegisterTableItemAttendance =>\n  groupAttendanceSchedules.reduce((innerAcc, groupAttendanceSchedule) => {\n    const studentAttendance = groupAttendanceSchedule.attendances.find(\n      (attendance) => attendance.user_id === student_id,\n    );\n    if (!studentAttendance) return innerAcc;\n\n    return {\n      ...innerAcc,\n      [`attendance-${groupAttendanceSchedule.date_from}`]: studentAttendance.value,\n    };\n  }, {});\n\n/* Exams */\nexport const getExamsCols = (exams: API.Exam[]): ProColumns<ClassRegisterTableItem> => {\n  const dynamicCols = exams.reduce<ProColumns<ClassRegisterTableItem>[]>(\n    (acc, exam) => [\n      ...acc,\n      {\n        dataIndex: `exam-${exam.id}`,\n        title: <FormattedMessage id=\"examTitleWithWeight\" values={exam} />,\n        hideInSearch: true,\n        width: 100,\n        render: (_n, record) =>\n          record?.[`exam-${exam.id}`]?.result !== undefined ? (\n            <ExamGradeInput\n              result={record?.[`exam-${exam.id}`].result}\n              exam_id={exam.id}\n              student_id={record.id}\n            />\n          ) : (\n            '-'\n          ),\n      },\n    ],\n    [],\n  );\n\n  if (!dynamicCols.length)\n    return { title: <FormattedMessage id=\"exams\" />, hideInSearch: true, hideInTable: true };\n\n  return { title: <FormattedMessage id=\"exams\" />, hideInSearch: true, children: dynamicCols };\n};\n\nexport const getStudentExamResults = (\n  studentExams: StudentExam[],\n): ClassRegisterTableItemExamResult =>\n  studentExams.reduce(\n    (innerAcc, { result, id: exam_id }) => ({\n      ...innerAcc,\n      [`exam-${exam_id}`]: result,\n    }),\n    {},\n  );\n\n/* Final grades */\nexport const getFinalGradesCols = (\n  gradeTerms: API.GradeTerm[],\n  subjectGradeScales: API.SubjectGradeScale[],\n): ProColumns<ClassRegisterTableItem> => ({\n  title: <FormattedMessage id=\"final-grades\" />,\n  hideInSearch: true,\n  children: gradeTerms.map((term) => ({\n    title: term.name,\n    hideInSearch: true,\n    width: 100,\n    align: 'center',\n    render: (_n, record) => (\n      <FinalGradeSelect\n        defaultFinalGrade={record[`final-grade-${term.id}`]}\n        finalGrades={record.final_grades}\n        term={term}\n        gradeScales={subjectGradeScales}\n      />\n    ),\n  })),\n});\n\nexport const getStudentFinalGrades = (\n  finalGrades: API.FinalGradeItem[],\n  student_id: number,\n): API.FinalGradeItem | undefined =>\n  finalGrades.find((finalGradeItem) => finalGradeItem.user.id === student_id);\n\nexport const getFinalGrades = (\n  studentFinalGrade?: API.FinalGradeItem,\n): ClassRegisterTableItemFinalGrade =>\n  (studentFinalGrade?.grades ?? []).reduce(\n    (acc, grade) => ({ ...acc, [`final-grade-${grade.grade_term.id}`]: grade }),\n    {},\n  );\n","import React, { useMemo, useRef, useState } from 'react';\nimport { FormattedMessage, useIntl } from 'umi';\nimport { message } from 'antd';\nimport ProTable from '@ant-design/pro-table';\nimport type { ProColumns, ActionType } from '@ant-design/pro-table';\n\nimport { groupAttendanceSchedule as fetchGroupAttendanceSchedule } from '@/services/escola-lms/attendances';\nimport { studentUserGroup as fetchStudentUserGroup } from '@/services/escola-lms/student_user_groups';\nimport {\n  getSubjectTutorGrades as fetchSubjectTutorGrades,\n  getGroupFinalGrades as fetchGroupFinalGrades,\n  getGradeTerms as fetchGradeTerms,\n  getSubjectGradeScales as fetchSubjectGradeScales,\n} from '@/services/escola-lms/grades';\nimport { getExams as fetchExams } from '@/services/escola-lms/exams';\nimport { useTeacherSubject } from '../../context';\nimport {\n  getProposedGrade,\n  getScalesBySubjectScaleFormId,\n  getStudentExamsFromExams,\n} from '../FinalGradesDetails/utils';\nimport {\n  getAttendanceCols,\n  getExamsCols,\n  getFinalGrades,\n  getFinalGradesCols,\n  getStudentAttendances,\n  getStudentExamResults,\n  getStudentFinalGrades,\n} from './utils';\nimport type { ClassRegisterTableItem } from './types';\n\nexport const ClassRegister: React.FC = () => {\n  const { teacherSubjectData, semester_subject_id } = useTeacherSubject();\n  const [dynamicCols, setDynamicCols] = useState<ProColumns<ClassRegisterTableItem>[]>([]);\n  const [selectedGroupName, setSelectedGroupName] = useState(teacherSubjectData?.groups?.[0]?.name);\n  const intl = useIntl();\n\n  const groupOptions = useMemo(\n    () => (teacherSubjectData?.groups ?? []).map(({ id, name }) => ({ value: id, label: name })),\n    [teacherSubjectData?.groups],\n  );\n\n  const actionRef = useRef<ActionType>();\n\n  const columns: ProColumns[] = useMemo(\n    () => [\n      {\n        title: <FormattedMessage id=\"group\" />,\n        dataIndex: 'group_id',\n        hideInTable: true,\n        valueType: 'select',\n        fieldProps: {\n          options: groupOptions,\n          defaultValue: groupOptions?.[0]?.value,\n          allowClear: false,\n        },\n      },\n      {\n        title: <FormattedMessage id=\"nameAndSurname\" defaultMessage=\"Name and surname\" />,\n        dataIndex: 'full_name',\n        fixed: 'left',\n      },\n      ...dynamicCols,\n    ],\n    [groupOptions, dynamicCols],\n  );\n\n  return (\n    <ProTable<ClassRegisterTableItem>\n      className=\"table-standalone\"\n      request={async ({ group_id = groupOptions[0]?.value, full_name = '' }) => {\n        const finalGradesRes = await fetchGroupFinalGrades(group_id);\n        const selectedGroup = groupOptions.find(({ value }) => value === group_id);\n        if (\n          !finalGradesRes.success ||\n          finalGradesRes.data[0] === undefined ||\n          semester_subject_id === null\n        ) {\n          message.error(\n            intl.formatMessage({ id: 'groupDataMissing' }, { group_name: selectedGroup?.label }),\n          );\n\n          return { data: [], total: 0, success: false };\n        }\n\n        const [\n          studentUserGroupRes,\n          groupAttendanceScheduleRes,\n          examsRes,\n          tutorGradesRes,\n          gradeTermsRes,\n          subjectGradeScalesRes,\n        ] = await Promise.all([\n          fetchStudentUserGroup(group_id),\n          fetchGroupAttendanceSchedule(group_id),\n          fetchExams({ group_id, per_page: -1 }),\n          fetchSubjectTutorGrades(semester_subject_id, finalGradesRes.data?.[0]?.tutor_id),\n          fetchGradeTerms(),\n          fetchSubjectGradeScales(finalGradesRes.data?.[0]?.s_subject_scale_form_id),\n        ]);\n\n        if (\n          !studentUserGroupRes.success ||\n          !groupAttendanceScheduleRes.success ||\n          !examsRes.success ||\n          !tutorGradesRes.success ||\n          !gradeTermsRes.success ||\n          !subjectGradeScalesRes.success ||\n          !selectedGroup\n        ) {\n          message.error(\n            intl.formatMessage({ id: 'groupDataMissing' }, { group_name: selectedGroup?.label }),\n          );\n\n          return { data: [], total: 0, success: false };\n        }\n        setSelectedGroupName(selectedGroup.label);\n\n        /* COLS */\n        const attendanceCols = getAttendanceCols(groupAttendanceScheduleRes.data);\n        const examsCols = getExamsCols(examsRes.data);\n        const finalGradeCols = getFinalGradesCols(gradeTermsRes.data, subjectGradeScalesRes.data);\n\n        setDynamicCols([\n          attendanceCols,\n          examsCols,\n          finalGradeCols,\n          {\n            title: <FormattedMessage id=\"proposed_grade\" />,\n            hideInSearch: true,\n            dataIndex: 'proposed_grade',\n            align: 'center',\n            width: 100,\n          },\n        ]);\n\n        const data = studentUserGroupRes.data.users\n          .reduce<ClassRegisterTableItem[]>(\n            (acc, { id, academic_teacher_id, first_name, last_name }) => {\n              const studentFullName = `${last_name} ${first_name}`;\n              // filter out tutor & first name and second name filter\n              if (\n                academic_teacher_id !== null ||\n                !studentFullName.toLowerCase().includes(full_name.toLowerCase())\n              )\n                return acc;\n\n              const studentAttendances = getStudentAttendances(groupAttendanceScheduleRes.data, id);\n\n              const studentExams = getStudentExamsFromExams(examsRes.data, id);\n\n              const studentFinalGrades = getStudentFinalGrades(finalGradesRes.data, id);\n\n              const tutorScales =\n                getScalesBySubjectScaleFormId(\n                  studentFinalGrades?.s_subject_scale_form_id ?? 0,\n                  tutorGradesRes.data.grade_scale ?? [],\n                ) ?? [];\n\n              const proposed_grade = getProposedGrade(studentExams, tutorScales);\n\n              const studentExamResults = getStudentExamResults(studentExams);\n\n              const finalGrades = getFinalGrades(studentFinalGrades);\n\n              return [\n                ...acc,\n                {\n                  id,\n                  full_name: studentFullName,\n                  ...studentAttendances,\n                  ...studentExamResults,\n                  ...finalGrades,\n                  proposed_grade,\n                  final_grades: studentFinalGrades,\n                },\n              ];\n            },\n            [],\n          )\n          // sort alphabetically\n          .sort((a, b) => a.full_name.localeCompare(b.full_name));\n\n        return { data, total: data.length, success: true };\n      }}\n      columns={columns}\n      headerTitle={\n        <FormattedMessage\n          id=\"classRegisterTitleWithGroupName\"\n          values={{ groupName: selectedGroupName }}\n        />\n      }\n      search={{ layout: 'vertical' }}\n      scroll={{ x: 1500 }}\n      actionRef={actionRef}\n      pagination={{ onChange: () => actionRef.current?.reload() }}\n      rowKey=\"id\"\n    />\n  );\n};\n","import React, { useCallback, useMemo } from 'react';\nimport { useParams, history, useIntl, FormattedMessage, useModel, Link } from 'umi';\nimport { Spin, Button } from 'antd';\nimport ProCard from '@ant-design/pro-card';\nimport { PageContainer } from '@ant-design/pro-layout';\n\nimport PERMISSIONS from '@/consts/permissions';\nimport { isUserHavePermissions } from '@/services/escola-lms/permissions';\nimport { TeacherSubjectContextProvider, useTeacherSubject } from './context';\nimport { Groups } from './components/Groups';\nimport { Exams } from './components/Exams';\nimport { Students } from './components/Students';\nimport { Attendances } from './components/Attendances';\nimport { GradesScale } from './components/GradesScale';\nimport { Schedule } from './components/Schedule';\nimport { FinalGradesList } from './components/FinalGradesList';\nimport { FileExportsHistory } from './components/FileExportsHistory';\nimport { ClassRegister } from './components/ClassRegister';\n\nconst TeacherSubjectsFormContent: React.FC<{ tab: string }> = ({ tab }) => {\n  const intl = useIntl();\n  const { setInitialState, initialState } = useModel('@@initialState');\n  const { teacherSubjectData, semester_subject_id, tutors } = useTeacherSubject();\n\n  const currentUserHasPermissions = useCallback(\n    isUserHavePermissions(initialState?.currentUser as API.UserItem),\n    [initialState?.currentUser],\n  );\n\n  const showGradeScale = useMemo(\n    () =>\n      !!tutors.data.find(({ id }) => id === initialState?.currentUser?.id) ||\n      currentUserHasPermissions(PERMISSIONS.TeacherListGradeScale),\n    [],\n  );\n\n  if (!teacherSubjectData) {\n    return <Spin />;\n  }\n\n  return (\n    <PageContainer\n      title={\n        <>\n          <FormattedMessage id={teacherSubjectData?.subject?.name} />\n          {', '}\n          <FormattedMessage id={tab} />\n        </>\n      }\n      tabBarExtraContent={\n        <div style={{ display: 'flex', padding: '12px', gap: '12px' }}>\n          <Link to={`/teacher/subjects/${semester_subject_id}/exams?exam_id=new`}>\n            <Button type=\"primary\">\n              <FormattedMessage id=\"uploadGrades\" defaultMessage=\"uploadGrades\" />\n            </Button>\n          </Link>\n        </div>\n      }\n      header={{\n        breadcrumb: {\n          routes: [\n            {\n              path: 'teacher',\n              breadcrumbName: intl.formatMessage({\n                id: 'menu.Teacher',\n              }),\n            },\n            {\n              path: 'subjects',\n              breadcrumbName: intl.formatMessage({\n                id: 'menu.Teacher.Subjects',\n              }),\n            },\n            {\n              path: String(semester_subject_id),\n              breadcrumbName: String(teacherSubjectData.subject?.name),\n            },\n            {\n              path: String(tab),\n              breadcrumbName: intl.formatMessage({ id: tab, defaultMessage: String(tab) }),\n            },\n          ],\n        },\n      }}\n    >\n      <ProCard\n        bodyStyle={{ padding: '24px' }}\n        tabs={{\n          type: 'card',\n          activeKey: tab,\n          onChange: (key) => {\n            setInitialState({\n              ...initialState,\n            });\n\n            history.push(`/teacher/subjects/${semester_subject_id}/${key}`);\n          },\n        }}\n      >\n        <ProCard.TabPane key=\"groups\" tab={<FormattedMessage id=\"groups\" />}>\n          <Groups />\n        </ProCard.TabPane>\n        <ProCard.TabPane key=\"students\" tab={<FormattedMessage id=\"students\" />}>\n          <Students />\n        </ProCard.TabPane>\n        <ProCard.TabPane key=\"exams\" tab={<FormattedMessage id=\"exams\" />}>\n          <Exams />\n        </ProCard.TabPane>\n        <ProCard.TabPane key=\"schedule\" tab={<FormattedMessage id=\"schedule\" />}>\n          <Schedule />\n        </ProCard.TabPane>\n        <ProCard.TabPane key=\"class-register\" tab={<FormattedMessage id=\"class-register\" />}>\n          <ClassRegister />\n        </ProCard.TabPane>\n        <ProCard.TabPane key=\"attendance\" tab={<FormattedMessage id=\"attendance\" />}>\n          <Attendances />\n        </ProCard.TabPane>\n        {showGradeScale && (\n          <ProCard.TabPane key=\"grades-scale\" tab={<FormattedMessage id=\"grades-scale\" />}>\n            <GradesScale />\n          </ProCard.TabPane>\n        )}\n        <ProCard.TabPane key=\"final-grades\" tab={<FormattedMessage id=\"final-grades\" />}>\n          <FinalGradesList />\n        </ProCard.TabPane>\n        <ProCard.TabPane\n          key=\"file-exports-history\"\n          tab={<FormattedMessage id=\"file-exports-history\" />}\n        >\n          <FileExportsHistory />\n        </ProCard.TabPane>\n      </ProCard>\n    </PageContainer>\n  );\n};\n\nexport default () => {\n  const params = useParams<{ subjectId?: string; tab?: string }>();\n  const { subjectId, tab = 'groups' } = params;\n\n  return (\n    <TeacherSubjectContextProvider semester_subject_id={Number(subjectId)}>\n      <TeacherSubjectsFormContent tab={tab} />\n    </TeacherSubjectContextProvider>\n  );\n};\n","import React, { useCallback, useEffect, useState, useMemo } from 'react';\nimport { message } from 'antd';\nimport { useIntl, useLocation } from 'umi';\nimport { history } from 'umi';\nimport type { Location } from 'history';\n\nimport {\n  program,\n  createLesson as apiCreateLesson,\n  updateLesson as apiUpdateLesson,\n  createTopic as apiCreateTopic,\n  updateTopic as apiUpdateTopic,\n  removeLesson as apiRemoveLesson,\n  removeTopic as apiRemoveTopic,\n  cloneLesson as apiCloneLesson,\n  cloneTopic as apiCloneTopic,\n} from '@/services/escola-lms/course';\n\nimport type { UploadChangeParam } from 'antd/lib/upload';\nimport { TopicType } from '@/services/escola-lms/enums';\n\ntype CurrentEditMode =\n  | { mode: 'lesson'; id: number; value?: API.Lesson | null }\n  | { mode: 'topic'; id: number; value?: API.Topic | null }\n  | { mode: 'init' };\n\ntype ProgramContext = {\n  currentEditMode?: CurrentEditMode;\n  state?: API.CourseProgram;\n  h5ps?: any[];\n  // token: credentials.token,\n  id?: number;\n  addNewLesson?: (parentId?: number) => API.Lesson;\n  updateLesson?: (lesson_id: number, data: FormData) => Promise<void | boolean>;\n  updateTopic?: (topic_id: number, data: FormData) => Promise<void>;\n  // addResource,\n  // removeResource,\n  deleteLesson?: (lesson_id: number) => void;\n  // updateH5P,\n  addNewTopic?: (lesson_id: number, type: API.TopicType) => API.Topic;\n  deleteTopic?: (topic_id: number) => void;\n  onTopicUploaded?: (prevTopicId: number, info: UploadChangeParam) => void;\n  cloneTopic?: (topic_id: number) => void;\n  cloneLesson?: (lesson_id: number) => void;\n  getLessons?: () => void;\n};\n\nexport const Context = React.createContext<ProgramContext>({});\n\nconst getRandomId = () => Math.round(Math.random() * 99999);\n\nconst getFlatLessons = (lessons: API.Lesson[]): API.Lesson[] => {\n  return lessons.reduce((acc, curr) => {\n    return [...acc, ...(curr.lessons ? getFlatLessons(curr.lessons) : []), curr];\n  }, [] as API.Lesson[]) as API.Lesson[];\n};\n\nexport const getFlatTopics = (lessons: API.Lesson[]): API.Topic[] => {\n  return lessons.reduce((acc, curr) => {\n    return [...acc, ...(curr.lessons ? getFlatTopics(curr.lessons) : []), ...(curr.topics ?? [])];\n  }, [] as API.Topic[]) as API.Topic[];\n};\n\nconst recursiveAddTopicToLessons = (\n  lessons: API.Lesson[],\n  lessonId: number,\n  topic: API.Topic,\n): API.Lesson[] => {\n  return lessons.map((lesson) => ({\n    ...lesson,\n    lessons: lesson.lessons ? recursiveAddTopicToLessons(lesson.lessons, lessonId, topic) : [],\n    topics: lesson.id === lessonId ? [...(lesson.topics ?? []), topic] : lesson.topics ?? [],\n  }));\n};\n\n// Probably should be removed\n// const recursiveEditTopic = (\n//   lessons: API.Lesson[],\n//   topicId: number,\n//   updatedTopic: API.Topic,\n// ): API.Lesson[] => {\n//   return lessons.map((lesson) => ({\n//     ...lesson,\n//     lessons: recursiveEditTopic(lesson.lessons ?? [], topicId, updatedTopic),\n//     topics: lesson.topics?.map((topic) => (topic.id === topicId ? updatedTopic : topic)) ?? [],\n//   }));\n// };\n\nconst recursiveAddLessonToLessons = (\n  lessons: API.Lesson[],\n  newLesson: API.Lesson,\n  lessonId?: number | null,\n): API.Lesson[] => {\n  if (!lessonId) {\n    return [...lessons, newLesson];\n  }\n  return lessons.map((lesson) => ({\n    ...lesson,\n    lessons: [\n      ...(lesson.lessons ? recursiveAddLessonToLessons(lesson.lessons, newLesson, lessonId) : []),\n      ...(lesson.id === lessonId ? [newLesson] : []),\n    ],\n  }));\n};\n\nconst recursiveEditLesson = (\n  lessons: API.Lesson[],\n  lessonId: number,\n  updatedLesson: API.Lesson,\n): API.Lesson[] => {\n  return lessons.map((lesson) => ({\n    ...(lesson.id === lessonId ? updatedLesson : lesson),\n    lessons: lesson.lessons ? recursiveEditLesson(lesson.lessons, lessonId, updatedLesson) : [],\n  }));\n};\n\nconst appendParentIdToLessons = (lessons: API.Lesson[], lessonParentId?: number): API.Lesson[] => {\n  return lessons.map((lesson) => ({\n    ...lesson,\n    parent_id: lessonParentId,\n    lessons: lesson.lessons ? appendParentIdToLessons(lesson.lessons, lesson.id) : [],\n  }));\n};\n\nconst recursiveDeleteLesson = (lessons: API.Lesson[], lessonId: number): API.Lesson[] => {\n  return lessons\n    .filter((lesson) => lesson.id !== lessonId)\n    .map((lesson) => ({\n      ...lesson,\n      lessons: lesson.lessons ? recursiveDeleteLesson(lesson.lessons, lessonId) : [],\n    }));\n};\n\nconst recursiveDeleteTopic = (lessons: API.Lesson[], topicId: number): API.Lesson[] => {\n  return lessons.map((lesson) => ({\n    ...lesson,\n    lessons: lesson.lessons ? recursiveDeleteTopic(lesson.lessons, topicId) : [],\n    topics: lesson.topics ? lesson.topics.filter((topic) => topic.id !== topicId) : [],\n  }));\n};\n\nconst recursiveTopicUploaded = (\n  prevTopicId: number,\n  info: UploadChangeParam,\n  lesson_id: number | null | undefined,\n  lessons: API.Lesson[],\n): API.Lesson[] => {\n  return lessons?.map((lesson) => {\n    if (lesson.id === lesson_id) {\n      return {\n        ...lesson,\n        topics: lesson.topics?.map((topic) => {\n          if (topic.id === prevTopicId) {\n            return info.file.response.data;\n          }\n          return topic;\n        }),\n      };\n    } else if (lesson.lessons) {\n      return {\n        ...lesson,\n        lessons: recursiveTopicUploaded(prevTopicId, info, lesson_id, lesson.lessons || []),\n      };\n    }\n    return lesson;\n  });\n};\n\nexport const AppContext: React.FC<{ children: React.ReactNode; id: number }> = ({\n  children,\n  id,\n}) => {\n  const [state, setState] = useState<API.CourseProgram>();\n  const intl = useIntl();\n\n  const flatTopics: API.Topic[] = useMemo(() => {\n    return state && state.lessons ? getFlatTopics(state.lessons) : [];\n  }, [state]);\n\n  const flatLessons: API.Lesson[] = useMemo(() => {\n    return state && state.lessons ? getFlatLessons(state.lessons) : [];\n  }, [state]);\n\n  const [h5ps, setH5ps] = useState([]);\n\n  const l = useLocation() as Location & { query: { lesson?: string; topic?: string } };\n\n  useEffect(() => {\n    setH5ps([]);\n  }, []);\n\n  /*\n  useEffect(() => {\n    API(`h5p`, token)\n      .then((response) => response.json())\n      .then((data) => {\n        setH5ps(data);\n      });\n    //.then(() => addNewLesson());\n  }, []);\n  */\n\n  const getLessons = useCallback(() => {\n    program(id).then((data) => {\n      return (\n        data.success &&\n        setState({\n          ...data.data,\n          lessons: appendParentIdToLessons(data.data.lessons),\n        })\n      );\n    });\n  }, [id]);\n\n  useEffect(() => {\n    getLessons();\n  }, [getLessons]);\n\n  const getLessonIdByTopicId = useCallback(\n    (topic_id: number) => {\n      const lesson = flatLessons.find((lesson_item) =>\n        lesson_item?.topics?.find((topic) => topic.id === topic_id),\n      );\n      return lesson ? lesson.id : null;\n    },\n    [flatLessons],\n  );\n\n  const currentEditMode = useMemo<CurrentEditMode>(() => {\n    if (l.query?.lesson) {\n      return {\n        mode: 'lesson',\n        id: Number(l.query.lesson),\n        value: flatLessons.find((lesson) => lesson.id === Number(l.query.lesson)),\n      };\n    }\n    if (l.query?.topic) {\n      return {\n        mode: 'topic',\n        id: Number(l.query.topic),\n        value: flatTopics.find((t) => t.id === Number(l.query.topic)),\n      };\n    }\n    return { mode: 'init' };\n  }, [l.query, state, flatLessons, flatTopics]);\n\n  const addNewLesson = useCallback(\n    (parentId?: number) => {\n      const newLesson: API.Lesson = {\n        course_id: id,\n        topics: [],\n        isNew: true,\n        id: state ? state.lessons.length + 1 : getRandomId(), // New Lesson\n        order: 0,\n        title: intl.formatMessage({ id: 'add_title_here' }),\n        active: true,\n        parent_id: parentId,\n      };\n\n      setState((prevState) => ({\n        ...prevState,\n        lessons: recursiveAddLessonToLessons(prevState?.lessons ?? [], newLesson, parentId),\n        //lessons: [...(prevState ? prevState.lessons : []), newLesson] as API.Lesson[],\n      }));\n\n      return newLesson;\n    },\n    [id, state],\n  );\n\n  const updateLesson = useCallback(\n    (lesson_id: number, formData: FormData) => {\n      const newLesson = flatLessons.find((lesson) => lesson.id === lesson_id);\n      const isNew = newLesson && newLesson.isNew;\n\n      return (isNew ? apiCreateLesson(formData) : apiUpdateLesson(lesson_id, formData)).then(\n        (data) => {\n          message.success(data.message);\n          getLessons();\n          return (\n            data.success &&\n            setState((prevState) => ({\n              ...prevState,\n              lessons: recursiveEditLesson(prevState?.lessons ?? [], lesson_id, {\n                ...data.data,\n                isNew: false,\n              }),\n              /*\n              lessons: prevState?.lessons\n                ? prevState.lessons.map((lesson) => {\n                    if (lesson.id === lesson_id) {\n                      return {\n                        ...lesson,\n                        ...data.data,\n                        isNew: false,\n                      };\n                    }\n                    return lesson;\n                  })\n                : [data.data],\n                */\n            }))\n          );\n        },\n      );\n    },\n    [state],\n  );\n\n  const deleteLesson = useCallback(\n    (lesson_id: number) => {\n      const lesson = flatLessons.find((lesson_item) => lesson_item.id === lesson_id);\n      if (!lesson) {\n        return;\n      }\n      const { isNew } = lesson;\n\n      if (isNew) {\n        setState((prevState) => ({\n          ...prevState,\n          lessons: recursiveDeleteLesson(prevState?.lessons ?? [], lesson_id),\n        }));\n      } else {\n        apiRemoveLesson(lesson_id).then((data) => {\n          if (data.success) {\n            message.success(data.message);\n            setState((prevState) => ({\n              ...prevState,\n              lessons: recursiveDeleteLesson(prevState?.lessons ?? [], lesson_id),\n            }));\n          }\n        });\n      }\n    },\n    [state],\n  );\n\n  const updateTopic = useCallback(\n    (topic_id: number, formData: FormData) => {\n      const lesson_id = getLessonIdByTopicId(topic_id);\n\n      const lesson = flatLessons.find((lesson_item) => lesson_item.id === lesson_id);\n\n      const topic = lesson && lesson.topics?.find((topic_item) => topic_item.id === topic_id);\n\n      const isNew = topic?.isNew;\n\n      return (isNew ? apiCreateTopic(formData) : apiUpdateTopic(topic_id, formData)).then(\n        (data) => {\n          if (data.success) {\n            message.success(data.message);\n            getLessons();\n\n            history.push(`/courses/list/${id}/program/?topic=${data.data.id}`);\n\n            if (topic?.topicable_type === TopicType.Video) {\n              setTimeout(() => {\n                getLessons();\n              }, 5000);\n            }\n          }\n        },\n      );\n    },\n    [getLessonIdByTopicId, state, getLessons],\n  );\n\n  const deleteTopic = useCallback(\n    (topic_id: number) => {\n      const lesson_id = getLessonIdByTopicId(topic_id);\n\n      const lesson = flatLessons.find((lesson_item) => lesson_item.id === lesson_id);\n      if (!lesson) {\n        return;\n      }\n\n      const topic = flatTopics?.find((topic_item) => topic_item.id === topic_id);\n\n      const isNew = topic?.isNew;\n      if (isNew && !topic.topicable) {\n        setState((prevState) => ({\n          ...prevState,\n          lessons: recursiveDeleteTopic(prevState?.lessons ?? [], topic_id),\n        }));\n      } else {\n        apiRemoveTopic(topic_id).then((data) => {\n          if (data.success) {\n            message.success(data.message);\n            setState((prevState) => ({\n              ...prevState,\n              lessons: recursiveDeleteTopic(prevState?.lessons ?? [], topic_id),\n            }));\n          }\n        });\n\n        // TODO call API to delete\n        /**\n         return API(`topic/delete/${id}`, token, 'POST')\n        .then((response) => response.json())\n        .then(() =>\n          setState((prevState) => ({\n            ...prevState,\n            lessons: prevState.lessons.map((lesson) => {\n              if (lesson.id == id) {\n                return {\n                  ...lesson,\n                  topics: lesson.topics.filter((topic) => topic.id !== id),\n                };\n              }\n              return lesson;\n            }),\n          })),\n        );\n         */\n      }\n    },\n    [state, getLessonIdByTopicId],\n  );\n\n  /*\n  const addResource = useCallback(\n    (id, formData) => {\n      const isNew = false;\n\n      const id = getLessonByTopicId(id);\n\n      return API(`topic/resource/save/${id}`, token, 'POST', formData)\n        .then((response) => response.json())\n        .then((data) =>\n          setState((prevState) => ({\n            ...prevState,\n            lessons: prevState.lessons.map((lesson) => {\n              if (lesson.id == id) {\n                return {\n                  ...lesson,\n                  topics: lesson.topics.map((topic) => {\n                    if (topic.id == id) {\n                      return {\n                        ...topic,\n                        resources: [...topic.resources, data],\n                      };\n                    }\n                    return topic;\n                  }),\n                };\n              }\n              return lesson;\n            }),\n          })),\n        );\n    },\n    [state],\n  );\n  */\n\n  /*\n  const removeResource = useCallback(\n    (resource_id) => {\n      // resource/delete/{courseFiles}\n\n      const id = getQuizIdByResourseId(resource_id);\n      const id = getLessonByTopicId(id);\n\n      return API(`topic/resource/delete/${resource_id}`, token, 'DELETE', null)\n        .then((response) => response.json())\n        .then(() =>\n          setState((prevState) => ({\n            ...prevState,\n            lessons: prevState.lessons.map((lesson) => {\n              if (lesson.id == id) {\n                return {\n                  ...lesson,\n                  topics: lesson.topics.map((topic) => {\n                    if (topic.id == id) {\n                      return {\n                        ...topic,\n                        resources: topic.resources.filter(\n                          (resource) => resource.id !== resource_id,\n                        ),\n                      };\n                    }\n                    return topic;\n                  }),\n                };\n              }\n              return lesson;\n            }),\n          })),\n        );\n    },\n    [state],\n  );\n  */\n\n  /*\n  const updateH5P = useCallback(\n    (id, h5p_id) => {\n      const id = getLessonByTopicId(id);\n      return API(`topic/h5p/save/${id}`, token, 'POST', getFormData({ media: h5p_id }))\n        .then((response) => response.json())\n        .then((data) =>\n          setState((prevState) => ({\n            ...prevState,\n            lessons: prevState.lessons.map((lesson) => {\n              if (lesson.id == id) {\n                return {\n                  ...lesson,\n                  topics: lesson.topics.map((topic) => {\n                    if (topic.id == id) {\n                      return {\n                        ...topic,\n                        media: data,\n                      };\n                    }\n                    return topic;\n                  }),\n                };\n              }\n              return lesson;\n            }),\n          })),\n        );\n    },\n    [state],\n  );\n  */\n\n  const addNewTopic = useCallback((lesson_id: number, type: API.TopicType) => {\n    const newTopic: API.Topic = {\n      lesson_id,\n      isNew: true,\n      id: getRandomId(),\n      title: intl.formatMessage({ id: 'add_title_here' }),\n      active: true,\n      topicable_type: type,\n    };\n\n    setState((prevState) => ({\n      ...prevState,\n      lessons: recursiveAddTopicToLessons(prevState?.lessons ?? [], lesson_id, newTopic),\n    }));\n    return newTopic;\n  }, []);\n\n  const onTopicUploaded = (prevTopicId: number, info: UploadChangeParam) => {\n    const lesson_id = getLessonIdByTopicId(prevTopicId);\n    setState((prevState) => ({\n      ...prevState,\n      lessons: prevState\n        ? recursiveTopicUploaded(prevTopicId, info, lesson_id, prevState.lessons || [])\n        : [],\n      // Probably should be removed\n      // lessons: recursiveEditTopic(prevState?.lessons ?? [], prevTopicId, info.file.response.data),\n    }));\n    // Update topic id in params after receiving from server\n    history.push(`/courses/list/${id}/program/?topic=${info.file.response.data.id}`);\n  };\n\n  const cloneTopic = useCallback(\n    (topic_id: number) => {\n      return apiCloneTopic(topic_id).then((response) => {\n        if (response.success) {\n          message.success(response.message);\n          const lesson_id = getLessonIdByTopicId(topic_id);\n\n          setState((prevState) => ({\n            ...prevState,\n            lessons: prevState\n              ? prevState.lessons?.map((lesson) => {\n                  if (lesson.id === lesson_id) {\n                    const topics = lesson.topics || [];\n                    return {\n                      ...lesson,\n                      topics: [...topics, response.data] as API.Topic[],\n                    };\n                  }\n                  return lesson;\n                })\n              : [],\n          }));\n        }\n      });\n    },\n    [state, getLessonIdByTopicId],\n  );\n\n  const cloneLesson = useCallback((lesson_id: number) => {\n    return apiCloneLesson(lesson_id).then((response) => {\n      if (response.success) {\n        message.success(response.message);\n\n        setState((prevState) => ({\n          ...prevState,\n          lessons: prevState ? [...prevState.lessons, response.data] : [],\n        }));\n      }\n    });\n  }, []);\n\n  const value = {\n    state,\n    h5ps,\n    // token: credentials.token,\n    id,\n    addNewLesson,\n    updateLesson,\n    updateTopic,\n    // addResource,\n    // removeResource,\n    deleteLesson,\n    // updateH5P,\n    addNewTopic,\n    deleteTopic,\n    onTopicUploaded,\n    cloneTopic,\n    cloneLesson,\n    currentEditMode,\n    getLessons,\n  };\n\n  return <Context.Provider value={value}>{children}</Context.Provider>;\n};\n","import { request } from 'umi';\nimport type { RequestOptionsInit } from 'umi-request';\n\nexport async function reports(\n  params: {\n    // query\n    metric: API.ReportType;\n    date?: string;\n    limit?: number;\n  },\n  options?: RequestOptionsInit,\n) {\n  return request<API.ReportList>('/api/admin/reports/report', {\n    params,\n    method: 'GET',\n    /* useCache: true */ useCache: false,\n    ...(options || {}),\n  });\n}\n\n/* GET /api/admin/stats/course/:course_id/export */\nexport async function exportStatForCourse(\n  course_id: number,\n  params: API.ExportStatForCourseParams,\n  options?: RequestOptionsInit,\n) {\n  return request<Blob | API.DefaultResponseError>(`/api/admin/stats/course/${course_id}/export`, {\n    params,\n    method: 'GET',\n    /* useCache: true */ useCache: false,\n    responseType: 'blob',\n    headers: {\n      accept: 'application/vnd.ms-excel',\n    },\n    ...(options || {}),\n  });\n}\n\n/* GET /api/admin/stats/topic/:topic_id/export */\nexport async function exportStatForTopic(\n  topic_id: number,\n  stat: API.TopicStatsKey,\n  options?: RequestOptionsInit,\n) {\n  return request<Blob | API.DefaultResponseError>(`/api/admin/stats/topic/${topic_id}/export`, {\n    method: 'GET',\n    /* useCache: true */ useCache: false,\n    params: { stat },\n    responseType: 'blob',\n    headers: {\n      accept: 'application/vnd.ms-excel',\n    },\n    ...(options || {}),\n  });\n}\n"],"sourceRoot":""}