{"version":3,"sources":["webpack:///./src/pages/User/login/index.tsx","webpack:///./src/pages/User/components/AuthLayout.tsx","webpack:///./src/pages/User/components/index.less","webpack:///./node_modules/@ant-design/pro-form/es/components/Checkbox/index.js"],"names":["LoginMessage","content","marginBottom","Login","useState","submitting","setSubmitting","userLoginState","setUserLoginState","useModel","initialState","setInitialState","isPasswordReset","setIsPasswordReset","intl","useIntl","fetchUserInfo","userInfo","settings","per_page","config","packages","packs","currentUser","success","data","handleLogin","values","login","msg","localStorage","setItem","token","refreshTokenCallback","message","error","handleForgot","forgot","request","handleSubmit","return_url","window","location","origin","autoLogin","searchConfig","submitText","formatMessage","id","defaultMessage","render","_","dom","pop","submitButtonProps","loading","size","style","width","prefix","styles","prefixIcon","required","e","preventDefault","float","AuthLayout","children","showBackgroundImage","publicConfig","global","showLoginBackgroundImage","color","loginHeaderFontColor","headerBackgroundColor","loginHeaderBackgroundColor","mainBackgroundColor","loginFormBackgroundColor","configLogo","useMemo","logo","logoLogin","includes","REACT_APP_API_URL","container","backgroundColor","header","lang","SelectLang","main","_excluded","CheckboxGroup","React","forwardRef","_ref","ref","options","fieldProps","proFieldProps","valueEnum","rest","_objectWithoutProperties","_jsx","ProFormField","_objectSpread","valueType","runFunction","undefined","lightProps","labelFormatter","mode","filedConfig","customLightMode","ProFormCheckboxComponents","_ref2","_Checkbox","ProFormCheckbox","createField","valuePropName","WrappedProFormCheckbox","Group"],"mappings":"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","file":"p__User__login.e8e258a9.async.js","sourcesContent":["import { LockOutlined, UserOutlined } from '@ant-design/icons';\nimport { Alert, message } from 'antd';\nimport React, { useState } from 'react';\nimport ProForm, { ProFormCheckbox, ProFormText } from '@ant-design/pro-form';\nimport { useIntl, FormattedMessage, useModel } from 'umi';\nimport { forgot, login } from '@/services/escola-lms/auth';\nimport { settings } from '@/services/escola-lms/settings';\nimport { packages } from '@/services/escola-lms/packages';\n\nimport styles from '../components/index.less';\nimport AuthLayout from '../components/AuthLayout';\n\nimport { refreshTokenCallback } from '@/services/token_refresh';\n\nconst LoginMessage: React.FC<{\n  content: string;\n}> = ({ content }) => (\n  <Alert\n    style={{\n      marginBottom: 24,\n    }}\n    message={content}\n    type=\"error\"\n    showIcon\n  />\n);\n\nconst Login: React.FC = () => {\n  const [submitting, setSubmitting] = useState(false);\n  const [userLoginState, setUserLoginState] = useState<API.LoginResponse>();\n  const { initialState, setInitialState } = useModel('@@initialState');\n  const [isPasswordReset, setIsPasswordReset] = useState(false);\n  const intl = useIntl();\n\n  const fetchUserInfo = async () => {\n    const userInfo = await initialState?.fetchUserInfo?.();\n    const config = await settings({ per_page: -1 });\n    const packs = await packages();\n\n    if (userInfo) {\n      setInitialState({\n        ...initialState,\n        currentUser: userInfo,\n        config: config.success ? config.data : [],\n        packages: packs.success ? packs.data : {},\n      });\n    }\n  };\n\n  const handleLogin = async (values: API.LoginRequest) => {\n    try {\n      const msg = await login({ ...values });\n      if (msg.success) {\n        localStorage.setItem('TOKEN', msg.data.token);\n        refreshTokenCallback();\n        await fetchUserInfo();\n        message.success(msg.message);\n        return;\n      }\n      setUserLoginState(msg);\n    } catch (error: any) {\n      message.error(error?.data?.message || 'Error');\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const handleForgot = async (values: API.ForgotRequest) => {\n    try {\n      const request = await forgot({ ...values });\n\n      if (request.success) {\n        message.success(request.message);\n\n        return;\n      }\n    } catch (error: any) {\n      message.error(error?.data?.message || 'Error');\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const handleSubmit = async (values: API.LoginRequest | API.ForgotRequest) => {\n    setSubmitting(true);\n    if ('password' in values) {\n      handleLogin(values);\n    } else {\n      handleForgot({ ...values, return_url: `${window.location.origin}/#/user/reset-password` });\n    }\n  };\n  return (\n    <AuthLayout>\n      <ProForm\n        initialValues={{\n          autoLogin: true,\n        }}\n        submitter={{\n          searchConfig: {\n            submitText: isPasswordReset\n              ? intl.formatMessage({\n                  id: 'send',\n                  defaultMessage: 'send',\n                })\n              : intl.formatMessage({\n                  id: 'pages.login.submit',\n                  defaultMessage: 'submit',\n                }),\n          },\n          render: (_, dom) => dom.pop(),\n          submitButtonProps: {\n            loading: submitting,\n            size: 'large',\n            style: {\n              width: '100%',\n            },\n          },\n        }}\n        onFinish={async (values) => {\n          handleSubmit(values as API.LoginRequest);\n        }}\n      >\n        {userLoginState && !userLoginState.success && (\n          <LoginMessage\n            content={intl.formatMessage({\n              id: 'pages.login.accountLogin.errorMessage',\n              defaultMessage: '（admin/ant.design)',\n            })}\n          />\n        )}\n\n        <>\n          <ProFormText\n            name=\"email\"\n            fieldProps={{\n              size: 'large',\n              prefix: <UserOutlined className={styles.prefixIcon} />,\n            }}\n            rules={[\n              {\n                required: true,\n                message: (\n                  <FormattedMessage id=\"pages.login.username.required\" defaultMessage=\"required!\" />\n                ),\n              },\n            ]}\n          />\n          {!isPasswordReset && (\n            <ProFormText.Password\n              name=\"password\"\n              fieldProps={{\n                size: 'large',\n                prefix: <LockOutlined className={styles.prefixIcon} />,\n              }}\n              rules={[\n                {\n                  required: true,\n                  message: (\n                    <FormattedMessage\n                      id=\"pages.login.password.required\"\n                      defaultMessage=\"required\"\n                    />\n                  ),\n                },\n              ]}\n            />\n          )}\n        </>\n\n        <div\n          style={{\n            marginBottom: 24,\n          }}\n        >\n          {!isPasswordReset ? (\n            <ProFormCheckbox noStyle name=\"remember_me\">\n              <FormattedMessage id=\"pages.login.rememberMe\" defaultMessage=\"rememberMe\" />\n            </ProFormCheckbox>\n          ) : (\n            <a\n              onClick={(e) => {\n                e.preventDefault();\n                setIsPasswordReset(false);\n              }}\n            >\n              <FormattedMessage id=\"back\" defaultMessage=\"back\" />\n            </a>\n          )}\n          {!isPasswordReset && (\n            <a\n              style={{\n                float: 'right',\n              }}\n              onClick={(e) => {\n                e.preventDefault();\n                setIsPasswordReset(true);\n              }}\n            >\n              <FormattedMessage id=\"pages.login.forgotPassword\" defaultMessage=\"forgotPassword\" />\n            </a>\n          )}\n        </div>\n      </ProForm>\n    </AuthLayout>\n  );\n};\n\nexport default Login;\n","import React, { type PropsWithChildren, useMemo } from 'react';\nimport Footer from '@/components/Footer';\nimport styles from './index.less';\nimport { Link, SelectLang, useModel } from 'umi';\n\ndeclare const REACT_APP_API_URL: string;\n\nconst AuthLayout: React.FC<PropsWithChildren> = ({ children }) => {\n  const { initialState } = useModel('@@initialState');\n\n  const showBackgroundImage = initialState?.publicConfig?.global?.showLoginBackgroundImage ?? true;\n\n  const color = initialState?.publicConfig?.global?.loginHeaderFontColor;\n  const headerBackgroundColor = initialState?.publicConfig?.global?.loginHeaderBackgroundColor;\n  const mainBackgroundColor = initialState?.publicConfig?.global?.loginFormBackgroundColor;\n\n  const configLogo = useMemo(() => {\n    const logo = initialState?.publicConfig?.global?.logoLogin;\n\n    if (!logo) {\n      return '';\n    }\n    if (!logo.includes('http')) {\n      return `${window.REACT_APP_API_URL || REACT_APP_API_URL}/storage${logo}`;\n    }\n\n    return logo;\n  }, [initialState?.publicConfig]);\n\n  return (\n    <div\n      className={`${styles.container} ${showBackgroundImage ? styles[`background-image`] : ''}`}\n      style={{ backgroundColor: mainBackgroundColor }}\n    >\n      <header className={styles.header} style={{ backgroundColor: headerBackgroundColor, color }}>\n        <div className={styles.lang}>{SelectLang && <SelectLang />}</div>\n        <div className={styles['logo-wrapper']}>\n          <Link to=\"/\">\n            <img\n              alt=\"logo\"\n              className={configLogo ? styles['custom-logo'] : styles.logo}\n              src={configLogo || '/logo.svg'}\n            />\n          </Link>\n        </div>\n      </header>\n\n      <main className={styles.main}>{children}</main>\n      <Footer />\n    </div>\n  );\n};\n\nexport default AuthLayout;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"container___2MqLM\",\"lang\":\"lang___GQeBj\",\"background-image\":\"background-image___3WSx0\",\"logo-wrapper\":\"logo-wrapper___V8scu\",\"header\":\"header___2LHxh\",\"custom-logo\":\"custom-logo___HBLG3\",\"logo\":\"logo___3MAcQ\",\"title\":\"title___3Wr7O\",\"desc\":\"desc___22Mec\",\"main\":\"main___1ht25\",\"icon\":\"icon___ki6v1\",\"other\":\"other___3NR7b\",\"register\":\"register___1-tB1\",\"prefixIcon\":\"prefixIcon___2LycM\"};","import \"antd/es/checkbox/style\";\nimport _Checkbox from \"antd/es/checkbox\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _excluded = [\"options\", \"fieldProps\", \"proFieldProps\", \"valueEnum\"];\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { runFunction } from '@ant-design/pro-utils';\nimport React from 'react';\nimport { createField } from '../../BaseForm/createField';\nimport ProFormField from '../Field';\nvar CheckboxGroup = /*#__PURE__*/React.forwardRef(function (_ref, ref) {\n  var options = _ref.options,\n      fieldProps = _ref.fieldProps,\n      proFieldProps = _ref.proFieldProps,\n      valueEnum = _ref.valueEnum,\n      rest = _objectWithoutProperties(_ref, _excluded);\n\n  return _jsx(ProFormField, _objectSpread({\n    ref: ref,\n    valueType: \"checkbox\",\n    valueEnum: runFunction(valueEnum, undefined),\n    fieldProps: _objectSpread({\n      options: options\n    }, fieldProps),\n    lightProps: _objectSpread({\n      labelFormatter: function labelFormatter() {\n        return _jsx(ProFormField, _objectSpread({\n          ref: ref,\n          valueType: \"checkbox\",\n          mode: \"read\",\n          valueEnum: runFunction(valueEnum, undefined),\n          filedConfig: {\n            customLightMode: true\n          },\n          fieldProps: _objectSpread({\n            options: options\n          }, fieldProps),\n          proFieldProps: proFieldProps\n        }, rest));\n      }\n    }, rest.lightProps),\n    proFieldProps: proFieldProps\n  }, rest));\n});\n/**\n * 多选框的\n *\n * @param\n */\n\nvar ProFormCheckboxComponents = /*#__PURE__*/React.forwardRef(function (_ref2, ref) {\n  var fieldProps = _ref2.fieldProps,\n      children = _ref2.children;\n  return _jsx(_Checkbox, _objectSpread(_objectSpread({\n    ref: ref\n  }, fieldProps), {}, {\n    children: children\n  }));\n});\nvar ProFormCheckbox = createField(ProFormCheckboxComponents, {\n  valuePropName: 'checked'\n});\nvar WrappedProFormCheckbox = ProFormCheckbox;\nWrappedProFormCheckbox.Group = CheckboxGroup;\nexport default WrappedProFormCheckbox;"],"sourceRoot":""}